{
  "name": "HumanEval_70_strange_sort_list",
  "language": "swift",
  "prompt": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = make([]Int, len(lst))\n    var i = 0\n    var j = 0\n    var min = lst[0]\n    for i = 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[j] = lst[i]\n            j++\n        }\n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] != min {\n            result[j] = lst[i]\n            j++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmppacuuxs9.swift:13:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmppacuuxs9.swift:17:5: error: C-style for statement has been removed in Swift 3\n    for i = 1; i < len(lst); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppacuuxs9.swift:22:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(lst); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppacuuxs9.swift:28:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(lst); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppacuuxs9.swift:13:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmppacuuxs9.swift:13:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8ctflc3r.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp8ctflc3r.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmp8ctflc3r.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmp8ctflc3r.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmp8ctflc3r.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmp8ctflc3r.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmp8ctflc3r.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8ctflc3r.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8ctflc3r.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmp8ctflc3r.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n/tmp/tmp8ctflc3r.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = make([]Int, len(lst))\n    var i = 0\n    var j = len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n            result[i], result[j] = lst[j], lst[i]\n            i++\n        } else {\n            result[i], result[j] = lst[i], lst[j]\n            j--\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpr2n8y10v.swift:13:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmpr2n8y10v.swift:16:11: error: expected 'in' after for-each pattern\n    for i < j {\n          ^\n/tmp/tmpr2n8y10v.swift:16:11: error: unary operator cannot be separated from its operand\n    for i < j {\n          ^~\n           \n/tmp/tmpr2n8y10v.swift:18:22: error: consecutive statements on a line must be separated by ';'\n            result[i], result[j] = lst[j], lst[i]\n                     ^\n                     ;\n/tmp/tmpr2n8y10v.swift:18:22: error: expected expression\n            result[i], result[j] = lst[j], lst[i]\n                     ^\n/tmp/tmpr2n8y10v.swift:21:22: error: consecutive statements on a line must be separated by ';'\n            result[i], result[j] = lst[i], lst[j]\n                     ^\n                     ;\n/tmp/tmpr2n8y10v.swift:21:22: error: expected expression\n            result[i], result[j] = lst[i], lst[j]\n                     ^\n/tmp/tmpr2n8y10v.swift:13:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmpr2n8y10v.swift:13:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n/tmp/tmpr2n8y10v.swift:15:13: error: cannot find 'len' in scope\n    var j = len(lst) - 1\n            ^~~\n/tmp/tmpr2n8y10v.swift:16:11: error: '<' is not a prefix unary operator\n    for i < j {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmph1gwkf20.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmph1gwkf20.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmph1gwkf20.swift:17:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmph1gwkf20.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmph1gwkf20.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmph1gwkf20.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmph1gwkf20.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmph1gwkf20.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmph1gwkf20.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmph1gwkf20.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmph1gwkf20.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmph1gwkf20.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmph1gwkf20.swift:25:25: error: generic parameter 'T' cou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp30iqtc45.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min := lst[0]\n     ^\n     ;\n/tmp/tmp30iqtc45.swift:16:7: error: expected expression\n  min := lst[0]\n      ^\n/tmp/tmp30iqtc45.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmp30iqtc45.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp30iqtc45.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp30iqtc45.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmp30iqtc45.swift:16:3: error: generic parameter 'T' could not be inferred\n  min := lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp30iqtc45.swift:26:10: error: cannot find 'append' in scope\n  return append(lst, min, max)\n         ^~~~~~\n/tmp/tmp30iqtc45.swift:26:22: error: generic parameter 'T' could not be inferred\n  return append(lst, min, max)\n                     ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp30iqtc45.swift:26:27: error: generic parameter 'T' could not be inferred\n  return append(lst, min, max)\n                          ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min, max := lst[0], lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp13tc4ssp.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min, max := lst[0], lst[0]\n     ^\n     ;\n/tmp/tmp13tc4ssp.swift:16:6: error: expected expression\n  min, max := lst[0], lst[0]\n     ^\n/tmp/tmp13tc4ssp.swift:17:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmp13tc4ssp.swift:17:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp13tc4ssp.swift:17:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp13tc4ssp.swift:25:19: error: expected ',' separator\n  return append([]Int{min, max}, lst[1:]...)\n                  ^\n                  ,\n/tmp/tmp13tc4ssp.swift:25:26: error: consecutive statements on a line must be separated by ';'\n  return append([]Int{min, max}, lst[1:]...)\n                         ^\n                         ;\n/tmp/tmp13tc4ssp.swift:25:26: error: expected expression\n  return append([]Int{min, max}, lst[1:]...)\n                         ^\n/tmp/tmp13tc4ssp.swift:25:39: error: expected ',' separator\n  return append([]Int{min, max}, lst[1:]...)\n                                      ^\n                                      ,\n/tmp/tmp13tc4ssp.swift:25:39: error: expected expression in list of expressions\n  return append([]Int{min, max}, lst[1:]...)\n                                      ^\n/tmp/tmp13tc4ssp.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmp13tc4ssp.swift:16:3: error: generic parameter 'T' could not be inferred\n  min, max := lst[0], lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp13tc4ssp.swift:25:10: error: cannot find 'append' in scope\n  return append([]Int{min, max}, lst[1:]...)\n         ^~~~~~\n/tmp/tmp13tc4ssp.swift:25:19: error: no exact matches in call to initializer \n  return append([]Int{min, max}, lst[1:]...)\n                  ^\n/tmp/tmp13tc4ssp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp_13e309i.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp_13e309i.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp_13e309i.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp_13e309i.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp_13e309i.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n                      ^\n/tmp/tmp_13e309i.swift:26:63: error: expected ',' separator\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n                                                              ^\n                                                              ,\n/tmp/tmp_13e309i.swift:26:63: error: expected expression in list of expressions\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n                                                              ^\n/tmp/tmp_13e309i.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp_13e309i.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_13e309i.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n           ^~~~~~\n/tmp/tmp_13e309i.swift:26:25: error: missing argument for parameter #1 in call\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])\n                        ^\n                        <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmp_13e309i.swift:26:33: error: generic parameter 'T' could not be inferred\n    return append(lst[:0], mi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst) == 1 {\n            result = append(result, lst[0])\n            break\n        }\n        if i == 0 {\n            result = append(result, lst[0])\n            lst = lst[1:]\n        } else if i == len(lst) - 1 {\n            result = append(result, lst[len(lst) - 1])\n            lst = lst[:len(lst) - 1]\n        } else {\n            result = append(result, lst[0])\n            lst = lst[1:]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpf8_9rvx8.swift:14:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpf8_9rvx8.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpf8_9rvx8.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpf8_9rvx8.swift:21:24: error: expected ',' separator\n            lst = lst[1:]\n                       ^\n                       ,\n/tmp/tmpf8_9rvx8.swift:21:24: error: expected expression in list of expressions\n            lst = lst[1:]\n                       ^\n/tmp/tmpf8_9rvx8.swift:24:23: error: expected expression in list of expressions\n            lst = lst[:len(lst) - 1]\n                      ^\n/tmp/tmpf8_9rvx8.swift:27:24: error: expected ',' separator\n            lst = lst[1:]\n                       ^\n                       ,\n/tmp/tmpf8_9rvx8.swift:27:24: error: expected expression in list of expressions\n            lst = lst[1:]\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpmrz1ugx9.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpmrz1ugx9.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpmrz1ugx9.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmrz1ugx9.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmrz1ugx9.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmrz1ugx9.swift:26:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmrz1ugx9.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpmrz1ugx9.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpmrz1ugx9.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpmrz1ugx9.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpmrz1ugx9.swift:35:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var min_index = 0\n    var max_index = 0\n    var min_value = lst[0]\n    var max_value = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n    var result = make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n    }\n    result[min_index], result[max_index] = result[max_index], result[min_index]\n    for i := 0; i < len(result); i++ {\n        if i != min_index && i != max_index {\n            result[i], result[i] = result[i], result[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpgyb6_s0l.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpgyb6_s0l.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:27:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmpgyb6_s0l.swift:28:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpgyb6_s0l.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:32:12: error: expected type\n    for i := 0; i < len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpgyb6_s0l.swift:32:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(result); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:32:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(result); i++ {\n           ^\n/tmp/tmpgyb6_s0l.swift:34:22: error: consecutive statements on a line must be separated by ';'\n            result[i], result[i] = result[i], result[i]\n                     ^\n                     ;\n/tmp/tmpgyb6_s0l.swift:34:22: error: expected expression\n            result[i], result[i] = result[i], result[i]\n                     ^\n/tmp/tmpgyb6_s0l.swift:27:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmpgyb6_s0l.swift:27:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            min = lst[i]\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n            max = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp96nyryet.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp96nyryet.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp96nyryet.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp96nyryet.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp96nyryet.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp96nyryet.swift:27:12: error: expected type\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmp96nyryet.swift:27:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp96nyryet.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp96nyryet.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp96nyryet.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp96nyryet.swift:37:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            result = append(result, max)\n            min = lst[i]\n            max = lst[i]\n        } else if lst[i] == max {\n            result = append(result, lst[i])\n            result = append(result, min)\n            min = lst[i]\n            max = lst[i]\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpf4mjju3i.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpf4mjju3i.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpf4mjju3i.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpf4mjju3i.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpf4mjju3i.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpf4mjju3i.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpf4mjju3i.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpf4mjju3i.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpf4mjju3i.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpf4mjju3i.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpf4mjju3i.swift:42:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst[:0], min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp1vt3127v.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp1vt3127v.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp1vt3127v.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp1vt3127v.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp1vt3127v.swift:28:12: error: expected type\n    for i := 1; i < len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp1vt3127v.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i += 2 {\n           ^\n/tmp/tmp1vt3127v.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i += 2 {\n           ^\n/tmp/tmp1vt3127v.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp1vt3127v.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpeumd91wz.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpeumd91wz.swift:17:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpeumd91wz.swift:19:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpeumd91wz.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpeumd91wz.swift:28:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpeumd91wz.swift:28:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpeumd91wz.swift:28:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpeumd91wz.swift:28:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpeumd91wz.swift:28:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpeumd91wz.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpeumd91wz.swift:17:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpeumd91wz.swift:28:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmpeumd91wz.swift:28:25: error: generic parameter 'T' could not be inferred\n    return append([",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpn925jsfn.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpn925jsfn.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpn925jsfn.swift:19:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpn925jsfn.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpn925jsfn.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpn925jsfn.swift:29:34: error: expected expression in list of expressions\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n                                 ^\n/tmp/tmpn925jsfn.swift:29:63: error: expected ',' separator\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n                                                              ^\n                                                              ,\n/tmp/tmpn925jsfn.swift:29:63: error: expected expression in list of expressions\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n                                                              ^\n/tmp/tmpn925jsfn.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpn925jsfn.swift:17:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpn925jsfn.swift:29:52: error: cannot find 'max_index' in scope\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n                                                   ^~~~~~~~~\n/tmp/tmpn925jsfn.swift:29:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n                             ^\n                             lst: \n/tmp/tmpn925jsfn.swift:29:46: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])\n               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmplo90atgf.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmplo90atgf.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmplo90atgf.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmplo90atgf.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmplo90atgf.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:12: error: cannot find 'append' in scope\n    return append(lst, min, max)\n           ^~~~~~\n/tmp/tmplo90atgf.swift:26:24: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                       ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:29: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                            ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var min_index = 0\n    var max_index = 0\n    var min_value = lst[0]\n    var max_value = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n    var result = make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            result[i] = min_value\n        } else if i == max_index {\n            result[i] = max_value\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmplepz7czg.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmplepz7czg.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplepz7czg.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplepz7czg.swift:27:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmplepz7czg.swift:28:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmplepz7czg.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmplepz7czg.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmplepz7czg.swift:27:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmplepz7czg.swift:27:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp970s867l.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp970s867l.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp970s867l.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp970s867l.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp970s867l.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:]...)\n                      ^\n/tmp/tmp970s867l.swift:26:45: error: expected ',' separator\n    return append(lst[:0:0], min, max, lst[1:]...)\n                                            ^\n                                            ,\n/tmp/tmp970s867l.swift:26:45: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:]...)\n                                            ^\n/tmp/tmp970s867l.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp970s867l.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp970s867l.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0:0], min, max, lst[1:]...)\n           ^~~~~~\n/tmp/tmp970s867l.swift:26:27: error: missing argument for parameter #1 in call\n    return append(lst[:0:0], min, max, lst[1:]...)\n                          ^\n                          <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmp970s867l.swift:26:35: error: generic parameter 'T' could not be inferred\n    return append(lst[:0:0], min, max, lst[1:]...)\n                                  ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  for i := 0; i < len(lst); i++ {\n    if lst[i] == min {\n      lst[i], lst[0] = lst[0], lst[i]\n      i = 0\n    }\n    if lst[i] == max {\n      lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n      i = len(lst) - 1\n    }\n  }\n  return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpyv6ye8ix.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min := lst[0]\n     ^\n     ;\n/tmp/tmpyv6ye8ix.swift:16:7: error: expected expression\n  min := lst[0]\n      ^\n/tmp/tmpyv6ye8ix.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmpyv6ye8ix.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpyv6ye8ix.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpyv6ye8ix.swift:26:10: error: expected type\n  for i := 0; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmpyv6ye8ix.swift:26:10: error: expected 'in' after for-each pattern\n  for i := 0; i < len(lst); i++ {\n         ^\n/tmp/tmpyv6ye8ix.swift:26:10: error: expected Sequence expression for for-each loop\n  for i := 0; i < len(lst); i++ {\n         ^\n/tmp/tmpyv6ye8ix.swift:28:13: error: consecutive statements on a line must be separated by ';'\n      lst[i], lst[0] = lst[0], lst[i]\n            ^\n            ;\n/tmp/tmpyv6ye8ix.swift:28:13: error: expected expression\n      lst[i], lst[0] = lst[0], lst[i]\n            ^\n/tmp/tmpyv6ye8ix.swift:32:13: error: consecutive statements on a line must be separated by ';'\n      lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            ^\n            ;\n/tmp/tmpyv6ye8ix.swift:32:13: error: expected expression\n      lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            ^\n/tmp/tmpyv6ye8ix.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmpyv6ye8ix.swift:16:3: error: generic parameter 'T' could not be inferred\n  min := lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]{}\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpeqgu5upf.swift:13:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpeqgu5upf.swift:16:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpeqgu5upf.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpeqgu5upf.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpeqgu5upf.swift:24:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpeqgu5upf.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpeqgu5upf.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpeqgu5upf.swift:13:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpeqgu5upf.swift:13:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpeqgu5upf.swift:13:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpeqgu5upf.swift:32:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp191pq59q.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp191pq59q.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp191pq59q.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp191pq59q.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp191pq59q.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp191pq59q.swift:25:41: error: expected expression in list of expressions\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                        ^\n/tmp/tmp191pq59q.swift:25:80: error: expected expression in list of expressions\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                                                               ^\n/tmp/tmp191pq59q.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp191pq59q.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp191pq59q.swift:25:12: error: cannot find 'append' in scope\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n           ^~~~~~\n/tmp/tmp191pq59q.swift:25:45: error: missing argument for parameter #1 in call\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                            ^\n                                            <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmp191pq59q.swift:25:49: error: g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpd66_rhfj.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpd66_rhfj.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpd66_rhfj.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpd66_rhfj.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpd66_rhfj.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpd66_rhfj.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpd66_rhfj.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpd66_rhfj.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpd66_rhfj.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpd66_rhfj.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[min_index], lst[0] = lst[0], lst[min_index]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpq9e52rbm.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpq9e52rbm.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpq9e52rbm.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpq9e52rbm.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpq9e52rbm.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpq9e52rbm.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmpq9e52rbm.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmpq9e52rbm.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpq9e52rbm.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpq9e52rbm.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmpq9e52rbm.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmprpg5uwbs.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmprpg5uwbs.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmprpg5uwbs.swift:18:19: error: expected 'in' after for-each pattern\n    for min_index < max_index {\n                  ^\n/tmp/tmprpg5uwbs.swift:18:19: error: unary operator cannot be separated from its operand\n    for min_index < max_index {\n                  ^~\n                   \n/tmp/tmprpg5uwbs.swift:20:27: error: consecutive statements on a line must be separated by ';'\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n                          ;\n/tmp/tmprpg5uwbs.swift:20:27: error: expected expression\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n/tmp/tmprpg5uwbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmprpg5uwbs.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmprpg5uwbs.swift:18:19: error: '<' is not a prefix unary operator\n    for min_index < max_index {\n                  ^\n/tmp/tmprpg5uwbs.swift:18:21: error: cannot find 'max_index' in scope\n    for min_index < max_index {\n                    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmppvtyu6hn.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmppvtyu6hn.swift:17:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmppvtyu6hn.swift:19:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmppvtyu6hn.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmppvtyu6hn.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmppvtyu6hn.swift:28:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmppvtyu6hn.swift:28:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmppvtyu6hn.swift:28:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmppvtyu6hn.swift:28:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmppvtyu6hn.swift:28:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmppvtyu6hn.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmppvtyu6hn.swift:17:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmppvtyu6hn.swift:28:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n        } else if i == max_index {\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n        } else {\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n        }\n    }\n\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp522rccvv.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp522rccvv.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp522rccvv.swift:20:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp522rccvv.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp522rccvv.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp522rccvv.swift:29:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp522rccvv.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp522rccvv.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp522rccvv.swift:31:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp522rccvv.swift:31:19: error: expected expression\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n                  ^\n/tmp/tmp522rccvv.swift:33:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp522rccvv.swift:33:19: error: expected expression\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n                  ^\n/tmp/tmp522rccvv.swift:35:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp522rccvv.swift:35:19: error: expected expression\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min_index := 0\n  min_value := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  lst[0], lst[min_index] = lst[min_index], lst[0]\n  return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpjj1u0go3.swift:16:12: error: consecutive statements on a line must be separated by ';'\n  min_index := 0\n           ^\n           ;\n/tmp/tmpjj1u0go3.swift:16:13: error: expected expression\n  min_index := 0\n            ^\n/tmp/tmpjj1u0go3.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmpjj1u0go3.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpjj1u0go3.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpjj1u0go3.swift:25:33: error: expected ',' separator\n  return strange_sort_list(lst[1:])\n                                ^\n                                ,\n/tmp/tmpjj1u0go3.swift:25:33: error: expected expression in list of expressions\n  return strange_sort_list(lst[1:])\n                                ^\n/tmp/tmpjj1u0go3.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmpjj1u0go3.swift:16:3: error: cannot find 'min_index' in scope\n  min_index := 0\n  ^~~~~~~~~\n/tmp/tmpjj1u0go3.swift:25:28: error: missing argument label 'lst:' in call\n  return strange_sort_list(lst[1:])\n                           ^\n                           lst: \n/tmp/tmpjj1u0go3.swift:25:31: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n  return strange_sort_list(lst[1:])\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmptevbkkjh.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmptevbkkjh.swift:17:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmptevbkkjh.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmptevbkkjh.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmptevbkkjh.swift:29:10: error: expected 'in' after for-each pattern\n    for i, v := range lst {\n         ^\n/tmp/tmptevbkkjh.swift:29:10: error: expected Sequence expression for for-each loop\n    for i, v := range lst {\n         ^\n/tmp/tmptevbkkjh.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmptevbkkjh.swift:17:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmptevbkkjh.swift:38:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for _, v := range lst[1:] {\n    if v < min {\n      min = v\n    }\n    if v > max {\n      max = v\n    }\n  }\n  lst = append(lst, min)\n  lst = append(lst, max)\n  for i := 0; i < len(lst) - 2; i += 2 {\n    lst = append(lst, lst[i])\n  }\n  return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqcan2h1t.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min := lst[0]\n     ^\n     ;\n/tmp/tmpqcan2h1t.swift:16:7: error: expected expression\n  min := lst[0]\n      ^\n/tmp/tmpqcan2h1t.swift:18:8: error: expected 'in' after for-each pattern\n  for _, v := range lst[1:] {\n       ^\n/tmp/tmpqcan2h1t.swift:18:8: error: expected Sequence expression for for-each loop\n  for _, v := range lst[1:] {\n       ^\n/tmp/tmpqcan2h1t.swift:28:10: error: expected type\n  for i := 0; i < len(lst) - 2; i += 2 {\n         ^\n          <#type#>\n/tmp/tmpqcan2h1t.swift:28:10: error: expected 'in' after for-each pattern\n  for i := 0; i < len(lst) - 2; i += 2 {\n         ^\n/tmp/tmpqcan2h1t.swift:28:10: error: expected Sequence expression for for-each loop\n  for i := 0; i < len(lst) - 2; i += 2 {\n         ^\n/tmp/tmpqcan2h1t.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmpqcan2h1t.swift:16:3: error: generic parameter 'T' could not be inferred\n  min := lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min, max := lst[0], lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp77a3lljl.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min, max := lst[0], lst[0]\n     ^\n     ;\n/tmp/tmp77a3lljl.swift:16:6: error: expected expression\n  min, max := lst[0], lst[0]\n     ^\n/tmp/tmp77a3lljl.swift:17:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmp77a3lljl.swift:17:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp77a3lljl.swift:17:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp77a3lljl.swift:25:19: error: expected ',' separator\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                  ^\n                  ,\n/tmp/tmp77a3lljl.swift:25:26: error: consecutive statements on a line must be separated by ';'\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                         ^\n                         ;\n/tmp/tmp77a3lljl.swift:25:26: error: expected expression\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                         ^\n/tmp/tmp77a3lljl.swift:25:57: error: expected ',' separator\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                        ^\n                                                        ,\n/tmp/tmp77a3lljl.swift:25:57: error: expected expression in list of expressions\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                        ^\n/tmp/tmp77a3lljl.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmp77a3lljl.swift:16:3: error: generic parameter 'T' could not be inferred\n  min, max := lst[0], lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp77a3lljl.swift:25:10: error: cannot find 'append' in scope\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmplo90atgf.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmplo90atgf.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmplo90atgf.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmplo90atgf.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmplo90atgf.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:12: error: cannot find 'append' in scope\n    return append(lst, min, max)\n           ^~~~~~\n/tmp/tmplo90atgf.swift:26:24: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                       ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:29: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                            ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n    for i:=1; i<len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i:=0; i<len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpn5mc0tj7.swift:16:11: error: '=' must have consistent whitespace on both sides\n    for i:=1; i<len(lst); i++ {\n          ^\n            \n/tmp/tmpn5mc0tj7.swift:16:11: error: expected type\n    for i:=1; i<len(lst); i++ {\n          ^\n           <#type#>\n/tmp/tmpn5mc0tj7.swift:16:11: error: expected 'in' after for-each pattern\n    for i:=1; i<len(lst); i++ {\n          ^\n/tmp/tmpn5mc0tj7.swift:16:11: error: expected Sequence expression for for-each loop\n    for i:=1; i<len(lst); i++ {\n          ^\n/tmp/tmpn5mc0tj7.swift:24:11: error: '=' must have consistent whitespace on both sides\n    for i:=0; i<len(lst); i++ {\n          ^\n            \n/tmp/tmpn5mc0tj7.swift:24:11: error: expected type\n    for i:=0; i<len(lst); i++ {\n          ^\n           <#type#>\n/tmp/tmpn5mc0tj7.swift:24:11: error: expected 'in' after for-each pattern\n    for i:=0; i<len(lst); i++ {\n          ^\n/tmp/tmpn5mc0tj7.swift:24:11: error: expected Sequence expression for for-each loop\n    for i:=0; i<len(lst); i++ {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    for i := min_index; i <= max_index; i++ {\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    }\n\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpmwi_9mbs.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpmwi_9mbs.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpmwi_9mbs.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmwi_9mbs.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmwi_9mbs.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmwi_9mbs.swift:25:12: error: expected type\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmpmwi_9mbs.swift:25:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmpmwi_9mbs.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmpmwi_9mbs.swift:31:12: error: expected type\n    for i := min_index; i <= max_index; i++ {\n           ^\n            <#type#>\n/tmp/tmpmwi_9mbs.swift:31:12: error: expected 'in' after for-each pattern\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmpmwi_9mbs.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmpmwi_9mbs.swift:32:15: error: consecutive statements on a line must be separated by ';'\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n              ^\n              ;\n/tmp/tmpmwi_9mbs.swift:32:15: error: expected expression\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n              ^\n/tmp/tmpmwi_9mbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpmwi_9mbs.swift:17:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp9qdliui6.swift:16:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9qdliui6.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9qdliui6.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9qdliui6.swift:24:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9qdliui6.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp9qdliui6.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8ctflc3r.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp8ctflc3r.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmp8ctflc3r.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmp8ctflc3r.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmp8ctflc3r.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmp8ctflc3r.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmp8ctflc3r.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8ctflc3r.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8ctflc3r.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmp8ctflc3r.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n/tmp/tmp8ctflc3r.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpjrkspb4q.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpjrkspb4q.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpjrkspb4q.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpjrkspb4q.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpjrkspb4q.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpjrkspb4q.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpjrkspb4q.swift:26:12: error: cannot find 'append' in scope\n    return append(lst, min, max)\n           ^~~~~~\n/tmp/tmpjrkspb4q.swift:26:24: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                       ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpjrkspb4q.swift:26:29: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                            ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var min, max Int\n    min = lst[0]\n    max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var result []Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, max)\n            max = min\n            min = lst[i]\n        } else if lst[i] == max {\n            result = append(result, min)\n            min = max\n            max = lst[i]\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp93sw_443.swift:13:18: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var min, max Int\n                 ^\n/tmp/tmp93sw_443.swift:13:18: note: join the identifiers together\n    var min, max Int\n             ~~~~^~~\n             maxInt\n/tmp/tmp93sw_443.swift:16:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp93sw_443.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp93sw_443.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp93sw_443.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmp93sw_443.swift:24:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmp93sw_443.swift:25:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp93sw_443.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp93sw_443.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp93sw_443.swift:13:9: error: type annotation missing in pattern\n    var min, max Int\n        ^\n/tmp/tmp93sw_443.swift:13:14: error: type annotation missing in pattern\n    var min, max Int\n             ^\n/tmp/tmp93sw_443.swift:24:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmp93sw_443.swift:24:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmp93sw_443.swift:24:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmp93sw_443.swift:24:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpfjr66pld.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpfjr66pld.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpfjr66pld.swift:18:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpfjr66pld.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpfjr66pld.swift:28:12: error: expected type\n    for i := 0; i < len(lst) - 1; i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfjr66pld.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst) - 1; i += 2 {\n           ^\n/tmp/tmpfjr66pld.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst) - 1; i += 2 {\n           ^\n/tmp/tmpfjr66pld.swift:29:15: error: consecutive statements on a line must be separated by ';'\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n              ^\n              ;\n/tmp/tmpfjr66pld.swift:29:15: error: expected expression\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n              ^\n/tmp/tmpfjr66pld.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpfjr66pld.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            min = lst[i]\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n            max = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp96nyryet.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp96nyryet.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp96nyryet.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp96nyryet.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp96nyryet.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp96nyryet.swift:27:12: error: expected type\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmp96nyryet.swift:27:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp96nyryet.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp96nyryet.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp96nyryet.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp96nyryet.swift:37:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[0:len(lst)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpa9v_mh36.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpa9v_mh36.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpa9v_mh36.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpa9v_mh36.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpa9v_mh36.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpa9v_mh36.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                      ^\n/tmp/tmpa9v_mh36.swift:26:43: error: expected ',' separator\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                          ^\n                                          ,\n/tmp/tmpa9v_mh36.swift:26:43: error: expected expression in list of expressions\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                          ^\n/tmp/tmpa9v_mh36.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpa9v_mh36.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpa9v_mh36.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0], min, max, lst[0:len(lst)])\n           ^~~~~~\n/tmp/tmpa9v_mh36.swift:26:33: error: generic parameter 'T' could not be inferred\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpa9v_mh36.swift:26:25: error: missing argument for parameter #1 in call\n    return append(lst[:0], min, max, lst[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = make([]Int, len(lst))\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp1iula2o7.swift:13:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmp1iula2o7.swift:16:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp1iula2o7.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:24:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp1iula2o7.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:13:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmp1iula2o7.swift:13:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp23nee0y0.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp23nee0y0.swift:17:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp23nee0y0.swift:19:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp23nee0y0.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp23nee0y0.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp23nee0y0.swift:29:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp23nee0y0.swift:29:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp23nee0y0.swift:29:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp23nee0y0.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp23nee0y0.swift:17:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp23nee0y0.swift:39:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            for j := i; j >= 0; j-- {\n                if lst[j] == max {\n                    result[j], result[i] = result[i], result[j]\n                    break\n                }\n            }\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp4j_78icd.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp4j_78icd.swift:17:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp4j_78icd.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp4j_78icd.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp4j_78icd.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp4j_78icd.swift:28:12: error: expected type\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmp4j_78icd.swift:28:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp4j_78icd.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp4j_78icd.swift:31:20: error: expected type\n            for j := i; j >= 0; j-- {\n                   ^\n                    <#type#>\n/tmp/tmp4j_78icd.swift:31:20: error: expected 'in' after for-each pattern\n            for j := i; j >= 0; j-- {\n                   ^\n/tmp/tmp4j_78icd.swift:31:20: error: expected Sequence expression for for-each loop\n            for j := i; j >= 0; j-- {\n                   ^\n/tmp/tmp4j_78icd.swift:33:30: error: consecutive statements on a line must be separated by ';'\n                    result[j], result[i] = result[i], result[j]\n                             ^\n                             ;\n/tmp/tmp4j_78icd.swift:33:30: error: expected expression\n                    result[j], result[i] = result[i], result[j]\n                             ^\n/tmp/tmp4j_78icd.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp4j_78icd.swift:17:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to funct",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmprpg5uwbs.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmprpg5uwbs.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmprpg5uwbs.swift:18:19: error: expected 'in' after for-each pattern\n    for min_index < max_index {\n                  ^\n/tmp/tmprpg5uwbs.swift:18:19: error: unary operator cannot be separated from its operand\n    for min_index < max_index {\n                  ^~\n                   \n/tmp/tmprpg5uwbs.swift:20:27: error: consecutive statements on a line must be separated by ';'\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n                          ;\n/tmp/tmprpg5uwbs.swift:20:27: error: expected expression\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n/tmp/tmprpg5uwbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmprpg5uwbs.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmprpg5uwbs.swift:18:19: error: '<' is not a prefix unary operator\n    for min_index < max_index {\n                  ^\n/tmp/tmprpg5uwbs.swift:18:21: error: cannot find 'max_index' in scope\n    for min_index < max_index {\n                    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n            max_index--\n        } else if i == max_index {\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n            min_index++\n        } else {\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n            min_index++\n            max_index--\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp88ns37jf.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp88ns37jf.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp88ns37jf.swift:18:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp88ns37jf.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp88ns37jf.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp88ns37jf.swift:26:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp88ns37jf.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp88ns37jf.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp88ns37jf.swift:28:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp88ns37jf.swift:28:19: error: expected expression\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n                  ^\n/tmp/tmp88ns37jf.swift:31:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp88ns37jf.swift:31:19: error: expected expression\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n                  ^\n/tmp/tmp88ns37jf.swift:34:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n                  ^\n                  ;\n/tmp/tmp88ns37jf.swift:34:19: error: expected expression\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp9318jd0v.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp9318jd0v.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp9318jd0v.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9318jd0v.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:25:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9318jd0v.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:27:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n                  ;\n/tmp/tmp9318jd0v.swift:27:19: error: expected expression\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n/tmp/tmp9318jd0v.swift:31:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9318jd0v.swift:31:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp9318jd0v.swift:33:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n                  ;\n/tmp/tmp9318jd0v.swift:33:19: error: expected expression\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n/tmp/tmp9318jd0v.swift:37:12: erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmphttm3a_q.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmphttm3a_q.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmphttm3a_q.swift:17:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmphttm3a_q.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmphttm3a_q.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmphttm3a_q.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmphttm3a_q.swift:25:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmphttm3a_q.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmphttm3a_q.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmphttm3a_q.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmphttm3a_q.swift:25:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Int'\n    return",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpadl0uosv.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpadl0uosv.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpadl0uosv.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i += 1 {\n           ^\n            <#type#>\n/tmp/tmpadl0uosv.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i += 1 {\n           ^\n/tmp/tmpadl0uosv.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i += 1 {\n           ^\n/tmp/tmpadl0uosv.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpadl0uosv.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpadl0uosv.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpadl0uosv.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpadl0uosv.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpadl0uosv.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpadl0uosv.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpadl0uosv.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    result = append(result, min)\n    result = append(result, max)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpy5js_z10.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpy5js_z10.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpy5js_z10.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpy5js_z10.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpy5js_z10.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpy5js_z10.swift:26:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpy5js_z10.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpy5js_z10.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpy5js_z10.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpy5js_z10.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpy5js_z10.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[0:len(lst)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpa9v_mh36.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpa9v_mh36.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpa9v_mh36.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpa9v_mh36.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpa9v_mh36.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpa9v_mh36.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                      ^\n/tmp/tmpa9v_mh36.swift:26:43: error: expected ',' separator\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                          ^\n                                          ,\n/tmp/tmpa9v_mh36.swift:26:43: error: expected expression in list of expressions\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                          ^\n/tmp/tmpa9v_mh36.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpa9v_mh36.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpa9v_mh36.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0], min, max, lst[0:len(lst)])\n           ^~~~~~\n/tmp/tmpa9v_mh36.swift:26:33: error: generic parameter 'T' could not be inferred\n    return append(lst[:0], min, max, lst[0:len(lst)])\n                                ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpa9v_mh36.swift:26:25: error: missing argument for parameter #1 in call\n    return append(lst[:0], min, max, lst[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmphttm3a_q.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmphttm3a_q.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmphttm3a_q.swift:17:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmphttm3a_q.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmphttm3a_q.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmphttm3a_q.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmphttm3a_q.swift:25:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmphttm3a_q.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmphttm3a_q.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmphttm3a_q.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmphttm3a_q.swift:25:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmphttm3a_q.swift:25:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Int'\n    return",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpw17fp0rr.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpw17fp0rr.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpw17fp0rr.swift:18:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpw17fp0rr.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpw17fp0rr.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpw17fp0rr.swift:26:70: error: expected ',' separator\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n                                                                     ^\n                                                                     ,\n/tmp/tmpw17fp0rr.swift:26:70: error: expected expression in list of expressions\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n                                                                     ^\n/tmp/tmpw17fp0rr.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpw17fp0rr.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpw17fp0rr.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n           ^~~~~~\n/tmp/tmpw17fp0rr.swift:26:33: error: cannot find 'max_index' in scope\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n                                ^~~~~~~~~\n/tmp/tmpw17fp0rr.swift:26:61: error: cannot find 'min_index' in scope\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n                                                            ^~~~~~~~~\n/tmp/tmpw17fp0rr.swift:26:50: error: no exact matches in call to subscript \n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])\n                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[1:]), min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp7f2jj_a_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp7f2jj_a_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp7f2jj_a_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp7f2jj_a_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp7f2jj_a_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp7f2jj_a_.swift:26:42: error: expected ',' separator\n    return append(strange_sort_list(lst[1:]), min, max)\n                                         ^\n                                         ,\n/tmp/tmp7f2jj_a_.swift:26:42: error: expected expression in list of expressions\n    return append(strange_sort_list(lst[1:]), min, max)\n                                         ^\n/tmp/tmp7f2jj_a_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp7f2jj_a_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp7f2jj_a_.swift:26:12: error: cannot find 'append' in scope\n    return append(strange_sort_list(lst[1:]), min, max)\n           ^~~~~~\n/tmp/tmp7f2jj_a_.swift:26:52: error: generic parameter 'T' could not be inferred\n    return append(strange_sort_list(lst[1:]), min, max)\n                                                   ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp7f2jj_a_.swift:26:47: error: generic parameter 'T' could not be inferred\n    return append(strange_sort_list(lst[1:]), min, max)\n                                              ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public fun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp191pq59q.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp191pq59q.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp191pq59q.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp191pq59q.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp191pq59q.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp191pq59q.swift:25:41: error: expected expression in list of expressions\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                        ^\n/tmp/tmp191pq59q.swift:25:80: error: expected expression in list of expressions\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                                                               ^\n/tmp/tmp191pq59q.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp191pq59q.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp191pq59q.swift:25:12: error: cannot find 'append' in scope\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n           ^~~~~~\n/tmp/tmp191pq59q.swift:25:45: error: missing argument for parameter #1 in call\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)\n                                            ^\n                                            <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmp191pq59q.swift:25:49: error: g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0], min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpc_tyitc9.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpc_tyitc9.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpc_tyitc9.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpc_tyitc9.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpc_tyitc9.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0], min, max)\n                      ^\n/tmp/tmpc_tyitc9.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpc_tyitc9.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpc_tyitc9.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0], min, max)\n           ^~~~~~\n/tmp/tmpc_tyitc9.swift:26:28: error: generic parameter 'T' could not be inferred\n    return append(lst[:0], min, max)\n                           ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpc_tyitc9.swift:26:25: error: missing argument for parameter #1 in call\n    return append(lst[:0], min, max)\n                        ^\n                        <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmpc_tyitc9.swift:26:33: error: generic parameter 'T' could not be inferred\n    return append(lst[:0], min, max)\n                                ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8mso2qo6.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8mso2qo6.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8mso2qo6.swift:17:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp8mso2qo6.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp8mso2qo6.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmp8mso2qo6.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmp8mso2qo6.swift:25:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmp8mso2qo6.swift:25:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmp8mso2qo6.swift:25:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmp8mso2qo6.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8mso2qo6.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8mso2qo6.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmp8mso2qo6.swift:25:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n/tmp/tmp8mso2qo6.swift:25:21: note: found candidate with type '(@escaping () -> (_,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpw54bqyyr.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpw54bqyyr.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpw54bqyyr.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpw54bqyyr.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpw54bqyyr.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpw54bqyyr.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpw54bqyyr.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpw54bqyyr.swift:25:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpw54bqyyr.swift:25:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpw54bqyyr.swift:25:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpw54bqyyr.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpw54bqyyr.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpw54bqyyr.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpw54bqyyr.swift:25:25: error: generic parameter 'T' could not be inferred\n    return appen",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmplds8aeus.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmplds8aeus.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmplds8aeus.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmplds8aeus.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmplds8aeus.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmplds8aeus.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmplds8aeus.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmplds8aeus.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmplds8aeus.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmplds8aeus.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmplds8aeus.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplds8aeus.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmplds8aeus.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpt20c51uc.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpt20c51uc.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpt20c51uc.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpt20c51uc.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpt20c51uc.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpt20c51uc.swift:25:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpt20c51uc.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt20c51uc.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt20c51uc.swift:27:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n                  ;\n/tmp/tmpt20c51uc.swift:27:19: error: expected expression\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n/tmp/tmpt20c51uc.swift:31:12: error: expected type\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmpt20c51uc.swift:31:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmpt20c51uc.swift:31:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmpt20c51uc.swift:33:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n                  ;\n/tmp/tmpt20c51uc.swift:33:19: error: expected expression\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n/tmp/tmpt20c51uc.sw",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 1; i > min_index; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := min_index; i <= max_index; i++ {\n        lst[min_index], lst[i] = lst[i], lst[min_index]\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmphb60fpdx.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmphb60fpdx.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmphb60fpdx.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmphb60fpdx.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmphb60fpdx.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmphb60fpdx.swift:23:12: error: expected type\n    for i := len(lst) - 1; i > min_index; i-- {\n           ^\n            <#type#>\n/tmp/tmphb60fpdx.swift:23:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i > min_index; i-- {\n           ^\n/tmp/tmphb60fpdx.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i > min_index; i-- {\n           ^\n/tmp/tmphb60fpdx.swift:28:12: error: expected type\n    for i := min_index; i <= max_index; i++ {\n           ^\n            <#type#>\n/tmp/tmphb60fpdx.swift:28:12: error: expected 'in' after for-each pattern\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmphb60fpdx.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmphb60fpdx.swift:29:23: error: consecutive statements on a line must be separated by ';'\n        lst[min_index], lst[i] = lst[i], lst[min_index]\n                      ^\n                      ;\n/tmp/tmphb60fpdx.swift:29:23: error: expected expression\n        lst[min_index], lst[i] = lst[i], lst[min_index]\n                      ^\n/tmp/tmphb60fpdx.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmphb60fpdx.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := min_index; i <= max_index; i++ {\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpfs6culpu.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpfs6culpu.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpfs6culpu.swift:18:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpfs6culpu.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpfs6culpu.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpfs6culpu.swift:26:12: error: expected type\n    for i := min_index; i <= max_index; i++ {\n           ^\n            <#type#>\n/tmp/tmpfs6culpu.swift:26:12: error: expected 'in' after for-each pattern\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmpfs6culpu.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := min_index; i <= max_index; i++ {\n           ^\n/tmp/tmpfs6culpu.swift:27:15: error: consecutive statements on a line must be separated by ';'\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n              ^\n              ;\n/tmp/tmpfs6culpu.swift:27:15: error: expected expression\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n              ^\n/tmp/tmpfs6culpu.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpfs6culpu.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmplo90atgf.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmplo90atgf.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmplo90atgf.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmplo90atgf.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmplo90atgf.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmplo90atgf.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:12: error: cannot find 'append' in scope\n    return append(lst, min, max)\n           ^~~~~~\n/tmp/tmplo90atgf.swift:26:24: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                       ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplo90atgf.swift:26:29: error: generic parameter 'T' could not be inferred\n    return append(lst, min, max)\n                            ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp6fvmq705.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min := lst[0]\n     ^\n     ;\n/tmp/tmp6fvmq705.swift:16:7: error: expected expression\n  min := lst[0]\n      ^\n/tmp/tmp6fvmq705.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmp6fvmq705.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp6fvmq705.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp6fvmq705.swift:26:19: error: expected ',' separator\n  return append([]Int{min, max}, lst[1:]...)\n                  ^\n                  ,\n/tmp/tmp6fvmq705.swift:26:26: error: consecutive statements on a line must be separated by ';'\n  return append([]Int{min, max}, lst[1:]...)\n                         ^\n                         ;\n/tmp/tmp6fvmq705.swift:26:26: error: expected expression\n  return append([]Int{min, max}, lst[1:]...)\n                         ^\n/tmp/tmp6fvmq705.swift:26:39: error: expected ',' separator\n  return append([]Int{min, max}, lst[1:]...)\n                                      ^\n                                      ,\n/tmp/tmp6fvmq705.swift:26:39: error: expected expression in list of expressions\n  return append([]Int{min, max}, lst[1:]...)\n                                      ^\n/tmp/tmp6fvmq705.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmp6fvmq705.swift:16:3: error: generic parameter 'T' could not be inferred\n  min := lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp6fvmq705.swift:26:10: error: cannot find 'append' in scope\n  return append([]Int{min, max}, lst[1:]...)\n         ^~~~~~\n/tmp/tmp6fvmq705.swift:26:23: error: generic parameter 'T' could not be inferred\n  return append([]Int{min, max}, lst[1:]...)\n                      ^\nSwift.min:1:24: note: in call to function 'min'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp8o8zp9w1.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp8o8zp9w1.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp8o8zp9w1.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8o8zp9w1.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8o8zp9w1.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8o8zp9w1.swift:23:12: error: expected type\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmp8o8zp9w1.swift:23:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmp8o8zp9w1.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmp8o8zp9w1.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8o8zp9w1.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp8o8zp9w1.swift:28:12: error: cannot find 'append' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)\n           ^~~~~~\n/tmp/tmp8o8zp9w1.swift:28:33: error: cannot find 'max_index' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)\n                                ^~~~~~~~~\n/tmp/tmp8o8zp9w1.swift:28:63: error: cannot find 'min_index' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)\n                                                              ^~~~~~~~~\n/tmp/tmp8o8zp9w1.swift:28:22: error: extraneous argument label 'min_index:' in subscript\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)\n                     ^~~~~~~~~~~\n                      \n/tmp/tmp8o8zp9w1.swift:28:52: error: extraneous argu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpvmt9u_yn.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpvmt9u_yn.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpvmt9u_yn.swift:17:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpvmt9u_yn.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpvmt9u_yn.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpvmt9u_yn.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpvmt9u_yn.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpvmt9u_yn.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpvmt9u_yn.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpvmt9u_yn.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpvmt9u_yn.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpvmt9u_yn.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmpvmt9u_yn.swift:25:25: error: generic parameter 'T' cou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n\n    max_index := 0\n    max_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpmu5phlhj.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpmu5phlhj.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpmu5phlhj.swift:19:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmu5phlhj.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmu5phlhj.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmu5phlhj.swift:28:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmu5phlhj.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmu5phlhj.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmu5phlhj.swift:36:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmpmu5phlhj.swift:36:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmpmu5phlhj.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpmu5phlhj.swift:17:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpmu5phlhj.swift:36:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmpmu5phlhj.swift:36:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = make([]Int, len(lst))\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp1iula2o7.swift:13:25: error: expected ',' separator\n    var result = make([]Int, len(lst))\n                        ^\n                        ,\n/tmp/tmp1iula2o7.swift:16:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp1iula2o7.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:24:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp1iula2o7.swift:24:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:24:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp1iula2o7.swift:13:18: error: cannot find 'make' in scope\n    var result = make([]Int, len(lst))\n                 ^~~~\n/tmp/tmp1iula2o7.swift:13:30: error: cannot find 'len' in scope\n    var result = make([]Int, len(lst))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmppvtyu6hn.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmppvtyu6hn.swift:17:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmppvtyu6hn.swift:19:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmppvtyu6hn.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmppvtyu6hn.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmppvtyu6hn.swift:28:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmppvtyu6hn.swift:28:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmppvtyu6hn.swift:28:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmppvtyu6hn.swift:28:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmppvtyu6hn.swift:28:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmppvtyu6hn.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmppvtyu6hn.swift:17:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmppvtyu6hn.swift:28:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n        if lst[i] == max {\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp7vsr6fhx.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp7vsr6fhx.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp7vsr6fhx.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp7vsr6fhx.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp7vsr6fhx.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp7vsr6fhx.swift:25:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp7vsr6fhx.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp7vsr6fhx.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp7vsr6fhx.swift:27:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n                  ;\n/tmp/tmp7vsr6fhx.swift:27:19: error: expected expression\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n/tmp/tmp7vsr6fhx.swift:31:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n                  ^\n                  ;\n/tmp/tmp7vsr6fhx.swift:31:19: error: expected expression\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n                  ^\n/tmp/tmp7vsr6fhx.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp7vsr6fhx.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmplds8aeus.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmplds8aeus.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmplds8aeus.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmplds8aeus.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmplds8aeus.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmplds8aeus.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmplds8aeus.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmplds8aeus.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmplds8aeus.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmplds8aeus.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmplds8aeus.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmplds8aeus.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmplds8aeus.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpmp7hmv2m.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpmp7hmv2m.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmp7hmv2m.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:])\n                      ^\n/tmp/tmpmp7hmv2m.swift:26:45: error: expected ',' separator\n    return append(lst[:0:0], min, max, lst[1:])\n                                            ^\n                                            ,\n/tmp/tmpmp7hmv2m.swift:26:45: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:])\n                                            ^\n/tmp/tmpmp7hmv2m.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpmp7hmv2m.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpmp7hmv2m.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0:0], min, max, lst[1:])\n           ^~~~~~\n/tmp/tmpmp7hmv2m.swift:26:30: error: generic parameter 'T' could not be inferred\n    return append(lst[:0:0], min, max, lst[1:])\n                             ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpmp7hmv2m.swift:26:27: error: missing argument for parameter #1 in call\n    return append(lst[:0:0], min, max, lst[1:])\n                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append(lst, min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp30iqtc45.swift:16:6: error: consecutive statements on a line must be separated by ';'\n  min := lst[0]\n     ^\n     ;\n/tmp/tmp30iqtc45.swift:16:7: error: expected expression\n  min := lst[0]\n      ^\n/tmp/tmp30iqtc45.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmp30iqtc45.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp30iqtc45.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmp30iqtc45.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmp30iqtc45.swift:16:3: error: generic parameter 'T' could not be inferred\n  min := lst[0]\n  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp30iqtc45.swift:26:10: error: cannot find 'append' in scope\n  return append(lst, min, max)\n         ^~~~~~\n/tmp/tmp30iqtc45.swift:26:22: error: generic parameter 'T' could not be inferred\n  return append(lst, min, max)\n                     ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp30iqtc45.swift:26:27: error: generic parameter 'T' could not be inferred\n  return append(lst, min, max)\n                          ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            result = append(result, lst[i])\n        } else if i == len(lst) - 1 {\n            result = append(result, lst[i])\n        } else {\n            result = append(result, lst[i])\n            result = append(result, lst[i])\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp2heifkgk.swift:13:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmp2heifkgk.swift:14:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp2heifkgk.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp2heifkgk.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp2heifkgk.swift:13:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmp2heifkgk.swift:13:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmp2heifkgk.swift:13:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmp2heifkgk.swift:25:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpksxm1pbs.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpksxm1pbs.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmpksxm1pbs.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpksxm1pbs.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpksxm1pbs.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpksxm1pbs.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpksxm1pbs.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpksxm1pbs.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpksxm1pbs.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpksxm1pbs.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpksxm1pbs.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Compa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpbxbn9fi3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpbxbn9fi3.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpbxbn9fi3.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmpbxbn9fi3.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmpbxbn9fi3.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmpbxbn9fi3.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmpbxbn9fi3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpbxbn9fi3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpbxbn9fi3.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmpbxbn9fi3.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst[1:]...)\n       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i - 1] {\n            lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpt7iry1c0.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpt7iry1c0.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpt7iry1c0.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpt7iry1c0.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:26:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpt7iry1c0.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:28:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n                  ;\n/tmp/tmpt7iry1c0.swift:28:19: error: expected expression\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n/tmp/tmpt7iry1c0.swift:32:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpt7iry1c0.swift:32:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:32:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpt7iry1c0.swift:34:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n                  ;\n/tmp/tmpt7iry1c0.swift:34:19: error: expected expression\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n/tmp/tmpt7iry1c0.swift:38:12: error: expected type\n    for ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8ctflc3r.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp8ctflc3r.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmp8ctflc3r.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n                    ,\n/tmp/tmp8ctflc3r.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n                           ;\n/tmp/tmp8ctflc3r.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:]...)\n                           ^\n/tmp/tmp8ctflc3r.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n                                        ,\n/tmp/tmp8ctflc3r.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:]...)\n                                        ^\n/tmp/tmp8ctflc3r.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8ctflc3r.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8ctflc3r.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:]...)\n           ^~~~~~\n/tmp/tmp8ctflc3r.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst[1:]...)\n                    ^\n/tmp/tmp8ctflc3r.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp12nknvih.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp12nknvih.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp12nknvih.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range lst[1:] {\n         ^\n/tmp/tmp12nknvih.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmp12nknvih.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmp12nknvih.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmp12nknvih.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp12nknvih.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmp12nknvih.swift:26:25: error: generic parameter 'T' could not be inferred\n    return append([]Int{min, max}, lst...)\n                        ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp12nknvih.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmp12nknvih.swift:26:21: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpka4majws.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpka4majws.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpka4majws.swift:20:19: error: expected 'in' after for-each pattern\n    for min_index < max_index {\n                  ^\n/tmp/tmpka4majws.swift:20:19: error: unary operator cannot be separated from its operand\n    for min_index < max_index {\n                  ^~\n                   \n/tmp/tmpka4majws.swift:22:27: error: consecutive statements on a line must be separated by ';'\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n                          ;\n/tmp/tmpka4majws.swift:22:27: error: expected expression\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n                          ^\n/tmp/tmpka4majws.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpka4majws.swift:17:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpka4majws.swift:20:19: error: '<' is not a prefix unary operator\n    for min_index < max_index {\n                  ^\n/tmp/tmpka4majws.swift:20:21: error: cannot find 'max_index' in scope\n    for min_index < max_index {\n                    ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpmp7hmv2m.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpmp7hmv2m.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmp7hmv2m.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpmp7hmv2m.swift:26:23: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:])\n                      ^\n/tmp/tmpmp7hmv2m.swift:26:45: error: expected ',' separator\n    return append(lst[:0:0], min, max, lst[1:])\n                                            ^\n                                            ,\n/tmp/tmpmp7hmv2m.swift:26:45: error: expected expression in list of expressions\n    return append(lst[:0:0], min, max, lst[1:])\n                                            ^\n/tmp/tmpmp7hmv2m.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpmp7hmv2m.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpmp7hmv2m.swift:26:12: error: cannot find 'append' in scope\n    return append(lst[:0:0], min, max, lst[1:])\n           ^~~~~~\n/tmp/tmpmp7hmv2m.swift:26:30: error: generic parameter 'T' could not be inferred\n    return append(lst[:0:0], min, max, lst[1:])\n                             ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpmp7hmv2m.swift:26:27: error: missing argument for parameter #1 in call\n    return append(lst[:0:0], min, max, lst[1:])\n                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp0pg07yfk.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp0pg07yfk.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp0pg07yfk.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp0pg07yfk.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp0pg07yfk.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp0pg07yfk.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp0pg07yfk.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp0pg07yfk.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp0pg07yfk.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpd3p4p_xe.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpd3p4p_xe.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpd3p4p_xe.swift:18:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpd3p4p_xe.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpd3p4p_xe.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst...)\n                    ^\n                    ,\n/tmp/tmpd3p4p_xe.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst...)\n                           ^\n                           ;\n/tmp/tmpd3p4p_xe.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst...)\n                           ^\n/tmp/tmpd3p4p_xe.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpd3p4p_xe.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpd3p4p_xe.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst...)\n           ^~~~~~\n/tmp/tmpd3p4p_xe.swift:26:21: error: no exact matches in call to initializer \n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmpd3p4p_xe.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmpd3p4p_xe.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Optional<Int>'\n    return append([]Int{min, max}, lst...)\n                    ^\n/tmp/tmpd3p4p_xe.swift:26:21: note: found candidate with type '(@escaping () -> (_, _) -> _) -> Int'\n    return append([]Int{min, max}, lst...)\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    min_value := lst[0]\n\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n\n    max_index := 0\n    max_value := lst[0]\n\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp9n233hy6.swift:17:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmp9n233hy6.swift:17:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmp9n233hy6.swift:20:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9n233hy6.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9n233hy6.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9n233hy6.swift:30:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp9n233hy6.swift:30:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9n233hy6.swift:30:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp9n233hy6.swift:39:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmp9n233hy6.swift:39:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmp9n233hy6.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp9n233hy6.swift:17:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmp9n233hy6.swift:39:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmp9n233hy6.swift:39:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpqq7po4ex.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpqq7po4ex.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpqq7po4ex.swift:27:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:27:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpqq7po4ex.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpqq7po4ex.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpqq7po4ex.swift:36:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpf0dtavn4.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpf0dtavn4.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpf0dtavn4.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpf0dtavn4.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpf0dtavn4.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpf0dtavn4.swift:23:12: error: expected type\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmpf0dtavn4.swift:23:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmpf0dtavn4.swift:23:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 2; i >= 0; i-- {\n           ^\n/tmp/tmpf0dtavn4.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpf0dtavn4.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpf0dtavn4.swift:28:12: error: cannot find 'append' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)\n           ^~~~~~\n/tmp/tmpf0dtavn4.swift:28:33: error: cannot find 'max_index' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)\n                                ^~~~~~~~~\n/tmp/tmpf0dtavn4.swift:28:63: error: cannot find 'min_index' in scope\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)\n                                                              ^~~~~~~~~\n/tmp/tmpf0dtavn4.swift:28:22: error: extraneous argument label 'min_index:' in subscript\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)\n                     ^~~~~~~~~~~\n                      \n/tmp/tmpf0dtavn4.swift:28:52: error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[min_index], lst[0] = lst[0], lst[min_index]\n    return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpq9e52rbm.swift:16:14: error: consecutive statements on a line must be separated by ';'\n    min_index := 0\n             ^\n             ;\n/tmp/tmpq9e52rbm.swift:16:15: error: expected expression\n    min_index := 0\n              ^\n/tmp/tmpq9e52rbm.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpq9e52rbm.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpq9e52rbm.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpq9e52rbm.swift:25:35: error: expected ',' separator\n    return strange_sort_list(lst[1:])\n                                  ^\n                                  ,\n/tmp/tmpq9e52rbm.swift:25:35: error: expected expression in list of expressions\n    return strange_sort_list(lst[1:])\n                                  ^\n/tmp/tmpq9e52rbm.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpq9e52rbm.swift:16:5: error: cannot find 'min_index' in scope\n    min_index := 0\n    ^~~~~~~~~\n/tmp/tmpq9e52rbm.swift:25:30: error: missing argument label 'lst:' in call\n    return strange_sort_list(lst[1:])\n                             ^\n                             lst: \n/tmp/tmpq9e52rbm.swift:25:33: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return strange_sort_list(lst[1:])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmpvmt9u_yn.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmpvmt9u_yn.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmpvmt9u_yn.swift:17:10: error: expected 'in' after for-each pattern\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpvmt9u_yn.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, i := range lst[1:] {\n         ^\n/tmp/tmpvmt9u_yn.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpvmt9u_yn.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpvmt9u_yn.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpvmt9u_yn.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpvmt9u_yn.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpvmt9u_yn.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpvmt9u_yn.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpvmt9u_yn.swift:25:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n           ^~~~~~\n/tmp/tmpvmt9u_yn.swift:25:25: error: generic parameter 'T' cou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp8h6i82a3.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min, max := lst[0], lst[0]\n       ^\n       ;\n/tmp/tmp8h6i82a3.swift:16:8: error: expected expression\n    min, max := lst[0], lst[0]\n       ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp8h6i82a3.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp8h6i82a3.swift:25:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmp8h6i82a3.swift:25:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmp8h6i82a3.swift:25:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmp8h6i82a3.swift:25:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmp8h6i82a3.swift:25:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmp8h6i82a3.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp8h6i82a3.swift:16:5: error: generic parameter 'T' could not be inferred\n    min, max := lst[0], lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp8h6i82a3.swift:25:12: error: cannot find 'append' in scope\n    return ap",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpxydfywyw.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmpxydfywyw.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpxydfywyw.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmpxydfywyw.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                    ^\n                    ,\n/tmp/tmpxydfywyw.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n                           ;\n/tmp/tmpxydfywyw.swift:26:28: error: expected expression\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                           ^\n/tmp/tmpxydfywyw.swift:26:59: error: expected ',' separator\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n                                                          ,\n/tmp/tmpxydfywyw.swift:26:59: error: expected expression in list of expressions\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)\n                                                          ^\n/tmp/tmpxydfywyw.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmpxydfywyw.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpxydfywyw.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, strange_sort_lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmp5neowjj_.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp5neowjj_.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp5neowjj_.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp5neowjj_.swift:26:21: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                    ^\n                    ,\n/tmp/tmp5neowjj_.swift:26:28: error: consecutive statements on a line must be separated by ';'\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n                           ;\n/tmp/tmp5neowjj_.swift:26:28: error: expected expression\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                           ^\n/tmp/tmp5neowjj_.swift:26:41: error: expected ',' separator\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n                                        ,\n/tmp/tmp5neowjj_.swift:26:41: error: expected expression in list of expressions\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n                                        ^\n/tmp/tmp5neowjj_.swift:13:8: error: cannot find 'len' in scope\n    if len(lst) == 0 {\n       ^~~\n/tmp/tmp5neowjj_.swift:16:5: error: generic parameter 'T' could not be inferred\n    min := lst[0]\n    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp5neowjj_.swift:26:12: error: cannot find 'append' in scope\n    return append([]Int{min, max}, lst[1:len(lst)]...)\n           ^~~~~~\n/tmp/tmp5neowjj_.swift:26:25: error: generic parameter 'T' could not be inferred\n    re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "/tmp/tmp25ypcx0t.swift:16:8: error: consecutive statements on a line must be separated by ';'\n    min := lst[0]\n       ^\n       ;\n/tmp/tmp25ypcx0t.swift:16:9: error: expected expression\n    min := lst[0]\n        ^\n/tmp/tmp25ypcx0t.swift:18:12: error: expected type\n    for i := 1; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp25ypcx0t.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp25ypcx0t.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(lst); i++ {\n           ^\n/tmp/tmp25ypcx0t.swift:26:12: error: expected type\n    for i := 0; i < len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp25ypcx0t.swift:26:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp25ypcx0t.swift:26:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmp25ypcx0t.swift:28:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n                  ;\n/tmp/tmp25ypcx0t.swift:28:19: error: expected expression\n            lst[i], lst[0] = lst[0], lst[i]\n                  ^\n/tmp/tmp25ypcx0t.swift:32:12: error: expected type\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n            <#type#>\n/tmp/tmp25ypcx0t.swift:32:12: error: expected 'in' after for-each pattern\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp25ypcx0t.swift:32:12: error: expected Sequence expression for for-each loop\n    for i := len(lst) - 1; i >= 0; i-- {\n           ^\n/tmp/tmp25ypcx0t.swift:34:19: error: consecutive statements on a line must be separated by ';'\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n                  ;\n/tmp/tmp25ypcx0t.swift:34:19: error: expected expression\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n                  ^\n/tmp/tmp25ypcx0t.swift:13:8: error: cannot f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n  if len(lst) == 0 {\n    return lst\n  }\n  min_index := 0\n  min_value := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  lst[0], lst[min_index] = lst[min_index], lst[0]\n  return strange_sort_list(lst[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "/tmp/tmpjj1u0go3.swift:16:12: error: consecutive statements on a line must be separated by ';'\n  min_index := 0\n           ^\n           ;\n/tmp/tmpjj1u0go3.swift:16:13: error: expected expression\n  min_index := 0\n            ^\n/tmp/tmpjj1u0go3.swift:18:10: error: expected type\n  for i := 1; i < len(lst); i++ {\n         ^\n          <#type#>\n/tmp/tmpjj1u0go3.swift:18:10: error: expected 'in' after for-each pattern\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpjj1u0go3.swift:18:10: error: expected Sequence expression for for-each loop\n  for i := 1; i < len(lst); i++ {\n         ^\n/tmp/tmpjj1u0go3.swift:25:33: error: expected ',' separator\n  return strange_sort_list(lst[1:])\n                                ^\n                                ,\n/tmp/tmpjj1u0go3.swift:25:33: error: expected expression in list of expressions\n  return strange_sort_list(lst[1:])\n                                ^\n/tmp/tmpjj1u0go3.swift:13:6: error: cannot find 'len' in scope\n  if len(lst) == 0 {\n     ^~~\n/tmp/tmpjj1u0go3.swift:16:3: error: cannot find 'min_index' in scope\n  min_index := 0\n  ^~~~~~~~~\n/tmp/tmpjj1u0go3.swift:25:28: error: missing argument label 'lst:' in call\n  return strange_sort_list(lst[1:])\n                           ^\n                           lst: \n/tmp/tmpjj1u0go3.swift:25:31: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n  return strange_sort_list(lst[1:])\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}