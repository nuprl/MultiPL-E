name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input array of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n///\
  \ [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\",\
  \ \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ['    return strings.filter(prefix)', "    var result: [String] = []\n\
    \    for _, s: String in strings {\n        if s.starts_with(prefix) {\n     \
    \       result.append(s)\n        }\n    }\n    return result", "    var result:\
    \ [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(prefix)',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', "    var result: [String] = []\n    for _, s := range\
    \ strings {\n        if strings.starts_with(s, prefix) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result", '    return strings.filter(function(s)
    { return s.startsWith(prefix) })', '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    if strings == nil {\n        return nil\n    }\n    var result = make([]String,\
    \ 0)\n    for _, s := range strings {\n        if strings.Contains(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(prefix)', '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', "    var result: [String]\
    \ = []\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", '    return strings.filter(x => x.startsWith(prefix))', '    return
    strings.filter(x => x.startsWith(prefix))', '    return strings.filter(x => x.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', "    var result: [String] = []\n    for _, string:\
    \ String in strings {\n        if string.starts_with(prefix) {\n            result.append(string)\n\
    \        }\n    }\n    return result", '    return strings.filter(x => x.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', '    return strings.filter(prefix)', "    var result:\
    \ [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", "    if strings == nil {\n        return nil\n    }\n    var result:\
    \ [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", '    return strings.filter(x => x.startsWith(prefix))', "    var result:\
    \ [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(x => x.startsWith(prefix))', "    var result: [String]\
    \ = []\n    for _, string := range strings {\n        if strings.starts_with(string,\
    \ prefix) {\n            result = append(result, string)\n        }\n    }\n \
    \   return result", "    var result = []String{}\n    for _, s := range strings\
    \ {\n        if strings.starts_with(s, prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(x => x.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });", '    return strings.filter(prefix)',
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, string := range strings {\n        if strings.starts_with(string,\
    \ prefix) {\n            result = append(result, string)\n        }\n    }\n \
    \   return result", '    return strings.filter(s => s.startsWith(prefix))', '    return
    strings.filter(prefix)', "    if strings == nil {\n        return nil\n    }\n\
    \    var result = make([]String, 0)\n    for _, string := range strings {\n  \
    \      if strings.starts_with(string, prefix) {\n            result = append(result,\
    \ string)\n        }\n    }\n    return result", "    if strings == nil {\n  \
    \      return nil\n    }\n    var result = make([]String, 0)\n    for _, s :=\
    \ range strings {\n        if strings.HasPrefix(s, prefix) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result", "    var result:\
    \ [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', '    return strings.filter(x => x.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", "    var result: [String] = []\n    for _, s: String in strings {\n\
    \        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", "    if strings == nil {\n        return\
    \ nil\n    }\n    var result: [String] = []\n    for _, string: String in strings\
    \ {\n        if string.starts_with(prefix) {\n            result = append(result,\
    \ string)\n        }\n    }\n    return result", '    return strings.filter(s
    => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', "    var result: [String] = []\n    for _,\
    \ string: String in strings {\n        if string.starts_with(prefix) {\n     \
    \       result.append(string)\n        }\n    }\n    return result", '    return
    strings.filter(x => x.startsWith(prefix))', "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix)\n    })", "    var filtered_strings =\
    \ []String{}\n    for _, string := range strings {\n        if strings.starts_with(string,\
    \ prefix) {\n            filtered_strings = append(filtered_strings, string)\n\
    \        }\n    }\n    return filtered_strings", '    return strings.filter(s
    => s.startsWith(prefix))', "    return strings.filter(function(s) {\n        return\
    \ s.startsWith(prefix)\n    })", '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(prefix)', '    return strings.filter(prefix)', "    var\
    \ result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", "   \
    \ if strings == nil {\n        return nil\n    }\n    var result = make([]String,\
    \ 0)\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", '    return strings.filter(prefix)', "    var result: [String] = []\n\
    \    for _, s: String in strings {\n        if s.starts_with(prefix) {\n     \
    \       result = append(result, s)\n        }\n    }\n    return result", '    return
    strings.filter(x => x.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', "    var result: [String]\
    \ = []\n    for _, s: String in strings {\n        if s.starts_with(prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  "    var result = []String{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", "    var result: [String] = []\n    for _, s: String in strings {\n\
    \        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", '    return strings.filter(prefix)', '    return
    strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', "    var result: [String] = []\n    for _, s := range\
    \ strings {\n        if strings.starts_with(s, prefix) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result", '    return strings.filter(s
    => s.startsWith(prefix))', "    var result: [String] = []\n    for _, s := range\
    \ strings {\n        if strings.starts_with(s, prefix) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result", '    return strings.filter(x
    => x.startsWith(prefix))', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(x => x.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result.append(s)\n\
    \        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, string := range strings {\n        if strings.starts_with(string,\
    \ prefix) {\n            result = append(result, string)\n        }\n    }\n \
    \   return result", "    var result: [String] = []\n    for _, s: String in strings\
    \ {\n        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", "    return strings.filter(function(s)\
    \ {\n        return s.startsWith(prefix);\n    });", "    var result: [String]\
    \ = []\n    for _, s: String in strings {\n        if s.starts_with(prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, string: String in strings {\n       \
    \ if string.starts_with(prefix) {\n            result = append(result, string)\n\
    \        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", "    var result: [String] = []\n    for _, s: String in strings {\n\
    \        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", '    return strings.filter(x => x.startsWith(prefix))',
  '    return strings.filter(prefix)', "    if strings == nil {\n        return nil\n\
    \    }\n    var result = make([]String, 0)\n    for _, s := range strings {\n\
    \        if strings.starts_with(s, prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", "    var result: [String] = []\n \
    \   for _, s: String in strings {\n        if s.starts_with(prefix) {\n      \
    \      result = append(result, s)\n        }\n    }\n    return result", '    return
    strings.filter(s => s.startsWith(prefix))', "    if strings == nil {\n       \
    \ return nil\n    }\n    var result: [String] = []\n    for _, s: String in strings\
    \ {\n        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", "    if strings == nil {\n        return\
    \ nil\n    }\n    var result: [String] = []\n    for _, s: String in strings {\n\
    \        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', "    var result: [String] = []\n    for _,\
    \ s := range strings {\n        if strings.starts_with(s, prefix) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result", '    return
    strings.filter(s => s.startsWith(prefix))', "    var result: [String] = []\n \
    \   for _, s := range strings {\n        if strings.starts_with(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(x => x.startsWith(prefix))', "    var result: [String]\
    \ = []\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(x
    => x.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', '    return strings.filter(s => s.startsWith(prefix))',
  "    if strings == nil {\n        return nil\n    }\n    return filter(strings,\
    \ func(s: String) -> bool {\n        return strings.starts_with(s, prefix)\n \
    \   })", '    return strings.filter(x => x.startsWith(prefix))', "    var filtered:\
    \ [String] = []\n    for _, string: String in strings {\n        if string.starts_with(prefix)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter(x => x.startsWith(prefix))', "    var\
    \ result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(s => s.startsWith(prefix))', '    return strings.filter(s
    => s.startsWith(prefix))', '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, string := range strings {\n        if\
    \ string.startsWith(prefix) {\n            result = append(result, string)\n \
    \       }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", '    return strings.filter(x => x.startsWith(prefix))', "    var result:\
    \ [String] = []\n    for _, string: String in strings {\n        if string.starts_with(prefix)\
    \ {\n            result = append(result, string)\n        }\n    }\n    return\
    \ result", '    return strings.filter(s => s.startsWith(prefix))', "    var result:\
    \ [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", "    var result: [String] = []\n    for _, s := range strings {\n \
    \       if strings.starts_with(s, prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', "    var result: [String]\
    \ = []\n    for _, s: String in strings {\n        if s.starts_with(prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", "   \
    \ return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", '    return strings.filter(s => s.startsWith(prefix))', '    return
    strings.filter(prefix)', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", "    var result: [String] = []\n \
    \   for _, s := range strings {\n        if strings.starts_with(s, prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });", '    return strings.filter(s => s.startsWith(prefix))', '    return
    strings.filter(x => x.startsWith(prefix))', "    if strings == nil {\n       \
    \ return nil\n    }\n    var result: [String] = []\n    for _, s := range strings\
    \ {\n        if strings.starts_with(s, prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s := range strings {\n        if strings.indexOf(s,\
    \ prefix) == 0 {\n            result = append(result, s)\n        }\n    }\n \
    \   return result", "    var result: [String] = []\n    for _, s: String in strings\
    \ {\n        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', '    return strings.filter(x => x.startsWith(prefix))',
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, s := range strings {\n        if strings.starts_with(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.startsWith(prefix))', "    if strings == nil {\n\
    \        return nil\n    }\n    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(s => s.startsWith(prefix))',
  '    return strings.filter(prefix)', '    return strings.filter(x => x.startsWith(prefix))',
  '    return strings.filter(prefix)', "    var result: [String] = []\n    for _,\
    \ string: String in strings {\n        if string.starts_with(prefix) {\n     \
    \       result.append(string)\n        }\n    }\n    return result", '    return
    strings.filter(prefix)', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.starts_with(prefix) {\n            result.append(s)\n\
    \        }\n    }\n    return result", '    return strings.filter(x => x.startsWith(prefix))',
  "    var result: [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", '    return strings.filter(x => x.startsWith(prefix))', "    var result:\
    \ [String] = []\n    for _, s := range strings {\n        if strings.starts_with(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result", "    var result: [String] = []\n    for _, s: String in strings {\n\
    \        if s.starts_with(prefix) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result", "    if strings == nil {\n        return\
    \ nil\n    }\n    var result: [String] = []\n    for _, s := range strings {\n\
    \        if strings.starts_with(s, prefix) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(prefix)',
  "    var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(function(s) { return s.startsWith(prefix) })', "    if\
    \ strings == nil {\n        return nil\n    }\n    var result: [String] = []\n\
    \    for _, s: String in strings {\n        if s.starts_with(prefix) {\n     \
    \       result = append(result, s)\n        }\n    }\n    return result", "  \
    \  var result: [String] = []\n    for _, s: String in strings {\n        if s.starts_with(prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
