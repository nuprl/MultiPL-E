{
  "name": "HumanEval_70_strange_sort_list",
  "language": "swift",
  "prompt": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])",
  "completions": [
    "    var result = make([]Int, len(lst))\n    var i = 0\n    var j = 0\n    var min = lst[0]\n    for i = 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[j] = lst[i]\n            j++\n        }\n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] != min {\n            result[j] = lst[i]\n            j++\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    var result = make([]Int, len(lst))\n    var i = 0\n    var j = len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n            result[i], result[j] = lst[j], lst[i]\n            i++\n        } else {\n            result[i], result[j] = lst[i], lst[j]\n            j--\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append(lst, min, max)",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min, max := lst[0], lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0], min, max) + strange_sort_list(lst[2:])",
    "    var result: [Int] = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst) == 1 {\n            result = append(result, lst[0])\n            break\n        }\n        if i == 0 {\n            result = append(result, lst[0])\n            lst = lst[1:]\n        } else if i == len(lst) - 1 {\n            result = append(result, lst[len(lst) - 1])\n            lst = lst[:len(lst) - 1]\n        } else {\n            result = append(result, lst[0])\n            lst = lst[1:]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    var min_index = 0\n    var max_index = 0\n    var min_value = lst[0]\n    var max_value = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n    var result = make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n    }\n    result[min_index], result[max_index] = result[max_index], result[min_index]\n    for i := 0; i < len(result); i++ {\n        if i != min_index && i != max_index {\n            result[i], result[i] = result[i], result[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            min = lst[i]\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n            max = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            result = append(result, max)\n            min = lst[i]\n            max = lst[i]\n        } else if lst[i] == max {\n            result = append(result, lst[i])\n            result = append(result, min)\n            min = lst[i]\n            max = lst[i]\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst[:0], min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst = append(lst, lst[i])\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    return strange_sort_list(lst[:min_index] + lst[max_index+1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    var min_index = 0\n    var max_index = 0\n    var min_value = lst[0]\n    var max_value = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n    var result = make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            result[i] = min_value\n        } else if i == max_index {\n            result[i] = max_value\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  for i := 0; i < len(lst); i++ {\n    if lst[i] == min {\n      lst[i], lst[0] = lst[0], lst[i]\n      i = 0\n    }\n    if lst[i] == max {\n      lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n      i = len(lst) - 1\n    }\n  }\n  return lst",
    "    var result = [Int]{}\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[min_index], lst[0] = lst[0], lst[min_index]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n        } else if i == max_index {\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n        } else {\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n        }\n    }\n\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min_index := 0\n  min_value := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  lst[0], lst[min_index] = lst[min_index], lst[0]\n  return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for _, v := range lst[1:] {\n    if v < min {\n      min = v\n    }\n    if v > max {\n      max = v\n    }\n  }\n  lst = append(lst, min)\n  lst = append(lst, max)\n  for i := 0; i < len(lst) - 2; i += 2 {\n    lst = append(lst, lst[i])\n  }\n  return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min, max := lst[0], lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    var result: [Int] = []\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n    for i:=1; i<len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i:=0; i<len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n\n    for i := min_index; i <= max_index; i++ {\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    }\n\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    var result: [Int] = []\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst, min, max)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    var min, max Int\n    min = lst[0]\n    max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    var result []Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, max)\n            max = min\n            min = lst[i]\n        } else if lst[i] == max {\n            result = append(result, min)\n            min = max\n            max = lst[i]\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == min {\n            result = append(result, lst[i])\n            min = lst[i]\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n            max = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[0:len(lst)])",
    "    var result = make([]Int, len(lst))\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]Int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            for j := i; j >= 0; j-- {\n                if lst[j] == max {\n                    result[j], result[i] = result[i], result[j]\n                    break\n                }\n            }\n        }\n    }\n\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if i == min_index {\n            lst[i], lst[max_index] = lst[max_index], lst[i]\n            max_index--\n        } else if i == max_index {\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n            min_index++\n        } else {\n            lst[i], lst[min_index], lst[max_index] = lst[max_index], lst[min_index], lst[i]\n            min_index++\n            max_index--\n        }\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result = append(result, lst[i])\n        }\n        if lst[i] == max {\n            result = append(result, lst[i])\n        }\n    }\n    result = append(result, min)\n    result = append(result, max)\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[0:len(lst)])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index+1], lst[max_index:min_index:-1])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[1:]), min, max)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(strange_sort_list(lst[:min]), max, strange_sort_list(lst[min:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append(lst[:0], min, max)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 1; i > min_index; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := min_index; i <= max_index; i++ {\n        lst[min_index], lst[i] = lst[i], lst[min_index]\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    max_index := len(lst) - 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    for i := min_index; i <= max_index; i++ {\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst, min, max)",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n\n    max_index := 0\n    max_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    var result = make([]Int, len(lst))\n    var min = lst[0]\n    var max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n        if lst[i] == max {\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:])",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min := lst[0]\n  max := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n    if lst[i] > max {\n      max = lst[i]\n    }\n  }\n  return append(lst, min, max)",
    "    var result = [Int]{}\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            result = append(result, lst[i])\n        } else if i == len(lst) - 1 {\n            result = append(result, lst[i])\n        } else {\n            result = append(result, lst[i])\n            result = append(result, lst[i])\n            result = append(result, lst[i])\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i - 1] {\n            lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        }\n    }\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst[1:]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    max_index := len(lst) - 1\n\n    for min_index < max_index {\n        if lst[min_index] > lst[max_index] {\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n        }\n        min_index += 1\n        max_index -= 1\n    }\n\n    return lst",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0:0], min, max, lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[0], lst[min_index] = lst[min_index], lst[0]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, lst...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n\n    min_index := 0\n    min_value := lst[0]\n\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n\n    max_index := 0\n    max_value := lst[0]\n\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_value {\n            max_value = lst[i]\n            max_index = i\n        }\n    }\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]Int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[min_index] {\n            min_index = i\n        }\n    }\n    max_index := len(lst) - 1\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[max_index] {\n            max_index = i\n        }\n    }\n    return append(lst[min_index:max_index + 1], lst[max_index:min_index - 1]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min_index := 0\n    min_value := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value = lst[i]\n            min_index = i\n        }\n    }\n    lst[min_index], lst[0] = lst[0], lst[min_index]\n    return strange_sort_list(lst[1:])",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, i := range lst[1:] {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, strange_sort_list(lst[1:])...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]Int{min, max}, lst[1:len(lst)]...)",
    "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst",
    "  if len(lst) == 0 {\n    return lst\n  }\n  min_index := 0\n  min_value := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  lst[0], lst[min_index] = lst[min_index], lst[0]\n  return strange_sort_list(lst[1:])"
  ],
  "stop_tokens": [
    "\n}"
  ]
}