name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>>\
  \ maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
  \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
  \ [Int], k: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ['    ', '    ', "\t// write your code here\n\tn := len(arr)\n\tif n\
    \ < k {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor i := 1; i < k; i++ {\n\
    \t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\t\n\tresult := make([]Int,\
    \ k)\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = max\n\t}\n\t\n\tfor i := k;\
    \ i < n; i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t\tfor j :=\
    \ k - 1; j >= 0; j-- {\n\t\t\tif arr[j] > max {\n\t\t\t\tmax = arr[j]\n\t\t\t\
    }\n\t\t\tresult[j] = max\n\t\t}\n\t}\n\t\n\treturn result", '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', "\t// write your code here\n\tn\
    \ := len(arr)\n\tif n < k {\n\t\treturn arr\n\t}\n\t\n\tsort.Slice(arr, func(i,\
    \ j int) bool {\n\t\treturn arr[i] > arr[j]\n\t})\n\t\n\treturn arr[:k]", '    ',
  "\t", "\t// write your code here\n\treturn nil", '    ', '    ', '    ', '    ',
  '    ', "\t// sort arr\n\tsort.Ints(arr)\n\t// return the first k elements\n\treturn\
    \ arr[:k]", '    ', '    ', '    ', '    ', '    ', "\t// write your code here\n\
    \tif k == 0 {\n\t\treturn []Int{}\n\t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\t\
    if len(arr) == 0 {\n\t\treturn []Int{}\n\t}\n\tif len(arr) == 1 {\n\t\treturn\
    \ arr\n\t}\n\tif len(arr) == 2 {\n\t\treturn arr\n\t}\n\tif len(arr) == 3 {\n\t\
    \treturn arr\n\t}\n\tif len(arr) == 4 {\n\t\treturn arr\n\t}\n\tif len(arr) ==\
    \ 5 {\n\t\treturn arr\n\t}\n\tif len(arr) == 6 {\n\t\treturn arr\n\t}\n\tif len(arr)\
    \ == 7 {\n\t\treturn arr\n\t}\n\tif len(arr) == 8 {\n\t\treturn arr\n\t}\n\tif\
    \ len(arr) == 9 {\n\t\treturn arr\n\t}\n\tif len(arr) == 10 {\n\t\treturn arr\n\
    \t}\n\tif len(arr) == 11 {\n\t\treturn arr\n\t}\n\tif len(arr) == 12 {\n\t\treturn\
    \ arr\n\t}\n\tif len(arr) == 13 {\n\t\treturn arr\n\t}\n\tif len(arr) == 14 {\n\
    \t\treturn arr\n\t}\n\tif len(arr) == 15 {\n\t\treturn arr\n\t}\n\tif len(arr)\
    \ == 16 {\n\t\treturn arr\n\t}\n\tif len(arr) == 17 {\n\t\treturn arr\n\t}\n\t\
    if len(arr) == 18 {\n\t\treturn arr\n\t}\n\tif len(arr) == 19 {\n\t\treturn arr\n\
    \t}\n\tif len(arr) == 20 {\n\t\treturn arr\n\t}\n\tif len(arr) == 21 {\n\t\treturn\
    \ arr\n\t}\n\tif len(arr) == 22 {\n\t\treturn arr\n\t}\n\tif len(arr) == 23 {\n\
    \t\treturn arr\n\t}\n\tif len(arr) == 24 {\n\t\treturn arr\n\t}\n\tif len(arr)\
    \ == 25 {\n\t\treturn arr\n\t}\n\tif len(arr) == 26 {\n\t\treturn arr\n\t}\n\t\
    if len(arr) == 27 {\n\t\treturn", '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\t// write your code here\n\
    \tif k < 1 {\n\t\treturn arr\n\t}\n\t\n\tif k > len(arr) {\n\t\treturn arr\n\t\
    }\n\t\n\tmax := arr[0]\n\tfor i := 1; i < k; i++ {\n\t\tif arr[i] > max {\n\t\t\
    \tmax = arr[i]\n\t\t}\n\t}\n\t\n\tfor i := 0; i < k; i++ {\n\t\tarr[i] = max\n\
    \t}\n\t\n\treturn arr", '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', "\t// write your code here\n\treturn nil",
  '    ', "\t// write your code here\n\tif k == 0 {\n\t\treturn []Int{}\n\t}\n\tif\
    \ k == 1 {\n\t\treturn arr\n\t}\n\tif k > len(arr) {\n\t\treturn arr\n\t}\n\t\
    if k > len(arr)/2 {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor i := 1; i\
    \ < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\t\
    \n\treturn arr[:k]", '    ', "\t// write your code here\n\tif k == 0 {\n\t\treturn\
    \ []int{}\n\t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor\
    \ i := 1; i < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t\
    }\n\t}\n\t\n\tresult := make([]int, k)\n\tfor i := 0; i < k; i++ {\n\t\tresult[i]\
    \ = max\n\t}\n\t\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\
    \t\tmax = arr[i]\n\t\t}\n\t}\n\t\n\tfor i := 0; i < k; i++ {\n\t\tif max == arr[i]\
    \ {\n\t\t\tresult[i] = max\n\t\t}\n\t}\n\t\n\treturn result", '    ', '    ',
  "\t// write your code here\n\tif len(arr) < k {\n\t\treturn arr\n\t}\n\t\n\tmax\
    \ := arr[0]\n\tfor i := 1; i < k; i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\
    \t\t}\n\t}\n\t\n\treturn arr[:k]", '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', "\t// write your code here\n\tn := len(arr)\n\tif n == 0\
    \ {\n\t\treturn arr\n\t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\tif k > n {\n\t\
    \treturn arr\n\t}\n\tif k == n {\n\t\treturn arr\n\t}\n\tif k == 2 {\n\t\treturn\
    \ arr[0], arr[1]\n\t}\n\tif k == 3 {\n\t\treturn arr[0], arr[1], arr[2]\n\t}\n\
    \tif k == 4 {\n\t\treturn arr[0], arr[1], arr[2], arr[3]\n\t}\n\tif k == 5 {\n\
    \t\treturn arr[0], arr[1], arr[2], arr[3], arr[4]\n\t}\n\tif k == 6 {\n\t\treturn\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]\n\t}\n\tif k == 7 {\n\t\treturn\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]\n\t}\n\tif k == 8 {\n\
    \t\treturn arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]\n\t\
    }\n\tif k == 9 {\n\t\treturn arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6],\
    \ arr[7], arr[8]\n\t}\n\tif k == 10 {\n\t\treturn arr[0], arr[1], arr[2], arr[3],\
    \ arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]\n\t}\n\tif k == 11 {\n\t\treturn\
    \ arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9],\
    \ arr[10]\n\t}\n\tif k == 12 {\n\t\treturn arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8], arr[9], arr[", "\t// sort arr\n\tsort.Ints(arr)\n\
    \t\n\t// init result\n\tresult := make([]int, k)\n\t\n\t// init max\n\tmax :=\
    \ arr[0]\n\t\n\t// init maxIndex\n\tmaxIndex := 0\n\t\n\t// for each i in arr\n\
    \tfor i := 0; i < len(arr); i++ {\n\t\t// if arr[i] > max\n\t\tif arr[i] > max\
    \ {\n\t\t\t// max = arr[i]\n\t\t\tmax = arr[i]\n\t\t\t\n\t\t\t// maxIndex = i\n\
    \t\t\tmaxIndex = i\n\t\t}\n\t\t\n\t\t// if k == i\n\t\tif i == k-1 {\n\t\t\t//\
    \ result[i] = max\n\t\t\tresult[i] = max\n\t\t} else {\n\t\t\t// if arr[i] > max\n\
    \t\t\tif arr[i] > max {\n\t\t\t\t// max = arr[i]\n\t\t\t\tmax = arr[i]\n\t\t\t\
    \t\n\t\t\t\t// maxIndex = i\n\t\t\t\tmaxIndex = i\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    // return result\n\treturn result", '    ', '    ', '    ', '    ', "\t// write\
    \ your code here\n\treturn nil", '    ', '    ', '    ', '    ', '    ', "\t//\
    \ sort arr\n\tsort.Ints(arr)\n\t// return the first k elements\n\treturn arr[:k]",
  '    ', '    ', "\t// write your code here\n\treturn nil", '    ', "\t// sort arr\n\
    \tsort.Ints(arr)\n\t// init result\n\tresult := make([]int, k)\n\t// init max\n\
    \tmax := arr[0]\n\t// init maxIndex\n\tmaxIndex := 0\n\t// for each element in\
    \ arr\n\tfor i := 0; i < len(arr); i++ {\n\t\t// if current element is greater\
    \ than max\n\t\tif arr[i] > max {\n\t\t\t// update max\n\t\t\tmax = arr[i]\n\t\
    \t\t// update maxIndex\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\t// copy maxIndex elements\
    \ to result\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = arr[maxIndex]\n\t\t//\
    \ update maxIndex\n\t\tmaxIndex = maxIndex + 1\n\t\t// if maxIndex is greater\
    \ than len(arr)\n\t\tif maxIndex > len(arr) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\
    \ result", '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\t\
    // write your code here\n\treturn nil", '    ', "\t// write your code here\n\t\
    n := len(arr)\n\tif k > n {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor i\
    \ := 1; i < n; i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\t\
    \n\tresult := make([]Int, k)\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = max\n\
    \t}\n\t\n\tfor i := k; i < n; i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\
    \t\t}\n\t\tresult[i%k] = max\n\t}\n\t\n\treturn result", '    ', '    ', '    ',
  '    ', '    ', '    ', "\t// write your code here\n\treturn nil", "\t// sort arr\n\
    \tsort.Ints(arr)\n\t// get the k-th largest element\n\tresult := make([]Int, k)\n\
    \tfor i := 0; i < k; i++ {\n\t\tresult[i] = arr[len(arr)-k+i]\n\t}\n\treturn result",
  '    ', '    ', '    ', "\t// sort the array\n\tsort.Ints(arr)\n\t\n\t// return\
    \ the k largest elements\n\treturn arr[len(arr)-k:]", "\t// sort arr\n\tsort.Ints(arr)\n\
    \t// init result\n\tresult := make([]int, k)\n\t// init max\n\tmax := arr[0]\n\
    \t// init max index\n\tmaxIndex := 0\n\t// init maxIndex\n\tfor i := 1; i < len(arr);\
    \ i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t\tmaxIndex = i\n\t\t}\n\
    \t}\n\t// fill result\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = max\n\t}\n\t\
    // fill result\n\tfor i := k; i < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\
    \tmax = arr[i]\n\t\t\tmaxIndex = i\n\t\t}\n\t\tresult[i-k] = max\n\t}\n\treturn\
    \ result", '    ', '    ', "\t", '    ', "\t// sort arr\n\tsort.Ints(arr)\n\t\
    // return the first k elements\n\treturn arr[:k]", '    ', '    ', '    ', "\t\
    n := len(arr)\n\tif n == 0 {\n\t\treturn []Int{}\n\t}\n\tif k == 1 {\n\t\treturn\
    \ []Int{arr[0]}\n\t}\n\tif k > n {\n\t\treturn []Int{}\n\t}\n\tif k == n {\n\t\
    \treturn arr\n\t}\n\tmax := arr[0]\n\tfor i := 1; i < n; i++ {\n\t\tif arr[i]\
    \ > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\tresult := make([]Int, k)\n\tfor i\
    \ := 0; i < k; i++ {\n\t\tresult[i] = max\n\t\tmax = max - arr[i]\n\t}\n\treturn\
    \ result", '    ', '    ', "\t// write your code here\n\treturn nil", "\t// write\
    \ your code here\n\treturn nil", '    ', '    ', "\t// write your code here\n\t\
    n := len(arr)\n\tif n == 0 {\n\t\treturn arr\n\t}\n\tif k == 1 {\n\t\treturn arr\n\
    \t}\n\tif k > n {\n\t\treturn arr\n\t}\n\tif k == n {\n\t\treturn arr\n\t}\n\t\
    if k == n-1 {\n\t\treturn arr\n\t}\n\tif k == n-2 {\n\t\treturn arr\n\t}\n\tif\
    \ k == n-3 {\n\t\treturn arr\n\t}\n\tif k == n-4 {\n\t\treturn arr\n\t}\n\tif\
    \ k == n-5 {\n\t\treturn arr\n\t}\n\tif k == n-6 {\n\t\treturn arr\n\t}\n\tif\
    \ k == n-7 {\n\t\treturn arr\n\t}\n\tif k == n-8 {\n\t\treturn arr\n\t}\n\tif\
    \ k == n-9 {\n\t\treturn arr\n\t}\n\tif k == n-10 {\n\t\treturn arr\n\t}\n\tif\
    \ k == n-11 {\n\t\treturn arr\n\t}\n\tif k == n-12 {\n\t\treturn arr\n\t}\n\t\
    if k == n-13 {\n\t\treturn arr\n\t}\n\tif k == n-14 {\n\t\treturn arr\n\t}\n\t\
    if k == n-15 {\n\t\treturn arr\n\t}\n\tif k == n-16 {\n\t\treturn arr\n\t}\n\t\
    if k == n-17 {\n\t\treturn arr\n\t}\n\tif k == n-18 {\n\t\treturn arr\n\t}\n\t\
    if k == n-19 {\n\t\treturn arr\n\t}\n\tif k == n-20 {\n\t\treturn arr\n\t}\n\t\
    if k == n-21 {\n\t\treturn arr\n\t}\n\tif k == n-22 {\n\t\treturn arr\n\t}\n\t\
    if k == n-23 {\n\t\treturn arr\n\t}\n\tif k == n-24 {\n\t\treturn arr\n\t}\n\t\
    if k == n-25 {\n\t\treturn arr\n\t}\n\tif k == n-26 {\n\t\treturn arr\n\t}\n\t\
    if k == n-27 {\n\t\treturn arr\n\t}\n\tif k == n-28 {\n", '    ', "\t// use a\
    \ heap to store the k largest numbers\n\t// heap.Init()\n\t// heap.Push(arr[0])\n\
    \t// heap.Push(arr[1])\n\t// heap.Push(arr[2])\n\t// heap.Push(arr[3])\n\t// heap.Push(arr[4])\n\
    \t// heap.Push(arr[5])\n\t// heap.Push(arr[6])\n\t// heap.Push(arr[7])\n\t// heap.Push(arr[8])\n\
    \t// heap.Push(arr[9])\n\t// heap.Push(arr[10])\n\t// heap.Push(arr[11])\n\t//\
    \ heap.Push(arr[12])\n\t// heap.Push(arr[13])\n\t// heap.Push(arr[14])\n\t// heap.Push(arr[15])\n\
    \t// heap.Push(arr[16])\n\t// heap.Push(arr[17])\n\t// heap.Push(arr[18])\n\t\
    // heap.Push(arr[19])\n\t// heap.Push(arr[20])\n\t// heap.Push(arr[21])\n\t//\
    \ heap.Push(arr[22])\n\t// heap.Push(arr[23])\n\t// heap.Push(arr[24])\n\t// heap.Push(arr[25])\n\
    \t// heap.Push(arr[26])\n\t// heap.Push(arr[27])\n\t// heap.Push(arr[28])\n\t\
    // heap.Push(arr[29])\n\t// heap.Push(arr[30])\n\t// heap.Push(arr[31])\n\t//\
    \ heap.Push(arr[32])\n\t// heap.Push(arr[33])\n\t// heap.Push(arr[34])\n\t// heap.Push(arr[35])\n\
    \t// heap.Push(arr[36])\n\t// heap.Push(arr[37])\n\t// heap.Push(arr[38])\n\t\
    // heap.Push(arr[39])\n\t// heap.Push(arr[40])\n\t// heap.Push(arr[41])\n\t//\
    \ heap.Push(arr[42])\n\t// heap.Push(arr[43])\n\t// heap.Push(arr[44", '    ',
  "\t", '    ', '    ', "\t// write your code here\n\tif k <= 0 {\n\t\treturn []Int{}\n\
    \t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\tif len(arr) == 0 {\n\t\treturn []Int{}\n\
    \t}\n\tif len(arr) == 1 {\n\t\treturn arr\n\t}\n\tif arr[0] > arr[1] {\n\t\tarr[0],\
    \ arr[1] = arr[1], arr[0]\n\t}\n\tif arr[0] > arr[2] {\n\t\tarr[0], arr[2] = arr[2],\
    \ arr[0]\n\t}\n\tif arr[1] > arr[2] {\n\t\tarr[1], arr[2] = arr[2], arr[1]\n\t\
    }\n\tif arr[0] > arr[1] {\n\t\tarr[0], arr[1] = arr[1], arr[0]\n\t}\n\tif arr[0]\
    \ > arr[2] {\n\t\tarr[0], arr[2] = arr[2], arr[0]\n\t}\n\tif arr[1] > arr[2] {\n\
    \t\tarr[1], arr[2] = arr[2], arr[1]\n\t}\n\tif arr[0] > arr[1] {\n\t\tarr[0],\
    \ arr[1] = arr[1], arr[0]\n\t}\n\tif arr[0] > arr[2] {\n\t\tarr[0], arr[2] = arr[2],\
    \ arr[0]\n\t}\n\tif arr[1] > arr[2] {\n\t\tarr[1], arr[2] = arr[2], arr[1]\n\t\
    }\n\tif arr[0] > arr[1] {\n\t\tarr[0], arr[1] = arr[1], arr[0]\n\t}\n\tif arr[0]\
    \ > arr[2] {\n\t\tarr[0], arr[2] = arr[2], arr[0]\n\t}\n\tif arr[1] > arr[2] {\n\
    \t\tarr[1], arr[2] = arr[2], arr[1]\n\t}\n\tif arr[0] > arr[1] {\n\t\tarr[0",
  '    ', "\t// sort arr\n\tsort.Ints(arr)\n\t// return the first k elements\n\treturn\
    \ arr[:k]", '    ', '    ', '    ', '    ', "\t// sort arr\n\tsort.Ints(arr)\n\
    \t\n\t// return the first k elements\n\treturn arr[:k]", '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\t// write your code here\n\
    \tif k == 0 {\n\t\treturn []Int{}\n\t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\t\
    if k > len(arr) {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor i := 1; i <\
    \ len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\t\n\
    \tresult := make([]Int, k)\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = max\n\t\
    \tmax = max - arr[i]\n\t}\n\treturn result", "\t// write your code here\n\tif\
    \ k == 0 {\n\t\treturn []Int{}\n\t}\n\tif k == 1 {\n\t\treturn arr\n\t}\n\t\n\t\
    max := arr[0]\n\tmaxIndex := 0\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i]\
    \ > max {\n\t\t\tmax = arr[i]\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\t\n\tresult :=\
    \ make([]Int, k)\n\tfor i := 0; i < k; i++ {\n\t\tresult[i] = max\n\t\tmax = arr[maxIndex]\n\
    \t\tmaxIndex = (maxIndex + 1) % len(arr)\n\t}\n\treturn result", '    ', "\t//\
    \ write your code here\n\tif k <= 0 {\n\t\treturn arr\n\t}\n\t\n\tn := len(arr)\n\
    \tif n == 0 {\n\t\treturn arr\n\t}\n\t\n\tif n == 1 {\n\t\treturn arr\n\t}\n\t\
    \n\tif k == 1 {\n\t\treturn arr\n\t}\n\t\n\tif k == 2 {\n\t\treturn arr[0:2]\n\
    \t}\n\t\n\tif k == n {\n\t\treturn arr\n\t}\n\t\n\tif k > n {\n\t\treturn arr\n\
    \t}\n\t\n\tmax := arr[0]\n\tfor i := 1; i < n; i++ {\n\t\tif arr[i] > max {\n\t\
    \t\tmax = arr[i]\n\t\t}\n\t}\n\t\n\treturn arr[0:k]", '    ', '    ', '    ',
  '    ', '    ', "\t// write your code here\n\treturn nil", '    ', '    ', "\t//\
    \ write your code here\n\tn := len(arr)\n\tif n == 0 {\n\t\treturn []Int{}\n\t\
    }\n\tif k == 1 {\n\t\treturn []Int{arr[0]}\n\t}\n\tif k == n {\n\t\treturn arr\n\
    \t}\n\tif k > n {\n\t\treturn []Int{}\n\t}\n\tif k == n-1 {\n\t\treturn arr\n\t\
    }\n\t\n\tmax := arr[0]\n\tfor i := 1; i < n; i++ {\n\t\tif arr[i] > max {\n\t\t\
    \tmax = arr[i]\n\t\t}\n\t}\n\t\n\tresult := []Int{max}\n\tfor i := 1; i < k; i++\
    \ {\n\t\tresult = append(result, arr[i])\n\t}\n\treturn result", '    ', '    ',
  '    ', "\t// write your code here\n\tif k <= 0 {\n\t\treturn []Int{}\n\t}\n\tif\
    \ len(arr) <= k {\n\t\treturn arr\n\t}\n\t\n\tmax := arr[0]\n\tfor i := 1; i <\
    \ len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\t\n\
    \treturn arr[:k]", '    ', '    ', '    ', '    ', '    ', "\t// write your code\
    \ here\n\treturn nil", '    ', '    ', '    ', "\t// write your code here\n\t\
    return nil", '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\t\
    // sort arr\n\tsort.Ints(arr)\n\t// init result\n\tresult := make([]int, k)\n\t\
    // init max\n\tmax := arr[0]\n\t// init maxIndex\n\tmaxIndex := 0\n\t// for each\
    \ i\n\tfor i := 1; i < len(arr); i++ {\n\t\t// if arr[i] > max\n\t\tif arr[i]\
    \ > max {\n\t\t\t// max = arr[i]\n\t\t\tmax = arr[i]\n\t\t\t// maxIndex = i\n\t\
    \t\tmaxIndex = i\n\t\t}\n\t}\n\t// for each i\n\tfor i := 0; i < k; i++ {\n\t\t\
    // result[i] = max\n\t\tresult[i] = max\n\t\t// max = arr[i]\n\t\tmax = arr[i]\n\
    \t\t// maxIndex = i\n\t\tmaxIndex = i\n\t}\n\t// for each i\n\tfor i := len(arr)\
    \ - 1; i >= maxIndex; i-- {\n\t\t// result[i] = arr[i]\n\t\tresult[i] = arr[i]\n\
    \t}\n\treturn result", '    ', '    ', '    ', '    ', '    ', '    ', "\t// sort\
    \ arr\n\tsort.Ints(arr)\n\t// init result\n\tresult := make([]int, k)\n\t// init\
    \ max\n\tmax := arr[0]\n\t// init max index\n\tmaxIndex := 0\n\t// init max index\n\
    \tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\
    \t\t\tmaxIndex = i\n\t\t}\n\t}\n\t// fill result\n\tfor i := 0; i < k; i++ {\n\
    \t\tresult[i] = max\n\t}\n\t// fill result\n\tfor i := maxIndex; i < len(arr);\
    \ i++ {\n\t\tresult[i%k] = arr[i]\n\t}\n\treturn result", '    ', "\t// write\
    \ your code here\n\treturn nil", '    ', '    ']
stop_tokens:
- "\n}"
