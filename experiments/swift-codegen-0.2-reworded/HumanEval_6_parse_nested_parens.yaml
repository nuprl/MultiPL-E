name: HumanEval_6_parse_nested_parens
language: swift
prompt: "\n/// Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n/// For each of the group, output the\
  \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
  \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
  \ String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
  \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
  \ \"(()(())((())))\") == [4])"
completions: ["    var result = []Int{}\n    var stack = []Int{}\n    var paren_count\
    \ = 0\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_count += 1\n            stack = append(stack, paren_count)\n \
    \       } else if char == ')' {\n            paren_count -= 1\n            if\
    \ paren_count == 0 {\n                result = append(result, stack[len(stack)\
    \ - 1])\n                stack = stack[:len(stack) - 1]\n            }\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n        } else if paren_string[i] ==\
    \ ')' {\n            if len(stack) == 0 {\n                result.append(i)\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var level: Int = 0\n    var paren_count: Int = 0\n    for i := 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    stack.append(i)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(level)\n\
    \                level = 0\n            } else {\n                level -= 1\n\
    \                paren_count += 1\n                if paren_count == len(stack)\
    \ {\n                    result.append(level)\n                    level = 0\n\
    \                    paren_count = 0\n                }\n            }\n     \
    \   }\n    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.Push(i)\n        } else if paren_string[i] == ')' {\n \
    \           if len(stack) == 0 {\n                result.Push(i)\n           \
    \ } else {\n                stack.Pop()\n            }\n        }\n    }\n   \
    \ return result", "    var result: [Int] = []\n    var stack: [Int] = []\n   \
    \ var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            stack.append(i)\n            depth +=\
    \ 1\n        } else if paren_string[i] == ')' {\n            if len(stack) ==\
    \ 0 {\n                result.append(depth)\n            } else {\n          \
    \      stack.pop()\n                depth -= 1\n            }\n        }\n   \
    \ }\n    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.append(i)\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result = [Int]{}\n    var stack = [Int]{}\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \    } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n  \
    \              result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                if len(stack) == 0 {\n                    result.Push(i)\n  \
    \              }\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n\
    \    var max_nesting: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            paren_count += 1\n         \
    \   stack.append(paren_count)\n        } else if paren_string[i] == ')' {\n  \
    \          paren_count -= 1\n            if paren_count == 0 {\n             \
    \   max_nesting = max(max_nesting, len(stack) - 1)\n                stack.pop()\n\
    \            }\n        }\n    }\n    result.append(max_nesting)\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n   \
    \ var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    ", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result = []Int{}\n\
    \    var stack = []Int{}\n    for i := 0; i < len(paren_string); i++ {\n     \
    \   if paren_string[i] == '(' {\n            stack = append(stack, i)\n      \
    \  } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n    \
    \            result = append(result, len(stack))\n            } else {\n     \
    \           stack = stack[:len(stack)-1]\n            }\n        }\n    }\n  \
    \  return result", "    var result: [Int] = []\n    var stack: [Int] = []\n  \
    \  var i: Int = 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n        } else if paren_string[i] ==\
    \ ')' {\n            if len(stack) == 0 {\n                result.append(i)\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \        i += 1\n    }\n    return result", "    var result: [Int] = []\n    var\
    \ stack: [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            stack.Push(i)\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.Push(i)\n\
    \            } else {\n                stack.Pop()\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    var paren_count = 0\n    var paren_level = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n \
    \           stack.Push(paren_count)\n            paren_level += 1\n        } else\
    \ if paren_string[i] == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                result.Push(paren_level)\n                paren_count\
    \ = stack.Pop()\n                paren_level = stack.Pop()\n            }\n  \
    \      }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n      \
    \      depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ len(stack) == 0 {\n                result.append(depth)\n            } else\
    \ {\n                stack.pop()\n                depth -= 1\n            }\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.Push(i)\n        } else if paren_string[i] == ')'\
    \ {\n            if len(stack) == 0 {\n                result.Push(i)\n      \
    \      } else {\n                stack.Pop()\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var level: Int = 0\n    var max_level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \        level += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ level == 0 {\n                result.Push(i)\n                max_level = max(max_level,\
    \ level)\n            } else {\n                stack.Pop()\n                level\
    \ -= 1\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]{}\n\
    \    var stack = [Int]{}\n    var depth = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ depth)\n            depth += 1\n        } else if paren_string[i] == ')' {\n\
    \            depth = stack.pop()\n        }\n        result = append(result, depth)\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var i: Int = 0\n    var j: Int = 0\n    for i < len(paren_string)\
    \ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n      \
    \  } else if paren_string[i] == ')' {\n            if len(stack) > 0 {\n     \
    \           result.append(len(stack))\n                stack.pop()\n         \
    \   } else {\n                result.append(0)\n            }\n        }\n   \
    \     i = i + 1\n    }\n    return result", "    var result: [Int] = []\n    var\
    \ stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var level: Int\
    \ = 0\n    var paren_count: Int = 0\n    var paren_count_in_level: Int = 0\n \
    \   var paren_count_in_parent_level: Int = 0\n    var paren_count_in_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_level: Int = 0\n    var\
    \ paren_count_in_parent_parent_parent_parent_level: Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_level:\
    \ Int = 0\n    var paren_count_in_parent_parent_parent_parent_parent_parent_parent",
  "    var result = []Int{}\n    var stack = []Int{}\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ i)\n        } else if paren_string[i] == ')' {\n            if len(stack) ==\
    \ 0 {\n                result = append(result, len(stack))\n            } else\
    \ {\n                stack = stack[0 : len(stack) - 1]\n            }\n      \
    \  }\n    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    var i: Int = 0\n    for i < len(paren_string)\
    \ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n      \
    \      depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.append(i)\n            } else {\n     \
    \           stack.pop()\n                depth -= 1\n            }\n        }\n\
    \        i += 1\n    }\n    return result", "    var result: [Int] = []\n    var\
    \ stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.append(i)\n            } else {\n     \
    \           stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.Push(i)\n        } else if paren_string[i] == ')' {\n \
    \           if stack.Size() == 0 {\n                result.Push(i)\n         \
    \   } else {\n                stack.Pop()\n            }\n        }\n    }\n \
    \   return result", "    var result: [Int] = []\n    var stack: [Int] = []\n \
    \   var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n       \
    \ if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.append(i)\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \      } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n\
    \                result.append(i)\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result = []Int{}\n\
    \    var stack = []Int{}\n    var depth = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ depth)\n            depth += 1\n        } else if paren_string[i] == ')' {\n\
    \            depth -= 1\n            if depth == 0 {\n                result =\
    \ append(result, stack[len(stack) - 1])\n                stack = stack[:len(stack)\
    \ - 1]\n            } else {\n                stack = append(stack, depth)\n \
    \           }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    var paren_count:\
    \ Int = 0\n    var paren_level: Int = 0\n    var paren_level_count: Int = 0\n\
    \    var paren_level_count_stack: [Int] = []\n    var paren_level_count_stack_index:\
    \ Int = 0\n    var paren_level_count_stack_count: Int = 0\n    var paren_level_count_stack_count_index:\
    \ Int = 0\n    var paren_level_count_stack_count_count: Int = 0\n    var paren_level_count_stack_count_count_index:\
    \ Int = 0\n    var paren_level_count_stack_count_count_count: Int = 0\n    var\
    \ paren_level_count_stack_count_count_count_index: Int = 0\n    var paren_level_count_stack_count_count_count_count:\
    \ Int = 0\n    var paren_level_count_stack_count_count_count_count_index: Int\
    \ = 0\n    var paren_level_count_stack_count_count_count_count_count: Int = 0\n\
    \    var paren_level_count_stack_count_count_count_count_count_index: Int = 0\n\
    \    var paren_level_count_stack_count_count_count_count_count_count: Int = 0\n\
    \    var paren_level_count_stack_count_count_count_count_count_count_index: Int\
    \ = 0\n    var paren_level_count_stack_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_level_count_stack_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_level_count_stack_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_level_count_stack_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_level_count_stack_count_count_", "    var result: [Int]\
    \ = []\n    var stack: [Int] = []\n    var current_level: Int = 0\n    var current_paren:\
    \ Int = 0\n    var current_paren_count: Int = 0\n    var current_paren_count_max:\
    \ Int = 0\n    var current_paren_count_min: Int = 0\n    var current_paren_count_max_min:\
    \ Int = 0\n    var current_paren_count_min_max: Int = 0\n    var current_paren_count_min_max_max:\
    \ Int = 0\n    var current_paren_count_min_max_min: Int = 0\n    var current_paren_count_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min: Int = 0\n    var current_paren_count_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min: Int = 0\n\
    \    var current_paren_count_min_max_min_max_min_max_min_max: Int = 0\n    var\
    \ current_paren_count_min_max_min_max_min_max_min_max_min: Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(depth)\n            depth += 1\n        } else if\
    \ paren_string[i] == ')' {\n            depth -= 1\n            if depth < 0 {\n\
    \                panic(\"Invalid paren string\")\n            }\n            if\
    \ len(stack) > 0 {\n                result.append(stack.pop())\n            }\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var paren_depth: Int = 0\n   \
    \ var paren_index: Int = 0\n    var paren_string_index: Int = 0\n    var paren_string_length:\
    \ Int = len(paren_string)\n    for paren_index < paren_string_length {\n     \
    \   if paren_string[paren_index] == '(' {\n            paren_count += 1\n    \
    \        stack.append(paren_count)\n            paren_depth = 0\n            paren_index\
    \ += 1\n        } else if paren_string[paren_index] == ')' {\n            paren_depth\
    \ += 1\n            if paren_depth == 1 {\n                result.append(stack.pop())\n\
    \            }\n            paren_index += 1\n        } else {\n            paren_index\
    \ += 1\n        }\n    }\n    return result", "    var result: [Int] = []\n  \
    \  var stack: [Int] = []\n    var level: Int = 0\n    var paren_count: Int = 0\n\
    \    var i: Int = 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            level += 1\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    result.append(level)\n                level = 0\n            } else {\n \
    \               level -= 1\n                paren_count += 1\n               \
    \ if paren_count == len(stack) {\n                    result.append(level)\n \
    \                   level = 0\n                    paren_count = 0\n         \
    \       }\n            }\n        }\n        i += 1\n    }\n    return result",
  "    var result: [Int] = []\n    var paren_stack: [Int] = []\n    var paren_count:\
    \ Int = 0\n    var paren_depth: Int = 0\n    var paren_count_stack: [Int] = []\n\
    \    var paren_depth_stack: [Int] = []\n    var paren_count_stack_top: Int = 0\n\
    \    var paren_depth_stack_top: Int = 0\n    var paren_count_stack_top_prev: Int\
    \ = 0\n    var paren_depth_stack_top_prev: Int = 0\n    var paren_count_stack_top_prev_prev:\
    \ Int = 0\n    var paren_depth_stack_top_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev:\
    \ Int = 0\n    var paren_depth_stack_top_prev_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_depth_stack_top_prev_prev_prev_prev: Int = 0\n    var\
    \ paren_count_stack_top_prev_prev_prev_prev_prev: Int = 0\n    var paren_depth_stack_top_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev: Int =\
    \ 0\n    var paren_depth_stack_top_prev_prev_prev_prev_prev_prev: Int = 0\n  \
    \  var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev: Int = 0\n   \
    \ var paren_depth_stack_top_prev_prev_prev_prev_prev_prev_prev_prev: Int = 0\n\
    \    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev: Int\
    \ = 0\n    var paren_depth_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          level += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if len(stack) == 0 {\n                result.append(level)\n              \
    \  level = 0\n            } else {\n                level -= 1\n             \
    \   stack.pop()\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for\
    \ i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n\
    \            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ paren_count: Int = 0\n    var paren_level: Int = 0\n    var paren_level_stack:\
    \ [Int] = []\n    var paren_level_stack_count: Int = 0\n    var paren_level_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count: Int = 0\n    var paren_level_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count: Int = 0\n\
    \    var paren_level_stack_count_stack_count_stack_count_stack: [Int] = []\n \
    \   var paren_level_stack_count_stack_count_stack_count_stack_count: Int = 0\n\
    \    var paren_level_stack_count_stack_count_stack_count_stack_count_stack: [Int]\
    \ = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \    } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n  \
    \              result.Push(i)\n            } else {\n                stack.Pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    for i := 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    paren_count += 1\n            stack.append(paren_count)\n        } else if\
    \ paren_string[i] == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                result.append(stack.pop())\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(depth)\n      \
    \      depth += 1\n        } else if paren_string[i] == ')' {\n            depth\
    \ -= 1\n            if depth == 0 {\n                result.append(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var current_level: Int = 0\n    var max_level:\
    \ Int = 0\n    var i: Int = 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            current_level += 1\n    \
    \        if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if paren_string[i] == ')' {\n            if current_level\
    \ == 0 {\n                result.append(max_level)\n                max_level\
    \ = 0\n            } else {\n                current_level -= 1\n            }\n\
    \        }\n        i += 1\n    }\n    return result", "    var result: [Int]\
    \ = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i <\
    \ len(paren_string); i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n\
    \            depth += 1\n        } else if paren_string[i] == ')' {\n        \
    \    if len(stack) == 0 {\n                result.append(depth)\n            }\
    \ else {\n                stack.pop()\n                depth -= 1\n          \
    \  }\n        }\n    }\n    return result", "    var result = [Int]{}\n    var\
    \ stack = [Int]{}\n    var depth = 0\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            stack = append(stack, depth)\n\
    \            depth += 1\n        } else if paren_string[i] == ')' {\n        \
    \    depth -= 1\n            if depth < 0 {\n                panic(\"Invalid input\"\
    )\n            }\n            stack = stack[:len(stack) - 1]\n            if len(stack)\
    \ == 0 {\n                result = append(result, depth)\n            }\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var current_level: Int = 0\n    var current_paren: Int = 0\n\
    \    var current_paren_count: Int = 0\n    var current_paren_count_max: Int =\
    \ 0\n    var current_paren_count_min: Int = 0\n    var current_paren_count_min_max:\
    \ Int = 0\n    var current_paren_count_min_min: Int = 0\n    var current_paren_count_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_max: Int = 0\n    var current_paren_count_min_max_min_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min: Int = 0\n    var\
    \ current_paren_count_min_max_min_min_max_min_max: Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max: Int\
    \ = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min: Int\
    \ = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min_max_min_max_min:\
    \ Int = 0\n    var current_paren_count_min_max_min_min_max_min_max_min_max_min_max_min_max_min_max:\
    \ Int = 0\n    var current_paren_count_min_", "    var result: [Int] = []\n  \
    \  var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var level:\
    \ Int = 0\n    var paren_count: Int = 0\n    var paren_count_stack: [Int] = []\n\
    \    var paren_count_stack_top: Int = 0\n    var paren_count_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top: Int = 0\n    var paren_count_stack_top_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top_stack_top: Int = 0\n   \
    \ var paren_count_stack_top_stack_top_stack_top_stack: [Int] = []\n    var paren_count_stack_top_stack_top_stack_top_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack:\
    \ [Int] = []\n    var paren_count_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack_top_stack",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n\
    \    var paren_count: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n            level\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.Push(level)\n                level = 0\n    \
    \        } else {\n                level -= 1\n                paren_count +=\
    \ 1\n                if paren_count == len(stack) {\n                    result.Push(level)\n\
    \                    level = 0\n                    paren_count = 0\n        \
    \        }\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.Push(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if depth == 0 {\n                result.Push(i)\n    \
    \        } else {\n                stack.Pop()\n                depth -= 1\n \
    \           }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.Push(i)\n            } else {\n       \
    \         stack.Pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \    } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n  \
    \              result.Push(i)\n            } else {\n                stack.Pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ depth: Int = 0\n    var max_depth: Int = 0\n    var paren_count: Int = 0\n \
    \   var paren_string: String = \"\"\n    var paren_stack: [Int] = []\n    var\
    \ paren_count_stack: [Int] = []\n    var paren_count_stack_copy: [Int] = []\n\
    \    var paren_count_stack_copy_copy: [Int] = []\n    var paren_count_stack_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy: [Int] = []\n    var\
    \ paren_count_stack_copy_copy_copy_copy_copy: [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy: [Int]\
    \ = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy: [Int]\
    \ = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy:\
    \ [Int] = []\n    var paren_count_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \                depth = 0\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \    } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n  \
    \              result.Push(i)\n            } else {\n                stack.Pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var paren_level:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \            paren_level = len(stack) - 1\n        } else if paren_string[i] ==\
    \ ')' {\n            paren_count -= 1\n            if paren_count == 0 {\n   \
    \             result.append(paren_level)\n                paren_count = stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ level: Int = 0\n    var paren_count: Int = 0\n    var paren_count_stack: [Int]\
    \ = []\n    var paren_count_stack_index: Int = 0\n    var paren_count_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_index: Int = 0\n    var paren_count_stack_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_index: Int = 0\n    var paren_count_stack_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_index: Int = 0\n    var\
    \ paren_count_stack_top_top_top_top_top_top: Int = 0\n    var paren_count_stack_top_top_top_top_top_top_index:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top: Int = 0\n  \
    \  var paren_count_stack_top_top_top_top_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_index: Int\
    \ = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_top: Int = 0\n\
    \    var paren_count_stack_top_top_top_top_top_top_top_top_top_index", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var i: Int = 0\n    for i\
    \ < len(paren_string) {\n        if paren_string[i] == '(' {\n            stack.append(i)\n\
    \        } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n\
    \                result.append(i)\n            } else {\n                stack.pop()\n\
    \            }\n        }\n        i += 1\n    }\n    return result", "    var\
    \ result = [Int]{}\n    var stack = [Int]{}\n    var paren_count = 0\n    var\
    \ paren_depth = 0\n    var paren_index = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_depth\
    \ = 0\n    var paren_end_depth = 0\n    var paren_start_count = 0\n    var paren_end_count\
    \ = 0\n    var paren_start_index_count = 0\n    var paren_end_index_count = 0\n\
    \    var paren_start_depth_count = 0\n    var paren_end_depth_count = 0\n    var\
    \ paren_start_count_count = 0\n    var paren_end_count_count = 0\n    var paren_start_index_count_count\
    \ = 0\n    var paren_end_index_count_count = 0\n    var paren_start_depth_count_count\
    \ = 0\n    var paren_end_depth_count_count = 0\n    var paren_start_count_count_count\
    \ = 0\n    var paren_end_count_count_count = 0\n    var paren_start_index_count_count_count\
    \ = 0\n    var paren_end_index_count_count_count = 0\n    var paren_start_depth_count_count_count\
    \ = 0\n    var paren_end_depth_count_count_count = 0\n    var paren_start_count_count_count_count\
    \ = 0\n    var paren_end_count_count_count_count = 0\n    var paren_start_index_count_count_count_count\
    \ = 0\n    var paren_end_index_count_count_count_count = 0\n    var paren_start_depth_count_count_count_count\
    \ = 0\n    var paren_end_depth_count_count_count_count = 0\n    var paren_start_count_count_count_count_count\
    \ = 0\n    var paren_end_count_count_count_count_count", "    var result: [Int]\
    \ = []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var max_nesting:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \            if paren_count > max_nesting {\n                max_nesting = paren_count\n\
    \            }\n        } else if paren_string[i] == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                result.append(max_nesting)\n\
    \                max_nesting = 0\n            }\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var stack: [Int] = []\n    var current_level:\
    \ Int = 0\n    var current_paren: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            current_level += 1\n\
    \            current_paren += 1\n            stack.append(current_level)\n   \
    \     } else if paren_string[i] == ')' {\n            current_level -= 1\n   \
    \         if current_level == 0 {\n                result.append(current_paren)\n\
    \                current_paren = 0\n            } else {\n                current_paren\
    \ -= 1\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \      } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n\
    \                result.append(i)\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]{}\n\
    \    var stack = [Int]{}\n    var max_depth = 0\n    var current_depth = 0\n \
    \   var current_char = \"\"\n    var current_paren_count = 0\n    var current_paren_index\
    \ = 0\n    var current_paren_string = \"\"\n    var current_paren_string_index\
    \ = 0\n    for i := 0; i < len(paren_string); i++ {\n        current_char = paren_string[i]\n\
    \        if current_char == \"(\") {\n            current_paren_count += 1\n \
    \           current_paren_index = i\n            current_paren_string = \"\"\n\
    \            current_paren_string_index = 0\n        } else if current_char ==\
    \ \")\" {\n            current_paren_count -= 1\n            current_paren_string\
    \ = current_paren_string + current_char\n            current_paren_string_index\
    \ = current_paren_string_index + 1\n        } else if current_char == \" \" {\n\
    \            if current_paren_count == 0 {\n                current_depth = current_depth\
    \ + 1\n                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth\n                }\n                current_depth = current_depth\
    \ - 1\n            }\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result", "    var result: [Int] = []\n    var paren_stack: [Int] =\
    \ []\n    var current_level: Int = 0\n    var current_paren_level: Int = 0\n \
    \   var current_paren_string: String = \"\"\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            current_paren_string\
    \ += paren_string[i]\n            current_paren_level += 1\n            if current_level\
    \ == 0 {\n                current_level = 1\n            }\n            if current_paren_level\
    \ > current_level {\n                current_level = current_paren_level\n   \
    \         }\n        } else if paren_string[i] == ')' {\n            current_paren_string\
    \ += paren_string[i]\n            current_paren_level -= 1\n            if current_paren_level\
    \ < 0 {\n                current_paren_level = 0\n            }\n            if\
    \ current_paren_level == current_level {\n                current_level = current_paren_level\n\
    \            }\n        } else if paren_string[i] == ' ' {\n            if current_paren_level\
    \ == 0 {\n                result = append(result, current_level)\n           \
    \     current_level = 0\n            }\n            current_paren_string += paren_string[i]\n\
    \        }\n    }\n    if current_paren_level > 0 {\n        result = append(result,\
    \ current_level)\n    }\n    return result", "    var result: [Int] = []\n   \
    \ var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.Push(i)\n            } else {\n       \
    \         stack.Pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result = []Int{}\n    var stack = []Int{}\n    var paren_count = 0\n  \
    \  var paren_level = 0\n    var paren_string_len = len(paren_string)\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(level)\n\
    \            level += 1\n        } else if paren_string[i] == ')' {\n        \
    \    level -= 1\n            if len(stack) > 0 {\n                stack.pop()\n\
    \            }\n        }\n        if level == 0 {\n            result.append(stack.len())\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n        } else if paren_string[i] ==\
    \ ')' {\n            if len(stack) == 0 {\n                result.append(i)\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    var paren_count: Int = 0\n    var paren_string:\
    \ String = \"\"\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            paren_count += 1\n            stack.Push(i)\n        }\
    \ else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n       \
    \         panic(\"Invalid paren string\")\n            }\n            var top:\
    \ Int = stack.Pop()\n            var left: Int = stack.Pop()\n            if len(stack)\
    \ == 0 {\n                depth = i - left\n                result.Push(depth)\n\
    \                break\n            } else {\n                depth = i - left\n\
    \                result.Push(depth)\n            }\n        }\n    }\n    return\
    \ result", "    var result = []Int{}\n    var stack = []Int{}\n    var depth =\
    \ 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, depth)\n            depth += 1\n\
    \        } else if paren_string[i] == ')' {\n            depth -= 1\n        \
    \    if len(stack) > 0 {\n                stack = stack[:len(stack) - 1]\n   \
    \         }\n            if depth == 0 {\n                result = append(result,\
    \ depth)\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var current_level: Int = 0\n    var current_paren_level:\
    \ Int = 0\n    var current_paren_string: String = \"\"\n    var current_paren_count:\
    \ Int = 0\n    var current_paren_count_string: String = \"\"\n    var current_paren_count_string_length:\
    \ Int = 0\n    var current_paren_count_string_index: Int = 0\n    var current_paren_count_string_index_end:\
    \ Int = 0\n    var current_paren_count_string_index_start: Int = 0\n    var current_paren_count_string_index_start_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end: Int = 0\n \
    \   var current_paren_count_string_index_start_end_end_end: Int = 0\n    var current_paren_count_string_index_start_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int\
    \ = 0\n    var last_paren_count: Int = 0\n    var last_paren_index: Int = 0\n\
    \    var last_paren_char: String = \"\"\n    var last_paren_char_index: Int =\
    \ 0\n    var last_paren_char_count: Int = 0\n    var last_paren_char_count_index:\
    \ Int = 0\n    var last_paren_char_count_count: Int = 0\n    var last_paren_char_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count: Int = 0\n    var last_paren_char_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count: Int = 0\n    var last_paren_char_count_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count: Int = 0\n  \
    \  var last_paren_char_count_count_count_count_count_index: Int = 0\n    var last_paren_char_count_count_count_count_count_count:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var last_paren_char_count_count_count_count_count", "    var result\
    \ = []Int{}\n    var stack = []Int{}\n    var paren_count = 0\n    for i := 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    paren_count++\n            stack = append(stack, paren_count)\n        }\
    \ else if paren_string[i] == ')' {\n            paren_count--\n            if\
    \ paren_count == 0 {\n                result = append(result, stack[len(stack)\
    \ - 1])\n                stack = stack[:len(stack) - 1]\n            }\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var level: Int = 0\n    var paren_count: Int = 0\n    var paren_index:\
    \ Int = 0\n    var paren_char: String = \"\"\n    var paren_char_index: Int =\
    \ 0\n    var paren_char_count: Int = 0\n    var paren_char_count_index: Int =\
    \ 0\n    var paren_char_count_count: Int = 0\n    var paren_char_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count: Int = 0\n    var paren_char_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count: Int = 0\n    var paren_char_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count: Int = 0\n    var\
    \ paren_char_count_count_count_count_count_index: Int = 0\n    var paren_char_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_index: Int =\
    \ 0\n    var paren_char_count_count_count_count_count_count_count: Int = 0\n \
    \   var paren_char_count_count_count_count_count_count_count_index: Int = 0\n\
    \    var paren_char_count_count_count_count_count_count_count_count: Int = 0\n\
    \    var paren_char_count_count_count_count_count_count_count_count_index: Int\
    \ = 0\n    var paren_char_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_", "    var result = []Int{}\n    var\
    \ stack = []Int{}\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, i)\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result = append(result,\
    \ i)\n            } else {\n                stack = stack[0 : len(stack) - 1]\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ paren_count: Int = 0\n    var max_nesting: Int = 0\n    var max_nesting_index:\
    \ Int = 0\n    var max_nesting_count: Int = 0\n    var max_nesting_count_index:\
    \ Int = 0\n    var paren_count_index: Int = 0\n    var paren_count_count: Int\
    \ = 0\n    var paren_count_count_index: Int = 0\n    var paren_count_count_count:\
    \ Int = 0\n    var paren_count_count_count_index: Int = 0\n    var paren_count_count_count_count:\
    \ Int = 0\n    var paren_count_count_count_count_index: Int = 0\n    var paren_count_count_count_count_count:\
    \ Int = 0\n    var paren_count_count_count_count_count_index: Int = 0\n    var\
    \ paren_count_count_count_count_count_count: Int = 0\n    var paren_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_count_count_count_count_count_count_count: Int = 0\n\
    \    var paren_count_count_count_count_count_count_count_index: Int = 0\n    var\
    \ paren_count_count_count_count_count_count_count_count: Int = 0\n    var paren_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_count_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren", "    var result: [Int] = []\n    var stack: [Int] =\
    \ []\n    var level: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n \
    \       if paren_string[i] == '(' {\n            stack.Push(i)\n            level\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.Push(level)\n            } else {\n         \
    \       stack.Pop()\n                level -= 1\n            }\n        }\n  \
    \  }\n    return result", "    var result: [Int] = []\n    var stack: [Int] =\
    \ []\n    var level: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n \
    \       if paren_string[i] == '(' {\n            stack.append(i)\n           \
    \ level += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(level)\n            } else {\n       \
    \         stack.pop()\n                level -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.Push(i)\n        } else if paren_string[i] == ')'\
    \ {\n            if len(stack) == 0 {\n                result.Push(i)\n      \
    \      } else {\n                stack.Pop()\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n    var\
    \ i = 0\n    var j = 0\n    var depth = 0\n    for i < len(paren_string) {\n \
    \       if paren_string[i] == '(' {\n            stack.append(i)\n           \
    \ depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \        i += 1\n    }\n    return result", "    var result = [Int]{}\n    var\
    \ stack = [Int]{}\n    var level = 0\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            stack = append(stack, level)\n\
    \            level += 1\n        } else if paren_string[i] == ')' {\n        \
    \    level -= 1\n            if level == 0 {\n                result = append(result,\
    \ len(stack) - 1)\n                stack = stack[:len(stack) - 1]\n          \
    \  }\n        }\n    }\n    return result", "    var result: [Int] = []\n    var\
    \ stack: [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            stack.Push(i)\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.Push(i)\n\
    \            } else {\n                stack.Pop()\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    var paren_count = 0\n    var paren_level = 0\n    var paren_index = 0\n \
    \   var paren_string = \"\"\n    for i := 0; i < len(paren_string); i++ {\n  \
    \      if paren_string[i] == '(' {\n            paren_count += 1\n           \
    \ stack = append(stack, paren_count)\n            paren_index = i\n        } else\
    \ if paren_string[i] == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                result = append(result, paren_level)\n             \
    \   paren_level = 0\n                paren_count = 0\n                paren_index\
    \ = 0\n                paren_string = \"\"\n            } else {\n           \
    \     paren_level = stack.pop()\n            }\n        } else {\n           \
    \ paren_level += 1\n        }\n    }\n    return result", "    var result = []Int\n\
    \    var stack = []Int\n    var paren_count = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n \
    \           stack = append(stack, paren_count)\n        } else if paren_string[i]\
    \ == ')' {\n            paren_count -= 1\n            if paren_count == 0 {\n\
    \                result = append(result, stack[len(stack) - 1])\n            \
    \    stack = stack[:len(stack) - 1]\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]{}\n    var stack = [Int]{}\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            paren_count += 1\n         \
    \   stack.Push(paren_count)\n            paren_level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            paren_count -= 1\n            if paren_count == 0 {\n\
    \                result.Push(paren_level)\n                paren_level = 0\n \
    \               stack.Pop()\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          depth += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if depth == 0 {\n                result.append(i)\n            } else {\n \
    \               stack.pop()\n                depth -= 1\n            }\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var paren_stack:\
    \ [Int] = []\n    var current_level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            current_level += 1\n\
    \            paren_stack.append(current_level)\n        } else if paren_string[i]\
    \ == ')' {\n            current_level -= 1\n            if current_level < 0 {\n\
    \                panic(\"Invalid paren string\")\n            }\n            if\
    \ paren_stack.len > 0 {\n                result.append(paren_stack.pop())\n  \
    \          }\n        }\n    }\n    return result", "    var result = [Int]\n\
    \    var stack = [Int]\n    var depth = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.push(i)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var level: Int = 0\n    var paren_count: Int = 0\n    for i := 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    stack.append(i)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(level)\n\
    \            } else {\n                level -= 1\n                paren_count\
    \ += 1\n                if paren_count == len(stack) {\n                    result.append(level)\n\
    \                }\n            }\n            stack.pop()\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack = append(stack, i)\n        } else if paren_string[i] ==\
    \ ')' {\n            if len(stack) == 0 {\n                result = append(result,\
    \ len(stack))\n            } else {\n                stack = stack[0:len(stack)\
    \ - 1]\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var\
    \ paren_level: Int = 0\n    var paren_string: String = \"\"\n    var paren_index:\
    \ Int = 0\n    var paren_char: String = \"\"\n    var paren_char_index: Int =\
    \ 0\n    for paren_index < len(paren_string) {\n        paren_char = paren_string[paren_index]\n\
    \        paren_char_index = paren_index\n        if paren_char == \" \" {\n  \
    \          paren_index += 1\n            continue\n        }\n        if paren_char\
    \ == \"(\" {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \            paren_index += 1\n            continue\n        }\n        if paren_char\
    \ == \")\" {\n            paren_count -= 1\n            if paren_count == 0 {\n\
    \                result.append(stack.pop())\n                paren_level = stack.pop()\n\
    \            }\n            paren_index += 1\n            continue\n        }\n\
    \        if paren_count == 0 {\n            result.append(paren_level)\n     \
    \   }\n        paren_index += 1\n    }\n    return result", "    var result: [Int]\
    \ = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n        }\
    \ else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n       \
    \         result.Push(i)\n            } else {\n                stack.Pop()\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]\n\
    \    var stack = [Int]\n    for i := 0; i < len(paren_string); i++ {\n       \
    \ if paren_string[i] == '(' {\n            stack.push(i)\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.push(i)\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var max_depth: Int = 0\n    var depth: Int = 0\n    for i := 0; i\
    \ < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n          \
    \  stack.Push(depth)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            depth -= 1\n            if depth < 0 {\n             \
    \   panic(\"Invalid input\")\n            }\n            if depth == 0 {\n   \
    \             result.Push(stack.Pop())\n                max_depth = max(max_depth,\
    \ stack.Pop())\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for\
    \ i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n\
    \            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.append(i)\n            } else {\n     \
    \           stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(depth)\n      \
    \      depth += 1\n        } else if paren_string[i] == ')' {\n            depth\
    \ -= 1\n            if depth < 0 {\n                panic(\"Invalid input\")\n\
    \            }\n            if len(stack) > 0 {\n                result.append(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var max_depth: Int = 0\n    var current_depth:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            current_depth += 1\n    \
    \        if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if paren_string[i] == ')' {\n            current_depth\
    \ -= 1\n            if current_depth == 0 {\n                result.append(max_depth)\n\
    \                max_depth = 0\n            }\n            stack.pop()\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.Push(i)\n        } else if paren_string[i] == ')'\
    \ {\n            if len(stack) == 0 {\n                result.Push(i)\n      \
    \      } else {\n                stack.Pop()\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    var paren_count: Int = 0\n    var paren_index: Int\
    \ = 0\n    var paren_char: String = \"\"\n    var paren_char_index: Int = 0\n\
    \    var paren_char_count: Int = 0\n    for i:=0; i<len(paren_string); i++ {\n\
    \        if paren_string[i] == \"(\" {\n            paren_count += 1\n       \
    \     if depth == 0 {\n                paren_index = i\n                paren_char_index\
    \ = 0\n                paren_char_count = 1\n            }\n            depth\
    \ += 1\n        } else if paren_string[i] == \")\" {\n            depth -= 1\n\
    \            if depth == 0 {\n                result.append(paren_count)\n   \
    \             paren_count = 0\n                paren_index = i\n             \
    \   paren_char_index = 0\n                paren_char_count = 1\n            }\n\
    \        } else if paren_string[i] == \" \" {\n            if depth == 0 {\n \
    \               result.append(paren_count)\n                paren_count = 0\n\
    \                paren_index = i\n                paren_char_index = 0\n     \
    \           paren_char_count = 1\n            }\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var stack: [Int] = []\n    var level:\
    \ Int = 0\n    var paren_count: Int = 0\n    var paren_string: String = \"\"\n\
    \    var paren_index: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            paren_count += 1\n         \
    \   stack.Push(i)\n        } else if paren_string[i] == ')' {\n            if\
    \ len(stack) > 0 {\n                result.Push(level)\n                level\
    \ = level - 1\n                stack.Pop()\n            } else {\n           \
    \     result.Push(level)\n            }\n            paren_count -= 1\n      \
    \  }\n        if paren_count == 0 {\n            if len(stack) > 0 {\n       \
    \         result.Push(level)\n                level = level - 1\n            \
    \    stack.Pop()\n            } else {\n                result.Push(level)\n \
    \           }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          depth += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if len(stack) == 0 {\n                result.append(depth)\n            } else\
    \ {\n                stack.pop()\n                depth -= 1\n            }\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var depth: Int = 0\n\
    \    for i < len(paren_string) {\n        if paren_string[i] == '(' {\n      \
    \      stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n        i += 1\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var max_depth: Int = 0\n\
    \    var current_depth: Int = 0\n    var current_char: String = \"\"\n    var\
    \ current_paren_count: Int = 0\n    var current_paren_level: Int = 0\n    var\
    \ current_paren_level_count: Int = 0\n    var current_paren_level_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count: Int = 0\n    var current_paren_level_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count: Int = 0\n\
    \    var current_paren_level_count_count_count_count_count_count: Int = 0\n  \
    \  var current_paren_level_count_count_count_count_count_count_count: Int = 0\n\
    \    var current_paren_level_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var current_paren_level_count_count_count_count_count_", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var max_depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n        } else if paren_string[i] == ')' {\n\
    \            if len(stack) == 0 {\n                result.append(max_depth)\n\
    \                max_depth = 0\n            } else {\n                max_depth\
    \ = max(max_depth, len(stack))\n                stack.pop()\n            }\n \
    \       }\n    }\n    if len(stack) > 0 {\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  depth += 1\n        } else if paren_string[i] == ')' {\n            if depth\
    \ == 0 {\n                result.append(i)\n            } else {\n           \
    \     stack.pop()\n                depth -= 1\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n            } else {\n       \
    \         stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var paren_count: Int = 0\n    var paren_depth: Int = 0\n    for i\
    \ := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n  \
    \          paren_count += 1\n            stack.Push(paren_count)\n           \
    \ paren_depth += 1\n        } else if paren_string[i] == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                result.Push(paren_depth)\n\
    \                paren_depth = 0\n            } else {\n                paren_depth\
    \ = stack.Pop()\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n    for\
    \ i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n\
    \            stack.append(level)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            level -= 1\n            if level == 0 {\n            \
    \    result.append(stack.pop())\n            }\n        }\n    }\n    return result",
  "    var result = [Int]{}\n    var stack = [Int]{}\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ i)\n        } else if paren_string[i] == ')' {\n            if len(stack) ==\
    \ 0 {\n                result = append(result, i)\n            } else {\n    \
    \            stack = stack[:len(stack) - 1]\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var paren_count: Int = 0\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n \
    \           stack.append(paren_count)\n            depth += 1\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    panic(\"Invalid input\")\n            }\n            paren_count = stack.pop()\n\
    \            depth -= 1\n        }\n        if depth == 0 {\n            result.append(paren_count)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var i: Int = 0\n    for i < len(paren_string)\
    \ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n     \
    \       stack.append(paren_count)\n        } else if paren_string[i] == ')' {\n\
    \            paren_count -= 1\n            if paren_count == 0 {\n           \
    \     result.append(stack.pop())\n            }\n        }\n        i += 1\n \
    \   }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    var count = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, count)\n            count++\n  \
    \      } else if paren_string[i] == ')' {\n            count--\n            if\
    \ len(stack) > 0 {\n                result = append(result, stack[len(stack) -\
    \ 1])\n            }\n            stack = stack[0 : len(stack) - 1]\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var max_depth: Int = 0\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            stack.Push(i)\n        }\
    \ else if paren_string[i] == ')' {\n            if stack.Size == 0 {\n       \
    \         panic(\"Error: Unbalanced parentheses\")\n            }\n          \
    \  stack.Pop()\n            if stack.Size > max_depth {\n                max_depth\
    \ = stack.Size\n            }\n        }\n    }\n    if stack.Size > 0 {\n   \
    \     panic(\"Error: Unbalanced parentheses\")\n    }\n    result.Push(max_depth)\n\
    \    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n    var\
    \ level = 0\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         stack.push(level)\n            level += 1\n        } else if c == ')'\
    \ {\n            level -= 1\n            if level < 0 {\n                panic(\"\
    Invalid paren string\")\n            }\n            if len(stack) == 0 {\n   \
    \             result.push(level)\n            } else {\n                result.push(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          depth += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if len(stack) == 0 {\n                result.append(depth)\n              \
    \  depth = 0\n            } else {\n                stack.pop()\n            \
    \    depth -= 1\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var paren_count: Int = 0\n    var paren_level: Int = 0\n    var\
    \ paren_level_stack: [Int] = []\n    var paren_level_stack_count: Int = 0\n  \
    \  var paren_level_stack_count_stack: [Int] = []\n    var paren_level_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack: [Int] = []\n   \
    \ var paren_level_stack_count_stack_count_stack_count: Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count:\
    \ Int = 0\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack:\
    \ [Int] = []\n    var paren_level_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_",
  "    var result = [Int]{}\n    var stack = [Int]{}\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var level = 0\n    var paren_count = 0\n    var paren_stack\
    \ = [Int]{}\n    var paren_stack_count = 0\n    var paren_stack_index = 0\n  \
    \  var paren_stack_index_count = 0\n    var paren_stack_index_count_max = 0\n\
    \    var paren_stack_index_count_min = 0\n    var paren_stack_index_count_min_max\
    \ = 0\n    var paren_stack_index_count_min_min = 0\n    var paren_stack_index_count_min_min_max\
    \ = 0\n    var paren_stack_index_count_min_min_min = 0\n    var paren_stack_index_count_min_min_min_max\
    \ = 0\n    var paren_stack_index_count_min_min_min_min = 0\n    var paren_stack_index_count_min_min_min_min_max\
    \ = 0\n    var paren_stack_index_count_min_min_min_min_min = 0\n    var paren_stack_index_count_min_min_min_min_min_max\
    \ = 0\n    var paren_stack_index_count_min_min_min_min_min_min = 0\n    var paren_stack_index_count_min_min_min_min_min_min_max\
    \ = 0\n    var paren_stack_index_count_min_min_min_min_min_min_min = 0\n    var\
    \ paren_stack_index_count_min_min_min_min_min_min_min_max = 0\n    var paren_stack_index_count_min_min_min_min_min_min_min_min\
    \ = 0\n    var paren_stack_index_count_min_min_min_min_min_min_min_min_max = 0\n\
    \    var paren_stack_index_count_min_min_min_min_min_min_min_min_min", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r:", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(level)\n\
    \            level += 1\n        } else if paren_string[i] == ')' {\n        \
    \    level -= 1\n            if len(stack) > 0 {\n                result.append(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var paren_depth:\
    \ Int = 0\n    var paren_string: String = \"\"\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n \
    \           stack.append(paren_count)\n            paren_depth = 0\n         \
    \   paren_string = paren_string[i+1:]\n            continue\n        }\n     \
    \   if paren_string[i] == ')' {\n            paren_count -= 1\n            if\
    \ paren_count == 0 {\n                result.append(paren_depth)\n           \
    \     paren_string = paren_string[i+1:]\n                continue\n          \
    \  }\n            if paren_count < 0 {\n                panic(\"Invalid paren\
    \ string\")\n            }\n            if stack.pop() != paren_count {\n    \
    \            panic(\"Invalid paren string\")\n            }\n            paren_depth\
    \ = paren_depth + 1\n            paren_string = paren_string[i+1:]\n         \
    \   continue\n        }\n    }\n    if paren_count != 0 {\n        panic(\"Invalid\
    \ paren string\")\n    }\n    return result", "    var result: [Int] = []\n  \
    \  var stack: [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n     \
    \   if paren_string[i] == '(' {\n            stack.append(i)\n        } else if\
    \ paren_string[i] == ')' {\n            if len(stack) > 0 {\n                result.append(len(stack))\n\
    \                stack.pop()\n            } else {\n                result.append(0)\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          depth += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if depth == 0 {\n                result.append(i)\n            } else {\n \
    \               stack.pop()\n                depth -= 1\n            }\n     \
    \   }\n    }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    var i = 0\n    var j = 0\n    var level = 0\n    for i < len(paren_string)\
    \ {\n        if paren_string[i] == '(' {\n            stack.push(i)\n        \
    \    level += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.push(level)\n            } else {\n         \
    \       stack.pop()\n                level -= 1\n            }\n        }\n  \
    \      i += 1\n    }\n    return result", "    var result: [Int] = []\n    var\
    \ stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(depth)\n\
    \            depth += 1\n        } else if paren_string[i] == ')' {\n        \
    \    depth -= 1\n            if depth == 0 {\n                result.append(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(depth)\n\
    \            depth += 1\n        } else if paren_string[i] == ')' {\n        \
    \    depth -= 1\n            if depth == 0 {\n                result.append(stack.pop())\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    result.append(i)\n            } else {\n                stack.pop()\n   \
    \         }\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    var stack: [Int] = []\n    var paren_count: Int = 0\n    var max_depth: Int\
    \ = 0\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            paren_count += 1\n         \
    \   stack.append(paren_count)\n        } else if paren_string[i] == ')' {\n  \
    \          if len(stack) == 0 {\n                panic(\"Invalid input\")\n  \
    \          }\n            depth = stack.pop()\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n            if len(stack)\
    \ == 0 {\n                result.append(max_depth)\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var current_level: Int = 0\n    var current_paren: Int = 0\n    var\
    \ current_paren_count: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            current_paren_count += 1\n \
    \           current_paren = i\n            current_level += 1\n            stack.append(current_paren)\n\
    \        } else if paren_string[i] == ')' {\n            current_paren_count -=\
    \ 1\n            if current_paren_count == 0 {\n                current_level\
    \ -= 1\n                if current_level == 0 {\n                    result.append(current_paren)\n\
    \                }\n                current_paren = stack.pop()\n            \
    \    current_paren_count = 0\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \      } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n\
    \                result.append(i)\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var level: Int = 0\n    var paren_count:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            level += 1\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    result.append(level)\n            } else {\n                level -= 1\n\
    \                paren_count += 1\n                if paren_count == len(stack)\
    \ {\n                    result.append(level)\n                }\n           \
    \ }\n            stack.pop()\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.append(i)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(level)\n\
    \            } else {\n                level -= 1\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ level: Int = 0\n    var max_level: Int = 0\n    var paren_count: Int = 0\n \
    \   var paren_count_stack: [Int] = []\n    var paren_count_stack_top: Int = 0\n\
    \    var paren_count_stack_top_prev: Int = 0\n    var paren_count_stack_top_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev: Int = 0\n \
    \   var paren_count_stack_top_prev_prev_prev_prev_prev_prev: Int = 0\n    var\
    \ paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int", "    var result: [Int] = []\n    var stack: [Int] = []\n    var current_level:\
    \ Int = 0\n    var max_level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          current_level += 1\n            if current_level > max_level {\n  \
    \              max_level = current_level\n            }\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(max_level)\n\
    \                max_level = 0\n            } else {\n                stack.pop()\n\
    \                current_level -= 1\n            }\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var stack: [Int] = []\n    var current_level:\
    \ Int = 0\n    var max_level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            current_level += 1\n\
    \            stack.append(current_level)\n        } else if paren_string[i] ==\
    \ ')' {\n            current_level -= 1\n            if current_level == 0 {\n\
    \                result.append(max_level)\n                max_level = 0\n   \
    \         }\n            if len(stack) > 0 {\n                max_level = stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var paren_level:\
    \ Int = 0\n    var paren_depth: Int = 0\n    var paren_depth_stack: [Int] = []\n\
    \    var paren_stack: [Int] = []\n    var paren_stack_count: Int = 0\n    var\
    \ paren_stack_level: Int = 0\n    var paren_stack_depth: Int = 0\n    var paren_stack_depth_stack:\
    \ [Int] = []\n    var paren_stack_stack: [Int] = []\n    var paren_stack_stack_count:\
    \ Int = 0\n    var paren_stack_stack_level: Int = 0\n    var paren_stack_stack_depth:\
    \ Int = 0\n    var paren_stack_stack_depth_stack: [Int] = []\n    var paren_stack_stack_stack:\
    \ [Int] = []\n    var paren_stack_stack_stack_count: Int = 0\n    var paren_stack_stack_stack_level:\
    \ Int = 0\n    var paren_stack_stack_stack_depth: Int = 0\n    var paren_stack_stack_stack_depth_stack:\
    \ [Int] = []\n    var paren_stack_stack_stack_stack: [Int] = []\n    var paren_stack_stack_stack_stack_count:\
    \ Int = 0\n    var paren_stack_stack_stack_stack_level: Int = 0\n    var paren_stack_stack_stack_stack_depth:\
    \ Int = 0\n    var paren_stack_stack_stack_stack_depth_stack: [Int] = []\n   \
    \ var paren_stack_stack_stack_stack_stack: [Int] = []\n    var paren_stack_stack_stack_stack_stack_count:\
    \ Int = 0\n    var paren_stack_stack_stack_stack_stack_level: Int = 0\n    var\
    \ paren_stack_stack_stack_stack_stack_depth: Int = 0\n    var paren_stack_stack_stack_stack_stack_depth_stack:\
    \ [Int] = []", "    var result: [Int] = []\n    var stack: [Int] = []\n    var\
    \ depth: Int = 0\n    var i: Int = 0\n    for i < len(paren_string) {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.append(i)\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n        i += 1\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var level: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.Push(i)\n            level +=\
    \ 1\n        } else if paren_string[i] == ')' {\n            if len(stack) ==\
    \ 0 {\n                result.Push(level)\n            } else {\n            \
    \    stack.Pop()\n                level -= 1\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var current_level: Int = 0\n    var current_paren: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       current_level += 1\n            current_paren += 1\n            stack.append(current_level)\n\
    \        } else if paren_string[i] == ')' {\n            current_level -= 1\n\
    \            current_paren -= 1\n            if current_level == 0 {\n       \
    \         result.append(stack.pop())\n            }\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var stack: [Int] = []\n    var level:\
    \ Int = 0\n    var paren_count: Int = 0\n    var paren_index: Int = 0\n    var\
    \ paren_string: String = \"\"\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            paren_count += 1\n         \
    \   if paren_count == 1 {\n                stack.append(i)\n            }\n  \
    \      } else if paren_string[i] == ')' {\n            paren_count -= 1\n    \
    \        if paren_count == 0 {\n                stack.pop()\n                if\
    \ len(stack) > 0 {\n                    level = stack[len(stack) - 1]\n      \
    \          }\n                result.append(level)\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var current_level: Int = 0\n    var current_paren_level: Int = 0\n\
    \    var current_paren_count: Int = 0\n    var current_paren_string: String =\
    \ \"\"\n    var current_paren_string_count: Int = 0\n    var current_paren_string_index:\
    \ Int = 0\n    var current_paren_string_length: Int = 0\n    var current_paren_string_length_count:\
    \ Int = 0\n    var current_paren_string_length_index: Int = 0\n    var current_paren_string_length_length:\
    \ Int = 0\n    var current_paren_string_length_length_count: Int = 0\n    var\
    \ current_paren_string_length_length_index: Int = 0\n    var current_paren_string_length_length_length:\
    \ Int = 0\n    var current_paren_string_length_length_length_count: Int = 0\n\
    \    var current_paren_string_length_length_length_index: Int = 0\n    var current_paren_string_length_length_length_length:\
    \ Int = 0\n    var current_paren_string_length_length_length_length_count: Int\
    \ = 0\n    var current_paren_string_length_length_length_length_index: Int = 0\n\
    \    var current_paren_string_length_length_length_length_length: Int = 0\n  \
    \  var current_paren_string_length_length_length_length_length_count: Int = 0\n\
    \    var current_paren_string_length_length_length_length_length_index: Int =\
    \ 0\n    var current_paren_string_length_length_length_length_length_length: Int\
    \ = 0\n    var current_paren_string_length_length_length_length_length_length_count:\
    \ Int = 0\n    var current_paren_string_length_length_length_length_length_length_index:\
    \ Int = 0\n    var current_paren_string_length_length_length_length_length_length_length:\
    \ Int = 0\n    var current_paren_string_length_length_length_length_length_length_length_count:\
    \ Int =", "    var result: [Int] = []\n    var stack: [Int] = []\n    var level:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(level)\n            level += 1\n        }\
    \ else if paren_string[i] == ')' {\n            level -= 1\n            if level\
    \ == 0 {\n                result.append(stack.pop())\n            }\n        }\n\
    \    }\n    return result", "    var result = []Int{}\n    var stack = []Int{}\n\
    \    var paren_count = 0\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            stack = append(stack, paren_count)\n            paren_count\
    \ += 1\n        } else if char == ')' {\n            paren_count -= 1\n      \
    \      if len(stack) > 0 {\n                result = append(result, stack[len(stack)\
    \ - 1])\n            }\n            stack = stack[:len(stack) - 1]\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var paren_stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var paren_depth: Int = 0\n   \
    \ var paren_index: Int = 0\n    var paren_char: String = \"\"\n    var paren_char_index:\
    \ Int = 0\n    var paren_char_count: Int = 0\n    var paren_char_count_max: Int\
    \ = 0\n    var paren_char_count_min: Int = 0\n    var paren_char_count_diff: Int\
    \ = 0\n    var paren_char_count_diff_max: Int = 0\n    var paren_char_count_diff_min:\
    \ Int = 0\n    var paren_char_count_diff_diff: Int = 0\n    var paren_char_count_diff_diff_max:\
    \ Int = 0\n    var paren_char_count_diff_diff_min: Int = 0\n    var paren_char_count_diff_diff_diff:\
    \ Int = 0\n    var paren_char_count_diff_diff_diff_max: Int = 0\n    var paren_char_count_diff_diff_diff_min:\
    \ Int = 0\n    var paren_char_count_diff_diff_diff_diff: Int = 0\n    var paren_char_count_diff_diff_diff_diff_max:\
    \ Int = 0\n    var paren_char_count_diff_diff_diff_diff_min: Int = 0\n    var\
    \ paren_char_count_diff_diff_diff_diff_diff: Int = 0\n    var paren_char_count_diff_diff_diff_diff_diff_max:\
    \ Int = 0\n    var paren_char_count_diff_diff_diff_diff_diff_min: Int = 0\n  \
    \  var paren_char_count_diff_diff_diff_diff_diff_diff: Int = 0\n    var paren_char_count_diff_diff_diff_diff_diff_diff_max:\
    \ Int = 0\n    var paren_char_count_diff_diff_diff_diff_diff_diff_min: Int = 0\n\
    \    var paren_", "    var result: [Int] = []\n    var stack: [Int] = []\n   \
    \ var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            stack.Push(i)\n            depth += 1\n\
    \        } else if paren_string[i] == ')' {\n            if depth == 0 {\n   \
    \             result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(level)\n\
    \                level = 0\n            } else {\n                level -= 1\n\
    \                stack.pop()\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int\
    \ = 0\n    var paren_level: Int = 0\n    for i := 0; i < len(paren_string); i++\
    \ {\n        if paren_string[i] == '(' {\n            paren_count += 1\n     \
    \       stack.Push(paren_count)\n            paren_level += 1\n        } else\
    \ if paren_string[i] == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                result.Push(paren_level)\n                paren_level\
    \ = 0\n            } else {\n                paren_level -= 1\n            }\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var count: Int = 0\n\
    \    var depth: Int = 0\n    var max_depth: Int = 0\n    var max_count: Int =\
    \ 0\n    var max_depth_count: Int = 0\n    var max_depth_count_index: Int = 0\n\
    \    var max_depth_count_count: Int = 0\n    var max_depth_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count: Int = 0\n    var max_depth_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count: Int = 0\n    var max_depth_count_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count_count: Int = 0\n    var max_depth_count_count_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count: Int = 0\n  \
    \  var max_depth_count_count_count_count_count_count_index: Int = 0\n    var max_depth_count_count_count_count_count_count_count:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var max_depth_count_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n", "    var result: [Int] = []\n    var stack: [Int] = []\n    var\
    \ depth: Int = 0\n    var paren_count: Int = 0\n    var paren_string: String =\
    \ \"\"\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.Push(i)\n            paren_count += 1\n        }\
    \ else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n       \
    \         panic(\"Mismatched parentheses\")\n            }\n            if paren_count\
    \ == 0 {\n                result.Push(depth)\n                depth = 0\n    \
    \        }\n            depth += 1\n            paren_count -= 1\n           \
    \ if paren_count == 0 {\n                result.Push(depth)\n                depth\
    \ = 0\n            }\n            stack.Pop()\n        }\n    }\n    if len(stack)\
    \ != 0 {\n        panic(\"Mismatched parentheses\")\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    var i: Int = 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            depth += 1\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    result.append(depth)\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n        i += 1\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.append(i)\n            } else {\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(depth)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var depth:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \            depth += 1\n        } else if paren_string[i] == ')' {\n        \
    \    paren_count -= 1\n            if paren_count == 0 {\n                result.append(depth)\n\
    \                depth = 0\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if depth == 0 {\n                result.append(i)\n  \
    \          } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.push(i)\n    \
    \        depth += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ depth == 0 {\n                result.append(i)\n            } else {\n     \
    \           stack.pop()\n                depth -= 1\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var level: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.append(i)\n          \
    \  level += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(level)\n                level = 0\n  \
    \          } else {\n                level -= 1\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result = []Int{}\n\
    \    var stack = []Int{}\n    for i := 0; i < len(paren_string); i++ {\n     \
    \   if paren_string[i] == '(' {\n            stack = append(stack, i)\n      \
    \  } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n    \
    \            result = append(result, len(stack))\n            } else {\n     \
    \           stack = stack[:len(stack)-1]\n            }\n        }\n    }\n  \
    \  return result", "    var result: [Int] = []\n    var stack: [Int] = []\n  \
    \  var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            stack.append(i)\n            depth +=\
    \ 1\n        } else if paren_string[i] == ')' {\n            if len(stack) ==\
    \ 0 {\n                result.append(depth)\n                depth = 0\n     \
    \       } else {\n                stack.pop()\n                depth -= 1\n  \
    \          }\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    var stack: [Int] = []\n    var paren_count: Int = 0\n    var max_nesting:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \        } else if paren_string[i] == ')' {\n            paren_count -= 1\n  \
    \          if paren_count == 0 {\n                max_nesting = max(max_nesting,\
    \ len(stack) - 1)\n                stack.pop()\n            }\n        }\n   \
    \ }\n    result.append(max_nesting)\n    return result", "    var result: [Int]\
    \ = []\n    var paren_stack: [Int] = []\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var depth: Int = 0\n    var max_depth: Int = 0\n    var max_index: Int\
    \ = 0\n    var max_depth_index: Int = 0\n    var current_depth: Int = 0\n    var\
    \ current_index: Int = 0\n    var current_depth_index: Int = 0\n    var current_char:\
    \ String = \"\"\n    var current_char_index: Int = 0\n    var current_paren_index:\
    \ Int = 0\n    var current_paren_depth: Int = 0\n    var current_paren_depth_index:\
    \ Int = 0\n    var current_paren_char: String = \"\"\n    var current_paren_char_index:\
    \ Int = 0\n    var current_paren_paren_index: Int = 0\n    var current_paren_paren_depth:\
    \ Int = 0\n    var current_paren_paren_depth_index: Int = 0\n    var current_paren_paren_char:\
    \ String = \"\"\n    var current_paren_paren_char_index: Int = 0\n    var current_paren_paren_paren_index:\
    \ Int = 0\n    var current_paren_paren_paren_depth: Int = 0\n    var current_paren_paren_paren_depth_index:\
    \ Int = 0\n    var current_paren_paren_paren_char: String = \"\"\n    var current_paren_paren_paren_char_index:\
    \ Int = 0\n    var current_paren_paren_paren_paren_index: Int = 0\n    var current_paren_paren_paren_paren_depth:\
    \ Int = 0\n    var current_paren_paren_paren_paren_depth_index: Int = 0\n    var\
    \ current_paren_paren_paren_paren_char: String = \"\"\n    var current_paren_paren_paren_paren_char_index:\
    \ Int = 0\n    var current_paren_paren_paren_paren_paren_index: Int = 0\n    var\
    \ current_paren_paren_paren_paren_paren_depth: Int = 0\n    var current_paren_paren_paren_paren_paren_depth_index:\
    \ Int = 0\n    ", "    var result: [Int] = []\n    var stack: [Int] = []\n   \
    \ var paren_count: Int = 0\n    var paren_level: Int = 0\n    var paren_depth:\
    \ Int = 0\n    var paren_index: Int = 0\n    var paren_char: String = \"\"\n \
    \   var paren_char_index: Int = 0\n    var paren_char_count: Int = 0\n    var\
    \ paren_char_count_index: Int = 0\n    var paren_char_count_count: Int = 0\n \
    \   var paren_char_count_count_index: Int = 0\n    var paren_char_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_index: Int = 0\n    var paren_char_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_index: Int = 0\n    var\
    \ paren_char_count_count_count_count_count: Int = 0\n    var paren_char_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count: Int = 0\n \
    \   var paren_char_count_count_count_count_count_count_index: Int = 0\n    var\
    \ paren_char_count_count_count_count_count_count_count: Int = 0\n    var paren_char_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_count:\
    \ Int", "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack.append(i)\n            depth += 1\n        } else\
    \ if paren_string[i] == ')' {\n            if depth == 0 {\n                result.append(i)\n\
    \            } else {\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result = []Int\n\
    \    var stack = []Int\n    var depth = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ depth)\n            depth++\n        } else if paren_string[i] == ')' {\n  \
    \          depth = stack.pop()\n        }\n    }\n    result = append(result,\
    \ depth)\n    return result", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n\
    \    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            stack.append(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if depth == 0 {\n                result.append(i)\n  \
    \          } else {\n                depth -= 1\n            }\n        }\n  \
    \  }\n    return result", "    var result: [Int] = []\n    var stack: [Int] =\
    \ []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n \
    \       if paren_string[i] == '(' {\n            stack.append(i)\n           \
    \ depth += 1\n        } else if paren_string[i] == ')' {\n            if depth\
    \ == 0 {\n                result.append(i)\n            } else {\n           \
    \     stack.pop()\n                depth -= 1\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n    var\
    \ level = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, level)\n            level += 1\n\
    \        } else if paren_string[i] == ')' {\n            level -= 1\n        \
    \    if level < 0 {\n                panic(\"Invalid input\")\n            }\n\
    \            stack = stack[:len(stack) - 1]\n            if len(stack) == 0 {\n\
    \                result = append(result, level)\n            }\n        }\n  \
    \  }\n    return result", "    var result: [Int] = []\n    var stack: [Int] =\
    \ []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n \
    \       if paren_string[i] == '(' {\n            stack.append(i)\n           \
    \ depth += 1\n        } else if paren_string[i] == ')' {\n            if len(stack)\
    \ == 0 {\n                result.append(depth)\n                depth = 0\n  \
    \          } else {\n                depth = stack.pop()\n            }\n    \
    \    }\n    }\n    if len(stack) > 0 {\n        result.append(depth)\n    }\n\
    \    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var paren_count: Int = 0\n    var paren_level: Int = 0\n    for i := 0; i\
    \ < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n          \
    \  paren_count += 1\n            stack.Push(paren_count)\n            paren_level\
    \ += 1\n        } else if paren_string[i] == ')' {\n            paren_count -=\
    \ 1\n            if paren_count == 0 {\n                result.Push(paren_level)\n\
    \                paren_level = 0\n            } else {\n                paren_level\
    \ -= 1\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    var\
    \ max_nesting: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n       \
    \ if paren_string[i] == '(' {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \        } else if paren_string[i] == ')' {\n            paren_count -= 1\n  \
    \          if paren_count == 0 {\n                max_nesting = max(max_nesting,\
    \ len(stack) - 1)\n                result.append(max_nesting)\n              \
    \  stack.pop()\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n\
    \    var paren_depth: Int = 0\n    var paren_index: Int = 0\n    var paren_char:\
    \ String = \"\"\n    var paren_char_index: Int = 0\n    var paren_char_count:\
    \ Int = 0\n    var paren_char_count_index: Int = 0\n    var paren_char_count_count:\
    \ Int = 0\n    var paren_char_count_count_index: Int = 0\n    var paren_char_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_index: Int = 0\n    var paren_char_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_index: Int = 0\n    var\
    \ paren_char_count_count_count_count_count: Int = 0\n    var paren_char_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count: Int = 0\n \
    \   var paren_char_count_count_count_count_count_count_index: Int = 0\n    var\
    \ paren_char_count_count_count_count_count_count_count: Int = 0\n    var paren_char_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_index:\
    \ Int = 0\n    var paren_char_count_count_count_count_count_count_count_count_count_count:\
    \ Int = 0\n    var paren_char_count", "    var result = []Int{}\n    var stack\
    \ = []Int{}\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, i)\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result = append(result,\
    \ len(stack))\n            } else {\n                stack = stack[0:len(stack)\
    \ - 1]\n            }\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i :=\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       stack.Push(i)\n            depth += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if depth == 0 {\n                result.Push(i)\n    \
    \        } else {\n                stack.Pop()\n                depth -= 1\n \
    \           }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n        } else\
    \ if paren_string[i] == ')' {\n            if len(stack) == 0 {\n            \
    \    result.Push(i)\n            } else {\n                stack.Pop()\n     \
    \       }\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    var paren_stack: [Int] = []\n    var paren_count: Int = 0\n    var paren_char:\
    \ String = \"\"\n    var paren_count_stack: [Int] = []\n    var paren_count_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_prev: Int = 0\n    var paren_count_stack_top_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev: Int = 0\n \
    \   var paren_count_stack_top_prev_prev_prev_prev_prev_prev: Int = 0\n    var\
    \ paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev: Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_count_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ Int = 0\n    var paren_", "    var result: [Int] = []\n    var stack: [Int]\
    \ = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n\
    \        if paren_string[i] == '(' {\n            stack.Push(i)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            if depth == 0\
    \ {\n                result.Push(i)\n            } else {\n                stack.Pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n\
    \    var max_level: Int = 0\n    var i: Int = 0\n    for i < len(paren_string)\
    \ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n      \
    \      level += 1\n        } else if paren_string[i] == ')' {\n            if\
    \ level == 0 {\n                result.append(max_level)\n                max_level\
    \ = 0\n            }\n            if len(stack) > 0 {\n                stack.pop()\n\
    \                level -= 1\n            }\n        } else if paren_string[i]\
    \ == ' ' {\n            if level > max_level {\n                max_level = level\n\
    \            }\n            if len(stack) > 0 {\n                result.append(max_level)\n\
    \                max_level = 0\n            }\n        }\n        i += 1\n   \
    \ }\n    return result", "    var result: [Int] = []\n    var stack: [Int] = []\n\
    \    var depth: Int = 0\n    for i := 0; i < len(paren_string); i++ {\n      \
    \  if paren_string[i] == '(' {\n            stack.append(depth)\n            depth\
    \ += 1\n        } else if paren_string[i] == ')' {\n            depth -= 1\n \
    \           if depth == 0 {\n                result.append(stack.pop())\n    \
    \        }\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    var stack: [Int] = []\n    var current_level: Int = 0\n    var max_level:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var paren_count: Int =\
    \ 0\n    var paren_string: String = \"\"\n    var paren_string_length: Int = 0\n\
    \    var paren_string_index: Int = 0\n    var paren_string_index_end: Int = 0\n\
    \    var paren_string_index_start: Int = 0\n    var paren_string_index_start_end:\
    \ Int = 0\n    var paren_string_index_start_end_end: Int = 0\n    var paren_string_index_start_end_end_end:\
    \ Int = 0\n    var paren_string_index_start_end_end_end_end: Int = 0\n    var\
    \ paren_string_index_start_end_end_end_end_end: Int = 0\n    var paren_string_index_start_end_end_end_end_end_end:\
    \ Int = 0\n    var paren_string_index_start_end_end_end_end_end_end_end: Int =\
    \ 0\n    var paren_string_index_start_end_end_end_end_end_end_end_end: Int = 0\n\
    \    var paren_string_index_start_end_end_end_end_end_end_end_end_end: Int = 0\n\
    \    var paren_string_index_start_end_end_end_end_end_end_end_end_end_end: Int\
    \ = 0\n    var paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    var paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end:\
    \ Int = 0\n    ", "    var result = [Int]{}\n    var stack = [Int]{}\n    var\
    \ depth = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, depth)\n            depth += 1\n\
    \        } else if paren_string[i] == ')' {\n            depth -= 1\n        \
    \    if depth < 0 {\n                panic(\"Invalid input\")\n            }\n\
    \            if depth == 0 {\n                result = append(result, stack[len(stack)\
    \ - 1])\n                stack = stack[:len(stack) - 1]\n            }\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var paren_level: Int = 0\n   \
    \ var paren_string: String = \"\"\n    var paren_index: Int = 0\n    var paren_char:\
    \ String = \"\"\n    var paren_open: Bool = true\n    var paren_close: Bool =\
    \ false\n    var paren_open_count: Int = 0\n    var paren_close_count: Int = 0\n\
    \    var paren_open_level: Int = 0\n    var paren_close_level: Int = 0\n    for\
    \ paren_index < len(paren_string) {\n        paren_char = paren_string[paren_index]\n\
    \        if paren_char == \"(\" {\n            paren_count += 1\n            paren_open_count\
    \ += 1\n            paren_open_level += 1\n            if paren_open_level > paren_level\
    \ {\n                paren_level = paren_open_level\n            }\n        }\
    \ else if paren_char == \")\" {\n            paren_count -= 1\n            paren_close_count\
    \ += 1\n            paren_close_level += 1\n            if paren_close_level >\
    \ paren_level {\n                paren_level = paren_close_level\n           \
    \ }\n        }\n        if paren_count == 0 {\n            if paren_open {\n \
    \               result.append(paren_level)\n            }\n            paren_open\
    \ = false\n            paren_close = true\n        }\n        if paren_open {\n\
    \            paren_open_count += 1\n        }\n        if paren_close {\n    \
    \        paren_close_count += 1\n        }\n        paren_index += 1\n    }\n\
    \    if paren_open {\n        result.append(paren_level)\n    }\n    return result",
  "    var result: [Int] = []\n    var stack: [Int] = []\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \      } else if paren_string[i] == ')' {\n            if len(stack) == 0 {\n\
    \                result.append(i)\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var current_level: Int = 0\n    var max_level:\
    \ Int = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            current_level += 1\n            stack.append(i)\n    \
    \        if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if paren_string[i] == ')' {\n            current_level\
    \ -= 1\n            if current_level == 0 {\n                result.append(max_level)\n\
    \                max_level = 0\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var depth: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          depth += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if len(stack) == 0 {\n                result.append(depth)\n              \
    \  depth = 0\n            } else {\n                stack.pop()\n            \
    \    depth -= 1\n            }\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var stack: [Int] = []\n    var level: Int = 0\n    for\
    \ i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n\
    \            stack.append(i)\n            level += 1\n        } else if paren_string[i]\
    \ == ')' {\n            if len(stack) == 0 {\n                result.append(level)\n\
    \            } else {\n                stack.pop()\n                level -= 1\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    var stack: [Int] = []\n    var paren_count: Int = 0\n    for i := 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    paren_count += 1\n            stack.append(paren_count)\n        } else if\
    \ paren_string[i] == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                result.append(stack.pop())\n            }\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    var paren_stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var paren_count_stack: [Int] =\
    \ []\n    var paren_count_stack_index: Int = 0\n    var paren_count_stack_top:\
    \ Int = 0\n    var paren_count_stack_top_index: Int = 0\n    var paren_count_stack_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_index: Int = 0\n    var paren_count_stack_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_index: Int = 0\n    var\
    \ paren_count_stack_top_top_top_top_top_top: Int = 0\n    var paren_count_stack_top_top_top_top_top_top_index:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top: Int = 0\n  \
    \  var paren_count_stack_top_top_top_top_top_top_top_index: Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top:\
    \ Int = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_index: Int\
    \ = 0\n    var paren_count_stack_top_top_top_top_top_top_top_top_top: Int = 0\n\
    \    var paren_count_stack_top_top_top_top_top_top_top_top_top_index: Int = 0\n\
    \    var paren_count_stack_top_top_top_top", "    var result: [Int] = []\n   \
    \ var stack: [Int] = []\n    var level: Int = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack.append(i)\n  \
    \          level += 1\n        } else if paren_string[i] == ')' {\n          \
    \  if len(stack) == 0 {\n                result.append(level)\n              \
    \  level = 0\n            } else {\n                level -= 1\n             \
    \   stack.pop()\n            }\n        }\n    }\n    if len(stack) > 0 {\n  \
    \      result.append(level)\n    }\n    return result", "    var result = [Int]{}\n\
    \    var stack = [Int]{}\n    var level = 0\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            stack = append(stack,\
    \ level)\n            level += 1\n        } else if paren_string[i] == ')' {\n\
    \            level -= 1\n            if len(stack) > 0 {\n                stack\
    \ = stack[:len(stack) - 1]\n            }\n            if len(stack) == 0 {\n\
    \                result = append(result, level)\n            }\n        }\n  \
    \  }\n    return result", "    var result = [Int]{}\n    var stack = [Int]{}\n\
    \    var level = 0\n    for i := 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            stack = append(stack, level)\n            level += 1\n\
    \        } else if paren_string[i] == ')' {\n            level -= 1\n        \
    \    if level < 0 {\n                panic(\"Invalid paren string\")\n       \
    \     }\n            if len(stack) > 0 {\n                result = append(result,\
    \ stack[len(stack) - 1])\n            }\n            stack = stack[:len(stack)\
    \ - 1]\n        }\n    }\n    if len(stack) > 0 {\n        panic(\"Invalid paren\
    \ string\")\n    }\n    return result", "    var result: [Int] = []\n    var stack:\
    \ [Int] = []\n    var paren_count: Int = 0\n    var paren_level: Int = 0\n   \
    \ for i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            paren_count += 1\n            stack.append(paren_count)\n   \
    \         paren_level = len(stack) - 1\n        } else if paren_string[i] == ')'\
    \ {\n            paren_count -= 1\n            if paren_count == 0 {\n       \
    \         result.append(paren_level)\n                paren_level = 0\n      \
    \      } else {\n                if paren_level == len(stack) - 1 {\n        \
    \            stack.pop()\n                } else {\n                    paren_level\
    \ = stack[len(stack) - 1]\n                }\n            }\n        }\n    }\n\
    \    return result"]
stop_tokens:
- "\n}"
