{
  "name": "HumanEval_4_mean_absolute_deviation",
  "language": "swift",
  "prompt": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5lm6r9r2.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmp5lm6r9r2.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmp5lm6r9r2.swift:14:18: error: cannot find 'len' in scope\n    return sum / len(numbers)\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpsa8kv591.swift:11:33: error: cannot find 'a' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                ^\n/tmp/tmpsa8kv591.swift:11:36: error: cannot find 'b' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                   ^\n/tmp/tmpsa8kv591.swift:11:39: error: cannot find operator '=>' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                      ^~\n/tmp/tmpsa8kv591.swift:11:42: error: cannot find 'a' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                         ^\n/tmp/tmpsa8kv591.swift:11:46: error: cannot find 'Math' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                             ^~~~\n/tmp/tmpsa8kv591.swift:11:55: error: cannot find 'a' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                                      ^\n/tmp/tmpsa8kv591.swift:11:59: error: cannot find 'b' in scope\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                                          ^\n/tmp/tmpsa8kv591.swift:11:73: error: value of type '[Double]' has no member 'length'\n    return numbers.reduce(0.0, (a, b) => a + Math.abs(a - b)) / numbers.length\n                                                                ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, x := range numbers {\n        sum += math.Abs(x - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo_c9u6pw.swift:11:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpo_c9u6pw.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Calculate the mean of the dataset\n\tmean := mean(numbers)\n\n\t// Calculate the sum of the absolute differences from the mean\n\tsum := 0.0\n\tfor _, value := range numbers {\n\t\tsum += math.Abs(value - mean)\n\t}\n\n\t// Return the average of the absolute differences\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpflfbaic1.swift:11:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpflfbaic1.swift:11:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpflfbaic1.swift:15:7: error: expected 'in' after for-each pattern\n        for _, value := range numbers {\n             ^\n/tmp/tmpflfbaic1.swift:15:7: error: expected Sequence expression for for-each loop\n        for _, value := range numbers {\n             ^\n/tmp/tmpflfbaic1.swift:11:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpflfbaic1.swift:20:9: error: cannot find 'sum' in scope\n        return sum / float64(len(numbers))\n               ^~~\n/tmp/tmpflfbaic1.swift:20:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpflfbaic1.swift:20:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Create a new array of numbers\n    numbers_copy := make([]Double, len(numbers))\n    copy(numbers_copy, numbers)\n\n    // Calculate the mean of the input array\n    mean := mean(numbers_copy)\n\n    // Calculate the absolute difference between each element and the mean\n    differences := []Double{}\n    for _, number := range numbers_copy {\n        differences = append(differences, abs(number - mean))\n    }\n\n    // Calculate the mean of the absolute differences\n    return mean(differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5t8y1twt.swift:11:17: error: consecutive statements on a line must be separated by ';'\n    numbers_copy := make([]Double, len(numbers))\n                ^\n                ;\n/tmp/tmp5t8y1twt.swift:11:18: error: expected expression\n    numbers_copy := make([]Double, len(numbers))\n                 ^\n/tmp/tmp5t8y1twt.swift:19:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers_copy {\n         ^\n/tmp/tmp5t8y1twt.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers_copy {\n         ^\n/tmp/tmp5t8y1twt.swift:11:5: error: cannot find 'numbers_copy' in scope\n    numbers_copy := make([]Double, len(numbers))\n    ^~~~~~~~~~~~\n/tmp/tmp5t8y1twt.swift:24:12: error: cannot find 'mean' in scope\n    return mean(differences)\n           ^~~~\n/tmp/tmp5t8y1twt.swift:24:17: error: cannot find 'differences' in scope\n    return mean(differences)\n                ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpkl423o7q.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpkl423o7q.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    mean := mean(numbers)\n    return mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxoemb6b2.swift:10:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpxoemb6b2.swift:10:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpxoemb6b2.swift:10:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpxoemb6b2.swift:11:12: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxoemb6b2.swift:11:57: error: cannot find 'mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n                                                        ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / count(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpddxi9tgu.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / count(numbers)\n           ^~~\n/tmp/tmpddxi9tgu.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / count(numbers)\n               ^~~\n/tmp/tmpddxi9tgu.swift:10:37: error: cannot find 'count' in scope\n    return sum(map(numbers, abs)) / count(numbers)\n                                    ^~~~~\n/tmp/tmpddxi9tgu.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / count(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    mean = sum / len(numbers)\n    return mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6f4x5jnq.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmp6f4x5jnq.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpq1zdk6jh.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpq1zdk6jh.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbg9hcchp.swift:11:33: error: cannot find 'x' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                ^\n/tmp/tmpbg9hcchp.swift:11:36: error: cannot find 'y' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                   ^\n/tmp/tmpbg9hcchp.swift:11:42: error: cannot find 'x' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                         ^\n/tmp/tmpbg9hcchp.swift:11:46: error: cannot find 'math' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                             ^~~~\n/tmp/tmpbg9hcchp.swift:11:55: error: cannot find 'y' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                                      ^\n/tmp/tmpbg9hcchp.swift:11:59: error: cannot find 'mean' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                                          ^~~~\n/tmp/tmpbg9hcchp.swift:11:32: error: expected type before '->'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                               ^\n/tmp/tmpbg9hcchp.swift:11:44: error: expected type after '->'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                           ^\n/tmp/tmpbg9hcchp.swift:11:77: error: cannot find 'len' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n                                                                            ^~~\n/tmp/tmpbg9hcchp.swift:11:32: error: cannot convert value of type '_.Type' to expected argument type '(Double, Double) throws -> Double'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - mean(numbers))) / len(numbers)\n             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Calculate the mean of the input numbers\n\tmean := mean(numbers)\n\n\t// Calculate the sum of the absolute differences between each element\n\t// and the mean\n\tsum := 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean)\n\t}\n\n\t// Return the average of the absolute differences\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpc40ku9mq.swift:11:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpc40ku9mq.swift:11:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpc40ku9mq.swift:16:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpc40ku9mq.swift:16:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpc40ku9mq.swift:11:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpc40ku9mq.swift:21:9: error: cannot find 'sum' in scope\n        return sum / float64(len(numbers))\n               ^~~\n/tmp/tmpc40ku9mq.swift:21:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpc40ku9mq.swift:21:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, value := range numbers {\n\t\tsum += math.Abs(value - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppi2vtzm7.swift:11:7: error: expected 'in' after for-each pattern\n        for _, value := range numbers {\n             ^\n/tmp/tmppi2vtzm7.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, value := range numbers {\n             ^\n/tmp/tmppi2vtzm7.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmppi2vtzm7.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Calculate the mean of the input numbers\n    mean := mean(numbers)\n\n    // Calculate the sum of the absolute differences between each number and the\n    // mean\n    sum := 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n\n    // Return the average of the absolute differences\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp21c0rhnx.swift:11:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmp21c0rhnx.swift:11:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmp21c0rhnx.swift:16:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmp21c0rhnx.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmp21c0rhnx.swift:11:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmp21c0rhnx.swift:21:12: error: cannot find 'sum' in scope\n    return sum / float64(len(numbers))\n           ^~~\n/tmp/tmp21c0rhnx.swift:21:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmp21c0rhnx.swift:21:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphhonf63b.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphhonf63b.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    mean := mean(numbers)\n    return mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxoemb6b2.swift:10:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpxoemb6b2.swift:10:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpxoemb6b2.swift:10:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpxoemb6b2.swift:11:12: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxoemb6b2.swift:11:57: error: cannot find 'mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n                                                        ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpd9t587_j.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpd9t587_j.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpd9t587_j.swift:14:18: error: cannot find 'len' in scope\n    return sum / len(numbers)\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\treturn sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp45bs20u8.swift:10:9: error: cannot find 'sum' in scope\n        return sum(numbers) / len(numbers)\n               ^~~\n/tmp/tmp45bs20u8.swift:10:24: error: cannot find 'len' in scope\n        return sum(numbers) / len(numbers)\n                              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Create a centerpoint (mean in this case)\n\tvar mean = mean(numbers)\n\n\t// Calculate the average absolute difference between each element and the\n\t// centerpoint\n\tvar result = 0.0\n\tfor _, value := range numbers {\n\t\tresult += math.Abs(value - mean)\n\t}\n\n\t// Return the average absolute difference\n\treturn result / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp44l9hgq0.swift:16:7: error: expected 'in' after for-each pattern\n        for _, value := range numbers {\n             ^\n/tmp/tmp44l9hgq0.swift:16:7: error: expected Sequence expression for for-each loop\n        for _, value := range numbers {\n             ^\n/tmp/tmp44l9hgq0.swift:11:13: error: use of local variable 'mean' before its declaration\n        var mean = mean(numbers)\n                   ^\n/tmp/tmp44l9hgq0.swift:11:6: note: 'mean' declared here\n        var mean = mean(numbers)\n            ^\n/tmp/tmp44l9hgq0.swift:21:18: error: cannot find 'float64' in scope\n        return result / float64(len(numbers))\n                        ^~~~~~~\n/tmp/tmp44l9hgq0.swift:21:26: error: cannot find 'len' in scope\n        return result / float64(len(numbers))\n                                ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    mean = sum / len(numbers)\n    return mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6inbxgko.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmp6inbxgko.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Create a centerpoint (mean)\n\tmean := mean(numbers)\n\n\t// Create a list of differences\n\tdifferences := []Double{}\n\tfor _, number := range numbers {\n\t\tdifferences = append(differences, number - mean)\n\t}\n\n\t// Calculate the mean absolute deviation\n\treturn mean_absolute_deviation_helper(differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpcgzg8iy9.swift:11:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpcgzg8iy9.swift:11:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpcgzg8iy9.swift:15:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpcgzg8iy9.swift:15:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpcgzg8iy9.swift:11:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpcgzg8iy9.swift:20:9: error: cannot find 'mean_absolute_deviation_helper' in scope\n        return mean_absolute_deviation_helper(differences)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcgzg8iy9.swift:20:40: error: cannot find 'differences' in scope\n        return mean_absolute_deviation_helper(differences)\n                                              ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbypvm03_.swift:11:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpbypvm03_.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Calculate the mean of the input numbers\n    mean := mean(numbers)\n\n    // Calculate the absolute difference between each number and the mean\n    deviations := []Double{}\n    for _, number := range numbers {\n        deviations = append(deviations, abs(number - mean))\n    }\n\n    // Calculate the mean of the absolute differences\n    return mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmps43tmmii.swift:11:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmps43tmmii.swift:11:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmps43tmmii.swift:15:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmps43tmmii.swift:15:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmps43tmmii.swift:11:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmps43tmmii.swift:20:12: error: cannot find 'mean' in scope\n    return mean(deviations)\n           ^~~~\n/tmp/tmps43tmmii.swift:20:17: error: cannot find 'deviations' in scope\n    return mean(deviations)\n                ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbypvm03_.swift:11:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpbypvm03_.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number)\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqfjieru0.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpqfjieru0.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n        count++\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp32x8uovb.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmp32x8uovb.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmp32x8uovb.swift:16:18: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return sum / count\n                 ^\n                 Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += value\n        count += 1\n    }\n    mean = sum / count\n    return sum_of_squares(numbers) / count - mean * mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpfrlqpnj6.swift:13:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpfrlqpnj6.swift:13:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpfrlqpnj6.swift:18:12: error: cannot find 'sum_of_squares' in scope\n    return sum_of_squares(numbers) / count - mean * mean\n           ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    mean := mean(numbers)\n    return mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxoemb6b2.swift:10:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpxoemb6b2.swift:10:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpxoemb6b2.swift:10:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpxoemb6b2.swift:11:12: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxoemb6b2.swift:11:57: error: cannot find 'mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n                                                        ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Calculate the mean of the dataset\n\tmean := mean(numbers)\n\n\t// Calculate the absolute difference between each element and the mean\n\tdeviations := []Double{}\n\tfor _, number := range numbers {\n\t\tdeviations = append(deviations, abs(number - mean))\n\t}\n\n\t// Calculate the mean absolute deviation\n\treturn mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpumwcvk3s.swift:11:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpumwcvk3s.swift:11:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpumwcvk3s.swift:15:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpumwcvk3s.swift:15:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpumwcvk3s.swift:11:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpumwcvk3s.swift:20:9: error: cannot find 'mean' in scope\n        return mean(deviations)\n               ^~~~\n/tmp/tmpumwcvk3s.swift:20:14: error: cannot find 'deviations' in scope\n        return mean(deviations)\n                    ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Create a new array of numbers\n    numbers_copy := make([]Double, len(numbers))\n    copy(numbers_copy, numbers)\n\n    // Calculate the mean of the array\n    mean := mean(numbers_copy)\n\n    // Calculate the absolute difference between each element and the mean\n    deviations := make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        deviations[i] = math.Abs(numbers[i] - mean)\n    }\n\n    // Calculate the mean of the absolute differences\n    return mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6lrrv1j6.swift:11:17: error: consecutive statements on a line must be separated by ';'\n    numbers_copy := make([]Double, len(numbers))\n                ^\n                ;\n/tmp/tmp6lrrv1j6.swift:11:18: error: expected expression\n    numbers_copy := make([]Double, len(numbers))\n                 ^\n/tmp/tmp6lrrv1j6.swift:19:12: error: expected type\n    for i := 0; i < len(numbers); i++ {\n           ^\n            <#type#>\n/tmp/tmp6lrrv1j6.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(numbers); i++ {\n           ^\n/tmp/tmp6lrrv1j6.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(numbers); i++ {\n           ^\n/tmp/tmp6lrrv1j6.swift:11:5: error: cannot find 'numbers_copy' in scope\n    numbers_copy := make([]Double, len(numbers))\n    ^~~~~~~~~~~~\n/tmp/tmp6lrrv1j6.swift:24:12: error: cannot find 'mean' in scope\n    return mean(deviations)\n           ^~~~\n/tmp/tmp6lrrv1j6.swift:24:17: error: cannot find 'deviations' in scope\n    return mean(deviations)\n                ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpq1zdk6jh.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpq1zdk6jh.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbypvm03_.swift:11:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpbypvm03_.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, x := range numbers {\n        sum += math.Abs(x - mean(numbers))\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmposo1qxgo.swift:12:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmposo1qxgo.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, x := range numbers {\n        sum += math.Abs(x - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbeidqd5o.swift:12:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpbeidqd5o.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpbeidqd5o.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpbeidqd5o.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\treturn sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp45bs20u8.swift:10:9: error: cannot find 'sum' in scope\n        return sum(numbers) / len(numbers)\n               ^~~\n/tmp/tmp45bs20u8.swift:10:24: error: cannot find 'len' in scope\n        return sum(numbers) / len(numbers)\n                              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\treturn sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp45bs20u8.swift:10:9: error: cannot find 'sum' in scope\n        return sum(numbers) / len(numbers)\n               ^~~\n/tmp/tmp45bs20u8.swift:10:24: error: cannot find 'len' in scope\n        return sum(numbers) / len(numbers)\n                              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += value\n        count += 1.0\n    }\n    mean = sum / count\n    return mean_absolute_deviation_helper(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp0gryzjp4.swift:13:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmp0gryzjp4.swift:13:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmp0gryzjp4.swift:18:12: error: cannot find 'mean_absolute_deviation_helper' in scope\n    return mean_absolute_deviation_helper(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhkucudd.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpxhkucudd.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpxhkucudd.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpxhkucudd.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpxhkucudd.swift:15:18: error: cannot find 'len' in scope\n    return sum / len(numbers)\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbypvm03_.swift:11:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpbypvm03_.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphhonf63b.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphhonf63b.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphhonf63b.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphhonf63b.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Calculate the mean of the input numbers\n\tmean := mean(numbers)\n\n\t// Calculate the sum of the absolute differences from the mean\n\tsum := 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean)\n\t}\n\n\t// Return the mean absolute deviation\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpp87exuas.swift:11:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpp87exuas.swift:11:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpp87exuas.swift:15:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpp87exuas.swift:15:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpp87exuas.swift:11:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpp87exuas.swift:20:9: error: cannot find 'sum' in scope\n        return sum / float64(len(numbers))\n               ^~~\n/tmp/tmpp87exuas.swift:20:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpp87exuas.swift:20:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmph0jlpdhn.swift:10:33: error: expected ',' separator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                                ^\n                               ,\n/tmp/tmph0jlpdhn.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n           ^~~\n/tmp/tmph0jlpdhn.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n               ^~~\n/tmp/tmph0jlpdhn.swift:10:29: error: '|' is not a prefix unary operator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                            ^\n/tmp/tmph0jlpdhn.swift:10:31: error: '|' is not a postfix unary operator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                              ^\n/tmp/tmph0jlpdhn.swift:10:30: error: cannot find 'x' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                             ^\n/tmp/tmph0jlpdhn.swift:10:37: error: cannot find 'x' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                                    ^\n/tmp/tmph0jlpdhn.swift:10:41: error: cannot find 'mean' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                                        ^~~~\n/tmp/tmph0jlpdhn.swift:10:60: error: cannot find 'length' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / length(numbers)\n                                                           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += value\n        count += 1.0\n    }\n    mean := sum / count\n    return mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpt6gucch6.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpt6gucch6.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpt6gucch6.swift:17:12: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt6gucch6.swift:17:57: error: cannot find 'mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n                                                        ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, x := range numbers {\n        sum += math.Abs(x - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo_c9u6pw.swift:11:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpo_c9u6pw.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmptqci7s8i.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n           ^~~\n/tmp/tmptqci7s8i.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n               ^~~\n/tmp/tmptqci7s8i.swift:10:37: error: cannot find 'len' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n                                    ^~~\n/tmp/tmptqci7s8i.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / len(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    mean := mean(numbers)\n    return mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxoemb6b2.swift:10:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpxoemb6b2.swift:10:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpxoemb6b2.swift:10:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpxoemb6b2.swift:11:12: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxoemb6b2.swift:11:57: error: cannot find 'mean' in scope\n    return mean_absolute_deviation_around_mean(numbers, mean)\n                                                        ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    var count = 0.0\n    for _, number := range numbers {\n        sum += number\n        count += 1\n    }\n    mean = sum / count\n    return mean_absolute_deviation_helper(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5_27q_t4.swift:13:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmp5_27q_t4.swift:13:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmp5_27q_t4.swift:18:12: error: cannot find 'mean_absolute_deviation_helper' in scope\n    return mean_absolute_deviation_helper(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\treturn sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp45bs20u8.swift:10:9: error: cannot find 'sum' in scope\n        return sum(numbers) / len(numbers)\n               ^~~\n/tmp/tmp45bs20u8.swift:10:24: error: cannot find 'len' in scope\n        return sum(numbers) / len(numbers)\n                              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, x := range numbers {\n        sum += math.Abs(x - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbeidqd5o.swift:12:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpbeidqd5o.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpbeidqd5o.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpbeidqd5o.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Calculate the mean of the input numbers\n    mean := mean(numbers)\n\n    // Create a list of differences between each element and the mean\n    differences := []Double{}\n    for _, number := range numbers {\n        differences = append(differences, number - mean)\n    }\n\n    // Calculate the mean absolute deviation\n    return mean_absolute_deviation(differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx2wc0ayu.swift:11:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpx2wc0ayu.swift:11:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpx2wc0ayu.swift:15:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpx2wc0ayu.swift:15:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpx2wc0ayu.swift:11:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpx2wc0ayu.swift:20:36: error: cannot find 'differences' in scope\n    return mean_absolute_deviation(differences)\n                                   ^~~~~~~~~~~\n/tmp/tmpx2wc0ayu.swift:20:36: error: missing argument label 'numbers:' in call\n    return mean_absolute_deviation(differences)\n                                   ^\n                                   numbers: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return numbers.map(x -> abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmph3g8nser.swift:10:24: error: cannot find 'x' in scope\n    return numbers.map(x -> abs(x - mean(numbers)))\n                       ^\n/tmp/tmph3g8nser.swift:10:33: error: cannot find 'x' in scope\n    return numbers.map(x -> abs(x - mean(numbers)))\n                                ^\n/tmp/tmph3g8nser.swift:10:37: error: cannot find 'mean' in scope\n    return numbers.map(x -> abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmph3g8nser.swift:10:24: error: expected type before '->'\n    return numbers.map(x -> abs(x - mean(numbers)))\n                       ^\n/tmp/tmph3g8nser.swift:10:29: error: expected type after '->'\n    return numbers.map(x -> abs(x - mean(numbers)))\n                            ^\n/tmp/tmph3g8nser.swift:10:20: error: no exact matches in call to instance method 'map'\n    return numbers.map(x -> abs(x - mean(numbers)))\n                   ^\n/tmp/tmph3g8nser.swift:10:20: note: found candidate with type '((Double) throws -> _) throws -> Array<_>'\n    return numbers.map(x -> abs(x - mean(numbers)))\n                   ^\n/tmp/tmph3g8nser.swift:10:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x -> abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, x := range numbers {\n        sum += math.Abs(x - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo_c9u6pw.swift:11:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpo_c9u6pw.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpo_c9u6pw.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Calculate the mean of the dataset\n    mean := mean(numbers)\n\n    // Calculate the sum of the absolute differences from the mean\n    sum_of_absolute_differences := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences += abs(number - mean)\n    }\n\n    // Return the mean absolute deviation\n    return sum_of_absolute_differences / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpk4iab74i.swift:11:9: error: consecutive statements on a line must be separated by ';'\n    mean := mean(numbers)\n        ^\n        ;\n/tmp/tmpk4iab74i.swift:11:10: error: expected expression\n    mean := mean(numbers)\n         ^\n/tmp/tmpk4iab74i.swift:15:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpk4iab74i.swift:15:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpk4iab74i.swift:11:5: error: cannot find 'mean' in scope\n    mean := mean(numbers)\n    ^~~~\n/tmp/tmpk4iab74i.swift:20:12: error: cannot find 'sum_of_absolute_differences' in scope\n    return sum_of_absolute_differences / float64(len(numbers))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk4iab74i.swift:20:42: error: cannot find 'float64' in scope\n    return sum_of_absolute_differences / float64(len(numbers))\n                                         ^~~~~~~\n/tmp/tmpk4iab74i.swift:20:50: error: cannot find 'len' in scope\n    return sum_of_absolute_differences / float64(len(numbers))\n                                                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmptqci7s8i.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n           ^~~\n/tmp/tmptqci7s8i.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n               ^~~\n/tmp/tmptqci7s8i.swift:10:37: error: cannot find 'len' in scope\n    return sum(map(numbers, abs)) / len(numbers)\n                                    ^~~\n/tmp/tmptqci7s8i.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / len(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += value\n        count += 1.0\n    }\n    mean = sum / count\n    return mean_absolute_deviation_helper(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp0gryzjp4.swift:13:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmp0gryzjp4.swift:13:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmp0gryzjp4.swift:18:12: error: cannot find 'mean_absolute_deviation_helper' in scope\n    return mean_absolute_deviation_helper(numbers, mean)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmps3htadfq.swift:10:33: error: expected ',' separator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                                ^\n                               ,\n/tmp/tmps3htadfq.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n           ^~~\n/tmp/tmps3htadfq.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n               ^~~\n/tmp/tmps3htadfq.swift:10:29: error: '|' is not a prefix unary operator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                            ^\n/tmp/tmps3htadfq.swift:10:31: error: '|' is not a postfix unary operator\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                              ^\n/tmp/tmps3htadfq.swift:10:30: error: cannot find 'x' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                             ^\n/tmp/tmps3htadfq.swift:10:37: error: cannot find 'x' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                                    ^\n/tmp/tmps3htadfq.swift:10:41: error: cannot find 'mean' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                                        ^~~~\n/tmp/tmps3htadfq.swift:10:60: error: cannot find 'len' in scope\n    return sum(map(numbers, |x| abs(x - mean(numbers)))) / len(numbers)\n                                                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    mean = sum / len(numbers)\n    return mean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6inbxgko.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmp6inbxgko.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpq1zdk6jh.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpq1zdk6jh.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphhonf63b.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphhonf63b.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.map(x => abs(x - mean(numbers)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpokw28s_q.swift:11:24: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                       ^\n/tmp/tmpokw28s_q.swift:11:26: error: cannot find operator '=>' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                         ^~\n/tmp/tmpokw28s_q.swift:11:33: error: cannot find 'x' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                ^\n/tmp/tmpokw28s_q.swift:11:37: error: cannot find 'mean' in scope\n    return numbers.map(x => abs(x - mean(numbers)))\n                                    ^~~~\n/tmp/tmpokw28s_q.swift:11:12: error: generic parameter 'T' could not be inferred\n    return numbers.map(x => abs(x - mean(numbers)))\n           ^\nSwift.Collection:2:28: note: in call to function 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n/tmp/tmpokw28s_q.swift:11:20: error: cannot convert return expression of type '[T]' to return type 'Double'\n    return numbers.map(x => abs(x - mean(numbers)))\n           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphhonf63b.swift:11:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmphhonf63b.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphhonf63b.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmph8snpn74.swift:11:33: error: cannot find 'x' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                ^\n/tmp/tmph8snpn74.swift:11:36: error: cannot find 'y' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                   ^\n/tmp/tmph8snpn74.swift:11:42: error: cannot find 'x' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                         ^\n/tmp/tmph8snpn74.swift:11:46: error: cannot find 'math' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                             ^~~~\n/tmp/tmph8snpn74.swift:11:55: error: cannot find 'y' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                                      ^\n/tmp/tmph8snpn74.swift:11:59: error: cannot find 'x' in scope\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                                          ^\n/tmp/tmph8snpn74.swift:11:32: error: expected type before '->'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                               ^\n/tmp/tmph8snpn74.swift:11:44: error: expected type after '->'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                           ^\n/tmp/tmph8snpn74.swift:11:32: error: cannot convert value of type '_.Type' to expected argument type '(Double, Double) throws -> Double'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                               ^\n/tmp/tmph8snpn74.swift:11:73: error: value of type '[Double]' has no member 'length'\n    return numbers.reduce(0.0, (x, y) -> x + math.Abs(y - x)) / numbers.length\n                                                                ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\t// Create a centerpoint for this dataset\n\tvar mean = mean(numbers)\n\t// Create an empty list to hold the deviations\n\tvar deviations = []Double{}\n\t// For each number in the dataset\n\tfor _, number := range numbers {\n\t\t// Calculate the absolute difference between this number and the mean\n\t\tdeviations = append(deviations, abs(number - mean))\n\t}\n\t// Calculate the average of the absolute differences\n\treturn mean(deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwqcfhbfq.swift:13:21: error: consecutive statements on a line must be separated by ';'\n        var deviations = []Double{}\n                           ^\n                           ;\n/tmp/tmpwqcfhbfq.swift:15:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpwqcfhbfq.swift:15:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpwqcfhbfq.swift:11:13: error: use of local variable 'mean' before its declaration\n        var mean = mean(numbers)\n                   ^\n/tmp/tmpwqcfhbfq.swift:11:6: note: 'mean' declared here\n        var mean = mean(numbers)\n            ^\n/tmp/tmpwqcfhbfq.swift:13:19: error: empty collection literal requires an explicit type\n        var deviations = []Double{}\n                         ^~\n/tmp/tmpwqcfhbfq.swift:13:21: error: no exact matches in call to initializer \n        var deviations = []Double{}\n                           ^\nSwift.Double:2:23: note: candidate requires that '() -> ()' conform to 'StringProtocol' (requirement specified as 'S' : 'StringProtocol')\n    @inlinable public init?<S>(_ text: S) where S : StringProtocol\n                      ^\nSwift.Double:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'Source' : 'BinaryInteger')\n    @inlinable public init<Source>(_ value: Source) where Source : BinaryInteger\n                      ^\nSwift.Double:4:12: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'Source' : 'BinaryInteger')\n    public init?<Source>(exactly value: Source) where Source : BinaryInteger\n           ^\nSwift.BinaryFloatingPoint:5:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'Source' : 'BinaryFloatingPoint')\n    @inlinable public init<Source>(_ value: Source) where Source : BinaryFloatingPoint\n                      ^\nSwift.BinaryFloatingPoint:6:23: note: candidate requires that '() -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, number := range numbers {\n\t\tsum += math.Abs(number - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbypvm03_.swift:11:7: error: expected 'in' after for-each pattern\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, number := range numbers {\n             ^\n/tmp/tmpbypvm03_.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmpbypvm03_.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0.0\n    for _, value := range numbers {\n        sum += value\n        count += 1.0\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpgegarq6_.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpgegarq6_.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpm6fk4dui.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmpm6fk4dui.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpm6fk4dui.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpm6fk4dui.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpm6fk4dui.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean(numbers))\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphpv20zda.swift:11:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:11:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmphpv20zda.swift:14:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmphpv20zda.swift:14:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tmean := mean(numbers)\n\treturn mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwsjupfk9.swift:10:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpwsjupfk9.swift:10:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpwsjupfk9.swift:10:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpwsjupfk9.swift:11:9: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n        return mean_absolute_deviation_around_mean(numbers, mean)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwsjupfk9.swift:11:54: error: cannot find 'mean' in scope\n        return mean_absolute_deviation_around_mean(numbers, mean)\n                                                            ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return mean(numbers) - mean(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpja4zm7dr.swift:10:12: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n           ^~~~\n/tmp/tmpja4zm7dr.swift:10:28: error: cannot find 'mean' in scope\n    return mean(numbers) - mean(numbers)\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tvar sum = 0.0\n\tfor _, value := range numbers {\n\t\tsum += math.Abs(value - mean(numbers))\n\t}\n\treturn sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppi2vtzm7.swift:11:7: error: expected 'in' after for-each pattern\n        for _, value := range numbers {\n             ^\n/tmp/tmppi2vtzm7.swift:11:7: error: expected Sequence expression for for-each loop\n        for _, value := range numbers {\n             ^\n/tmp/tmppi2vtzm7.swift:14:15: error: cannot find 'float64' in scope\n        return sum / float64(len(numbers))\n                     ^~~~~~~\n/tmp/tmppi2vtzm7.swift:14:23: error: cannot find 'len' in scope\n        return sum / float64(len(numbers))\n                             ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmp1r8xxw83/tmp1r8xxw83.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1b60f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1b5df0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1b5df0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1b5def7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1r8xxw83                        0x0000564d75010353 <unavailable> + 4947\n5    libc.so.6                          0x00002ad1b62e5460 __libc_start_main + 245\n6    tmp1r8xxw83                        0x0000564d7500ffa9 <unavailable> + 4009\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, x := range numbers {\n        sum += math.Abs(x - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbeidqd5o.swift:12:10: error: expected 'in' after for-each pattern\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, x := range numbers {\n         ^\n/tmp/tmpbeidqd5o.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpbeidqd5o.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpbeidqd5o.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpbeidqd5o.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var mean = mean(numbers)\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpakk3c3tp.swift:12:10: error: expected 'in' after for-each pattern\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, number := range numbers {\n         ^\n/tmp/tmpakk3c3tp.swift:11:16: error: use of local variable 'mean' before its declaration\n    var mean = mean(numbers)\n               ^\n/tmp/tmpakk3c3tp.swift:11:9: note: 'mean' declared here\n    var mean = mean(numbers)\n        ^\n/tmp/tmpakk3c3tp.swift:15:18: error: cannot find 'float64' in scope\n    return sum / float64(len(numbers))\n                 ^~~~~~~\n/tmp/tmpakk3c3tp.swift:15:26: error: cannot find 'len' in scope\n    return sum / float64(len(numbers))\n                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n\tmean := mean(numbers)\n\treturn mean_absolute_deviation_around_mean(numbers, mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwsjupfk9.swift:10:6: error: consecutive statements on a line must be separated by ';'\n        mean := mean(numbers)\n            ^\n            ;\n/tmp/tmpwsjupfk9.swift:10:7: error: expected expression\n        mean := mean(numbers)\n             ^\n/tmp/tmpwsjupfk9.swift:10:2: error: cannot find 'mean' in scope\n        mean := mean(numbers)\n        ^~~~\n/tmp/tmpwsjupfk9.swift:11:9: error: cannot find 'mean_absolute_deviation_around_mean' in scope\n        return mean_absolute_deviation_around_mean(numbers, mean)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwsjupfk9.swift:11:54: error: cannot find 'mean' in scope\n        return mean_absolute_deviation_around_mean(numbers, mean)\n                                                            ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    var sum = 0.0\n    var count = 0\n    for _, value := range numbers {\n        sum += math.Abs(value - mean(numbers))\n        count += 1\n    }\n    return sum / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp4kueav4s.swift:12:10: error: expected 'in' after for-each pattern\n    for _, value := range numbers {\n         ^\n/tmp/tmp4kueav4s.swift:12:10: error: expected Sequence expression for for-each loop\n    for _, value := range numbers {\n         ^\n/tmp/tmp4kueav4s.swift:16:18: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return sum / count\n                 ^\n                 Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(map(numbers, abs)) / length(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_jka_8pj.swift:10:12: error: cannot find 'sum' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n           ^~~\n/tmp/tmp_jka_8pj.swift:10:16: error: cannot find 'map' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n               ^~~\n/tmp/tmp_jka_8pj.swift:10:37: error: cannot find 'length' in scope\n    return sum(map(numbers, abs)) / length(numbers)\n                                    ^~~~~~\n/tmp/tmp_jka_8pj.swift:10:29: error: generic parameter 'T' could not be inferred\n    return sum(map(numbers, abs)) / length(numbers)\n                            ^\nSwift.abs:1:24: note: in call to function 'abs'\n@inlinable public func abs<T>(_ x: T) -> T where T : Comparable, T : SignedNumeric\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    return sum(numbers) / len(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp5j14rz9l.swift:10:12: error: cannot find 'sum' in scope\n    return sum(numbers) / len(numbers)\n           ^~~\n/tmp/tmp5j14rz9l.swift:10:27: error: cannot find 'len' in scope\n    return sum(numbers) / len(numbers)\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}