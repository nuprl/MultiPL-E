{
  "name": "HumanEval_68_pluck",
  "language": "swift",
  "prompt": "\n/// \"Given an array representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in an array, [ smalest_value, its index ],\n/// If there are no even values or the given array is empty, return [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])",
  "completions": [
    "  if len(arr) == 0 {\n    return []\n  }\n  min_index := 0\n  min_value := arr[0]\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 && arr[i] < min_value {\n      min_value = arr[i]\n      min_index = i\n    }\n  }\n  return [min_value, min_index]",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "    ",
    "    ",
    "  var result = []\n  var min_even = math.MaxInt32\n  var min_index = -1\n  for i, node := range arr {\n    if node % 2 == 0 {\n      if node < min_even {\n        min_even = node\n        min_index = i\n      }\n    }\n  }\n  if min_index != -1 {\n    result = append(result, min_even)\n    result = append(result, min_index)\n  }\n  return result",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "    ",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, node := range arr {\n    if node % 2 == 0 {\n      if min_value == -1 {\n        min_value = node\n        min_index = i\n      } else if node < min_value {\n        min_value = node\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_even = math.MaxInt32\n  var min_index = -1\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  if min_index != -1 {\n    result = append(result, min_even)\n    result = append(result, min_index)\n  }\n  return result",
    "    ",
    "  var res = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      res = append(res, arr[i])\n    }\n  }\n  if len(res) == 0 {\n    return []\n  }\n  sort.Slice(res, func(i, j int) bool {\n    return res[i] < res[j]\n  })\n  return res",
    "  var result = [Int]\n  var min_even = -1\n  var min_index = -1\n  for i, node in arr.iter():\n    if node % 2 == 0:\n      if min_even == -1:\n        min_even = node\n        min_index = i\n      else if node < min_even:\n        min_even = node\n        min_index = i\n  result = [min_even, min_index]\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = arr[0]\n  var min_index = 0\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if v < min_even:\n        min_even = v\n        min_index = i\n    else:\n      result = append(result, [min_even, min_index])\n  return result",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value, min_index := arr[0], 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "    ",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  var min_even = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even, min_index]",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 || v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min = arr[0]\n  var minIndex = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  result = append(result, min)\n  result = append(result, minIndex)\n  return result",
    "    ",
    "  ",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Ints(result)\n  return result",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Ints(result)\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_value = arr[0]\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = []\n  var min_even = arr[0]\n  var min_index = 0\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if v < min_even:\n        min_even = v\n        min_index = i\n    else:\n      result = append(result, [min_even, min_index])\n      min_even = arr[0]\n      min_index = 0\n  result = append(result, [min_even, min_index])\n  return result",
    "    ",
    "    ",
    "    ",
    "  var min_even = arr.reduce((a, b) => a + b)\n  var min_index = arr.reduce((a, b) => a + b)\n  var result = []\n  for i, v in arr.enumerate() {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  result = [min_even, min_index]\n  return result",
    "    ",
    "  var res = []\n  var min = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      min_index = i\n    }\n  }\n  if min % 2 == 0 {\n    res = [min, min_index]\n  }\n  return res",
    "    ",
    "    ",
    "    ",
    "  if arr == nil {\n    return []\n  }\n  if arr.length == 0 {\n    return []\n  }\n  if arr.length == 1 {\n    return [arr[0], 0]\n  }\n  min_even_value := arr[0]\n  min_index := 0\n  for i := 1; i < arr.length; i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "  var result = []\n  for i, v in arr.iter() {\n    if v % 2 == 0 {\n      result = append(result, [v, i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i][0] < result[j][0]\n  })\n  return result[0]",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_even == -1 {\n        min_even = v\n        min_index = i\n      } else if v < min_even {\n        min_even = v\n        min_index = i\n      } else if v == min_even && i < min_index {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  \n  var min_even_value = arr[0]\n  var min_index = 0\n  \n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  \n  return [min_even_value, min_index]",
    "  var result = [Int]\n  var min_even = 0\n  var min_index = 0\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if v < min_even:\n        min_even = v\n        min_index = i\n      elif v == min_even:\n        if i < min_index:\n          min_index = i\n    else:\n      result = append(result, v)\n  return result",
    "    ",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 || v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_index)\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value, min_index := arr[0], 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even_value {\n        min_even_value = v\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "  var min_even_value = math.MaxInt32\n  var min_index = math.MaxInt32\n  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  if min_even_value == math.MaxInt32 {\n    return result\n  }\n  result = append(result, min_index)\n  return result",
    "    ",
    "    ",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = []\n  var min_even = arr[0]\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  var result = [2]int{arr[0], 0}\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result[1] = i\n      break\n    }\n  }\n  return result",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 {\n        min_value = v\n        min_index = i\n      } else if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_index, min_value := 0, arr[0]\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  return [min_value, min_index]",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 || v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "  var res = []\n  var min = arr[0]\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min {\n        min = v\n        min_index = i\n      }\n    }\n  }\n  res = append(res, min)\n  res = append(res, min_index)\n  return res",
    "    ",
    "    ",
    "    ",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "    ",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, node := range arr {\n    if node % 2 == 0 {\n      if min_even == -1 {\n        min_even = node\n        min_index = i\n      } else if node < min_even {\n        min_even = node\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 && arr[i] < min_even {\n      min_even = arr[i]\n      min_index = i\n    }\n  }\n  return [min_even, min_index]",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_even == -1 {\n        min_even = v\n        min_index = i\n      } else if v < min_even {\n        min_even = v\n        min_index = i\n      } else if v == min_even && i < min_index {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "    ",
    "  var result = []\n  var min = arr[0]\n  var index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n  result = append(result, min)\n  result = append(result, index)\n  return result",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if min_even == 0:\n        min_even = v\n        min_index = i\n      elif v < min_even:\n        min_even = v\n        min_index = i\n  result = [min_even, min_index]\n  return result",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var res = []\n  var min_even = -1\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_even == -1 {\n        min_even = v\n        min_index = i\n      } else if v < min_even {\n        min_even = v\n        min_index = i\n      } else if v == min_even && i < min_index {\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return res\n  }\n  res = append(res, min_even)\n  res = append(res, min_index)\n  return res",
    "    ",
    "  ",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "    ",
    "    ",
    "  var min_even_value = -1\n  var min_index = -1\n  var min_value = -1\n  var min_index_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even_value {\n        min_even_value = v\n        min_index = i\n      }\n    } else {\n      if v < min_value {\n        min_value = v\n        min_index_value = i\n      }\n    }\n  }\n  if min_even_value == -1 {\n    return []\n  }\n  if min_index_value == -1 {\n    return [min_even_value, min_index]\n  }\n  return [min_even_value, min_index, min_index_value]",
    "    ",
    "  var result = []\n  var min_even = math.MaxInt32\n  var min_index = math.MaxInt32\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  if min_even == math.MaxInt32 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = [Int]\n  var min = arr[0]\n  var index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      index = i\n    }\n  }\n  result = append(result, min)\n  result = append(result, index)\n  return result",
    "    ",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  if arr[0] % 2 == 0 {\n    return [arr[0], 0]\n  }\n  var result = [Int]\n  var min = arr[0]\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min {\n        min = arr[i]\n        result[1] = i\n      }\n    }\n  }\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  \n  minEven := arr[0]\n  minIndex := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < minEven {\n        minEven = arr[i]\n        minIndex = i\n      }\n    }\n  }\n  return [minEven, minIndex]",
    "    ",
    "    ",
    "  ",
    "    ",
    "  ",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_even == -1 || v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = [Int]\n  var min_even = -1\n  var min_index = -1\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if min_even == -1:\n        min_even = v\n        min_index = i\n      else if v < min_even:\n        min_even = v\n        min_index = i\n  if min_even == -1:\n    return result\n  result = [min_even, min_index]\n  return result",
    "    ",
    "  var min_index = 0\n  var min_value = arr[0]\n  var result = []\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = []\n  var min_value = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_value {\n        min_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = []\n  var min = arr[0]\n  var minIndex = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  result = append(result, min)\n  result = append(result, minIndex)\n  return result",
    "  var min_even = [Int]\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_even[0] == 0 {\n        min_even = [v, i]\n        min_index = i\n      } else if v < min_even[0] {\n        min_even = [v, i]\n        min_index = i\n      } else if v == min_even[0] && i < min_index {\n        min_even = [v, i]\n        min_index = i\n      }\n    }\n  }\n  return min_even",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = math.MaxInt32\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  if min_index != -1 {\n    result = append(result, min_even)\n    result = append(result, min_index)\n  }\n  return result",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = arr[0]\n  var min_index = 0\n  for i, v in arr.iter():\n    if v % 2 == 0 and v < min_even:\n      min_even = v\n      min_index = i\n    elif v % 2 == 0 and v > min_even:\n      result = append(result, min_even)\n      result = append(result, min_index)\n      min_even = v\n      min_index = i\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_value = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_value {\n        min_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i, node in arr.iter():\n    if node % 2 == 0:\n      if node < min_even:\n        min_even = node\n        min_index = i\n      elif node == min_even:\n        if i < min_index:\n          min_index = i\n    else:\n      result = append(result, node)\n  return result",
    "    ",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "  var result = []\n  var min_value = math.MaxInt32\n  var min_index = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 || v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "    ",
    "    ",
    "    ",
    "  var result = []\n  var min_even = 0\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_even {\n        min_even = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even, min_index]",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "    ",
    "  var result = []\n  var min_value = arr[0]\n  var min_index = 0\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "    ",
    "  var result = []\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "    ",
    "  var result = []\n  var min_value = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_value {\n        min_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  result = append(result, min_value)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_index = -1\n  var min_value = -1\n  for i, v := range arr {\n    if v % 2 == 0 {\n      if min_value == -1 || v < min_value {\n        min_value = v\n        min_index = i\n      }\n    }\n  }\n  if min_index == -1 {\n    return result\n  }\n  result = append(result, min_index)\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  var result = [2]int{arr[0], 0}\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result[1] = i\n      break\n    }\n  }\n  return result",
    "  var res = [Int]\n  var min = arr[0]\n  var min_index = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      min_index = i\n    }\n  }\n  res = [min, min_index]\n  return res",
    "    ",
    "  ",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, node := range arr {\n    if node % 2 == 0 {\n      if min_even == -1 {\n        min_even = node\n        min_index = i\n      } else if node < min_even {\n        min_even = node\n        min_index = i\n      } else if node == min_even && i < min_index {\n        min_even = node\n        min_index = i\n      }\n    }\n  }\n  if min_even == -1 {\n    return result\n  }\n  result = append(result, min_even)\n  result = append(result, min_index)\n  return result",
    "  var result = []\n  var min_even = -1\n  var min_index = -1\n  for i, v in arr.iter():\n    if v % 2 == 0:\n      if min_even == -1:\n        min_even = v\n        min_index = i\n      elif v < min_even:\n        min_even = v\n        min_index = i\n  if min_even == -1:\n    return result\n  result = [min_even, min_index]\n  return result",
    "  var res = []\n  for i, v := range arr {\n    if v % 2 == 0 {\n      res = append(res, [v, i])\n    }\n  }\n  if len(res) == 0 {\n    return []\n  }\n  sort.Slice(res, func(i, j int) bool {\n    return res[i][0] < res[j][0]\n  })\n  return res[0]",
    "    ",
    "    ",
    "    ",
    "  ",
    "    ",
    "    ",
    "  if len(arr) == 0 {\n    return []\n  }\n  if arr[0] % 2 == 0 {\n    return [arr[0], 0]\n  }\n  var min_index = 0\n  var min_value = arr[0]\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_value {\n        min_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_value, min_index]",
    "    ",
    "  ",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even {\n        min_even = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even, min_index]",
    "    ",
    "    ",
    "  var result []Int\n  for i := 0; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      result = append(result, arr[i])\n    }\n  }\n  if len(result) == 0 {\n    return []\n  }\n  sort.Slice(result, func(i, j int) bool {\n    return result[i] < result[j]\n  })\n  return result",
    "  if len(arr) == 0 {\n    return []\n  }\n  min_even_value := arr[0]\n  min_index := 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] % 2 == 0 {\n      if arr[i] < min_even_value {\n        min_even_value = arr[i]\n        min_index = i\n      }\n    }\n  }\n  return [min_even_value, min_index]",
    "  var result = []\n  var min = arr[0]\n  var minIndex = 0\n  for i := 1; i < len(arr); i++ {\n    if arr[i] < min {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  result = append(result, min)\n  result = append(result, minIndex)\n  return result",
    "    ",
    "    ",
    "    "
  ],
  "stop_tokens": [
    "\n}"
  ]
}