{
  "name": "HumanEval_159_eat",
  "language": "swift",
  "prompt": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])",
  "completions": [
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if remaining == 0 {\n        return [number, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number, number - need]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [number, need - number]",
    "    if number < need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, remaining]\n    }\n    return [number, remaining]",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [0, remaining]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number < need {\n        return [number, remaining]\n    } else if number == need {\n        return [number, 0]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, 0]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [0, 0]\n    }",
    "    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    ",
    "    // Write your code here\n    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number < need {\n        return [number, 0]\n    }\n    if number >= need {\n        return [number - need, remaining - need]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining - number]\n    }\n    if number < need and remaining > 0 {\n        return [number, remaining]\n    }\n    if number < need and remaining == 0 {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, remaining]\n    }",
    "    if number > need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, 0]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - need]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number, number - need]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, remaining]\n    }",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    // Write your code here\n    var result [2]Int\n    if number < need {\n        result[0] = number\n        result[1] = remaining\n    } else {\n        result[0] = need\n        result[1] = remaining - number\n    }\n    return result",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number < 0 {\n        return [0, 0]\n    }\n    if need < 0 {\n        return [0, 0]\n    }\n    if remaining < 0 {\n        return [0, 0]\n    }\n    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, remaining - number]\n    }\n    if number > need {\n        return [number - need, remaining]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number < need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > need {\n        return [number - need, remaining - need]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining >= need - number {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number < need {\n        return [number, remaining]\n    } else {\n        return [number - need, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - need]",
    "    if number < need {\n        return [number, remaining]\n    }\n    if number == need {\n        return [number, 0]\n    }\n    if number > need {\n        return [number - need, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining > 0 {\n        return [number + remaining, remaining - number]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, 0]\n    }\n    if number < need and remaining > 0 {\n        return [number + remaining, remaining]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number + need, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number < need {\n        return [number, remaining]\n    }\n    if number > need {\n        return [number - need, remaining - need]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, need - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    return [number, remaining - number]",
    "    if number > need {\n        return [number, 0]\n    }\n    if number == need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number + need, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - need]\n        } else {\n            return [number, 0]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining - number]\n    }\n    if number > 0 {\n        return [number, remaining]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, remaining - need]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining - number]\n    }\n    return [number, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    // Write your code here\n    return [number + need, remaining - need]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number < need {\n        return [number, 0]\n    } else if number > need {\n        return [number - need, remaining]\n    } else {\n        return [number, remaining]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number < need {\n        return [number, remaining]\n    } else {\n        return [number + need, remaining - need]\n    }",
    "    if number > 0 {\n        if number >= need {\n            return [number, remaining - number]\n        } else {\n            return [number, remaining]\n        }\n    } else {\n        return [0, 0]\n    }",
    "    ",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    } else if number > 0 {\n        return [number, remaining - number]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number == 0 {\n        return [0, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining - need]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    if number >= need {\n        return [number, 0]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    } else {\n        return [number, 0]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need {\n        return [number, 0]\n    }\n    return [0, 0]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number < need and remaining >= need - number {\n        return [number + remaining, 0]\n    }\n    return [number, 0]",
    "    // Write your code here\n    var result [2]Int\n    result[0] = number + need\n    result[1] = remaining - need\n    if result[1] < 0 {\n        result[1] = 0\n    }\n    return result",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number + remaining >= need {\n        return [number + remaining, 0]\n    }\n    return [number, remaining - number]",
    "    // Write your code here\n    if number >= need {\n        return [number, remaining]\n    }\n    if number >= remaining {\n        return [number, 0]\n    }\n    return [number, remaining - number]",
    "    if number < need {\n        return [number, 0]\n    } else if number == need {\n        return [number, remaining]\n    } else {\n        return [number - need, remaining - need]\n    }",
    "    if number >= need {\n        return [number, remaining]\n    }\n    if number > 0 {\n        return [number, remaining - number]\n    }\n    return [0, remaining]"
  ],
  "stop_tokens": [
    "\n}"
  ]
}