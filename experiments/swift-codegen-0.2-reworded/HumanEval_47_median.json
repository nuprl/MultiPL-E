{
  "name": "HumanEval_47_median",
  "language": "swift",
  "prompt": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
  "completions": [
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    sort.Ints(l)\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        panic(\"median of empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +",
    "    var m Int\n    var i Int\n    var j Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < median {\n            median = l[i]\n        }\n    }\n    return median",
    "    // Write your code here\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median_aux(l, 0, len(l) - 1)",
    "    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < median {\n            median = l[i]\n        } else if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: l.sort())",
    "    // write your code here\n    return 0.0",
    "    // Write your code here\n    return 0.0",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[len(l) / 2]\n    if len(l) % 2 == 0 {\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l = sort(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: toList(l))",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return quickselect(l, 0, len(l) - 1, len(l) / 2)",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    m := len(l) / 2\n    return (l[m] + l[m-1]) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    // write your code here\n    return 0.0",
    "    return median_int(l)",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "    return median_helper(l)",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "    // write your code here\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +",
    "    return median(l: l.sort())",
    "    return median_helper(l, 0, len(l))",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = sort(l)\n    var l_half = l_sorted[l_len/2]\n    if l_len%2 == 0 {\n        return (l_half + l_sorted[l_len/2-1]) / 2.0\n    }\n    return l_half",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if l_len % 2 == 0 {\n        return (l[l_len / 2] + l[l_len / 2 - 1]) / 2.0\n    }\n    return l[l_len / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[len(l) / 2]\n    for i := 0; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    // write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    \n    l.sort()\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }",
    "    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: toList(l))",
    "    // write your code here\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    return median(l: [Int])",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    var m Int\n    var i Int\n    var j Int\n    var n Int\n    var a [Int]\n    var b [Int]\n    var c [Int]\n    var d [Int]\n    var e [Int]\n    var f [Int]\n    var g [Int]\n    var h [Int]\n    var i1 Int\n    var i2 Int\n    var i3 Int\n    var i4 Int\n    var i5 Int\n    var i6 Int\n    var i7 Int\n    var i8 Int\n    var i9 Int\n    var i10 Int\n    var i11 Int\n    var i12 Int\n    var i13 Int\n    var i14 Int\n    var i15 Int\n    var i16 Int\n    var i17 Int\n    var i18 Int\n    var i19 Int\n    var i20 Int\n    var i21 Int\n    var i22 Int\n    var i23 Int\n    var i24 Int\n    var i25 Int\n    var i26 Int\n    var i27 Int\n    var i28 Int\n    var i29 Int\n    var i30 Int\n    var i31 Int\n    var i32 Int\n    var i33 Int\n    var i34 Int\n    var i35 Int\n    var i36 Int\n    var i37 Int\n    var i38 Int\n    var i39 Int\n    var i40 Int\n    var i41 Int\n    var i42 Int\n    var i43 Int\n    var i44 Int\n    var i45 Int\n    var i46 Int\n    var i47 Int\n    var i48 Int\n    var i49 Int\n    var i50 Int\n    var i51 Int\n    var i52 Int\n    var i53 Int\n    var i54 Int\n    var i55 Int\n    var i56 Int\n    var i57 Int\n    var i58 Int\n    var i59 Int\n    var i60 Int\n    var i61 Int\n    var i62 Int\n    var i63 Int\n    var i64 Int\n    var i65 Int\n    var i66 Int\n    var i67 Int\n    var i68 Int\n    var i69 Int\n    var i70 Int\n    var i71 Int\n    var i72 Int\n    var i73",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: [Double])",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    var l_len = len(l)\n    if l_len == 0 {\n        panic(\"median: list is empty\")\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_half = l_len / 2\n    var l_half_1 = l_half - 1\n    var l_half_2 = l_half\n    var l_half_3 = l_half + 1\n    var l_half_4 = l_half + 2\n    var l_half_5 = l_half + 3\n    var l_half_6 = l_half + 4\n    var l_half_7 = l_half + 5\n    var l_half_8 = l_half + 6\n    var l_half_9 = l_half + 7\n    var l_half_10 = l_half + 8\n    var l_half_11 = l_half + 9\n    var l_half_12 = l_half + 10\n    var l_half_13 = l_half + 11\n    var l_half_14 = l_half + 12\n    var l_half_15 = l_half + 13\n    var l_half_16 = l_half + 14\n    var l_half_17 = l_half + 15\n    var l_half_18 = l_half + 16\n    var l_half_19 = l_half + 17\n    var l_half_20 = l_half + 18\n    var l_half_21 = l_half + 19\n    var l_half_22 = l_half + 20\n    var l_half_23 = l_half + 21\n    var l_half_24 = l_half + 22\n    var l_half_25 = l_half + 23\n    var l_half_26 = l_half + 24\n    var l_half_27 = l_half + 25\n    var l_half_28 = l_half + 26\n    var l_half_29 = l_half + 27\n    var l_half_30 = l_half + 28\n    var l_half_31 = l_half + 29\n    var l_half_32 = l_half + 30\n    ",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = sort(l)\n    var middle = l_sorted[l_len/2]\n    if l_len%2 == 0 {\n        return (middle + l_sorted[l_len/2-1]) / 2.0\n    }\n    return middle",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_mid = l_len / 2\n    var l_left = l[:l_mid]\n    var l_right = l[l_mid:]\n    return (median(l_left) + median(l_right)) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_mid = l_len / 2\n    var l_left = l[0:l_mid]\n    var l_right = l[l_mid:]\n    return (median(l_left) + median(l_right)) / 2.0",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid - 1]) / 2.0\n    }\n    return l[mid]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    // Write your code here\n    return 0.0",
    "    // write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return quickselect(l, 0, len(l)-1, len(l)/2)",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }",
    "    return median_helper(l, 0, len(l))",
    "    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var",
    "    return median(l: l.sort())",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    left := l[:mid]\n    right := l[mid:]\n    return (median(left) + median(right)) / 2",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: l.sort())",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }",
    "    // Write your code here\n    return 0.0",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    return (l[mid] + l[mid-1]) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]",
    "    l = sort(l)\n    n := len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n%2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n    }\n    return l[n/2]",
    "    if len(l) == 0 {\n        return 0\n    }\n    \n    l.sort()\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    } else {\n        return l[len(l) / 2]\n    }",
    "    var sorted = sort(l)\n    var middle = len(sorted) / 2\n    if len(sorted) % 2 == 0 {\n        return (sorted[middle] + sorted[middle - 1]) / 2.0\n    } else {\n        return sorted[middle]\n    }",
    "    // Write your code here\n    return 0.0",
    "    return median_helper(l, 0, len(l))",
    "    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i1 Int\n    var i2 Int\n    var i3 Int\n    var i4 Int\n    var i5 Int\n    var i6 Int\n    var i7 Int\n    var i8 Int\n    var i9 Int\n    var i10 Int\n    var i11 Int\n    var i12 Int\n    var i13 Int\n    var i14 Int\n    var i15 Int\n    var i16 Int\n    var i17 Int\n    var i18 Int\n    var i19 Int\n    var i20 Int\n    var i21 Int\n    var i22 Int\n    var i23 Int\n    var i24 Int\n    var i25 Int\n    var i26 Int\n    var i27 Int\n    var i28 Int\n    var i29 Int\n    var i30 Int\n    var i31 Int\n    var i32 Int\n    var i33 Int\n    var i34 Int\n    var i35 Int\n    var i36 Int\n    var i37 Int\n    var i38 Int\n    var i39 Int\n    var i40 Int\n    var i41 Int\n    var i42 Int\n    var i43 Int\n    var i44 Int\n    var i45 Int\n    var i46 Int\n    var i47 Int\n    var i48 Int\n    var i49 Int\n    var i50 Int\n    var i51 Int\n    var i52 Int\n    var i53 Int\n    var i54 Int\n    var i55 Int\n    var i56 Int\n    var i57 Int\n    var i58 Int\n    var i59 Int\n    var i60 Int\n    var i61 Int\n    var i62 Int\n    var i63 Int\n    var i64 Int\n    var i65 Int\n    var",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: toList(l))",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    sorted := make([]Int, len(l))\n    copy(sorted, l)\n    sort.Ints(sorted)\n    if len(sorted) % 2 == 0 {\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n    }\n    return sorted[len(sorted) / 2]",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    return median(l: l.sort())",
    "    // Write your code here\n    return 0.0",
    "    var n = len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var m = n / 2\n    var i = 0\n    var j = n - 1\n    var k = 0\n    for k < m {\n        i = i + 1\n        j = j - 1\n        k = i + j\n    }\n    if l[i] > l[j] {\n        i = i + 1\n        j = j - 1\n        k = i + j\n    }\n    return (l[i] + l[j]) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +",
    "    return median(l: [Int])",
    "    // write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: l.sort())",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    return median_arr(l)",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    l = l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }",
    "    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    m := len(l) / 2\n    return (l[m] + l[m - 1]) / 2.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_sorted = sort(l)\n    var l_half = l_sorted[l_len / 2]\n    if l_len % 2 == 0 {\n        return (l_half + l_sorted[l_len / 2 - 1]) / 2.0\n    }\n    return l_half",
    "    l = sort(l)\n    n := len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n%2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n    }\n    return l[n/2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid-1]) / 2.0\n    }\n    return l[mid]",
    "    var (\n        n = len(l)\n        m = n/2\n        p = make([]Int, n)\n        q = make([]Int, n)\n    )\n    for i := 0; i < n; i++ {\n        p[i] = l[i]\n    }\n    sort.Ints(p)\n    for i := 0; i < m; i++ {\n        q[i] = p[i]\n    }\n    sort.Ints(q)\n    if n%2 == 0 {\n        return (q[m-1] + q[m]) / 2.0\n    }\n    return q[m]",
    "    return median_helper(l, 0, len(l))",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    \n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    \n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    \n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    \n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    \n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    \n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    \n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    \n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    \n    ",
    "    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    // Write your code here\n    return 0.0",
    "    // write your code here\n    return 0.0",
    "    return median_int(l)",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return median(l: l.sort())",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "    var sorted = sort(l)\n    var mid = len(sorted) / 2\n    if len(sorted) % 2 == 0 {\n        return (sorted[mid] + sorted[mid - 1]) / 2.0\n    } else {\n        return sorted[mid]\n    }",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    left := l[:mid]\n    right := l[mid:]\n    return (median(left) + median(right)) / 2.0",
    "    // write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    return quickselect(l, 0, len(l)-1, len(l)/2)",
    "    return median_helper(l, 0, len(l))",
    "    l = sort(l)\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]",
    "    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = make([]Int, l_len)\n    copy(l_sorted, l)\n    sort.Ints(l_sorted)\n    var l_half = l_len / 2\n    if l_len % 2 == 0 {\n        return (l_sorted[l_half] + l_sorted[l_half - 1]) / 2.0\n    } else {\n        return l_sorted[l_half]\n    }",
    "    return median_int(l)",
    "    return medianHelper(l, 0, len(l))",
    "    return median_helper(l, 0, len(l))",
    "    // Write your code here\n    return 0.0",
    "    return median(l: l.sort())",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "    // Write your code here\n    return 0.0",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]"
  ],
  "stop_tokens": [
    "\n}"
  ]
}