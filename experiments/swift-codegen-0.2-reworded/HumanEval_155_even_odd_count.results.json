{
  "name": "HumanEval_155_even_odd_count",
  "language": "swift",
  "prompt": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len; i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpfa_j2ypj.swift:11:12: error: expected type\n    for i := 0; i < num.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len; i++ {\n           ^\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpurpph4lg.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpurpph4lg.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpurpph4lg.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpurpph4lg.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:19:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:19:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var count = 0\n    var even = 0\n    for num > 0 {\n        count += 1\n        if num % 2 == 0 {\n            even += 1\n        }\n        num = num / 2\n    }\n    return (count, even)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp0rrcfp5f.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp0rrcfp5f.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp0rrcfp5f.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpurpph4lg.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpurpph4lg.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpurpph4lg.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpurpph4lg.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:19:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:19:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp9ahm2t6t.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp9ahm2t6t.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp9ahm2t6t.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp9ahm2t6t.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp9ahm2t6t.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp9ahm2t6t.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp9ahm2t6t.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp9ahm2t6t.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp9ahm2t6t.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpl761s9_0.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpl761s9_0.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpl761s9_0.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpurpph4lg.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpurpph4lg.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpurpph4lg.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpurpph4lg.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpurpph4lg.swift:19:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpurpph4lg.swift:19:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpzb9ep1dw.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpzb9ep1dw.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpzb9ep1dw.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 1)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpktnoeh4v/tmpktnoeh4v.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b259839cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2598093b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2598093988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25980927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpktnoeh4v                        0x000056536f9a13cd <unavailable> + 5069\n5    libc.so.6                          0x00002b2598588460 __libc_start_main + 245\n6    tmpktnoeh4v                        0x000056536f9a0f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpl761s9_0.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpl761s9_0.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpl761s9_0.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpbasjvksq.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpbasjvksq.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpbasjvksq.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var count = 0\n    var even = 0\n    for num > 0 {\n        count += 1\n        if num % 2 == 0 {\n            even += 1\n        }\n        num /= 10\n    }\n    return (even, count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp5b0g03tw.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp5b0g03tw.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp5b0g03tw.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len; i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpfa_j2ypj.swift:11:12: error: expected type\n    for i := 0; i < num.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len; i++ {\n           ^\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpbasjvksq.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpbasjvksq.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpbasjvksq.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var count = 0\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        count += 1\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpcwfk4bh0.swift:12:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpcwfk4bh0.swift:12:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpcwfk4bh0.swift:12:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpzb9ep1dw.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpzb9ep1dw.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpzb9ep1dw.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpl761s9_0.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpl761s9_0.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpl761s9_0.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp9ahm2t6t.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp9ahm2t6t.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp9ahm2t6t.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 1)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpktnoeh4v/tmpktnoeh4v.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b259839cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2598093b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2598093988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25980927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpktnoeh4v                        0x000056536f9a13cd <unavailable> + 5069\n5    libc.so.6                          0x00002b2598588460 __libc_start_main + 245\n6    tmpktnoeh4v                        0x000056536f9a0f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp9ahm2t6t.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp9ahm2t6t.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp9ahm2t6t.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num = num / 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpl761s9_0.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpl761s9_0.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpl761s9_0.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len; i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpfa_j2ypj.swift:11:12: error: expected type\n    for i := 0; i < num.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len; i++ {\n           ^\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpzb9ep1dw.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpzb9ep1dw.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpzb9ep1dw.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num = num / 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpyw4pupor.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpyw4pupor.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpyw4pupor.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpyw4pupor.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpyw4pupor.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpyw4pupor.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpyw4pupor.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpyw4pupor.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < num.len; i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpjo5n7qc_.swift:11:12: error: expected type\n    for i := 0; i < num.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpjo5n7qc_.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len; i++ {\n           ^\n/tmp/tmpjo5n7qc_.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpzb9ep1dw.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpzb9ep1dw.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpzb9ep1dw.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n        num /= 2\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4oxqli59.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmp4oxqli59.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmp4oxqli59.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmp4oxqli59.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmp4oxqli59.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmp4oxqli59.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmp4oxqli59.swift:19:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmp4oxqli59.swift:19:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp4el1ub_u.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmp4el1ub_u.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmp4el1ub_u.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < num.len; i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpfa_j2ypj.swift:11:12: error: expected type\n    for i := 0; i < num.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len; i++ {\n           ^\n/tmp/tmpfa_j2ypj.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < num.len(); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpibj_hf3k.swift:11:12: error: expected type\n    for i := 0; i < num.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmpibj_hf3k.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < num.len(); i++ {\n           ^\n/tmp/tmpibj_hf3k.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < num.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpc2t_ywsh.swift:14:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpc2t_ywsh.swift:14:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpc2t_ywsh.swift:14:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even_count := 0\n    odd_count := 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpbasjvksq.swift:9:15: error: consecutive statements on a line must be separated by ';'\n    even_count := 0\n              ^\n              ;\n/tmp/tmpbasjvksq.swift:9:16: error: expected expression\n    even_count := 0\n               ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpbasjvksq.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpbasjvksq.swift:9:5: error: cannot find 'even_count' in scope\n    even_count := 0\n    ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:13: error: cannot find 'even_count' in scope\n    return (even_count, odd_count)\n            ^~~~~~~~~~\n/tmp/tmpbasjvksq.swift:18:25: error: cannot find 'odd_count' in scope\n    return (even_count, odd_count)\n                        ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 1)\n    }\n    return (1, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpavuq8v8v/tmpavuq8v8v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac087d24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac087a1bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac087a1b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac087a1a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpavuq8v8v                        0x000055ce76dc2304 <unavailable> + 4868\n5    libc.so.6                          0x00002ac087f10460 __libc_start_main + 245\n6    tmpavuq8v8v                        0x000055ce76dc1f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpf_8t8ohk.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmpf_8t8ohk.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpq1hltgau.swift:11:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpq1hltgau.swift:11:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpq1hltgau.swift:11:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    even, odd := 0, 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n        num /= 2\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmpaebsi0er.swift:9:9: error: consecutive statements on a line must be separated by ';'\n    even, odd := 0, 0\n        ^\n        ;\n/tmp/tmpaebsi0er.swift:9:9: error: expected expression\n    even, odd := 0, 0\n        ^\n/tmp/tmpaebsi0er.swift:10:13: error: expected 'in' after for-each pattern\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:10:13: error: unary operator cannot be separated from its operand\n    for num > 0 {\n            ^~\n             \n/tmp/tmpaebsi0er.swift:9:5: error: cannot find 'even' in scope\n    even, odd := 0, 0\n    ^~~~\n/tmp/tmpaebsi0er.swift:10:13: error: '>' is not a prefix unary operator\n    for num > 0 {\n            ^\n/tmp/tmpaebsi0er.swift:18:13: error: cannot find 'even' in scope\n    return (even, odd)\n            ^~~~\n/tmp/tmpaebsi0er.swift:18:19: error: cannot find 'odd' in scope\n    return (even, odd)\n                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    } else if num == 0 {\n        return (0, 0)\n    } else if num % 2 == 0 {\n        return (1, 0)\n    } else {\n        return (0, 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpvz0a35ea/tmpvz0a35ea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19c8a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19c8745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19c8745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19c87447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvz0a35ea                        0x000055e14e72b3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b19c8c3a460 __libc_start_main + 245\n6    tmpvz0a35ea                        0x000055e14e72af69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num == 1 {\n        return (1, 0)\n    }\n    if num == 2 {\n        return (1, 1)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpek6nfnfk/tmpek6nfnfk.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a8a280c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a89f77b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a89f77988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a89f767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpek6nfnfk                        0x000055dc3cd6e3cd <unavailable> + 5069\n5    libc.so.6                          0x00002b9a8a46c460 __libc_start_main + 245\n6    tmpek6nfnfk                        0x000055dc3cd6df69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i := 0; i < len(num); i++ {\n        if num[i] % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "/tmp/tmp1mb3iqjl.swift:11:12: error: expected type\n    for i := 0; i < len(num); i++ {\n           ^\n            <#type#>\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(num); i++ {\n           ^\n/tmp/tmp1mb3iqjl.swift:11:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(num); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 {\n        return (0, 0)\n    }\n    if num % 2 == 0 {\n        return (1, 0)\n    }\n    return (0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))",
      "timestamp": 1664292532,
      "stdout": "",
      "stderr": "tmpein_i6mb/tmpein_i6mb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa46a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4676ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4676a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa467697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpein_i6mb                        0x0000564b89cc73cd <unavailable> + 5069\n5    libc.so.6                          0x00002baa46c5f460 __libc_start_main + 245\n6    tmpein_i6mb                        0x0000564b89cc6f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}