name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n\
  /// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\"\
  )\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ['    ', '    ', '    ', '    ', "\t", '    ', '    ', '    ', '    ',
  "    var result []string\n    var curr string\n    for _, w := range sentence.ToLower()\
    \ {\n        if w == ' ' {\n            if len(curr) > 0 {\n                result\
    \ = append(result, curr)\n                curr = \"\"\n            }\n       \
    \ } else {\n            curr += w\n        }\n    }\n    if len(curr) > 0 {\n\
    \        result = append(result, curr)\n    }\n    return strings.Join(result,\
    \ \"\")", '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', "\tvar result string\n\tfor i := 0; i < len(sentence); i++ {\n\t\tif is_prime(sentence[i]\
    \ - 'a') {\n\t\t\tresult += sentence[i]\n\t\t}\n\t}\n\treturn result", '    ',
  '    ', '    ', '    ', '    ', "\tvar result []string\n\tfor _, word := range strings.Split(sentence,\
    \ \" \") {\n\t\tif isPrime(len(word)) {\n\t\t\tresult = append(result, word)\n\
    \t\t}\n\t}\n\treturn strings.Join(result, \" \")", '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', "    var result string\n    var words []string\n    for\
    \ _, word := range strings.Fields(sentence) {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    for i := 0;\
    \ i < len(words); i++ {\n        for j := i + 1; j < len(words); j++ {\n     \
    \       if words[i] == words[j] {\n                result += words[i]\n      \
    \          break\n            }\n        }\n    }\n    return result", '    ',
  '    ', "\tvar result []string\n\tvar i int\n\tfor i = 0; i < len(sentence); i++\
    \ {\n\t\tif is_prime(sentence[i] - 'a') {\n\t\t\tresult = append(result, string(sentence[i]))\n\
    \t\t}\n\t}\n\treturn strings.Join(result, \" \")", "    var result []string\n\
    \    var word string\n    for i := 0; i < len(sentence); i++ {\n        if sentence[i]\
    \ == ' ' {\n            if word != \"\" {\n                result = append(result,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(sentence[i])\n        }\n    }\n    if word != \"\" {\n\
    \        result = append(result, word)\n    }\n    return strings.Join(result,\
    \ \"\")", '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\t",
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', "\tvar res []string\n\tfor _, word := range strings.Split(sentence,\
    \ \" \") {\n\t\tif is_prime(len(word)) {\n\t\t\tres = append(res, word)\n\t\t\
    }\n\t}\n\treturn strings.Join(res, \" \")", '    ', "    var result []string\n\
    \    for _, word := range strings.Fields(sentence) {\n        if isPrime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")", '    ', '    ', "    var result []string\n    var i int\n    for i\
    \ = 0; i < len(sentence); i++ {\n        if is_prime(sentence[i]) {\n        \
    \    result = append(result, sentence[i])\n        }\n    }\n    return strings.Join(result,\
    \ \" \")", '    ', "\tvar res []string\n\tfor _, word := range strings.Fields(sentence)\
    \ {\n\t\tif isPrime(len(word)) {\n\t\t\tres = append(res, word)\n\t\t}\n\t}\n\t\
    return strings.Join(res, \" \")", "\tvar result string\n\tvar words []string\n\
    \tfor _, word := range strings.Split(sentence, \" \") {\n\t\tif is_prime(len(word))\
    \ {\n\t\t\twords = append(words, word)\n\t\t}\n\t}\n\tfor i := 0; i < len(words);\
    \ i++ {\n\t\tfor j := i + 1; j < len(words); j++ {\n\t\t\tif words[i] == words[j]\
    \ {\n\t\t\t\tresult += words[i]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result", '    ', '    ', '    ', '    ', "\t", '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "    var res = []string{}\n\
    \    var curr = []string{}\n    for _, c := range sentence {\n        if c ==\
    \ ' ' {\n            if len(curr) > 0 {\n                res = append(res, curr...)\n\
    \                curr = []string{}\n            }\n        } else {\n        \
    \    curr = append(curr, string(c))\n        }\n    }\n    if len(curr) > 0 {\n\
    \        res = append(res, curr...)\n    }\n    for i := 0; i < len(res); i++\
    \ {\n        if isPrime(int64(len(res[i]))) {\n            res[i] = res[i][:len(res[i])/2]\
    \ + res[i][len(res[i])/2:]\n        }\n    }\n    return strings.Join(res, \"\
    \ \")", "    var result string\n    var count int\n    for _, v := range sentence\
    \ {\n        if v == ' ' {\n            count++\n        }\n        if count ==\
    \ 2 {\n            result += v\n        }\n    }\n    return result", '    ',
  "\tvar result []string\n\tfor _, word := range strings.Split(sentence, \" \") {\n\
    \t\tif isPrime(len(word)) {\n\t\t\tresult = append(result, word)\n\t\t}\n\t}\n\
    \treturn strings.Join(result, \" \")", '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\tvar result string\n\
    \tvar count int\n\tfor _, word := range strings.Fields(sentence) {\n\t\tif isPrime(len(word))\
    \ {\n\t\t\tresult += word\n\t\t\tcount++\n\t\t}\n\t}\n\tif count == 0 {\n\t\t\
    return \"\"\n\t}\n\treturn result", '    ', '    ', '    ', '    ', "    var result\
    \ []string\n    var words []string\n    var i int\n    for i = 0; i < len(sentence);\
    \ i++ {\n        if sentence[i] == ' ' {\n            if len(words) > 0 {\n  \
    \              result = append(result, words)\n                words = []string{}\n\
    \            }\n        } else {\n            words = append(words, string(sentence[i]))\n\
    \        }\n    }\n    if len(words) > 0 {\n        result = append(result, words)\n\
    \    }\n    for i = 0; i < len(result); i++ {\n        if len(result[i]) > 0 {\n\
    \            for j = 0; j < len(result[i]); j++ {\n                if is_prime(result[i][j])\
    \ {\n                    result[i] = result[i][:j] + result[i][j+1:]\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ strings.Join(result, \" \")", "\tvar res []string\n\tfor _, word := range strings.Split(sentence,\
    \ \" \") {\n\t\tif isPrime(len(word)) {\n\t\t\tres = append(res, word)\n\t\t}\n\
    \t}\n\treturn strings.Join(res, \" \")", '    ', '    ', '    ', '    ', "\tvar\
    \ result string\n\tfor _, word := range strings.Fields(sentence) {\n\t\tif isPrime(len(word))\
    \ {\n\t\t\tresult += word + \" \"\n\t\t}\n\t}\n\treturn result", '    ', '    ',
  '    ', '    ', "    var result string\n    var i int\n    var j int\n    var count\
    \ int\n    var prime int\n    var prime_count int\n    var prime_index int\n \
    \   var prime_index_count int\n    var prime_index_index int\n    var prime_index_index_count\
    \ int\n    var prime_index_index_index int\n    var prime_index_index_index_count\
    \ int\n    var prime_index_index_index_index int\n    var prime_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index int\n    var prime_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index int\n    var prime_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index int\n    var prime_index_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index_index int\n   \
    \ var prime_index_index_index_index_index_index_index_index_count int\n    var\
    \ prime_index_index_index_index_index_index_index_index_index int\n    var prime_index_index_index_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_index\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_index_index\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ int\n    var prime_index_index_index_index_index_index_index_index_index_index_",
  '    ', '    ', '    ', "\t", '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', "\tvar res\
    \ []string\n\tfor _, word := range strings.Split(sentence, \" \") {\n\t\tif isPrime(len(word))\
    \ {\n\t\t\tres = append(res, word)\n\t\t}\n\t}\n\treturn strings.Join(res, \"\
    \ \")", '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', '    ', '    ', "\tvar res []string\n\tfor _, word\
    \ := range strings.Split(sentence, \" \") {\n\t\tif is_prime(len(word)) {\n\t\t\
    \tres = append(res, word)\n\t\t}\n\t}\n\treturn strings.Join(res, \" \")", '    ',
  '    ', '    ', '    ', '    ', "\t", '    ', '    ', "\tvar result string\n\tfor\
    \ _, word := range strings.Fields(sentence) {\n\t\tif isPrime(len(word)) {\n\t\
    \t\tresult += word + \" \"\n\t\t}\n\t}\n\treturn result", '    ', '    ']
stop_tokens:
- "\n}"
