name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested arrays,\n/// which\
  \ is similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the array,\n\
  /// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n\
  /// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    var result: [(Int, Int)] = []\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x\
    \ {\n                result = append(result, (i, j))\n            }\n        }\n\
    \    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][0]\
    \ < result[j][0]\n    })\n    sort.Slice(result[0], func(i, j int) bool {\n  \
    \      return result[0][1] > result[j][1]\n    })\n    return result", "\tvar\
    \ result: [(Int, Int)] = []\n\tvar rows: [Int] = []\n\tvar cols: [Int] = []\n\t\
    for i, row := range lst {\n\t\tfor j, elem := range row {\n\t\t\tif elem == x\
    \ {\n\t\t\t\trows.append(i)\n\t\t\t\tcols.append(j)\n\t\t\t}\n\t\t}\n\t}\n\tsort.Ints(rows)\n\
    \tsort.Ints(cols)\n\tfor i, j := 0, len(rows) - 1; i < j; i, j = i + 1, j - 1\
    \ {\n\t\trows[i], rows[j] = rows[j], rows[i]\n\t}\n\tfor i, j := 0, len(cols)\
    \ - 1; i < j; i, j = i + 1, j - 1 {\n\t\tcols[i], cols[j] = cols[j], cols[i]\n\
    \t}\n\tfor i, j := 0, len(rows) - 1; i < j; i, j = i + 1, j - 1 {\n\t\tfor k,\
    \ elem := range lst[rows[i]] {\n\t\t\tif elem == x {\n\t\t\t\tresult = append(result,\
    \ (i, k))\n\t\t\t}\n\t\t}\n\t}\n\treturn result", "    var result: [(Int, Int)]\
    \ = []\n    for i, row in lst.iterate() {\n        for j, v in row.iterate() {\n\
    \            if v == x {\n                result.append((i, j))\n            }\n\
    \        }\n    }\n    result.sort(cmp_row)\n    result.sort(cmp_col)\n    return\
    \ result", "    // write your code in Java SE 8\n    var res = [] as [(Int, Int)]\n\
    \    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n       \
    \     if lst[i][j] == x:\n                res = append(res, (i, j))\n    sort(res)\n\
    \    for i in range(len(lst)):\n        sort(lst[i])\n    return res", "    var\
    \ result: [(Int, Int)] = []\n    var row: [Int] = []\n    for i in range(len(lst))\
    \ {\n        if i == x {\n            row = lst[i]\n            break\n      \
    \  }\n    }\n    for i in range(len(row)) {\n        for j in range(len(lst))\
    \ {\n            if i == 0 {\n                result.append((i, j))\n        \
    \    } else {\n                result.append((i, j + len(lst[i - 1]) - 1))\n \
    \           }\n        }\n    }\n    return result", "    if len(lst) == 0 {\n\
    \        return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return\
    \ [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[1]))]\n\
    \    }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[1])), (2,\
    \ len(lst[1]) + len(lst[2]))]\n    }\n    if len(lst) == 4 {\n        return [(0,\
    \ 0), (1, len(lst[1])), (2, len(lst[1]) + len(lst[2])), (3, len(lst[1]) + len(lst[2])\
    \ + len(lst[3]))]\n    }\n    if len(lst) == 5 {\n        return [(0, 0), (1,\
    \ len(lst[1])), (2, len(lst[1]) + len(lst[2])), (3, len(lst[1]) + len(lst[2])\
    \ + len(lst[3])), (4, len(lst[1]) + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n\
    \    }\n    if len(lst) == 6 {\n        return [(0, 0), (1, len(lst[1])), (2,\
    \ len(lst[1]) + len(lst[2])), (3, len(lst[1]) + len(lst[2]) + len(lst[3])), (4,\
    \ len(lst[1]) + len(lst[2]) + len(lst[3]) + len(lst[4])), (5, len(lst[1]) + len(lst[2])\
    \ + len(lst[3]) + len(lst[4]) + len(lst[5]))]\n    }\n    if len(lst) == 7 {\n\
    \        return [(0, 0), (1, len(lst[", "    // TODO: implement get_row\n    return\
    \ [] as [(Int, Int)]", "    var res: [(Int, Int)] = []\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j]\
    \ == x {\n                res = append(res, (i, j))\n            }\n        }\n\
    \    }\n    sort.Slice(res, func(i, j int) bool {\n        return res[i][0] <\
    \ res[j][0]\n    })\n    sort.Slice(res, func(i, j int) bool {\n        return\
    \ res[i][1] > res[j][1]\n    })\n    return res", "    var row_index = 0\n   \
    \ var row_coordinates = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i])\
    \ > row_index {\n            row_coordinates = append(row_coordinates, (i, lst[i][row_index]))\n\
    \            row_index++\n        }\n    }\n    sort.Slice(row_coordinates, func(i,\
    \ j int) bool {\n        return row_coordinates[i][0] < row_coordinates[j][0]\n\
    \    })\n    sort.Slice(row_coordinates, func(i, j int) bool {\n        return\
    \ row_coordinates[i][1] > row_coordinates[j][1]\n    })\n    var coordinates =\
    \ []\n    for i := 0; i < len(row_coordinates); i++ {\n        if row_coordinates[i][0]\
    \ == x {\n            coordinates = append(coordinates, (row_coordinates[i][0],\
    \ row_coordinates[i][1]))\n        }\n    }\n    return coordinates", "    if\
    \ len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst) ==\
    \ 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return\
    \ [(0, 0), (1, len(lst[0]))]\n    }\n    if len(lst) == 3 {\n        return [(0,\
    \ 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1]))]\n    }\n    if len(lst)\
    \ == 4 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])),\
    \ (3, len(lst[0]) + len(lst[1]) + len(lst[2]))]\n    }\n    if len(lst) == 5 {\n\
    \        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2])\
    \ + len(lst[3]))]\n    }\n    if len(lst) == 6 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3])),\
    \ (5, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n\
    \    }\n    if len(lst) == 7 {\n        return [(0, 0), (1, len(lst[", "    //\
    \ TODO: implement get_row\n    return [] as [(Int, Int)]", "\tif len(lst) == 0\
    \ {\n\t\treturn []\n\t}\n\tif len(lst) == 1 {\n\t\treturn [(0, 0)]\n\t}\n\tif\
    \ len(lst) == 2 {\n\t\treturn [(0, 0), (1, 0)]\n\t}\n\tif len(lst) == 3 {\n\t\t\
    return [(0, 0), (1, 0), (2, 0)]\n\t}\n\tif len(lst) == 4 {\n\t\treturn [(0, 0),\
    \ (1, 0), (2, 0), (3, 0)]\n\t}\n\tif len(lst) == 5 {\n\t\treturn [(0, 0), (1,\
    \ 0), (2, 0), (3, 0), (4, 0)]\n\t}\n\tif len(lst) == 6 {\n\t\treturn [(0, 0),\
    \ (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n\t}\n\tif len(lst) == 7 {\n\t\treturn\
    \ [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n\t}\n\tif len(lst)\
    \ == 8 {\n\t\treturn [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0),\
    \ (7, 0)]\n\t}\n\tif len(lst) == 9 {\n\t\treturn [(0, 0), (1, 0), (2, 0), (3,\
    \ 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]\n\t}\n\tif len(lst) == 10 {\n\t\t\
    return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0),\
    \ (9, 0)]\n\t}\n\tif len(lst) == 11 {\n\t\treturn [(0, 0), (1, 0), (2, 0), (3,\
    \ 0), (4, 0), (5, 0), (6, 0), (", "    var result: [(Int, Int)] = []\n    var\
    \ row: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i <\
    \ len(lst); i = i + 1 {\n        for j = 0; j < len(lst[i]); j = j + 1 {\n   \
    \         if lst[i][j] == x {\n                row.append(i)\n               \
    \ row.append(j)\n                result.append((i, j))\n            }\n      \
    \  }\n    }\n    sort_by_row(row)\n    sort_by_col(result)\n    return result",
  "    var result: [(Int, Int)] = []\n    var rows: [Int] = []\n    for i, row in\
    \ enumerate(lst) {\n        if len(row) > 0 {\n            rows.append(i)\n  \
    \      }\n    }\n    sort_by_rows(rows, lst)\n    for i, row in enumerate(lst)\
    \ {\n        if i in rows {\n            for j, v in enumerate(row) {\n      \
    \          if v == x {\n                    result.append((i, j))\n          \
    \      }\n            }\n        }\n    }\n    return result", "    var result:\
    \ [(Int, Int)] = []\n    for i in range(len(lst)) {\n        for j in range(len(lst[i]))\
    \ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    sort_by_row(result)\n    return\
    \ result", "    var row: [Int] = []\n    var result: [Int] = []\n    for i in\
    \ range(len(lst)) {\n        if len(lst[i]) > x {\n            row = lst[i]\n\
    \            break\n        }\n    }\n    if len(row) == 0 {\n        return result\n\
    \    }\n    for i in range(len(row)) {\n        for j in range(len(row)) {\n \
    \           if row[j] > x {\n                result.append((i, j))\n         \
    \   }\n        }\n    }\n    return result", "    if len(lst) == 0 {\n       \
    \ return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0,\
    \ 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1)]\n    }\n    if x < 0 || x >= len(lst) {\n        return [] as [(Int, Int)]\n\
    \    }\n    if len(lst[x]) == 0 {\n        return [] as [(Int, Int)]\n    }\n\
    \    if len(lst[x]) == 1 {\n        return [(x, 0)]\n    }\n    if len(lst[x])\
    \ == 2 {\n        return [(x, 0), (x, 1)]\n    }\n    if len(lst[x]) == 3 {\n\
    \        return [(x, 0), (x, 1), (x, 2)]\n    }\n    if len(lst[x]) == 4 {\n \
    \       return [(x, 0), (x, 1), (x, 2), (x, 3)]\n    }\n    if len(lst[x]) ==\
    \ 5 {\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4)]\n    }\n    if\
    \ len(lst[x]) == 6 {\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4),\
    \ (x, 5)]\n    }\n    if len(lst[x]) == 7 {\n        return [(x, 0), (x, 1), (x,\
    \ 2), (x, 3), (x, 4), (x, 5), (x, 6)]\n    }\n    if len(lst[x]) == 8 {\n    \
    \    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5), (x, 6), (x, 7)]\n\
    \    }\n    if len(lst[x]) == 9 {\n        return [(x, 0), (x, 1), (x, 2), (x,\
    \ 3), (x, 4), (x, 5),", "    var row: [Int] = []\n    var result: [(Int, Int)]\
    \ = []\n    for i in lst {\n        if i[0] == x {\n            row.append(i[1])\n\
    \        }\n    }\n    for i in range(len(row)) {\n        for j in range(len(row)\
    \ - i - 1) {\n            if row[j] > row[j + 1] {\n                row[j], row[j\
    \ + 1] = row[j + 1], row[j]\n            }\n        }\n    }\n    for i in range(len(row))\
    \ {\n        result.append((i, row[i]))\n    }\n    return result", "    var result\
    \ = [] as [(Int, Int)]\n    for i in lst {\n        for j in i {\n           \
    \ if j == x {\n                result.append((i.length - 1, j))\n            }\n\
    \        }\n    }\n    result.sort((a, b) => a[0] - b[0])\n    result.sort((a,\
    \ b) => a[1] - b[1])\n    return result", "    let result: [(Int, Int)] = []\n\
    \    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n     \
    \       if lst[i][j] == x {\n                result.append((i, j))\n         \
    \   }\n        }\n    }\n    return result", "    var result = [] as [(Int, Int)]\n\
    \    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n     \
    \       if lst[i][j] == x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst)\
    \ == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return\
    \ [(0, 0), (1, len(lst[0]))]\n    }\n    if len(lst) == 3 {\n        return [(0,\
    \ 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1]))]\n    }\n    if len(lst)\
    \ == 4 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])),\
    \ (3, len(lst[0]) + len(lst[1]) + len(lst[2]))]\n    }\n    if len(lst) == 5 {\n\
    \        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2])\
    \ + len(lst[3]))]\n    }\n    if len(lst) == 6 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3])),\
    \ (5, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n\
    \    }\n    if len(lst) == 7 {\n        return [(0, 0), (1, len(lst[", "    var\
    \ result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n    for i\
    \ = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n      \
    \      if lst[i][j] == x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n    }\n    return result", "    var result: [(Int,\
    \ Int)] = []\n    var row: [Int] = []\n    var i: Int = 0\n    for i = 0; i <\
    \ len(lst); i++ {\n        if len(lst[i]) > 0 {\n            row = lst[i]\n  \
    \          break\n        }\n    }\n    for i = 0; i < len(row); i++ {\n     \
    \   if row[i] == x {\n            result = append(result, (i, i))\n        }\n\
    \    }\n    return result", "    var result: [(Int, Int)] = []\n    var row: [Int]\
    \ = []\n    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i\
    \ = i + 1 {\n        for j = 0; j < len(lst[i]); j = j + 1 {\n            if lst[i][j]\
    \ == x {\n                row = append(row, i)\n                result = append(result,\
    \ [(i, j)])\n            }\n        }\n    }\n    sort_by_row(row)\n    sort_by_col(result)\n\
    \    return result", "    var result: [(Int, Int)] = []\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j]\
    \ == x {\n                result = append(result, (i, j))\n            }\n   \
    \     }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][0]\
    \ < result[j][0]\n    })\n    for i := 0; i < len(result); i++ {\n        sort.Slice(result[i][1:],\
    \ func(j, k int) bool {\n            return result[i][1+j] > result[i][1+k]\n\
    \        })\n    }\n    return result", "\tif len(lst) == 0 {\n\t\treturn []\n\
    \t}\n\tif len(lst) == 1 {\n\t\treturn [(0, 0)]\n\t}\n\tif len(lst) == 2 {\n\t\t\
    return [(0, 0), (1, 1)]\n\t}\n\tif len(lst) == 3 {\n\t\treturn [(0, 0), (1, 1),\
    \ (2, 2)]\n\t}\n\tif len(lst) == 4 {\n\t\treturn [(0, 0), (1, 1), (2, 2), (3,\
    \ 3)]\n\t}\n\tif len(lst) == 5 {\n\t\treturn [(0, 0), (1, 1), (2, 2), (3, 3),\
    \ (4, 4)]\n\t}\n\tif len(lst) == 6 {\n\t\treturn [(0, 0), (1, 1), (2, 2), (3,\
    \ 3), (4, 4), (5, 5)]\n\t}\n\tif len(lst) == 7 {\n\t\treturn [(0, 0), (1, 1),\
    \ (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n\t}\n\tif len(lst) == 8 {\n\t\treturn\
    \ [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]\n\t}\n\tif\
    \ len(lst) == 9 {\n\t\treturn [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5),\
    \ (6, 6), (7, 7), (8, 8)]\n\t}\n\tif len(lst) == 10 {\n\t\treturn [(0, 0), (1,\
    \ 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n\t}\n\t\
    if len(lst) == 11 {\n\t\treturn [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5),\
    \ (6, 6), (", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n   \
    \ }\n    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) ==\
    \ 2 {\n        return [(0, 0), (1, 0)]\n    }\n    if len(lst) == 3 {\n      \
    \  return [(0, 0), (1, 0), (2, 0)]\n    }\n    if len(lst) == 4 {\n        return\
    \ [(0, 0), (1, 0), (2, 0), (3, 0)]\n    }\n    if len(lst) == 5 {\n        return\
    \ [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    }\n    if len(lst) == 6 {\n  \
    \      return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    }\n    if\
    \ len(lst) == 7 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5,\
    \ 0), (6, 0)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1, 0),\
    \ (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]\n    }\n    if len(lst) == 9\
    \ {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7,\
    \ 0), (8, 0)]\n    }\n    if len(lst) == 10 {\n        return [(0, 0), (1, 0),\
    \ (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]\n    }\n   \
    \ if len(lst) == 11 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0),\
    \ (5, 0),", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n\
    \    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2\
    \ {\n        return [(0, 0), (1, len(lst[0]))]\n    }\n    if len(lst) == 3 {\n\
    \        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1]))]\n \
    \   }\n    if len(lst) == 4 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0])\
    \ + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2]))]\n    }\n    if\
    \ len(lst) == 5 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) +\
    \ len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2])), (4, len(lst[0])\
    \ + len(lst[1]) + len(lst[2]) + len(lst[3]))]\n    }\n    if len(lst) == 6 {\n\
    \        return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2])\
    \ + len(lst[3])), (5, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]) +\
    \ len(lst[4]))]\n    }\n    if len(lst) == 7 {\n        return [(0, 0), (1, len(lst[",
  "    var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]);\
    \ j++ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n                k = j\n            }\n        }\n        for j = len(lst[i])\
    \ - 1; j >= 0; j-- {\n            if lst[i][j] == x {\n                result\
    \ = append(result, (i, j))\n                k = j\n            }\n        }\n\
    \    }\n    sort.Slice(result, func(i, j) {\n        if result[i][0] < result[j][0]\
    \ {\n            return -1\n        } else if result[i][0] > result[j][0] {\n\
    \            return 1\n        } else {\n            return result[i][1] - result[j][1]\n\
    \        }\n    })\n    sort.Slice(result, func(i, j) {\n        if result[i][1]\
    \ < result[j][1] {\n            return -1\n        } else if result[i][1] > result[j][1]\
    \ {\n            return 1\n        } else {\n            return result[i][0] -\
    \ result[j][0]\n        }\n    })\n    return result", "    var row: [Int] = []\n\
    \    var result: [Int] = []\n    for i in range(0, len(lst)) {\n        if lst[i][0]\
    \ == x {\n            row = lst[i]\n            break\n        }\n    }\n    for\
    \ i in range(0, len(row)) {\n        for j in range(0, len(row)) {\n         \
    \   if j > 0 {\n                result.append((i, row[j]))\n            }\n  \
    \      }\n    }\n    return result", "    let result: [(Int, Int)] = []\n    for\
    \ i in lst {\n        for j in i {\n            if j == x {\n                result.append((i.length\
    \ - 1, j))\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0])\n    result.sort((a, b) => a[1] - b[1])\n    return result", "    let\
    \ row_index = 0\n    let col_index = 0\n    let result = []\n    for i in range(0,\
    \ len(lst)) {\n        if lst[i][0] == x {\n            result.append((row_index,\
    \ col_index))\n        }\n        if lst[i][0] > x {\n            row_index +=\
    \ 1\n        }\n        if lst[i][0] < x {\n            col_index += 1\n     \
    \   }\n    }\n    return result", "    if len(lst) == 0 {\n        return [] as\
    \ [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n\
    \    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]) - 1)]\n    }\n\
    \    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1)]\n    }\n    if len(lst) == 4 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 5 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1)]\n    }\n    if len(lst) == 6 {\n   \
    \     return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0])\
    \ - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 7 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1), (6, len(lst[0])\
    \ - 1)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1), (4, len", "    let rows: [Int]\
    \ = lst.map(row => row.length)\n    let sorted_rows: [Int] = rows.sort((a, b)\
    \ => a - b)\n    let sorted_cols: [Int] = lst.map(row => row.sort((a, b) => b\
    \ - a))\n    let result: [Int] = []\n    for i in 0..len(lst) {\n        if lst[i][x]\
    \ == 0 {\n            continue\n        }\n        let row: Int = sorted_rows[i]\n\
    \        let col: Int = sorted_cols[i][x]\n        result.append((row, col))\n\
    \    }\n    return result", "    var result: [(Int, Int)] = []\n    for i in range(len(lst))\
    \ {\n        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst)\
    \ == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return\
    \ [(0, 0), (1, len(lst[1]))]\n    }\n    if len(lst) == 3 {\n        return [(0,\
    \ 0), (1, len(lst[1])), (2, len(lst[2]))]\n    }\n    if len(lst) == 4 {\n   \
    \     return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3]))]\n\
    \    }\n    if len(lst) == 5 {\n        return [(0, 0), (1, len(lst[1])), (2,\
    \ len(lst[2])), (3, len(lst[3])), (4, len(lst[4]))]\n    }\n    if len(lst) ==\
    \ 6 {\n        return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])),\
    \ (4, len(lst[4])), (5, len(lst[5]))]\n    }\n    if len(lst) == 7 {\n       \
    \ return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])),\
    \ (5, len(lst[5])), (6, len(lst[6]))]\n    }\n    if len(lst) == 8 {\n       \
    \ return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])),\
    \ (5, len(lst[5])), (6, len(lst[6])), (7, len(lst[7]))]\n", "    var result: [(Int,\
    \ Int)] = []\n    var row: [Int] = []\n    for i, v in enumerate(lst):\n     \
    \   if len(v) > 0 and v[0] == x:\n            row = v\n            break\n   \
    \ for i, v in enumerate(row):\n        result = append(result, (i, v))\n    sort_by_columns(result)\n\
    \    return result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n\
    \    }\n    \n    var result = [] as [(Int, Int)]\n    \n    var rows = lst.map(row\
    \ => row.sort((a, b) => a - b))\n    \n    for i, row in rows.enumerate() {\n\
    \        for j, v in row.enumerate() {\n            if v == x {\n            \
    \    result = append(result, (i, j))\n            }\n        }\n    }\n    \n\
    \    return result.sort((a, b) => a[0] - b[0])", "    var result: [(Int, Int)]\
    \ = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    for i\
    \ in range(len(lst)) {\n        for j in range(len(lst[i])) {\n            if\
    \ lst[i][j] == x {\n                result = append(result, (i, j))\n        \
    \    }\n        }\n    }\n    return result", "    var result: [(Int, Int)] =\
    \ []\n    for i in range(0, len(lst)) {\n        for j in range(0, len(lst[i]))\
    \ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [(Int, Int)] = []\n    for i in range(len(lst))\
    \ {\n        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][0]\
    \ < result[j][0]\n    })\n    for i in range(len(result)) {\n        sort.Slice(result[i][1],\
    \ func(i, j int) bool {\n            return result[i][1] > result[j][1]\n    \
    \    })\n    }\n    return result", "    let row_index = 0\n    let col_index\
    \ = 0\n    let row_count = len(lst)\n    let col_count = len(lst[0])\n    let\
    \ result = []\n    for i in range(0, row_count) {\n        for j in range(0, col_count)\
    \ {\n            if lst[i][j] == x {\n                result.append((i, j))\n\
    \            }\n        }\n    }\n    return result", "    var row: [Int] = []\n\
    \    var result: [Int] = []\n    for i in range(0, len(lst)) {\n        if len(lst[i])\
    \ > 0 {\n            row = lst[i]\n            break\n        }\n    }\n    for\
    \ i in range(0, len(row)) {\n        if row[i] == x {\n            result = append(result,\
    \ (i, row[i]))\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    var row_index = 0\n    var col_index = 0\n    var row_count = len(lst)\n  \
    \  var col_count = len(lst[0])\n    var result = make([][]int, row_count)\n  \
    \  for i := 0; i < row_count; i++ {\n        result[i] = make([]int, col_count)\n\
    \    }\n    for i := 0; i < row_count; i++ {\n        for j := 0; j < col_count;\
    \ j++ {\n            if lst[i][j] == x {\n                result[i][j] = row_index\n\
    \                row_index += 1\n                col_index = j\n             \
    \   break\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i][0] < result[j][0]\n    })\n    sort.Slice(result[0],\
    \ func(i, j int) bool {\n        return result[i][1] > result[j][1]\n    })\n\
    \    return result", "    let row_index: Int = 0\n    let col_index: Int = 0\n\
    \    let row_coord: [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n   \
    \     if lst[i][0] == x {\n            row_coord.append((row_index, col_index))\n\
    \        }\n        if lst[i][0] > x {\n            row_index += 1\n        }\n\
    \        if lst[i][0] < x {\n            col_index += 1\n        }\n    }\n  \
    \  sort_by_col(row_coord)\n    return row_coord", "    var result: [(Int, Int)]\
    \ = []\n    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    var row: [Int] = []\n    var result: [Int] = []\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    for i in range(len(lst)) {\n        for\
    \ j in range(len(lst[i])) {\n            if lst[i][j] == x {\n               \
    \ row.append(i)\n                row.append(j)\n                result.append(row)\n\
    \                row = []\n                break\n            }\n        }\n \
    \   }\n    return result", "    let result: [(Int, Int)] = []\n    let row: [Int]\
    \ = []\n    for i in range(len(lst)) {\n        if lst[i][0] == x {\n        \
    \    row = lst[i]\n            break\n        }\n    }\n    for i in range(len(row))\
    \ {\n        for j in range(len(lst)) {\n            if lst[j][0] == row[i] {\n\
    \                result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    var row: [Int] = []\n    var\
    \ i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n   \
    \ var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n\
    \    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n\
    \    var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n\
    \    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n\
    \    var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n\
    \    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n\
    \    var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var p:", "    var result: [(Int, Int)] = []\n    var i: Int\
    \ = 0\n    for i = 0; i < len(lst); i++ {\n        if len(lst[i]) > x {\n    \
    \        result = append(result, (i, lst[i][x]))\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j) {\n        if result[i][0] > result[j][0] {\n            return 1\n\
    \        } else if result[i][0] < result[j][0] {\n            return -1\n    \
    \    } else {\n            return result[i][1] - result[j][1]\n        }\n   \
    \ })\n    sort.Slice(result, func(i, j) {\n        if result[i][0] > result[j][0]\
    \ {\n            return -1\n        } else if result[i][0] < result[j][0] {\n\
    \            return 1\n        } else {\n            return result[i][1] - result[j][1]\n\
    \        }\n    })\n    return result", "    if len(lst) == 0 {\n        return\
    \ [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n\
    \    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]))]\n  \
    \  }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0])\
    \ + len(lst[1]))]\n    }\n    if len(lst) == 4 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]))]\n    }\n    if len(lst) == 5 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]))]\n\
    \    }\n    if len(lst) == 6 {\n        return [(0, 0), (1, len(lst[0])), (2,\
    \ len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2])), (4,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3])), (5, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n    }\n    if len(lst) == 7 {\n\
    \        return [(0, 0), (1, len(lst[", "    var result: [(Int, Int)] = []\n \
    \   var row: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    for i in\
    \ range(0, len(lst)) {\n        for j in range(0, len(lst[i])) {\n           \
    \ if lst[i][j] == x {\n                row.append(i)\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    sort_by_row(row)\n    sort_by_column(result)\n\
    \    return result", "    let result: [(Int, Int)] = []\n    for i in lst {\n\
    \        for j in i {\n            if j == x {\n                result.append((i.length\
    \ - 1, j))\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0])\n    result.sort((a, b) => b[1] - a[1])\n    return result", "    var\
    \ row_index = 0\n    var col_index = 0\n    var result = []\n    for i := 0; i\
    \ < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if\
    \ lst[i][j] == x {\n                result = append(result, (row_index, col_index))\n\
    \            }\n            col_index++\n        }\n        row_index++\n    \
    \    col_index = 0\n    }\n    return result", "    var row: [Int] = []\n    var\
    \ result: [Int] = []\n    for i in range(len(lst)) {\n        if len(lst[i]) >\
    \ x {\n            row = lst[i]\n            break\n        }\n    }\n    for\
    \ i in range(len(row)) {\n        for j in range(len(row) - 1, -1, -1) {\n   \
    \         if row[j] > x {\n                result.append((i, j))\n           \
    \     break\n            }\n        }\n    }\n    return result", "    var result:\
    \ [(Int, Int)] = []\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                result\
    \ = append(result, (i, j))\n            }\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i][0] < result[j][0]\n    })\n\
    \    sort.Slice(result, func(i, j int) bool {\n        return result[i][1] > result[j][1]\n\
    \    })\n    return result", "    var result: [(Int, Int)] = []\n    var row:\
    \ [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    for i in range(0, len(lst))\
    \ {\n        for j in range(0, len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                row.append(i)\n                result.append((i, j))\n      \
    \      }\n        }\n    }\n    sort_by_row(row)\n    sort_by_column(result)\n\
    \    return result", "    var row: [Int] = []\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var res: [Int] = []\n    for i in range(len(lst))\
    \ {\n        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                row = append(row, i)\n                res = append(res, (i, j))\n\
    \                k = j\n            }\n        }\n    }\n    sort.Slice(row, func(i,\
    \ j int) bool {\n        return lst[row[i]][k] < lst[row[j]][k]\n    })\n    sort.Slice(res,\
    \ func(i, j int) bool {\n        return lst[row[i]][k] > lst[row[j]][k]\n    })\n\
    \    return res", "    let rows: [Int] = []\n    for i in lst {\n        let row:\
    \ [Int] = []\n        for j in i {\n            if j == x {\n                row.append(i.indexOf(j))\n\
    \            }\n        }\n        rows.append(row)\n    }\n    let sorted_rows:\
    \ [Int] = []\n    for i in rows {\n        let sorted_row: [Int] = []\n      \
    \  for j in i {\n            sorted_row.append(j)\n        }\n        sorted_rows.append(sorted_row)\n\
    \    }\n    let sorted_rows_sorted: [Int] = []\n    for i in sorted_rows {\n \
    \       let sorted_row_sorted: [Int] = []\n        for j in i {\n            sorted_row_sorted.append(j)\n\
    \        }\n        sorted_rows_sorted.append(sorted_row_sorted)\n    }\n    return\
    \ sorted_rows_sorted", "    var row: [Int] = []\n    var result: [(Int, Int)]\
    \ = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) > x {\n  \
    \          row = lst[i]\n            break\n        }\n    }\n    for i := 0;\
    \ i < len(row); i++ {\n        for j := 0; j < len(lst); j++ {\n            if\
    \ len(lst[j]) > x {\n                if i < len(lst[j]) {\n                  \
    \  result = append(result, (i, j))\n                }\n            }\n       \
    \ }\n    }\n    return result", "    var row: [Int] = []\n    var result: [Int]\
    \ = []\n    for i in range(len(lst)) {\n        if i == x {\n            row =\
    \ append(row, i)\n        }\n        if len(row) > 0 {\n            result = append(result,\
    \ tuple(sorted(row)))\n            row = []\n        }\n    }\n    if len(row)\
    \ > 0 {\n        result = append(result, tuple(sorted(row)))\n    }\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n\
    \        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n    \
    \            result.append((i, j))\n            }\n        }\n    }\n    sort_by_rows(result)\n\
    \    sort_by_columns(result)\n    return result", "    var result: [(Int, Int)]\
    \ = []\n    var i: Int = 0\n    for i = 0; i < len(lst); i++ {\n        if len(lst[i])\
    \ > x {\n            result = append(result, (i, x))\n            x = x - 1\n\
    \        } else {\n            x = len(lst[i]) - 1\n        }\n    }\n    return\
    \ result", "    let result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n\
    \        if lst[i][x] > 0 {\n            result = append(result, (i, lst[i][x]))\n\
    \        }\n    }\n    sort_by_columns(result)\n    return result", "    let row_index:\
    \ Int = 0\n    let col_index: Int = 0\n    let result: [Int] = []\n    for i in\
    \ lst {\n        if i[0] == x {\n            result.append((row_index, col_index))\n\
    \        }\n        if i[0] > x {\n            break\n        }\n        col_index\
    \ += 1\n    }\n    for i in range(len(result)) {\n        result[i] = (result[i][0],\
    \ result[i][1] + 1)\n    }\n    return result", "    var result: [(Int, Int)]\
    \ = []\n    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++\
    \ {\n        for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x\
    \ {\n                result = append(result, (i, j))\n            }\n        }\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    var res: [(Int, Int)] = []\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n          \
    \      res = append(res, (i, j))\n            }\n        }\n    }\n    sort.Slice(res,\
    \ func(i, j int) bool {\n        return res[i][0] < res[j][0]\n    })\n    sort.Slice(res[0],\
    \ func(i, j int) bool {\n        return res[0][1] > res[j][1]\n    })\n    return\
    \ res", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n  \
    \  if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2 {\n\
    \        return [(0, 0), (1, len(lst[1]))]\n    }\n    if len(lst) == 3 {\n  \
    \      return [(0, 0), (1, len(lst[1])), (2, len(lst[2]))]\n    }\n    if len(lst)\
    \ == 4 {\n        return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3]))]\n\
    \    }\n    if len(lst) == 5 {\n        return [(0, 0), (1, len(lst[1])), (2,\
    \ len(lst[2])), (3, len(lst[3])), (4, len(lst[4]))]\n    }\n    if len(lst) ==\
    \ 6 {\n        return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])),\
    \ (4, len(lst[4])), (5, len(lst[5]))]\n    }\n    if len(lst) == 7 {\n       \
    \ return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])),\
    \ (5, len(lst[5])), (6, len(lst[6]))]\n    }\n    if len(lst) == 8 {\n       \
    \ return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])),\
    \ (5, len(lst[5])), (6, len(lst[6])), (7, len(lst[7]))]\n", "    var result: [(Int,\
    \ Int)] = []\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]);\
    \ j++ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i][0] < result[j][0]\n    })\n    for i := 0;\
    \ i < len(result); i++ {\n        sort.Slice(result[i][1:], func(i, j int) bool\
    \ {\n            return result[i][1] > result[j][1]\n        })\n    }\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    for i = 0; i < len(lst); i = i + 1 {\n        for j = 0; j < len(lst[i]);\
    \ j = j + 1 {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    return result", "\tif len(lst)\
    \ == 0 {\n\t\treturn []\n\t}\n\tif len(lst) == 1 {\n\t\treturn [(0, 0)]\n\t}\n\
    \tif len(lst) == 2 {\n\t\treturn [(0, 0), (1, lst[1][0])]\n\t}\n\tif len(lst)\
    \ == 3 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2, lst[2][0])]\n\t}\n\tif len(lst)\
    \ == 4 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2, lst[2][0]), (3, lst[3][0])]\n\
    \t}\n\tif len(lst) == 5 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2, lst[2][0]),\
    \ (3, lst[3][0]), (4, lst[4][0])]\n\t}\n\tif len(lst) == 6 {\n\t\treturn [(0,\
    \ 0), (1, lst[1][0]), (2, lst[2][0]), (3, lst[3][0]), (4, lst[4][0]), (5, lst[5][0])]\n\
    \t}\n\tif len(lst) == 7 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2, lst[2][0]),\
    \ (3, lst[3][0]), (4, lst[4][0]), (5, lst[5][0]), (6, lst[6][0])]\n\t}\n\tif len(lst)\
    \ == 8 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2, lst[2][0]), (3, lst[3][0]),\
    \ (4, lst[4][0]), (5, lst[5][0]), (6, lst[6][0]), (7, lst[7][0])]\n\t}\n\tif len(lst)\
    \ == 9 {\n\t\treturn [(0, 0), (1, lst[1][0]), (2,", "    var result: [(Int, Int)]\
    \ = []\n    var row: [Int] = []\n    var i: Int = 0\n    for i = 0; i < len(lst);\
    \ i++ {\n        if len(lst[i]) == 0 {\n            continue\n        }\n    \
    \    row = lst[i]\n        sort_by_columns(row)\n        for j := 0; j < len(row);\
    \ j++ {\n            if row[j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    return result", "    var result:\
    \ [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        for j in range(0,\
    \ len(lst[i])) {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result", "    var result: [(Int,\
    \ Int)] = []\n    for i in range(len(lst)) {\n        for j in range(len(lst[i]))\
    \ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i][0] < result[j][0]\n    })\n    for i in range(len(result))\
    \ {\n        sort.Slice(result[i][1:], func(j, k int) bool {\n            return\
    \ result[i][1+j] > result[i][1+k]\n        })\n    }\n    return result", "  \
    \  var result: [(Int, Int)] = []\n    for i, row in enumerate(lst) {\n       \
    \ for j, v in enumerate(row) {\n            if v == x {\n                result\
    \ = append(result, (i, j))\n            }\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    let result: [(Int, Int)] = []\n    let rows: [Int] =\
    \ []\n    for i in range(0, len(lst)) {\n        let row: [Int] = []\n       \
    \ for j in range(0, len(lst[i])) {\n            if lst[i][j] == x {\n        \
    \        row.append(j)\n            }\n        }\n        rows.append(row)\n \
    \   }\n    for i in range(0, len(rows)) {\n        let row: [Int] = rows[i]\n\
    \        for j in range(0, len(row)) {\n            result.append((i, row[j]))\n\
    \        }\n    }\n    return result", "    var result: [(Int, Int)] = []\n  \
    \  var row: [Int] = []\n    var i: Int = 0\n    for i < len(lst) {\n        if\
    \ len(lst[i]) > x {\n            row = lst[i]\n            break\n        }\n\
    \        i += 1\n    }\n    for i := 0; i < len(row); i += 1 {\n        result\
    \ = append(result, (i, row[i]))\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i][0] < result[j][0]\n    })\n    for i := 0;\
    \ i < len(result); i += 1 {\n        result[i] = (result[i][0], result[i][1] +\
    \ 1)\n    }\n    return result", "    var result: [(Int, Int)] = []\n    var i:\
    \ Int = 0\n    for i < len(lst) {\n        if lst[i][0] == x {\n            result\
    \ = append(result, (i, lst[i][1]))\n        }\n        i += 1\n    }\n    return\
    \ result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n\
    \    \n    var result: [(Int, Int)] = [] as [(Int, Int)]\n    \n    for i, row\
    \ in enumerate(lst):\n        for j, v in enumerate(row):\n            if v ==\
    \ x:\n                result = append(result, (i, j))\n    \n    sort_by_row(result)\n\
    \    sort_by_col(result)\n    return result", "    var row: [Int] = []\n    for\
    \ i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n  \
    \          if lst[i][j] == x {\n                row = append(row, (i, j))\n  \
    \          }\n        }\n    }\n    sort.Slice(row, func(i, j int) bool {\n  \
    \      return row[i][0] < row[j][0]\n    })\n    sort.Slice(row, func(i, j int)\
    \ bool {\n        return row[i][1] > row[j][1]\n    })\n    return row", "   \
    \ var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]);\
    \ j++ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n                k = j\n            }\n        }\n        for j = len(lst[i])\
    \ - 1; j >= 0; j-- {\n            if lst[i][j] == x {\n                result\
    \ = append(result, (i, j))\n                k = j\n            }\n        }\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    var res = [] as [(Int, Int)]\n    for i, row in lst.iterate() {\n        for\
    \ j, v in row.iterate() {\n            if v == x {\n                res.append((i,\
    \ j))\n            }\n        }\n    }\n    sort_by_rows(res)\n    sort_by_cols(res)\n\
    \    return res", "    var res: [(Int, Int)] = []\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j]\
    \ == x {\n                res = append(res, (i, j))\n            }\n        }\n\
    \    }\n    sort.Slice(res, func(i, j int) bool {\n        return res[i][0] <\
    \ res[j][0]\n    })\n    sort.Slice(res[0], func(i, j int) bool {\n        return\
    \ res[0][1] > res[j][1]\n    })\n    return res", "    var result: [(Int, Int)]\
    \ = []\n    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++\
    \ {\n        for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x\
    \ {\n                result = append(result, (i, j))\n            }\n        }\n\
    \    }\n    sort.Slice(result, func(i, j) {\n        return result[i][0] - result[j][0]\n\
    \    })\n    for i = 0; i < len(result); i++ {\n        result[i] = result[i][0],\
    \ result[i][1]\n    }\n    return result", "    var result: [(Int, Int)] = []\n\
    \    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n\
    \        for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    return result", "    var row: [Int] = []\n    var result: [Int] = []\n\
    \    var i: Int = 0\n    for i < len(lst) {\n        if len(lst[i]) > x {\n  \
    \          row = lst[i]\n            break\n        }\n        i += 1\n    }\n\
    \    for i = 0; i < len(row); i += 1 {\n        result = append(result, (i, row[i]))\n\
    \    }\n    sort_by_columns(result)\n    return result", "    var result: [(Int,\
    \ Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n                k = j\n                break\n            }\n        }\n\
    \    }\n    sort_by_row(result)\n    sort_by_column(result, k)\n    return result",
  "    var result: [(Int, Int)] = []\n    for i := 0; i < len(lst); i++ {\n      \
    \  if lst[i][x] != 0 {\n            result = append(result, (i, lst[i][x]))\n\
    \        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i][0] < result[j][0]\n    })\n    for i := 0; i < len(result); i++ {\n\
    \        sort.Slice(result[i][1:], func(i, j int) bool {\n            return result[i][1]\
    \ > result[j][1]\n        })\n    }\n    return result", "    let result = []\
    \ as [(Int, Int)];\n    for i in lst {\n        for j in i {\n            if j\
    \ == x {\n                result.append((i.length - 1, j))\n            }\n  \
    \      }\n    }\n    result.sort((a, b) => a[0] - b[0])\n    result.sort((a, b)\
    \ => a[1] - b[1])\n    return result", "    let result: [(Int, Int)] = []\n  \
    \  for i in range(len(lst)) {\n        if lst[i][x] != 0 {\n            result\
    \ = append(result, (i, lst[i][x]))\n        }\n    }\n    sort_by_row(result)\n\
    \    sort_by_column(result)\n    return result", "    // TODO: implement get_row\n\
    \    return [] as [(Int, Int)]", "    var result: [(Int, Int)] = []\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for\
    \ j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n           \
    \     result = append(result, (i, j))\n            }\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j) {\n        return result[i][0] - result[j][0]\n    })\n    for i\
    \ = 0; i < len(result); i++ {\n        result[i] = result[i][0], result[i][1]\n\
    \    }\n    return result", "    var result: [(Int, Int)] = []\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j =\
    \ 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n               \
    \ result = append(result, (i, j))\n            }\n        }\n    }\n    return\
    \ result", "    let result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n\
    \        if lst[i][x] != 0 {\n            result = append(result, (i, lst[i][x]))\n\
    \        }\n    }\n    sort_by_row(result)\n    sort_by_column(result)\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]);\
    \ j++ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    sort.Slice(result, func(i1, i2)\
    \ {\n        if result[i1][0] < result[i2][0] {\n            return true\n   \
    \     } else if result[i1][0] > result[i2][0] {\n            return false\n  \
    \      } else {\n            return result[i1][1] > result[i2][1]\n        }\n\
    \    })\n    return result", "    var result: [(Int, Int)] = []\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j =\
    \ 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n               \
    \ result = append(result, (i, j))\n            }\n        }\n    }\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n\
    \        if lst[i][0] == x {\n            result = append(result, (i, lst[i][1]))\n\
    \        }\n    }\n    sort_by_rows(result)\n    return result", "    var result:\
    \ [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++\
    \ {\n            if lst[i][j] == x {\n                result = append(result,\
    \ (i, j))\n            }\n        }\n    }\n    return result", "    var row_lst:\
    \ [Int] = []\n    for i, _ := range lst {\n        if i == x {\n            row_lst\
    \ = append(row_lst, i)\n        }\n    }\n    var result: [Int] = []\n    for\
    \ i, _ := range lst {\n        if i == x {\n            continue\n        }\n\
    \        for j, _ := range lst[i] {\n            if j == x {\n               \
    \ continue\n            }\n            result = append(result, (i, j))\n     \
    \   }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(row_lst)))\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n\
    \    }\n    \n    var row_index = 0\n    var row_coordinates = [] as [(Int, Int)]\n\
    \    \n    for i in range(len(lst)) {\n        if lst[i][0] == x {\n         \
    \   row_coordinates = append(row_coordinates, (i, lst[i][1]))\n        }\n   \
    \     \n        if lst[i][0] > x {\n            break\n        }\n        \n \
    \       row_index += 1\n    }\n    \n    sort_by_columns(row_coordinates)\n  \
    \  \n    return row_coordinates", "    var result: [(Int, Int)] = []\n    for\
    \ i in range(len(lst)) {\n        if lst[i][0] == x {\n            result = append(result,\
    \ (i, lst[i][1]))\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    // TODO: implement get_row\n    return [] as [(Int, Int)]", "    var result:\
    \ [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        if lst[i][0] ==\
    \ x {\n            result = append(result, (i, lst[i][1]))\n        }\n    }\n\
    \    sort_by_columns(result)\n    return result", "    let row_index = 0\n   \
    \ let col_index = 0\n    let row_count = len(lst)\n    let col_count = len(lst[0])\n\
    \    let result = []\n    for i in range(0, row_count) {\n        for j in range(0,\
    \ col_count) {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result", "    // write your\
    \ code here\n    return [] as [(Int, Int)]", "    let result: [(Int, Int)] = []\n\
    \    for i in range(0, len(lst)) {\n        for j in range(0, len(lst[i])) {\n\
    \            if lst[i][j] == x {\n                result.append((i, j))\n    \
    \        }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0])\n    result.sort((a,\
    \ b) => b[1] - a[1])\n    return result", "    if len(lst) == 0 {\n        return\
    \ [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n\
    \    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]))]\n  \
    \  }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0])\
    \ + len(lst[1]))]\n    }\n    if len(lst) == 4 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]))]\n    }\n    if len(lst) == 5 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]))]\n\
    \    }\n    if len(lst) == 6 {\n        return [(0, 0), (1, len(lst[0])), (2,\
    \ len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2])), (4,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3])), (5, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n    }\n    if len(lst) == 7 {\n\
    \        return [(0, 0), (1, len(lst[", "    var result: [(Int, Int)] = []\n \
    \   var row: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int\
    \ = 0\n    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n\
    \            if lst[i][j] == x {\n                row.append(i)\n            \
    \    result.append((i, j))\n            }\n        }\n    }\n    sort_by_row(row)\n\
    \    sort_by_col(result)\n    return result", "    var row: [Int] = []\n    var\
    \ result: [Int] = []\n    for i in range(0, len(lst)) {\n        if len(lst[i])\
    \ > x {\n            row = lst[i]\n            break\n        }\n    }\n    for\
    \ i in range(0, len(row)) {\n        for j in range(0, len(lst)) {\n         \
    \   if i < len(lst[j]) {\n                if lst[j][i] == x {\n              \
    \      result.append((i, j))\n                }\n            }\n        }\n  \
    \  }\n    return result", "    var result: [(Int, Int)] = []\n    var row: [Int]\
    \ = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) > len(row)\
    \ {\n            row = lst[i]\n        }\n    }\n    for i := 0; i < len(row);\
    \ i++ {\n        for j := 0; j < len(lst); j++ {\n            if lst[j][i] ==\
    \ x {\n                result = append(result, (i, j))\n            }\n      \
    \  }\n    }\n    return result", "    var result = [] as [(Int, Int)]\n    var\
    \ rows = lst as [Int]\n    var i = 0\n    for i < len(rows) {\n        var row\
    \ = rows[i]\n        var j = 0\n        for j < len(row) {\n            if row[j]\
    \ == x {\n                result = append(result, (i, j))\n            }\n   \
    \         j += 1\n        }\n        i += 1\n    }\n    sort_by_columns(result)\n\
    \    return result", "    var result: [(Int, Int)] = []\n    var row: [Int] =\
    \ []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) > len(row) {\n\
    \            row = lst[i]\n        }\n    }\n    for i := 0; i < len(row); i++\
    \ {\n        for j := 0; j < len(lst); j++ {\n            if lst[j][i] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    return result", "    var row_index = 0\n    var col_index = 0\n   \
    \ var row_list = []\n    var col_list = []\n    for i in range(len(lst)) {\n \
    \       if lst[i][0] == x {\n            row_list.append(i)\n        }\n    }\n\
    \    for i in range(len(lst)) {\n        if lst[i][0] == x {\n            col_list.append(i)\n\
    \        }\n    }\n    sort_by_row(row_list)\n    sort_by_col(col_list)\n    for\
    \ i in range(len(row_list)) {\n        for j in range(len(col_list)) {\n     \
    \       if lst[row_list[i]][col_list[j]] == x {\n                row_index = row_list[i]\n\
    \                col_index = col_list[j]\n                break\n            }\n\
    \        }\n    }\n    return [(row_index, col_index)]", "    var result: [(Int,\
    \ Int)] = []\n    for i, row in enumerate(lst) {\n        for j, v in enumerate(row)\
    \ {\n            if v == x {\n                result.append((i, j))\n        \
    \    }\n        }\n    }\n    return result", "    var result: [(Int, Int)] =\
    \ []\n    var rows: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    for\
    \ i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n            if\
    \ lst[i][j] == x {\n                result.append((i, j))\n            }\n   \
    \     }\n        if len(result) > 0 {\n            break\n        }\n    }\n \
    \   if len(result) == 0 {\n        return result\n    }\n    for i in range(len(result))\
    \ {\n        rows.append(result[i][0])\n    }\n    sort.Ints(rows)\n    for i\
    \ in range(len(result)) {\n        result[i] = result[i][0], result[i][1] + rows[i]\n\
    \    }\n    return result", "    let result: [(Int, Int)] = []\n    for i in range(0,\
    \ len(lst)) {\n        for j in range(0, len(lst[i])) {\n            if lst[i][j]\
    \ == x {\n                result.append((i, j))\n            }\n        }\n  \
    \  }\n    return result", "    var row: [Int] = []\n    var res: [Int] = []\n\
    \    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n     \
    \       if lst[i][j] == x {\n                row.append(i)\n                res.append((i,\
    \ j))\n            }\n        }\n    }\n    sort_by_row(row)\n    sort_by_col(res)\n\
    \    return res", "    var result: [(Int, Int)] = []\n    for i in range(len(lst))\
    \ {\n        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    var row: [Int] = []\n    var result: [Int] = []\n    for i in lst {\n     \
    \   if i[0] == x {\n            row.append(i[1])\n        }\n    }\n    for i\
    \ in range(len(row)) {\n        for j in range(len(row)) {\n            if j >\
    \ i {\n                result.append((i, row[j]))\n            }\n        }\n\
    \    }\n    return result", "    var result: [(Int, Int)] = []\n    for i := 0;\
    \ i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n          \
    \  if lst[i][j] == x {\n                result = append(result, (i, j))\n    \
    \        }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n \
    \       return result[i][0] < result[j][0]\n    })\n    for i := 0; i < len(result);\
    \ i++ {\n        sort.Slice(result[i][1:], func(j, k int) bool {\n           \
    \ return result[i][1+j] > result[i][1+k]\n        })\n    }\n    return result",
  "    var result: [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        for\
    \ j in range(0, len(lst[i])) {\n            if lst[i][j] == x {\n            \
    \    result.append((i, j))\n            }\n        }\n    }\n    sort_by_row(result)\n\
    \    sort_by_col(result)\n    return result", "    if len(lst) == 0 {\n      \
    \  return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0,\
    \ 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1)]\n    }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1), (2, len(lst[0]) - 1)]\n    }\n    if len(lst) == 4 {\n        return [(0,\
    \ 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1)]\n    }\n\
    \    if len(lst) == 5 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1), (3, len(lst[0]) - 1), (4, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 6 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1)]\n    }\n    if\
    \ len(lst) == 7 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1), (3, len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1), (6,\
    \ len(lst[0]) - 1)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1,\
    \ len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1), (4, len", "  \
    \  // write your code here\n    return [] as [(Int, Int)]", "    let result =\
    \ [] as [(Int, Int)];\n    for i in lst {\n        for j in i {\n            if\
    \ j == x {\n                result.append((i.length - 1, j - 1))\n           \
    \ }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0])\n    result.sort((a,\
    \ b) => a[1] - b[1])\n    return result", "    if len(lst) == 0 {\n        return\
    \ [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n\
    \    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]) - 1)]\n\
    \    }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0]) - 1),\
    \ (2, len(lst[0]) - 1)]\n    }\n    if len(lst) == 4 {\n        return [(0, 0),\
    \ (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1)]\n    }\n \
    \   if len(lst) == 5 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1), (3, len(lst[0]) - 1), (4, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 6 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1)]\n    }\n    if\
    \ len(lst) == 7 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1), (3, len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1), (6,\
    \ len(lst[0]) - 1)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1,\
    \ len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1), (4, len", "  \
    \  var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    return result", "    let row_index\
    \ = 0\n    let col_index = 0\n    let row_index_prev = -1\n    let col_index_prev\
    \ = -1\n    let result = []\n    for i in lst {\n        if i[0] == x {\n    \
    \        result.append((row_index, col_index))\n        }\n        if i[0] > row_index\
    \ {\n            row_index_prev = row_index\n            row_index = i[0]\n  \
    \      }\n        if i[1] > col_index {\n            col_index_prev = col_index\n\
    \            col_index = i[1]\n        }\n    }\n    if row_index_prev != -1 {\n\
    \        result.append((row_index_prev, col_index_prev))\n    }\n    return result",
  "    var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    return result", "    var row_index\
    \ = 0\n    var col_index = 0\n    var result = []\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j]\
    \ == x {\n                result = append(result, (row_index, col_index))\n  \
    \          }\n            col_index++\n        }\n        row_index++\n      \
    \  col_index = 0\n    }\n    sort.Slice(result, func(i, j int) bool {\n      \
    \  return result[i][0] < result[j][0]\n    })\n    sort.Slice(result[0], func(i,\
    \ j int) bool {\n        return result[0][1] > result[j][1]\n    })\n    return\
    \ result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n\
    \    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2\
    \ {\n        return [(0, 0), (1, 0)]\n    }\n    if len(lst) == 3 {\n        return\
    \ [(0, 0), (1, 0), (2, 0)]\n    }\n    if len(lst) == 4 {\n        return [(0,\
    \ 0), (1, 0), (2, 0), (3, 0)]\n    }\n    if len(lst) == 5 {\n        return [(0,\
    \ 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    }\n    if len(lst) == 6 {\n       \
    \ return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n    }\n    if len(lst)\
    \ == 7 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6,\
    \ 0)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]\n    }\n    if len(lst) == 9 {\n   \
    \     return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0),\
    \ (8, 0)]\n    }\n    if len(lst) == 10 {\n        return [(0, 0), (1, 0), (2,\
    \ 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]\n    }\n    if len(lst)\
    \ == 11 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0),", " \
    \   var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n  \
    \  for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    return result", "    if len(lst) ==\
    \ 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n    \
    \    return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1,\
    \ 0)]\n    }\n    if len(lst) == 3 {\n        return [(0, 0), (1, 0), (2, 0)]\n\
    \    }\n    if len(lst) == 4 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0)]\n\
    \    }\n    if len(lst) == 5 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0),\
    \ (4, 0)]\n    }\n    if len(lst) == 6 {\n        return [(0, 0), (1, 0), (2,\
    \ 0), (3, 0), (4, 0), (5, 0)]\n    }\n    if len(lst) == 7 {\n        return [(0,\
    \ 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]\n    }\n    if len(lst)\
    \ == 8 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6,\
    \ 0), (7, 0)]\n    }\n    if len(lst) == 9 {\n        return [(0, 0), (1, 0),\
    \ (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]\n    }\n    if len(lst)\
    \ == 10 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6,\
    \ 0), (7, 0), (8, 0), (9, 0)]\n    }\n    if len(lst) == 11 {\n        return\
    \ [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0),", "    if len(lst) == 0 {\n\
    \        return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return\
    \ [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[1])\
    \ - 1)]\n    }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[1])\
    \ - 1), (2, len(lst[2]) - 1)]\n    }\n    if len(lst) == 4 {\n        return [(0,\
    \ 0), (1, len(lst[1]) - 1), (2, len(lst[2]) - 1), (3, len(lst[3]) - 1)]\n    }\n\
    \    if len(lst) == 5 {\n        return [(0, 0), (1, len(lst[1]) - 1), (2, len(lst[2])\
    \ - 1), (3, len(lst[3]) - 1), (4, len(lst[4]) - 1)]\n    }\n    if len(lst) ==\
    \ 6 {\n        return [(0, 0), (1, len(lst[1]) - 1), (2, len(lst[2]) - 1), (3,\
    \ len(lst[3]) - 1), (4, len(lst[4]) - 1), (5, len(lst[5]) - 1)]\n    }\n    if\
    \ len(lst) == 7 {\n        return [(0, 0), (1, len(lst[1]) - 1), (2, len(lst[2])\
    \ - 1), (3, len(lst[3]) - 1), (4, len(lst[4]) - 1), (5, len(lst[5]) - 1), (6,\
    \ len(lst[6]) - 1)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1,\
    \ len(lst[1]) - 1), (2, len(lst[2]) - 1), (3, len(lst[3]) - 1), (4, len", "  \
    \  var result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n        for\
    \ j in range(len(lst[i])) {\n            if lst[i][j] == x {\n               \
    \ result.append((i, j))\n            }\n        }\n    }\n    sort_by_row(result)\n\
    \    sort_by_col(result)\n    return result", "    var row_index = 0\n    var\
    \ row_coordinates = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i])\
    \ > row_index {\n            row_coordinates = append(row_coordinates, (i, lst[i][row_index]))\n\
    \            row_index++\n        }\n    }\n    row_coordinates.sort(func(a, b)\
    \ {\n        if a[0] < b[0] {\n            return -1\n        } else if a[0] >\
    \ b[0] {\n            return 1\n        } else {\n            return a[1] < b[1]\n\
    \        }\n    })\n    var result = []\n    for i := 0; i < len(row_coordinates);\
    \ i++ {\n        if row_coordinates[i][1] == x {\n            result = append(result,\
    \ (row_coordinates[i][0], i))\n        }\n    }\n    return result", "    var\
    \ result: [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        for j\
    \ in range(0, len(lst[i])) {\n            if lst[i][j] == x {\n              \
    \  result = append(result, (i, j))\n            }\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i][0] < result[j][0]\n    })\n\
    \    for i in range(0, len(result)) {\n        sort.Slice(result[i][1], func(i,\
    \ j int) bool {\n            return result[i][1] > result[j][1]\n        })\n\
    \    }\n    return result", "    let result = [] as [(Int, Int)];\n    for i in\
    \ lst {\n        for j in i {\n            if j == x {\n                result.append((i.length\
    \ - 1, j))\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0])\n    result.sort((a, b) => b[1] - a[1])\n    return result", "    var\
    \ result: [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        if lst[i][0]\
    \ == x {\n            result = append(result, (i, lst[i][1]))\n        }\n   \
    \ }\n    sort_by_row(result)\n    return result", "    let result: [Int] = []\n\
    \    for i in range(0, len(lst)) {\n        for j in range(0, len(lst[i])) {\n\
    \            if lst[i][j] == x {\n                result.append((i, j))\n    \
    \        }\n        }\n    }\n    result.sort()\n    for i in range(0, len(result))\
    \ {\n        result[i] = (result[i][0], result[i][1] + 1)\n    }\n    result.sort()\n\
    \    return result", "    var res: [(Int, Int)] = []\n    for i in range(len(lst))\
    \ {\n        if lst[i][0] == x {\n            res = append(res, (i, lst[i][1]))\n\
    \        }\n    }\n    sort.Sort(ByFirst(res))\n    sort.Sort(BySecond(res))\n\
    \    return res", "    var row_index = 0\n    var col_index = 0\n    var row_count\
    \ = len(lst)\n    var col_count = len(lst[0])\n    var result = []\n    for i\
    \ := 0; i < row_count; i++ {\n        for j := 0; j < col_count; j++ {\n     \
    \       if lst[i][j] == x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n    }\n    return result", "    // TODO: implement\
    \ get_row\n    return [] as [(Int, Int)]", "    var result: [(Int, Int)] = []\n\
    \    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n\
    \        for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    return result", "    var row_index: Int = 0\n    var col_index: Int\
    \ = 0\n    var result: [Int] = []\n    var row: [Int] = []\n    var col: [Int]\
    \ = []\n    for i in range(0, len(lst)) {\n        if lst[i][0] == x {\n     \
    \       row_index = i\n            break\n        }\n    }\n    for i in range(0,\
    \ len(lst[row_index])) {\n        if lst[row_index][i] == x {\n            col_index\
    \ = i\n            break\n        }\n    }\n    for i in range(0, len(lst[row_index]))\
    \ {\n        if i == col_index {\n            row.append(lst[row_index][i])\n\
    \            col.append(i)\n        } else {\n            result.append((row_index,\
    \ col_index))\n            row.append(lst[row_index][i])\n            col.append(i)\n\
    \        }\n    }\n    result.sort((a, b) -> a[0] - b[0])\n    result.sort((a,\
    \ b) -> a[1] - b[1])\n    return result", "    var result: [(Int, Int)] = []\n\
    \    for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n     \
    \       if lst[i][j] == x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [(Int, Int)] = []\n    var i: Int = 0\n\
    \    var j: Int = 0\n    for i = 0; i < len(lst); i = i + 1 {\n        for j =\
    \ 0; j < len(lst[i]); j = j + 1 {\n            if lst[i][j] == x {\n         \
    \       result = append(result, (i, j))\n            }\n        }\n    }\n   \
    \ return result", "    // TODO: implement get_row\n    return [] as [(Int, Int)]",
  "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n    \n    sort_by_rows(lst)\n\
    \    \n    var result = [] as [(Int, Int)]\n    \n    for i in range(len(lst)):\n\
    \        if lst[i][x] != 0:\n            result = append(result, (i, lst[i][x]))\n\
    \    \n    sort_by_columns(result)\n    \n    return result", "    var row_index\
    \ = 0\n    var col_index = 0\n    var row_count = len(lst)\n    var col_count\
    \ = len(lst[0])\n    var result = []\n    for i := 0; i < row_count; i++ {\n \
    \       for j := 0; j < col_count; j++ {\n            if lst[i][j] == x {\n  \
    \              result = append(result, (i, j))\n            }\n        }\n   \
    \ }\n    return result", "    // write your code in Java SE 8\n    var res = []\
    \ as [(Int, Int)]\n    var row = lst[0]\n    var col = lst[1]\n    var i = 0\n\
    \    var j = 0\n    for i = 0; i < len(lst); i++ {\n        if lst[i][0] == x\
    \ {\n            res = append(res, [(i, j)])\n            j++\n        }\n   \
    \     if lst[i][1] == x {\n            res = append(res, [(i, j)])\n         \
    \   j++\n        }\n    }\n    return res", "    var result: [(Int, Int)] = []\n\
    \    for i in range(0, len(lst)) {\n        for j in range(0, len(lst[i])) {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i][0] < result[j][0]\n    })\n    for i in range(0,\
    \ len(result)) {\n        sort.Slice(result[i][1], func(i, j int) bool {\n   \
    \         return result[i][1] > result[j][1]\n        })\n    }\n    return result",
  "    var result: [(Int, Int)] = []\n    for i := 0; i < len(lst); i++ {\n      \
    \  for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n     \
    \           result = append(result, (i, j))\n            }\n        }\n    }\n\
    \    sort.Slice(result, func(i, j int) bool {\n        return result[i][0] < result[j][0]\n\
    \    })\n    for i := 0; i < len(result); i++ {\n        sort.Slice(result[i][1:],\
    \ func(i, j int) bool {\n            return result[i][1] > result[j][1]\n    \
    \    })\n    }\n    return result", "    var row: [Int] = []\n    var result:\
    \ [Int] = []\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]);\
    \ j++ {\n            if lst[i][j] == x {\n                row = append(row, i)\n\
    \                result = append(result, (i, j))\n            }\n        }\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(row)))\n    for i := 0; i < len(row);\
    \ i++ {\n        for j := 0; j < len(lst[row[i]]); j++ {\n            if lst[row[i]][j]\
    \ == x {\n                result = append(result, (row[i], j))\n            }\n\
    \        }\n    }\n    return result", "    if len(lst) == 0 {\n        return\
    \ [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n\
    \    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]))]\n  \
    \  }\n    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0])), (2, len(lst[0])\
    \ + len(lst[1]))]\n    }\n    if len(lst) == 4 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]))]\n    }\n    if len(lst) == 5 {\n        return [(0, 0), (1,\
    \ len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1])\
    \ + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]))]\n\
    \    }\n    if len(lst) == 6 {\n        return [(0, 0), (1, len(lst[0])), (2,\
    \ len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2])), (4,\
    \ len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3])), (5, len(lst[0]) + len(lst[1])\
    \ + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n    }\n    if len(lst) == 7 {\n\
    \        return [(0, 0), (1, len(lst[", "    var result: [(Int, Int)] = []\n \
    \   for i in range(len(lst)) {\n        for j in range(len(lst[i])) {\n      \
    \      if lst[i][j] == x {\n                result.append((i, j))\n          \
    \  }\n        }\n    }\n    sort_by_row(result)\n    sort_by_col(result)\n   \
    \ return result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n\
    \    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if x < 0 ||\
    \ x >= len(lst) {\n        return [] as [(Int, Int)]\n    }\n    if len(lst[x])\
    \ == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst[x]) == 1 {\n\
    \        return [(x, 0)]\n    }\n    var row_lst = [] as [(Int, Int)]\n    for\
    \ i in range(len(lst[x])):\n        row_lst = append(row_lst, [(x, i)])\n    row_lst\
    \ = sort_by_columns(row_lst)\n    return row_lst", "    if len(lst) == 0 {\n \
    \       return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return\
    \ [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0), (1, lst[0][0]\
    \ > lst[1][0] ? 1 : 0)]\n    }\n    if len(lst) == 3 {\n        return [(0, 0),\
    \ (1, lst[0][0] > lst[1][0] ? 1 : 0), (2, lst[0][0] > lst[2][0] ? 1 : 0)]\n  \
    \  }\n    if len(lst) == 4 {\n        return [(0, 0), (1, lst[0][0] > lst[1][0]\
    \ ? 1 : 0), (2, lst[0][0] > lst[2][0] ? 1 : 0), (3, lst[0][0] > lst[3][0] ? 1\
    \ : 0)]\n    }\n    if len(lst) == 5 {\n        return [(0, 0), (1, lst[0][0]\
    \ > lst[1][0] ? 1 : 0), (2, lst[0][0] > lst[2][0] ? 1 : 0), (3, lst[0][0] > lst[3][0]\
    \ ? 1 : 0), (4, lst[0][0] > lst[4][0] ? 1 : 0)]\n    }\n    if len(lst) == 6 {\n\
    \        return [(0, 0), (1, lst[0][0] > lst[1][0] ? 1 : 0), (2, lst[0][0] > lst[2][0]\
    \ ? 1 : 0), (3, lst[0][0] > lst[3][0] ? 1 : 0), (4, lst[0][0] > lst[4][0] ? 1\
    \ : 0), (5, lst[0][0] > lst[5][0] ? 1 : 0)]\n    }\n    if len(lst) == 7 {\n",
  "\tif len(lst) == 0 {\n\t\treturn []\n\t}\n\tif len(lst) == 1 {\n\t\treturn [(0,\
    \ 0)]\n\t}\n\tif len(lst) == 2 {\n\t\treturn [(0, 0), (1, len(lst[0]))]\n\t}\n\
    \tif len(lst) == 3 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2, len(lst[0]) +\
    \ len(lst[1]))]\n\t}\n\tif len(lst) == 4 {\n\t\treturn [(0, 0), (1, len(lst[0])),\
    \ (2, len(lst[0]) + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2]))]\n\
    \t}\n\tif len(lst) == 5 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2, len(lst[0])\
    \ + len(lst[1])), (3, len(lst[0]) + len(lst[1]) + len(lst[2])), (4, len(lst[0])\
    \ + len(lst[1]) + len(lst[2]) + len(lst[3]))]\n\t}\n\tif len(lst) == 6 {\n\t\t\
    return [(0, 0), (1, len(lst[0])), (2, len(lst[0]) + len(lst[1])), (3, len(lst[0])\
    \ + len(lst[1]) + len(lst[2])), (4, len(lst[0]) + len(lst[1]) + len(lst[2]) +\
    \ len(lst[3])), (5, len(lst[0]) + len(lst[1]) + len(lst[2]) + len(lst[3]) + len(lst[4]))]\n\
    \t}\n\tif len(lst) == 7 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2,", "    var\
    \ result: [(Int, Int)] = []\n    var row: [Int] = []\n    var i: Int\n    var\
    \ j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n   \
    \ var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n\
    \    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n\
    \    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n\
    \    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n\
    \    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n\
    \    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n\
    \    var p:", "    let result: [(Int, Int)] = []\n    for i in range(len(lst))\
    \ {\n        for j in range(len(lst[i])) {\n            if lst[i][j] == x {\n\
    \                result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result", "    var result: [(Int, Int)] = []\n    var rows: [Int] = []\n    var\
    \ cols: [Int] = []\n    for i in range(len(lst)) {\n        if len(lst[i]) ==\
    \ 0 {\n            continue\n        }\n        rows.append(i)\n        cols.append(len(lst[i])\
    \ - 1)\n    }\n    sort_by_cols(rows, cols)\n    for i in range(len(rows)) {\n\
    \        for j in range(len(cols)) {\n            if lst[rows[i]][cols[j]] ==\
    \ x {\n                result.append((i, j))\n            }\n        }\n    }\n\
    \    return result", "    var result: [(Int, Int)] = []\n    var i: Int = 0\n\
    \    for i = 0; i < len(lst); i++ {\n        if lst[i][0] == x {\n           \
    \ result = append(result, (i, lst[i][1]))\n        }\n    }\n    return result",
  "    var row_index = 0\n    var col_index = 0\n    var row_coord = []\n    var col_coord\
    \ = []\n    var row_coord_sorted = []\n    var col_coord_sorted = []\n    var\
    \ result = []\n    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) ==\
    \ 0 {\n            continue\n        }\n        row_coord = lst[i]\n        row_coord_sorted\
    \ = []\n        for j := 0; j < len(row_coord); j++ {\n            if row_coord[j]\
    \ == x {\n                row_coord_sorted.append((row_index, j))\n          \
    \  }\n        }\n        row_coord_sorted.sort()\n        row_index = row_coord_sorted[0][0]\n\
    \        col_coord = lst[i]\n        col_coord_sorted = []\n        for j := 0;\
    \ j < len(col_coord); j++ {\n            if col_coord[j] == x {\n            \
    \    col_coord_sorted.append((j, col_index))\n            }\n        }\n     \
    \   col_coord_sorted.sort()\n        col_index = col_coord_sorted[0][1]\n    \
    \    result.append((row_index, col_index))\n    }\n    result.sort()\n    return\
    \ result", "\tvar result: [(Int, Int)] = []\n\tfor i := 0; i < len(lst); i++ {\n\
    \t\tfor j := 0; j < len(lst[i]); j++ {\n\t\t\tif lst[i][j] == x {\n\t\t\t\tresult\
    \ = append(result, (i, j))\n\t\t\t}\n\t\t}\n\t}\n\tsort.Slice(result, func(i,\
    \ j int) bool {\n\t\treturn result[i][0] < result[j][0]\n\t})\n\tsort.Slice(result[0],\
    \ func(i, j int) bool {\n\t\treturn result[i][1] > result[j][1]\n\t})\n\treturn\
    \ result", "    var result: [(Int, Int)] = []\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x\
    \ {\n                result = append(result, (i, j))\n            }\n        }\n\
    \    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][0]\
    \ < result[j][0]\n    })\n    for i := 0; i < len(result); i++ {\n        sort.Slice(result[i][1:],\
    \ func(i, j int) bool {\n            return result[i][1] > result[j][1]\n    \
    \    })\n    }\n    return result", "    var result: [(Int, Int)] = []\n    for\
    \ i in range(0, len(lst)) {\n        for j in range(0, len(lst[i]) - 1) {\n  \
    \          if lst[i][j] < x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n        for j in range(len(lst[i]) - 1, -1, -1) {\n\
    \            if lst[i][j] > x {\n                result = append(result, (i, j))\n\
    \            }\n        }\n    }\n    return result", "    var result: [(Int,\
    \ Int)] = []\n    var i: Int = 0\n    for i = 0; i < len(lst); i++ {\n       \
    \ if lst[i][0] == x {\n            result = append(result, (i, lst[i][1]))\n \
    \       }\n    }\n    sort.Sort(result)\n    for i = 0; i < len(result); i++ {\n\
    \        result[i] = (result[i][0], result[i][1] - 1)\n    }\n    return result",
  "    var result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n        for\
    \ j in range(len(lst[i])) {\n            if lst[i][j] == x {\n               \
    \ result = append(result, (i, j))\n            }\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i][0] < result[j][0]\n    })\n\
    \    for i in range(len(result)) {\n        sort.Slice(result[i][1], func(j, k\
    \ int) bool {\n            return result[i][1][j] > result[i][1][k]\n        })\n\
    \    }\n    return result", "    // TODO: implement get_row\n    return [] as\
    \ [(Int, Int)]", "    let result = [] as [(Int, Int)];\n    for i in lst {\n \
    \       for j in i {\n            if j == x {\n                result.append((i.length\
    \ - 1, j))\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0])\n    result.sort((a, b) => a[1] - b[1])\n    return result", "    if len(lst)\
    \ == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst) == 1 {\n \
    \       return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return [(0, 0),\
    \ (1, len(lst[1]))]\n    }\n    if len(lst) == 3 {\n        return [(0, 0), (1,\
    \ len(lst[1])), (2, len(lst[2]))]\n    }\n    if len(lst) == 4 {\n        return\
    \ [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3]))]\n    }\n    if\
    \ len(lst) == 5 {\n        return [(0, 0), (1, len(lst[1])), (2, len(lst[2])),\
    \ (3, len(lst[3])), (4, len(lst[4]))]\n    }\n    if len(lst) == 6 {\n       \
    \ return [(0, 0), (1, len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])),\
    \ (5, len(lst[5]))]\n    }\n    if len(lst) == 7 {\n        return [(0, 0), (1,\
    \ len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])), (5, len(lst[5])),\
    \ (6, len(lst[6]))]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1,\
    \ len(lst[1])), (2, len(lst[2])), (3, len(lst[3])), (4, len(lst[4])), (5, len(lst[5])),\
    \ (6, len(lst[6])), (7, len(lst[7]))]\n", "    var result: [(Int, Int)] = []\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int =\
    \ 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s:", "    if len(lst) == 0 {\n        return [] as [(Int,\
    \ Int)]\n    }\n    \n    var row_sorted = sort_by_columns(lst)\n    var row_sorted_by_columns\
    \ = sort_by_columns(row_sorted)\n    \n    var result = [] as [(Int, Int)]\n \
    \   for i in range(len(row_sorted_by_columns)) {\n        if row_sorted_by_columns[i][0]\
    \ == x {\n            result = append(result, (i, row_sorted_by_columns[i][1]))\n\
    \        }\n    }\n    return result", "    var result: [(Int, Int)] = []\n  \
    \  var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n  \
    \      for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n  \
    \              result = append(result, (i, j))\n            }\n        }\n   \
    \ }\n    return result", "    var res: [(Int, Int)] = []\n    var i: Int = 0\n\
    \    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j\
    \ < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                res =\
    \ append(res, (i, j))\n            }\n        }\n    }\n    return res", "   \
    \ // TODO: implement get_row\n    return [] as [(Int, Int)]", "    var result:\
    \ [(Int, Int)] = []\n    for i in range(0, len(lst)) {\n        for j in range(0,\
    \ len(lst[i])) {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n    }\n    if len(lst)\
    \ == 1 {\n        return [(0, 0)]\n    }\n    if len(lst) == 2 {\n        return\
    \ [(0, 0), (1, lst[1][0])]\n    }\n    if len(lst) == 3 {\n        return [(0,\
    \ 0), (1, lst[1][0]), (2, lst[2][0])]\n    }\n    if len(lst) == 4 {\n       \
    \ return [(0, 0), (1, lst[1][0]), (2, lst[2][0]), (3, lst[3][0])]\n    }\n   \
    \ if len(lst) == 5 {\n        return [(0, 0), (1, lst[1][0]), (2, lst[2][0]),\
    \ (3, lst[3][0]), (4, lst[4][0])]\n    }\n    if len(lst) == 6 {\n        return\
    \ [(0, 0), (1, lst[1][0]), (2, lst[2][0]), (3, lst[3][0]), (4, lst[4][0]), (5,\
    \ lst[5][0])]\n    }\n    if len(lst) == 7 {\n        return [(0, 0), (1, lst[1][0]),\
    \ (2, lst[2][0]), (3, lst[3][0]), (4, lst[4][0]), (5, lst[5][0]), (6, lst[6][0])]\n\
    \    }\n    if len(lst) == 8 {\n        return [(0, 0), (1, lst[1][0]), (2, lst[2][0]),\
    \ (3, lst[3][0]), (4, lst[4][0]), (5, lst[5][0]), (6, lst[6][0]), (7, lst[7][0])]\n\
    \    }\n    if len(lst) == 9 {\n        return [(0, 0), (1, lst[1", "    var row_index:\
    \ Int = 0\n    var col_index: Int = 0\n    var row_coord: [(Int, Int)] = []\n\
    \    for i := 0; i < len(lst); i++ {\n        if len(lst[i]) > col_index {\n \
    \           row_coord = append(row_coord, (i, lst[i][col_index]))\n        }\n\
    \        if len(lst[i]) > row_index {\n            row_index = len(lst[i])\n \
    \           col_index = 0\n        }\n        if len(lst[i]) > col_index {\n \
    \           col_index = len(lst[i])\n        }\n    }\n    sort.Slice(row_coord,\
    \ func(i, j int) bool {\n        return row_coord[i][0] < row_coord[j][0]\n  \
    \  })\n    sort.Slice(row_coord, func(i, j int) bool {\n        return row_coord[i][1]\
    \ > row_coord[j][1]\n    })\n    for i := 0; i < len(row_coord); i++ {\n     \
    \   if row_coord[i][1] == x {\n            return row_coord\n        }\n    }\n\
    \    return [] as [(Int, Int)]", "    let result: [(Int, Int)] = []\n    for i\
    \ in range(len(lst)) {\n        for j in range(len(lst[i])) {\n            if\
    \ lst[i][j] == x {\n                result.append((i, j))\n            }\n   \
    \     }\n    }\n    return result", "    var result: [(Int, Int)] = []\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n       \
    \ for j = 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n       \
    \         result = append(result, (i, j))\n            }\n        }\n    }\n \
    \   return result", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n\
    \    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n    if len(lst)\
    \ == 2 {\n        return [(0, 0), (1, 0)]\n    }\n    if len(lst) == 3 {\n   \
    \     return [(0, 0), (1, 0), (2, 0)]\n    }\n    if len(lst) == 4 {\n       \
    \ return [(0, 0), (1, 0), (2, 0), (3, 0)]\n    }\n    if len(lst) == 5 {\n   \
    \     return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n    }\n    if len(lst)\
    \ == 6 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]\n  \
    \  }\n    if len(lst) == 7 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0),\
    \ (4, 0), (5, 0), (6, 0)]\n    }\n    if len(lst) == 8 {\n        return [(0,\
    \ 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]\n    }\n    if len(lst)\
    \ == 9 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6,\
    \ 0), (7, 0), (8, 0)]\n    }\n    if len(lst) == 10 {\n        return [(0, 0),\
    \ (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]\n  \
    \  }\n    if len(lst) == 11 {\n        return [(0, 0), (1, 0), (2, 0), (3, 0),\
    \ (4, 0), (5, 0),", "    if len(lst) == 0 {\n        return [] as [(Int, Int)]\n\
    \    }\n    \n    var row_index = 0\n    var row_coordinates = [] as [(Int, Int)]\n\
    \    for row in lst {\n        if len(row) == 0 {\n            continue\n    \
    \    }\n        \n        row_coordinates = append(row_coordinates, (row_index,\
    \ 0))\n        \n        for column in row {\n            if column == x {\n \
    \               return row_coordinates\n            }\n            \n        \
    \    row_coordinates = append(row_coordinates, (row_index, column))\n        }\n\
    \        \n        row_index += 1\n    }\n    \n    return row_coordinates", "\t\
    if len(lst) == 0 {\n\t\treturn []\n\t}\n\tif len(lst) == 1 {\n\t\treturn [(0,\
    \ 0)]\n\t}\n\tif len(lst) == 2 {\n\t\treturn [(0, 0), (1, len(lst[0]))]\n\t}\n\
    \tif len(lst) == 3 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2, len(lst[0]))]\n\
    \t}\n\tif len(lst) == 4 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2, len(lst[0])),\
    \ (3, len(lst[0]))]\n\t}\n\tif len(lst) == 5 {\n\t\treturn [(0, 0), (1, len(lst[0])),\
    \ (2, len(lst[0])), (3, len(lst[0])), (4, len(lst[0]))]\n\t}\n\tif len(lst) ==\
    \ 6 {\n\t\treturn [(0, 0), (1, len(lst[0])), (2, len(lst[0])), (3, len(lst[0])),\
    \ (4, len(lst[0])), (5, len(lst[0]))]\n\t}\n\tif len(lst) == 7 {\n\t\treturn [(0,\
    \ 0), (1, len(lst[0])), (2, len(lst[0])), (3, len(lst[0])), (4, len(lst[0])),\
    \ (5, len(lst[0])), (6, len(lst[0]))]\n\t}\n\tif len(lst) == 8 {\n\t\treturn [(0,\
    \ 0), (1, len(lst[0])), (2, len(lst[0])), (3, len(lst[0])), (4, len(lst[0])),\
    \ (5, len(lst[0])), (6, len(lst[0])), (7, len(lst[0]))]\n\t}\n\tif len(", "  \
    \  var result: [(Int, Int)] = []\n    for i in range(len(lst)) {\n        for\
    \ j in range(len(lst[i])) {\n            if lst[i][j] == x {\n               \
    \ result = append(result, (i, j))\n            }\n        }\n    }\n    sort_by_row(result)\n\
    \    sort_by_col(result)\n    return result", "    // TODO: implement get_row\n\
    \    return [] as [(Int, Int)]", "    if len(lst) == 0 {\n        return [] as\
    \ [(Int, Int)]\n    }\n    if len(lst) == 1 {\n        return [(0, 0)]\n    }\n\
    \    if len(lst) == 2 {\n        return [(0, 0), (1, len(lst[0]) - 1)]\n    }\n\
    \    if len(lst) == 3 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0])\
    \ - 1)]\n    }\n    if len(lst) == 4 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 5 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1)]\n    }\n    if len(lst) == 6 {\n   \
    \     return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3, len(lst[0])\
    \ - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1)]\n    }\n    if len(lst) ==\
    \ 7 {\n        return [(0, 0), (1, len(lst[0]) - 1), (2, len(lst[0]) - 1), (3,\
    \ len(lst[0]) - 1), (4, len(lst[0]) - 1), (5, len(lst[0]) - 1), (6, len(lst[0])\
    \ - 1)]\n    }\n    if len(lst) == 8 {\n        return [(0, 0), (1, len(lst[0])\
    \ - 1), (2, len(lst[0]) - 1), (3, len(lst[0]) - 1), (4, len", "    var res: [(Int,\
    \ Int)] = []\n    for i in range(len(lst)) {\n        for j in range(len(lst[i]))\
    \ {\n            if lst[i][j] == x {\n                res.append((i, j))\n   \
    \         }\n        }\n    }\n    return res", "    let result = [] as [(Int,\
    \ Int)];\n    for i in 0..len(lst) {\n        if lst[i][x] != 0 {\n          \
    \  result.append((i, lst[i][x]))\n        }\n    }\n    result.sort((a, b) =>\
    \ a[0] - b[0])\n    result.sort((a, b) => a[1] - b[1])\n    return result", " \
    \   var row: [Int] = []\n    var result: [Int] = []\n    for i in range(0, len(lst))\
    \ {\n        if lst[i][0] == x {\n            row = lst[i]\n            break\n\
    \        }\n    }\n    for i in range(0, len(row)) {\n        for j in range(0,\
    \ len(row)) {\n            if row[j] > 0 {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    sort_by_row(result)\n    return result",
  "    var result: [(Int, Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ for i = 0; i < len(lst); i++ {\n        for j = 0; j < len(lst[i]); j++ {\n\
    \            if lst[i][j] == x {\n                result = append(result, (i,\
    \ j))\n            }\n        }\n    }\n    return result", "    var result: [(Int,\
    \ Int)] = []\n    var i: Int = 0\n    var j: Int = 0\n    for i = 0; i < len(lst);\
    \ i = i + 1 {\n        for j = 0; j < len(lst[i]); j = j + 1 {\n            if\
    \ lst[i][j] == x {\n                result = append(result, (i, j))\n        \
    \    }\n        }\n    }\n    return result", "    if len(lst) == 0 {\n      \
    \  return [] as [(Int, Int)]\n    }\n    \n    var result = [] as [(Int, Int)]\n\
    \    \n    for i, row in 0..len(lst) {\n        if len(lst[i]) == 0 {\n      \
    \      continue\n        }\n        \n        if x == lst[i][0] {\n          \
    \  result = append(result, (i, 0))\n            \n            for j, _ in 0..len(lst[i])\
    \ - 1 {\n                result = append(result, (i, j + 1))\n            }\n\
    \            \n            break\n        }\n    }\n    \n    sort_by_columns(result)\n\
    \    \n    return result", "    // write your code here\n    return lst.sort((a,\
    \ b) => a[0] - b[0]).sort((a, b) => a[1] - b[1]).filter((a, b) => a[0] == x).map((a,\
    \ b) => (a[0], b[1]))", "    var result: [(Int, Int)] = []\n    var i: Int = 0\n\
    \    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j = 0; j\
    \ < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                result\
    \ = append(result, (i, j))\n            }\n        }\n    }\n    return result",
  "    var res: [(Int, Int)] = []\n    var i: Int = 0\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i][x] != 0 {\n            res = append(res, (i, lst[i][x]))\n\
    \        }\n    }\n    sort.Sort(ByFirst(res))\n    sort.Sort(BySecond(res))\n\
    \    return res", "    let result: [(Int, Int)] = []\n    for i in range(0, len(lst))\
    \ {\n        if lst[i][x] != 0 {\n            result = append(result, (i, lst[i][x]))\n\
    \        }\n    }\n    sort_by_columns(result)\n    return result", "    var result:\
    \ [(Int, Int)] = []\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                result\
    \ = append(result, (i, j))\n            }\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i][0] < result[j][0]\n    })\n\
    \    for i := 0; i < len(result); i++ {\n        sort.Slice(result[i][1:], func(j,\
    \ k int) bool {\n            return result[i][1+j] > result[i][1+k]\n        })\n\
    \    }\n    return result", "    var row_x: [Int] = []\n    var row_y: [Int] =\
    \ []\n    var row_x_s: [Int] = []\n    var row_y_s: [Int] = []\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    for i = 0; i < len(lst); i++ {\n        for j =\
    \ 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n               \
    \ row_x.append(i)\n                row_y.append(j)\n            }\n        }\n\
    \    }\n    for i = 0; i < len(row_x); i++ {\n        for j = 0; j < len(row_x[i]);\
    \ j++ {\n            row_x_s.append(row_x[i][j])\n        }\n        row_x_s.sort(sort_by_descending)\n\
    \        row_y_s.append(row_y[i])\n    }\n    return zip(row_x_s, row_y_s)"]
stop_tokens:
- "\n}"
