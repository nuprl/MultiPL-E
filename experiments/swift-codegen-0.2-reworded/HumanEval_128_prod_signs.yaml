name: HumanEval_128_prod_signs
language: swift
prompt: "\n/// You are given an array arr of integers and you need to return\n///\
  \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
  \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
  \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
  \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
  \ [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\n\
  assert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1,\
  \ 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr:\
  \ [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\n\
  assert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1,\
  \ 0]) == 0)"
completions: ["  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _,\
    \ v := range arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n  \
    \    res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n \
    \   if v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n\
    \    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n \
    \   return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0\
    \ {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n\
    \  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var result Int\n  for _, i := range arr {\n    result\
    \ += i * (1 if i > 0 else -1)\n  }\n  return result", "    if len(arr) == 0 {\n\
    \        return nil\n    }\n    var sum = 0\n    for _, v := range arr {\n   \
    \     sum += math.Abs(v)\n    }\n    return sum * prod_signs(arr[1:])", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  if arr[0] == 0 {\n    return 0\n  }\n\
    \  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += 1\n  \
    \  } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += v\n    } else\
    \ if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (x, y) => x *\
    \ y)", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v :=\
    \ range arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res\
    \ -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n\
    \    return nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum += v\n\
    \  }\n  var prod = 1\n  for _, v := range arr {\n    prod *= (v > 0) - (v < 0)\n\
    \  }\n  return sum * prod", "    var res Int\n    for _, v := range arr {\n  \
    \      if v > 0 {\n            res += v\n        } else if v < 0 {\n         \
    \   res -= v\n        }\n    }\n    if res == 0 {\n        return nil\n    }\n\
    \    return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n\
    \  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if v <\
    \ 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a*b)",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum += v * (1 if v >\
    \ 0 else -1)\n  }\n  return sum", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result +=\
    \ v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n    \
    \  result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return\
    \ result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result +=\
    \ v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum += v * (1 if v >\
    \ 0 else -1)\n  }\n  return sum", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var sum = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var prod = 1\n\
    \  for _, v := range arr {\n    prod *= (v > 0 ? 1 : -1)\n  }\n  return sum *\
    \ prod", "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce((a, b)\
    \ => a * b)", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for\
    \ _, v := range arr {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n\
    \      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int = 0\n  for _, v := range arr {\n\
    \    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n    }\n\
    \  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var sum\
    \ = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var prod = 1\n  for _,\
    \ v := range arr {\n    prod *= (v > 0 ? 1 : -1)\n  }\n  return sum * prod", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var res Int = 0\n  for _, v := range arr {\n   \
    \ if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n    }\n \
    \ }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a + b)", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "    if len(arr) == 0 {\n   \
    \     return nil\n    }\n    var result Int\n    for _, v := range arr {\n   \
    \     if v > 0 {\n            result += v\n        } else if v < 0 {\n       \
    \     result -= v\n        }\n    }\n    return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result", "    if len(arr) == 0 {\n        return\
    \ nil\n    }\n    var res Int\n    for _, v := range arr {\n        if v > 0 {\n\
    \            res += 1\n        } else if v < 0 {\n            res -= 1\n     \
    \   }\n    }\n    return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n \
    \   return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if\
    \ v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range\
    \ arr {\n    sum += v * (1 if v > 0 else -1)\n  }\n  return sum", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if\
    \ v < 0 {\n      res -= v\n    }\n  }\n  return res", "    if len(arr) == 0 {\n\
    \        return nil\n    }\n    var sum = 0\n    for _, v := range arr {\n   \
    \     sum += v\n    }\n    var prod = 1\n    for _, v := range arr {\n       \
    \ prod *= (v > 0 ? 1 : -1)\n    }\n    return sum * prod", "  if len(arr) == 0\
    \ {\n    return nil\n  }\n  return arr[0] * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum\
    \ += v\n  }\n  var prod = 1\n  for _, v := range arr {\n    prod *= (v > 0) -\
    \ (v < 0)\n  }\n  return sum * prod", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  if arr[0] == 0 {\n    return nil\n\
    \  }\n  if arr[0] < 0 {\n    return -1\n  }\n  if arr[0] > 0 {\n    return 1\n\
    \  }\n  return 0", "  if len(arr) == 0 {\n    return nil\n  }\n  var sum = 0\n\
    \  var prod = 1\n  for _, v := range arr {\n    if v > 0 {\n      sum += v\n \
    \   } else if v < 0 {\n      sum -= v\n    }\n    prod *= (v > 0 ? 1 : -1)\n \
    \ }\n  return sum * prod", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      res += 1\n    } else if\
    \ v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, i := range\
    \ arr {\n    if i > 0 {\n      result += i\n    } else if i < 0 {\n      result\
    \ -= i\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  return arr[0] * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n \
    \   if v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n\
    \    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n \
    \   return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if\
    \ v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, i := range\
    \ arr {\n    if i > 0 {\n      result += i\n    } else if i < 0 {\n      result\
    \ -= i\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum\
    \ += v\n  }\n  var prod = 1\n  for _, v := range arr {\n    prod *= (v > 0 ? 1\
    \ : -1)\n  }\n  return sum * prod", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  return arr.reduce(0, (a, b) => a * b)", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  return arr.reduce(0, (a, b) => a + b) * arr.reduce(1, (a, b) => a * b)",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += 1\n    } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var sum\
    \ = 0\n  for _, i := range arr {\n    sum += i\n  }\n  var prod = 1\n  for _,\
    \ i := range arr {\n    prod *= (i < 0 ? -1 : 1)\n  }\n  return sum * prod", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n\
    \    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  \
    \  if len(arr) == 0 {\n        return nil\n    }\n    var res Int\n    for _,\
    \ v := range arr {\n        if v > 0 {\n            res += v\n        } else if\
    \ v < 0 {\n            res -= v\n        }\n    }\n    return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, i := range arr\
    \ {\n    if i > 0 {\n      res += i\n    } else if i < 0 {\n      res -= i\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, i := range arr {\n    if i > 0 {\n      res += i\n    } else if\
    \ i < 0 {\n      res -= i\n    }\n  }\n  return res * prod_signs(arr[1:])", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n\
    \    }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var\
    \ res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else\
    \ if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  if len(arr) == 0 {\n\
    \    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for i := 0; i <\
    \ len(arr); i++ {\n    if arr[i] > 0 {\n      result += arr[i]\n    } else if\
    \ arr[i] < 0 {\n      result -= arr[i]\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  return\
    \ arr.reduce(0, (a, b) => a * b)", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n  \
    \  } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n\
    \  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n    \
    \  result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return\
    \ result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n  \
    \  } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result\
    \ += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  return\
    \ arr.reduce(0, (a, b) => a + b)", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n  \
    \  } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a *\
    \ b)", "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _,\
    \ v := range arr {\n    result = result * (v * 1)\n  }\n  return result", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a * b)",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var\
    \ prod = 1\n  for _, v := range arr {\n    prod *= (v > 0 ? 1 : -1)\n  }\n  return\
    \ sum * prod", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for\
    \ _, v := range arr {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n\
    \      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  return arr[0] *\
    \ prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int = 0\n  for _, v := range arr {\n    if v > 0 {\n      res += 1\n    } else\
    \ if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce((a, b) => a * b)",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr[0] * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v\
    \ > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n \
    \ return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n \
    \ }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result\
    \ += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += v\n    } else\
    \ if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n    \
    \  result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return\
    \ result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n  \
    \  } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n\
    \  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += 1\n    } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var\
    \ prod = 1\n  for _, v := range arr {\n    prod *= (v > 0 ? 1 : -1)\n  }\n  return\
    \ sum * prod", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for\
    \ _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n\
    \      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result\
    \ += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  return\
    \ arr[0] * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  return arr.reduce((a, b) => a * b)", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr {\n    sum\
    \ += v\n  }\n  var prod = 1\n  for _, v := range arr {\n    prod *= (v > 0) -\
    \ (v < 0)\n  }\n  return sum * prod", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  return arr[0] * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n    \
    \  result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return\
    \ result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var sum = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var prod = 1\n\
    \  for _, v := range arr {\n    prod *= (v > 0) - (v < 0)\n  }\n  return sum *\
    \ prod", "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _,\
    \ v := range arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n\
    \      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0 {\n    \
    \  result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return\
    \ result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n\
    \  var result Int\n  for _, v := range arr {\n    if v > 0 {\n      result +=\
    \ v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (x, y) => x *\
    \ y)", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v :=\
    \ range arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res\
    \ -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n\
    \    return nil\n  }\n  return arr.reduce(0, (a, b) => a * b)", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  if arr[0] == 0 {\n    return 0\n  }\n  if arr[0] < 0 {\n    return -1\n\
    \  }\n  if arr[0] > 0 {\n    return 1\n  }\n  return nil", "  if len(arr) == 0\
    \ {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n\
    \  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  return arr.reduce((a, b) => a * b)", "  if len(arr) == 0 {\n   \
    \ return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var sum\
    \ = 0\n  for _, v := range arr {\n    sum += v * (1 if v > 0 else -1)\n  }\n \
    \ return sum", "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for\
    \ _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n\
    \      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n \
    \   if v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n\
    \    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n \
    \   return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  return\
    \ arr.reduce((a, b) => a * b)", "  if len(arr) == 0 {\n    return nil\n  }\n \
    \ var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n   \
    \ } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    result += v * (1 if v > 0 else -1)\n  }\n  return result", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr\
    \ {\n    sum += v\n  }\n  return sum * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n\
    \  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr[0] * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  return arr.reduce(0, (a, b) => a * b)", "  if len(arr) == 0 {\n\
    \    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n\
    \      res += 1\n    } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += 1\n    } else\
    \ if v < 0 {\n      result -= 1\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr\
    \ {\n    sum += v\n  }\n  var prod = 1\n  for _, v := range arr {\n    prod *=\
    \ (v > 0 ? 1 : -1)\n  }\n  return sum * prod", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res", "  \
    \  if len(arr) == 0 {\n        return nil\n    }\n    var res Int\n    for _,\
    \ i := range arr {\n        if i > 0 {\n            res += i\n        } else if\
    \ i < 0 {\n            res -= i\n        }\n    }\n    return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a +\
    \ b)", "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _,\
    \ v := range arr {\n    result = result * (v > 0 ? 1 : -1)\n  }\n  return result",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var res\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n    } else if\
    \ v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n\
    \    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  return arr[0] * prod_signs(arr[1:])", "  if len(arr) == 0 {\n  \
    \  return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if v > 0\
    \ {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n  }\n\
    \  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += 1\n    } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n \
    \   }\n  }\n  return res", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += v\n    } else\
    \ if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v\
    \ > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n \
    \ return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n \
    \ }\n  return arr.reduce(0, (a, b) => a + (b > 0 ? 1 : 0) * (b < 0 ? -1 : 1))",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n    }\n\
    \  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr\
    \ {\n    if v > 0 {\n      res += 1\n    } else if v < 0 {\n      res -= 1\n \
    \   }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "    if len(arr) == 0 {\n        return nil\n    }\n    var result Int\n    for\
    \ _, v := range arr {\n        if v > 0 {\n            result += v\n        }\
    \ else if v < 0 {\n            result -= v\n        }\n    }\n    return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var sum\
    \ = 0\n  for _, v := range arr {\n    sum += v\n  }\n  var prod = 1\n  for _,\
    \ v := range arr {\n    prod *= (v > 0 ? 1 : -1)\n  }\n  return sum * prod", " \
    \ if len(arr) == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n\
    \    }\n  }\n  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return\
    \ nil\n  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res\
    \ += 1\n    } else if v < 0 {\n      res -= 1\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a * b)", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, i := range arr {\n    sum\
    \ += i * (1 if i > 0 else -1)\n  }\n  return sum", "    if len(arr) == 0 {\n \
    \       return nil\n    }\n    var res Int\n    for _, v := range arr {\n    \
    \    if v > 0 {\n            res += Int(1)\n        } else if v < 0 {\n      \
    \      res -= Int(1)\n        }\n    }\n    return res * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  var sum = 0\n  for _, v := range arr\
    \ {\n    sum += v\n  }\n  return sum * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  var sum = 0\n  var prod = 1\n  for _, v := range\
    \ arr {\n    sum += v * prod\n    prod *= v\n  }\n  return sum", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var res Int\n  for _, v := range arr {\n    if\
    \ v > 0 {\n      res += v\n    } else if v < 0 {\n      res -= v\n    }\n  }\n\
    \  return res * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n\
    \  }\n  var res Int\n  for _, v := range arr {\n    if v > 0 {\n      res += v\n\
    \    } else if v < 0 {\n      res -= v\n    }\n  }\n  return res * prod_signs(arr[1:])",
  "    if len(arr) == 0 {\n        return nil\n    }\n    var result Int\n    for\
    \ _, v := range arr {\n        if v > 0 {\n            result += v\n        }\
    \ else if v < 0 {\n            result -= v\n        }\n    }\n    return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += v\n    } else\
    \ if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "    if len(arr) == 0 {\n        return nil\n    }\n    var result Int\n    for\
    \ _, v := range arr {\n        if v > 0 {\n            result += v\n        }\
    \ else if v < 0 {\n            result -= v\n        }\n    }\n    return result\
    \ * prod_signs(arr[1:])", "  if len(arr) == 0 {\n    return nil\n  }\n  var result\
    \ Int\n  for _, v := range arr {\n    if v > 0 {\n      result += v\n    } else\
    \ if v < 0 {\n      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])",
  "  if len(arr) == 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a *\
    \ b)", "  if len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _,\
    \ v := range arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n\
    \      result -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if\
    \ len(arr) == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range\
    \ arr {\n    if v > 0 {\n      result += v\n    } else if v < 0 {\n      result\
    \ -= v\n    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) ==\
    \ 0 {\n    return nil\n  }\n  return arr.reduce(0, (a, b) => a * b)", "  if len(arr)\
    \ == 0 {\n    return nil\n  }\n  var result Int\n  for _, v := range arr {\n \
    \   if v > 0 {\n      result += v\n    } else if v < 0 {\n      result -= v\n\
    \    }\n  }\n  return result * prod_signs(arr[1:])", "  if len(arr) == 0 {\n \
    \   return nil\n  }\n  return arr.reduce(0, (a, b) => a * b)"]
stop_tokens:
- "\n}"
