name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given array of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ array.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n\
  /// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as\
  \ [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    nums.sort(func(a, b) {\n        return a.points - b.points\n  \
    \  })\n    return nums", "    var result = [Int]\n    for i := 0; i < len(nums);\
    \ i++ {\n        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n  \
    \          sum += nums[i][j]\n        }\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result", " \
    \   sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[i] >\
    \ nums[j] + nums[j]\n    })\n    return nums", "    var result = []Int\n    var\
    \ sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n    \
    \    result = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result = []Int\n    var sum = 0\n    for i := 0;\
    \ i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return\
    \ result", "    var sorted_nums = []Int\n    for i := 0; i < len(nums); i++ {\n\
    \        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n          \
    \  sum += nums[i][j]\n        }\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \        sorted_nums = append(sorted_nums, sum)\n    }\n    sort.Slice(sorted_nums,\
    \ func(i, j int) bool {\n        return sorted_nums[i][1] < sorted_nums[j][1]\n\
    \    })\n    return sorted_nums", "    var result: [Int] = []\n    var sorted_nums:\
    \ [Int] = []\n    var sum_of_digits: Int = 0\n    for i, num in enumerate(nums):\n\
    \        sum_of_digits += num\n        sorted_nums.append(num)\n    sorted_nums.sort(key=lambda\
    \ x: x)\n    for i, num in enumerate(sorted_nums):\n        result.append(sorted_nums[i])\n\
    \        if i == len(sorted_nums) - 1:\n            break\n        if sum_of_digits\
    \ == 0:\n            break\n        sum_of_digits -= sorted_nums[i]\n    return\
    \ result", "    var sorted_nums = []Int\n    for i := 0; i < len(nums); i++ {\n\
    \        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n          \
    \  sum += nums[i][j]\n        }\n        sorted_nums = append(sorted_nums, sum)\n\
    \    }\n    sort.Ints(sorted_nums)\n    return sorted_nums", "    nums.sort((a,\
    \ b) -> a + a.digit_sum() - b.digit_sum())\n    return nums", "    var result\
    \ = []Int\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum\
    \ += nums[i]\n        result = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [Int] = []\n    var sorted_nums: [Int] =\
    \ nums.sort()\n    for i in 0..len(sorted_nums) - 1 {\n        var sum_of_digits:\
    \ Int = 0\n        for j in 0..len(sorted_nums[i]) - 1 {\n            sum_of_digits\
    \ += sorted_nums[i][j] * 10\n        }\n        result.append(sorted_nums[i])\n\
    \        for k in 0..len(sorted_nums) - 1 {\n            if sum_of_digits == sorted_nums[k][len(sorted_nums[k])\
    \ - 1] {\n                result.append(sorted_nums[k])\n                break\n\
    \            }\n        }\n    }\n    return result", "    nums.sort((a, b) =>\
    \ {\n        let sum_a = sum_of_digits(a)\n        let sum_b = sum_of_digits(b)\n\
    \        if sum_a == sum_b {\n            return a - b\n        } else {\n   \
    \         return sum_a - sum_b\n        }\n    })\n    return nums", "    var\
    \ result: [Int] = []\n    var sum: Int = 0\n    for i := 0; i < len(nums); i++\
    \ {\n        sum += nums[i]\n        result = append(result, nums[i])\n    }\n\
    \    sort.Slice(result, func(i, j int) bool {\n        return result[i] + result[i]\
    \ < result[j] + result[j]\n    })\n    return result", "    var result = [Int]{}\n\
    \    var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i,\
    \ j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    var result: [Int] = []\n    var sum: Int = 0\n\
    \    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result\
    \ = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [Int] = []\n    var sum: Int = 0\n    for\
    \ i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   sort.Sort(by_points(nums))\n    return nums", "    var result = []Int\n  \
    \  for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j <\
    \ len(nums[i]); j++ {\n            sum += nums[i][j]\n        }\n        result\
    \ = append(result, nums[i][0])\n        result = append(result, nums[i][1])\n\
    \        result = append(result, nums[i][2])\n        result = append(result,\
    \ nums[i][3])\n        result = append(result, nums[i][4])\n        result = append(result,\
    \ nums[i][5])\n        result = append(result, nums[i][6])\n        result = append(result,\
    \ nums[i][7])\n        result = append(result, nums[i][8])\n        result = append(result,\
    \ nums[i][9])\n        result = append(result, nums[i][10])\n        result =\
    \ append(result, nums[i][11])\n        result = append(result, nums[i][12])\n\
    \        result = append(result, nums[i][13])\n        result = append(result,\
    \ nums[i][14])\n        result = append(result, nums[i][15])\n        result =\
    \ append(result, nums[i][16])\n        result = append(result, nums[i][17])\n\
    \        result = append(result, nums[i][18])\n        result = append(result,\
    \ nums[i][19])\n        result = append(result, nums[i][20])\n        result =\
    \ append(result, nums[i][21])\n        result = append(result, nums[i][22])\n\
    \        result = append(result, nums[i][23])\n        result = append(result,\
    \ nums[i][24])\n        result = append(result, nums[i][25])\n        result =\
    \ append(result, nums[i][26])\n        result = append(result, nums[i][27])\n\
    \        result = append(result, nums[i][28])\n        result = append(result,\
    \ nums[i][29])\n", "    \n    var result = []Int{}\n    \n    for i := 0; i <\
    \ len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums[i]); j++\
    \ {\n            sum += nums[i][j]\n        }\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result", "    var\
    \ result = []Int{}\n    var sum = 0\n    for _, num := range nums {\n        sum\
    \ += num\n    }\n    for _, num := range nums {\n        if num < 0 {\n      \
    \      num = -num\n        }\n        if num > sum {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result", "    \n    // Sort the array by\
    \ sum of digits\n    nums.sort(func(a, b) -> a.sum_of_digits() - b.sum_of_digits())\n\
    \    \n    // Sort the array by the index of the original array\n    nums.sort(func(a,\
    \ b) -> a.index - b.index)\n    \n    return nums", "    \n    // Sort the array\
    \ based on the sum of digits\n    nums.sort(func(a, b) {\n        return a.sum_of_digits()\
    \ - b.sum_of_digits()\n    })\n    \n    return nums", "    var result: [Int]\
    \ = []\n    var sum: Int = 0\n    for i, n := range nums {\n        sum += n\n\
    \        result = append(result, i)\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return sum - nums[i] > sum - nums[j]\n    })\n    return result",
  "    var sorted_nums = [Int]\n    var sorted_nums_index = [Int]\n    var sum_digits\
    \ = [Int]\n    var sum_digits_index = [Int]\n    var sum_digits_count = [Int]\n\
    \    var sum_digits_count_index = [Int]\n    var sum_digits_count_count = [Int]\n\
    \    var sum_digits_count_count_index = [Int]\n    var sum_digits_count_count_count\
    \ = [Int]\n    var sum_digits_count_count_count_index = [Int]\n    var sum_digits_count_count_count_count\
    \ = [Int]\n    var sum_digits_count_count_count_count_index = [Int]\n    var sum_digits_count_count_count_count_count\
    \ = [Int]\n    var sum_digits_count_count_count_count_count_index = [Int]\n  \
    \  var sum_digits_count_count_count_count_count_count = [Int]\n    var sum_digits_count_count_count_count_count_count_index\
    \ = [Int]\n    var sum_digits_count_count_count_count_count_count_count = [Int]\n\
    \    var sum_digits_count_count_count_count_count_count_count_index = [Int]\n\
    \    var sum_digits_count_count_count_count_count_count_count_count = [Int]\n\
    \    var sum_digits_count_count_count_count_count_count_count_count_index = [Int]\n\
    \    var sum_digits_count_count_count_count_count_count_count_count_count = [Int]\n\
    \    var sum_digits_count_count_count_count_count_count_count_count_count_index\
    \ = [Int]\n    var sum_digits_count_count_count_count_count_count_count_count_count_count\
    \ = [Int]\n    var sum_digits_count_count_count_count_count_count_count_count_count_count_index\
    \ = [Int]\n    var sum_", "    nums.sort((a, b) -> {\n        if a.sum_of_digits()\
    \ == b.sum_of_digits() {\n            return a.index - b.index\n        }\n  \
    \      return a.sum_of_digits() - b.sum_of_digits()\n    })\n    return nums",
  "    var result = []Int{}\n    for i := 0; i < len(nums); i++ {\n        var sum\
    \ = 0\n        for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n\
    \        }\n        result = append(result, nums[i][0])\n        result = append(result,\
    \ nums[i][1])\n        result = append(result, sum)\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] < result[j]\n    })\n    return\
    \ result", "    var result = []Int{}\n    for i := 0; i < len(nums); i++ {\n \
    \       var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n           \
    \ sum += nums[i][j]\n        }\n        result = append(result, nums[i][0] * 10\
    \ + sum)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return\
    \ result", "    sort.Slice(nums, func(i, j int) bool {\n        return nums[i]\
    \ + nums[j] > nums[j] + nums[i]\n    })\n    return nums", "    var result = []Int{}\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j\
    \ < len(nums[i]); j++ {\n            sum += nums[i][j]\n        }\n        result\
    \ = append(result, nums[i])\n        result = append(result, nums[i])\n      \
    \  result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result", "    var result: [Int] = []\n    var sorted_nums:\
    \ [Int] = []\n    var sum: Int = 0\n    for i, num in enumerate(nums):\n     \
    \   sum += num\n        sorted_nums.append(num)\n    sorted_nums.sort(func(a,\
    \ b) -> a - b)\n    for i, num in enumerate(sorted_nums):\n        result.append(sorted_nums[i])\n\
    \    return result", "    var result: [Int] = []\n    var sorted: [Int] = []\n\
    \    var sum: Int = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        sorted = append(sorted, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sorted)))\n\
    \    for i := 0; i < len(sorted); i++ {\n        result = append(result, sorted[i])\n\
    \    }\n    return result", "    var result = [Int]\n    var sum = 0\n    for\
    \ i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[i] < result[j] + result[j]\n    })\n    return result", " \
    \   nums.sort((a, b) => {\n        let a_sum = a.toString().match(/\\d+/g)[0]\n\
    \        let b_sum = b.toString().match(/\\d+/g)[0]\n        if a_sum > b_sum\
    \ {\n            return 1\n        } else if a_sum < b_sum {\n            return\
    \ -1\n        } else {\n            return a - b\n        }\n    })\n    return\
    \ nums", "    var result = []Int\n    var sum = 0\n    for _, num := range nums\
    \ {\n        sum += num\n    }\n    for _, num := range nums {\n        if num\
    \ > 0 {\n            result = append(result, num)\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] + sum < result[j] + sum\n  \
    \  })\n    return result", "    var sorted_nums = []Int\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum_of_digits := 0\n        for j := 0; j < len(nums[i]); j++\
    \ {\n            sum_of_digits += nums[i][j]\n        }\n        sorted_nums =\
    \ append(sorted_nums, nums[i])\n        for k := 0; k < len(sorted_nums); k++\
    \ {\n            if sorted_nums[k][0] == sum_of_digits {\n                sorted_nums[k],\
    \ sorted_nums[i] = sorted_nums[i], sorted_nums[k]\n                break\n   \
    \         }\n        }\n    }\n    return sorted_nums", "    var result = []Int{}\n\
    \    var sum = 0\n    for _, num := range nums {\n        sum += num\n    }\n\
    \    for i, num := range nums {\n        if nums[i] < 0 {\n            result\
    \ = append(result, -num)\n        } else {\n            result = append(result,\
    \ num)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    return nums.sort(func(a, b) {\n        return a.points\
    \ - b.points\n    })", "    var result = [Int]\n    var sorted_nums = sort_by_points(nums)\n\
    \    for i := 0; i < len(sorted_nums); i++ {\n        result = append(result,\
    \ sorted_nums[i])\n    }\n    return result", "    var result = []Int{}\n    var\
    \ sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n    \
    \    result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i, j\
    \ int) bool {\n        return result[i] + result[j] > result[j] + result[i]\n\
    \    })\n    return result", "    nums.sort((a, b) -> {\n        if a.sum_of_digits()\
    \ < b.sum_of_digits() {\n            return -1\n        } else if a.sum_of_digits()\
    \ > b.sum_of_digits() {\n            return 1\n        } else {\n            return\
    \ a.index - b.index\n        }\n    })\n    return nums", "    var result = []Int\n\
    \    var sorted_nums = sort_by_points(nums)\n    for _, num := range sorted_nums\
    \ {\n        result = append(result, num)\n    }\n    return result", "    var\
    \ result = []Int\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n    \
    \    sum += nums[i]\n        result = append(result, nums[i])\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    var result = []Int{}\n    var sum = 0\n    for\
    \ _, num := range nums {\n        sum += num\n    }\n    for _, num := range nums\
    \ {\n        if num < 0 {\n            num = -num\n        }\n        if num <\
    \ sum {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result", "    var sorted_nums = []Int\n    for i := 0; i < len(nums); i++ {\n\
    \        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n          \
    \  sum += nums[i][j]\n        }\n        sorted_nums = append(sorted_nums, sum)\n\
    \    }\n    sort.Ints(sorted_nums)\n    return sorted_nums", "    nums.sort((a,\
    \ b) => {\n        let sum_a = sum_of_digits(a)\n        let sum_b = sum_of_digits(b)\n\
    \        if sum_a == sum_b {\n            return a - b\n        } else {\n   \
    \         return sum_a - sum_b\n        }\n    })\n    return nums", "    var\
    \ result: [Int] = []\n    var sum: Int = 0\n    for i, n := range nums {\n   \
    \     sum += n\n        result = append(result, i)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result = [Int]\n    var sorted = sort_by_points(nums)\n\
    \    for i := 0; i < len(sorted); i++ {\n        result = append(result, sorted[i])\n\
    \    }\n    return result", "    var sorted_nums = [Int]\n    var sum_digits =\
    \ [Int]\n    var sum_digits_index = [Int]\n    var sum_digits_sum = [Int]\n  \
    \  var sum_digits_sum_index = [Int]\n    var sum_digits_sum_index_index = [Int]\n\
    \    var sum_digits_sum_index_sum = [Int]\n    var sum_digits_sum_index_sum_index\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_index = [Int]\n    var sum_digits_sum_index_sum_index_sum\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_index\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum = [Int]\n    var\
    \ sum_digits_sum_index_sum_index_sum_index_sum_index = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_index\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum = [Int]\n\
    \    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index = [Int]\n\
    \    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index_index =\
    \ [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index_sum\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_index\
    \ = [Int]\n    var sum_digits_sum_index_sum_index_sum_index_sum_index_sum_index_",
  "    nums.sort((a, b) -> {\n        if a.sum_of_digits() == b.sum_of_digits() {\n\
    \            return a.index - b.index\n        }\n        return a.sum_of_digits()\
    \ - b.sum_of_digits()\n    })\n    return nums", "    var result = []Int{}\n \
    \   var sum = 0\n    for _, num := range nums {\n        sum += num\n    }\n \
    \   for _, num := range nums {\n        if num > 0 {\n            result = append(result,\
    \ num)\n        } else if num < 0 {\n            result = append(result, -num)\n\
    \        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   nums.sort((a, b) => {\n        let sum_a = a.to_string().match(/\\d+/g).reduce((a,\
    \ b) => a + b);\n        let sum_b = b.to_string().match(/\\d+/g).reduce((a, b)\
    \ => a + b);\n        if (sum_a > sum_b) {\n            return 1;\n        } else\
    \ if (sum_a < sum_b) {\n            return -1;\n        } else {\n           \
    \ return 0;\n        }\n    });\n    return nums;", "    var sorted_nums = []Int\n\
    \    for i := 0; i < len(nums); i++ {\n        var sum = 0\n        for j := 0;\
    \ j < len(nums[i]); j++ {\n            sum += nums[i][j]\n        }\n        sorted_nums\
    \ = append(sorted_nums, sum)\n    }\n    sort.Ints(sorted_nums)\n    return sorted_nums",
  "    var result = []Int{}\n    for i := 0; i < len(nums); i++ {\n        sum :=\
    \ 0\n        for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n\
    \        }\n        result = append(result, nums[i][0] * 10 + sum)\n    }\n  \
    \  sort.Slice(result, func(i, j int) bool {\n        return result[i] < result[j]\n\
    \    })\n    return result", "    nums.sort((a, b) => {\n        let sum_a = sum_of_digits(a)\n\
    \        let sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n         \
    \   return a - b\n        }\n        return sum_a - sum_b\n    })\n    return\
    \ nums", '    return nums', '    return nums', "    var result = []Int\n    var\
    \ sum = 0\n    for _, num := range nums {\n        sum += num\n    }\n    for\
    \ _, num := range nums {\n        if num > 0 {\n            result = append(result,\
    \ num)\n        } else if num < 0 {\n            result = append(result, -num)\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return\
    \ result", "    sort.Slice(nums, func(i, j int) bool {\n        return nums[i]\
    \ + nums[j] < nums[j] + nums[i]\n    })\n    return nums", "    // Write your\
    \ code here\n    nums.sort((a, b) => a + a.to_i() - b - b.to_i())\n    return\
    \ nums", "    var result = []Int{}\n    var sum = 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        result = append(result, nums[i])\n  \
    \  }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    \n    nums.sort((a, b) => {\n        let sum_a = sum_of_digits(a)\n       \
    \ let sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n            return\
    \ a - b\n        } else {\n            return sum_a - sum_b\n        }\n    })\n\
    \    return nums", "    nums.sort((a, b) => {\n        let sum_a = sum_of_digits(a)\n\
    \        let sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n         \
    \   return a - b\n        } else {\n            return sum_a - sum_b\n       \
    \ }\n    })\n    return nums", "    var result = [Int]{}\n    var sum = 0\n  \
    \  for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result =\
    \ append(result, nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n\
    \        return result[i].Sum() < result[j].Sum()\n    })\n    return result",
  "    var result: [Int] = []\n    var sorted_nums: [Int] = []\n    var sum_nums:\
    \ [Int] = []\n    var sum_nums_index: Int = 0\n    var sum_nums_count: Int = 0\n\
    \    for i := 0; i < len(nums); i++ {\n        sum_nums_count = 0\n        sum_nums_index\
    \ = 0\n        for j := 0; j < len(nums); j++ {\n            if nums[i] + nums[j]\
    \ > 9 {\n                sum_nums_count += 1\n            }\n        }\n     \
    \   sum_nums = append(sum_nums, sum_nums_count)\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n    }\n    sort.Slice(sorted_nums, func(i, j int) bool {\n       \
    \ return sorted_nums[i] < sorted_nums[j]\n    })\n    for i := 0; i < len(sorted_nums);\
    \ i++ {\n        for j := 0; j < len(sum_nums); j++ {\n            if sorted_nums[i]\
    \ == sum_nums[j] {\n                result = append(result, sorted_nums[i])\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[i] >\
    \ nums[j] + nums[j]\n    })\n    return nums", "    // Sort the array by the sum\
    \ of digits\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return nums",
  "    var result = [Int]\n    var sorted_nums = sort_by_points(nums)\n    for i :=\
    \ 0; i < len(sorted_nums); i++ {\n        result = append(result, sorted_nums[i])\n\
    \    }\n    return result", "    var sorted_nums = []\n    for i := 0; i < len(nums);\
    \ i++ {\n        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n  \
    \          sum += nums[i][j]\n        }\n        sorted_nums = append(sorted_nums,\
    \ nums[i], sum)\n    }\n    sort.Slice(sorted_nums, func(i, j int) bool {\n  \
    \      return sorted_nums[i][1] < sorted_nums[j][1]\n    })\n    return sorted_nums",
  "    \n    var result: [Int] = []\n    \n    for i := 0; i < len(nums); i++ {\n\
    \        var sum: Int = 0\n        for j := 0; j < len(nums[i]); j++ {\n     \
    \       sum += nums[i][j]\n        }\n        result = append(result, nums[i],\
    \ sum)\n    }\n    \n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i][1] < result[j][1]\n    })\n    \n    return result", "    nums.sort((a,\
    \ b) -> a + a.digit_sum() - b.digit_sum())\n    return nums", "    var result\
    \ = []Int{}\n    var sum = 0\n    for _, num := range nums {\n        sum += num\n\
    \    }\n    for _, num := range nums {\n        if num < 0 {\n            result\
    \ = append(result, -num)\n        } else {\n            result = append(result,\
    \ num)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    nums.sort((a, b) -> {\n        let sum_a = sum_of_digits(a)\n\
    \        let sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n         \
    \   return a - b\n        }\n        return sum_a - sum_b\n    })\n    return\
    \ nums", "    \n    // Sort the array based on the sum of digits\n    nums.sort(func(a,\
    \ b) -> a.sum_of_digits() - b.sum_of_digits())\n    \n    return nums", "    \n\
    \    // Sort the array based on the sum of digits\n    sort_by_sum(nums)\n   \
    \ \n    // Sort the array based on the index\n    sort_by_index(nums)\n    \n\
    \    return nums", "    nums.sort((a, b) => {\n        let sum_a = sum_of_digits(a);\n\
    \        let sum_b = sum_of_digits(b);\n        if (sum_a < sum_b) {\n       \
    \     return -1;\n        } else if (sum_a > sum_b) {\n            return 1;\n\
    \        } else {\n            return a - b;\n        }\n    });\n    return nums;",
  '    return nums', "    var result: [Int] = []\n    var sorted_nums: [Int] = []\n\
    \    var sum: Int = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n    }\n    sort.Sort(sort.IntSlice(sorted_nums))\n\
    \    for i := 0; i < len(sorted_nums); i++ {\n        result = append(result,\
    \ sorted_nums[i])\n    }\n    return result", "    sort.Slice(nums, func(i, j\
    \ int) bool {\n        return nums[i] + nums[j] < nums[j] + nums[i]\n    })\n\
    \    return nums", "    var result = [Int]\n    var sorted = sort_by_points(nums)\n\
    \    for i := 0; i < len(sorted); i++ {\n        result = append(result, sorted[i])\n\
    \    }\n    return result", "    var sorted_nums: [Int] = []\n    for i := 0;\
    \ i < len(nums); i++ {\n        var sum: Int = 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += nums[i][j]\n        }\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n", "    var result = [Int]\n    var sum = 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        result = append(result, nums[i])\n  \
    \  }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    var result = []Int\n    var sum = 0\n    for _, num := range nums {\n     \
    \   sum += num\n    }\n    for i, num := range nums {\n        if sum - num >\
    \ 0 {\n            result = append(result, nums[i])\n            sum -= num\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums); j++ {\n     \
    \       if nums[i] + nums[j] == 0 {\n                result = append(result, nums[i])\n\
    \                result = append(result, nums[j])\n                break\n   \
    \         }\n        }\n    }\n    return result", "    var result = []Int\n \
    \   var sorted_nums = sort_by_points(nums)\n    for i := 0; i < len(sorted_nums);\
    \ i++ {\n        result = append(result, sorted_nums[i])\n    }\n    return result",
  "    var result = []Int{}\n    var sum = 0\n    for _, num := range nums {\n   \
    \     sum += num\n    }\n    for i := 0; i < len(nums); i++ {\n        if nums[i]\
    \ == 0 {\n            result = append(result, nums[i])\n        } else {\n   \
    \         for j := i + 1; j < len(nums); j++ {\n                if nums[j] ==\
    \ 0 {\n                    result = append(result, nums[j])\n                \
    \    break\n                }\n                if nums[j] == nums[i] {\n     \
    \               result = append(result, nums[j])\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var result = []Int\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n\
    \        sum += nums[i]\n        result = append(result, nums[i])\n    }\n   \
    \ sort.Slice(result, func(i, j int) bool {\n        return result[i] + result[j]\
    \ > result[j] + result[i]\n    })\n    return result", "    var result = []Int{}\n\
    \    var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [Int] = []\n    var sum: Int = 0\n    for\
    \ i, v := range nums {\n        sum += v\n        result = append(result, i)\n\
    \    }\n    sort.Slice(result, func(i, j int) bool {\n        return sum - nums[i]\
    \ < sum - nums[j]\n    })\n    return result", "    var result = [Int]\n    var\
    \ sorted = sort_by_points(nums)\n    for i, v := range sorted {\n        result\
    \ = append(result, v)\n    }\n    return result", "    nums.sort(func(a, b) {\n\
    \        return a.points - b.points\n    })\n    return nums", "    sort.Slice(nums,\
    \ func(i, j int) bool {\n        return nums[i] + nums[i] > nums[j] + nums[j]\n\
    \    })\n    return nums", "    sort.Slice(nums, func(i, j int) bool {\n     \
    \   return nums[i] + nums[i] > nums[j] + nums[j]\n    })\n    return nums", " \
    \   \n    var result = []Int{}\n    var sum_digits = func(n: Int) -> Int {\n \
    \       return n / 10 + n % 10\n    }\n    \n    for i, n := range nums {\n  \
    \      var sum = sum_digits(n)\n        if len(result) == 0 || sum > sum_digits(result[len(result)\
    \ - 1]) {\n            result = append(result, n)\n        } else if sum == sum_digits(result[len(result)\
    \ - 1]) {\n            result[len(result) - 1] = n\n        }\n    }\n    return\
    \ result", "    var result = []Int{}\n    var sum = 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        result = append(result, nums[i])\n  \
    \  }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i] +\
    \ result[j] < result[j] + result[i]\n    })\n    return result", "    var sorted_nums\
    \ = [Int]\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for\
    \ j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n        }\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        sorted_nums = append(sorted_nums, nums[i])\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n    }\n    return sorted_nums", "    nums.sort((a,\
    \ b) -> {\n        var sum_a = sum_of_digits(a)\n        var sum_b = sum_of_digits(b)\n\
    \        if sum_a == sum_b {\n            return a - b\n        }\n        return\
    \ sum_a - sum_b\n    })\n    return nums", "    var result = []Int{}\n    for\
    \ i := 0; i < len(nums); i++ {\n        var sum = 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += nums[i][j]\n        }\n        result = append(result,\
    \ nums[i][0])\n        result = append(result, nums[i][1])\n        result = append(result,\
    \ sum)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][2]\
    \ < result[j][2]\n    })\n    return result", "    sort.Slice(nums, func(i, j\
    \ int) bool {\n        return nums[i] + nums[j] < nums[j] + nums[i]\n    })\n\
    \    return nums", "    nums.sort((a, b) -> {\n        let sum_a = sum_of_digits(a)\n\
    \        let sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n         \
    \   return a - b\n        } else {\n            return sum_a - sum_b\n       \
    \ }\n    })\n    return nums", "    var result = []Int{}\n    for i := 0; i <\
    \ len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums[i]); j++\
    \ {\n            sum += nums[i][j]\n        }\n        result = append(result,\
    \ nums[i][0])\n        result = append(result, nums[i][1])\n        result = append(result,\
    \ nums[i][2])\n        result = append(result, nums[i][3])\n        result = append(result,\
    \ nums[i][4])\n        result = append(result, nums[i][5])\n        result = append(result,\
    \ nums[i][6])\n        result = append(result, nums[i][7])\n        result = append(result,\
    \ nums[i][8])\n        result = append(result, nums[i][9])\n        result = append(result,\
    \ nums[i][10])\n        result = append(result, nums[i][11])\n        result =\
    \ append(result, nums[i][12])\n        result = append(result, nums[i][13])\n\
    \        result = append(result, nums[i][14])\n        result = append(result,\
    \ nums[i][15])\n        result = append(result, nums[i][16])\n        result =\
    \ append(result, nums[i][17])\n        result = append(result, nums[i][18])\n\
    \        result = append(result, nums[i][19])\n        result = append(result,\
    \ nums[i][20])\n        result = append(result, nums[i][21])\n        result =\
    \ append(result, nums[i][22])\n        result = append(result, nums[i][23])\n\
    \        result = append(result, nums[i][24])\n        result = append(result,\
    \ nums[i][25])\n        result = append(result, nums[i][26])\n        result =\
    \ append(result, nums[i][27])\n        result = append(result, nums[i][28])\n\
    \        result = append(result, nums[i][29", "    var result = []Int{}\n    for\
    \ i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += nums[i][j] * 10\n        }\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i])\n        result = append(result, nums[i])\n        result = append",
  "    \n    nums.sort(func(a, b) {\n        return a.points() - b.points()\n    })\n\
    \    \n    return nums", "    nums.sort((a, b) -> {\n        var sum_a = sum_of_digits(a)\n\
    \        var sum_b = sum_of_digits(b)\n        if sum_a == sum_b {\n         \
    \   return a - b\n        } else {\n            return sum_a - sum_b\n       \
    \ }\n    })\n    return nums", "    var result: [Int] = []\n    var sum: Int =\
    \ 0\n    for i, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n        result = append(result, i)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result = []Int\n    var sum = 0\n    for i := 0;\
    \ i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[i] >\
    \ nums[j] + nums[j]\n    })\n    return nums", "    var result = []Int\n    var\
    \ sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n    \
    \    result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i, j\
    \ int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    var result = []Int{}\n    var sum = 0\n    for\
    \ _, num := range nums {\n        sum += num\n    }\n    for _, num := range nums\
    \ {\n        if num > 0 {\n            result = append(result, num)\n        }\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result",
  "    var result: [Int] = []\n    var sum: Int = 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        result = append(result, nums[i])\n  \
    \  }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i] +\
    \ result[i] < result[j] + result[j]\n    })\n    return result", "    var result\
    \ = []Int\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum\
    \ += nums[i]\n        result = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result = []Int{}\n    var sum = 0\n    for i :=\
    \ 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[i] >\
    \ nums[j] + nums[j]\n    })\n    return nums", "    var result: [Int] = []\n \
    \   var sorted: [Int] = []\n    var sum: Int = 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        sorted = append(sorted, nums[i])\n  \
    \  }\n    sort.Sort(sort.Reverse(sort.IntSlice(sorted)))\n    for i := 0; i <\
    \ len(sorted); i++ {\n        result = append(result, sorted[i])\n    }\n    return\
    \ result", "    nums.sort((a, b) -> {\n        if a.sum_of_digits() == b.sum_of_digits()\
    \ {\n            return a.index - b.index\n        } else {\n            return\
    \ a.sum_of_digits() - b.sum_of_digits()\n        }\n    })\n    return nums",
  "    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[j] >\
    \ nums[j] + nums[i]\n    })\n    return nums", "    \n    var sorted_nums = [Int]\n\
    \    \n    for i := 0; i < len(nums); i++ {\n        \n        var sum = 0\n \
    \       for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n \
    \       }\n        \n        sorted_nums = append(sorted_nums, nums[i])\n    \
    \    \n        for j := 0; j < len(sorted_nums); j++ {\n            \n       \
    \     if sum == sorted_nums[j][0] {\n                sorted_nums[j] = nums[i]\n\
    \                break\n            }\n        }\n    }\n    \n    return sorted_nums",
  "    nums.sort((a, b) -> a + a.digit_sum() - b.digit_sum())\n    return nums", " \
    \   var result = [Int]\n    var sorted_nums = sort_by_points(nums)\n    for i\
    \ := 0; i < len(sorted_nums); i++ {\n        result = append(result, sorted_nums[i])\n\
    \    }\n    return result", "    sort.Slice(nums, func(i, j int) bool {\n    \
    \    return nums[i] + nums[i] > nums[j] + nums[j]\n    })\n    return nums", " \
    \   sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[j] >\
    \ nums[j] + nums[i]\n    })\n    return nums", "    var result = [Int]\n    var\
    \ sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n    \
    \    result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i, j\
    \ int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    \n    sort.Slice(nums, func(i, j int) bool {\n\
    \        return nums[i] + nums[j] > nums[j] + nums[i]\n    })\n    \n    return\
    \ nums", "    // write your code here\n    return nums", "    var result = [Int]\n\
    \    var sorted = sort_by_points(nums)\n    for i := 0; i < len(sorted); i++ {\n\
    \        result = append(result, sorted[i])\n    }\n    return result", "    var\
    \ result = []Int\n    for i := 0; i < len(nums); i++ {\n        var sum = 0\n\
    \        for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n\
    \        }\n        result = append(result, nums[i][0] * 10 + sum)\n    }\n  \
    \  sort.Ints(result)\n    return result", "    var result = []Int\n    for i :=\
    \ 0; i < len(nums); i++ {\n        var sum = 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += nums[i][j]\n        }\n        result = append(result,\
    \ sum)\n    }\n    sort.Ints(result)\n    return result", "    \n    var sorted_nums\
    \ = []Int\n    \n    for i := 0; i < len(nums); i++ {\n        \n        var sum\
    \ = 0\n        \n        for j := 0; j < len(nums[i]); j++ {\n            sum\
    \ += nums[i][j]\n        }\n        \n        sorted_nums = append(sorted_nums,\
    \ nums[i])\n        \n        for j := 0; j < len(sorted_nums); j++ {\n      \
    \      \n            if sum == sorted_nums[j][0] {\n                sorted_nums[j]\
    \ = nums[i]\n                break\n            }\n        }\n    }\n    \n  \
    \  return sorted_nums", "    nums.sort((a, b) -> a + a.to_i() - b.to_i())\n  \
    \  return nums", "    nums.sort((a, b) => {\n        let sum_a = a.to_string().match(/\\\
    d+/g).reduce((a, b) => a + b);\n        let sum_b = b.to_string().match(/\\d+/g).reduce((a,\
    \ b) => a + b);\n        return sum_a - sum_b;\n    });\n    return nums;", " \
    \   \n    // Sort the array based on the sum of digits\n    nums.sort(func(a,\
    \ b) -> a.sum_of_digits() - b.sum_of_digits())\n    \n    return nums", "    var\
    \ result: [Int] = []\n    var sum: Int = 0\n    for i, num := range nums {\n \
    \       sum += num\n        result = append(result, i)\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return sum - nums[i] < sum - nums[j]\n    })\n\
    \    return result", "    // Sort the array by sum of digits\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    // Sort the array by index\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums", "    var result: [Int] = []\n    var sum: Int = 0\n    for\
    \ i, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n        result = append(result, i)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result = []Int\n    var sum = 0\n    for i := 0;\
    \ i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] > result[j] + result[i]\n    })\n    return result", " \
    \   \n    // Sort the array based on the sum of digits\n    nums.sort(func(a,\
    \ b) -> a.sum_of_digits() - b.sum_of_digits())\n    \n    // Return the sorted\
    \ array\n    return nums", "    var result = []Int{}\n    var sum = 0\n    for\
    \ _, num := range nums {\n        sum += num\n    }\n    for _, num := range nums\
    \ {\n        if num < 0 {\n            result = append(result, num)\n        }\
    \ else if num > 0 {\n            result = append(result, -num)\n        }\n  \
    \  }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i] +\
    \ sum < result[j] + sum\n    })\n    return result", "    nums.sort((a, b) =>\
    \ {\n        let sum_a = a.to_s().match(/\\d+/g).reduce((a, b) => a + b);\n  \
    \      let sum_b = b.to_s().match(/\\d+/g).reduce((a, b) => a + b);\n        if\
    \ (sum_a < sum_b) {\n            return -1;\n        } else if (sum_a > sum_b)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    });\n    return nums;", "    // Sort the array based on the sum of digits\n\
    \    nums.sort((a, b) -> a.sum_of_digits() - b.sum_of_digits())\n    return nums",
  "    var result = [Int]\n    var sorted = sort_by_points(nums)\n    for i, v :=\
    \ range sorted {\n        result = append(result, v)\n    }\n    return result",
  "    \n    var result = []Int\n    \n    for i := 0; i < len(nums); i++ {\n    \
    \    var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n            sum\
    \ += nums[i][j]\n        }\n        result = append(result, nums[i][0] * 10 +\
    \ sum)\n    }\n    \n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    \n\
    \    return result", "    var sorted_nums = []Int\n    var sum_digits = 0\n  \
    \  for i := 0; i < len(nums); i++ {\n        sum_digits += nums[i]\n        sorted_nums\
    \ = append(sorted_nums, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sorted_nums)))\n\
    \    return sorted_nums", "    var result: [Int] = []\n    for i := 0; i < len(nums);\
    \ i++ {\n        var sum: Int = 0\n        for j := 0; j < len(nums[i]); j++ {\n\
    \            sum += nums[i][j]\n        }\n        result = append(result, nums[i],\
    \ sum)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][1]\
    \ < result[j][1]\n    })\n    return result", "    sort.Slice(nums, func(i, j\
    \ int) bool {\n        return nums[i] + nums[i] > nums[j] + nums[j]\n    })\n\
    \    return nums", "    var result: [Int] = []\n    var sum: Int = 0\n    for\
    \ i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[i] < result[j] + result[j]\n    })\n    return result", " \
    \   var result = []Int{}\n    var sum = 0\n    for _, num := range nums {\n  \
    \      sum += num\n    }\n    for _, num := range nums {\n        if num < 0 {\n\
    \            result = append(result, -num)\n        } else {\n            result\
    \ = append(result, num)\n        }\n    }\n    sort.Slice(result, func(i, j int)\
    \ bool {\n        return result[i] + sum < result[j] + sum\n    })\n    return\
    \ result", "    var sorted_nums = [Int]\n    var sum_digits = [Int]\n    for i\
    \ := 0; i < len(nums); i++ {\n        sum_digits = [Int]\n        for j := 0;\
    \ j < len(nums[i]); j++ {\n            sum_digits = append(sum_digits, nums[i][j]\
    \ * 10 + nums[i][j])\n        }\n        sort.Slice(sum_digits, func(i, j int)\
    \ bool {\n            return sum_digits[i] < sum_digits[j]\n        })\n     \
    \   sorted_nums = append(sorted_nums, nums[i][0])\n        sorted_nums = append(sorted_nums,\
    \ nums[i][1])\n    }\n    return sorted_nums", "    nums.sort((a, b) -> {\n  \
    \      if a.sum_of_digits() == b.sum_of_digits() {\n            return a.index\
    \ - b.index\n        }\n        return a.sum_of_digits() - b.sum_of_digits()\n\
    \    })\n    return nums", "    var result = []Int\n    var sum = 0\n    for i\
    \ := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   var result = []Int{}\n    var sum = 0\n    for _, num := range nums {\n  \
    \      sum += num\n    }\n    for _, num := range nums {\n        if num < 0 {\n\
    \            result = append(result, num)\n        } else if num > 0 && num <\
    \ sum {\n            result = append(result, num)\n        } else if num > 0 &&\
    \ num == sum {\n            result = append(result, num)\n        }\n    }\n \
    \   return result", "    \n    var result = []Int\n    \n    for i := 0; i < len(nums);\
    \ i++ {\n        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n  \
    \          sum += nums[i][j]\n        }\n        result = append(result, sum)\n\
    \    }\n    \n    sort.Ints(result)\n    \n    return result", '    return nums',
  "    var result = []Int\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n\
    \        sum += nums[i]\n        result = append(result, nums[i])\n    }\n   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result", "    var\
    \ result: [Int] = []\n    var sorted: [Int] = []\n    var sum: Int = 0\n    for\
    \ i, num := range nums {\n        sum += num\n        sorted = append(sorted,\
    \ i)\n    }\n    sort.Slice(sorted, func(i, j int) bool {\n        return sum\
    \ - nums[sorted[i]] > sum - nums[sorted[j]]\n    })\n    for i, num := range nums\
    \ {\n        result = append(result, nums[sorted[i]])\n    }\n    return result",
  "    var result = []Int{}\n    var sum = 0\n    for i := 0; i < len(nums); i++ {\n\
    \        sum += nums[i]\n        result = append(result, nums[i])\n    }\n   \
    \ sort.Slice(result, func(i, j int) bool {\n        return result[i] + result[j]\
    \ < result[j] + result[i]\n    })\n    return result", "    var result: [Int]\
    \ = []\n    var sorted_nums: [Int] = []\n    var sum_digits: Int = 0\n    for\
    \ i, num in enumerate(nums):\n        sum_digits += num\n        sorted_nums.append(i)\n\
    \    sorted_nums.sort(func(a, b) -> {\n        if nums[a] + nums[b] == sum_digits:\n\
    \            return a - b\n        return nums[a] + nums[b] - sum_digits\n   \
    \ })\n    for i, num in enumerate(sorted_nums):\n        result.append(nums[num])\n\
    \    return result", "    nums.sort((a, b) => {\n        let sum_a = a.to_string().match(/\\\
    d+/g).reduce((a, b) => a + b);\n        let sum_b = b.to_string().match(/\\d+/g).reduce((a,\
    \ b) => a + b);\n        if (sum_a < sum_b) {\n            return -1;\n      \
    \  } else if (sum_a > sum_b) {\n            return 1;\n        } else {\n    \
    \        return a - b;\n        }\n    });\n    return nums;", "    // write your\
    \ code here\n    return nums", "    var sorted_nums = [Int]\n    var sum_digits\
    \ = [Int]\n    for i := 0; i < len(nums); i++ {\n        sum_digits = [Int]\n\
    \        for j := 0; j < len(nums[i]); j++ {\n            sum_digits = append(sum_digits,\
    \ nums[i][j] * 10 + nums[i][j])\n        }\n        sort.Sort(sort.IntSlice(sum_digits))\n\
    \        sorted_nums = append(sorted_nums, nums[i])\n    }\n    return sorted_nums",
  "    var result = [Int]\n    var sorted = sort_by_points(nums)\n    for i := 0;\
    \ i < len(sorted); i++ {\n        result = append(result, sorted[i])\n    }\n\
    \    return result", "    // Sort the array by sum of digits\n    nums.sort(func(a,\
    \ b) {\n        return a.sum_of_digits() - b.sum_of_digits()\n    })\n    return\
    \ nums", "    var result: [Int] = []\n    var sum: Int = 0\n    for i, num: Int\
    \ in nums {\n        sum += num\n        result.append(i)\n    }\n    sort.Ints(result)\n\
    \    return result", "    var result: [Int] = []\n    var sorted: [Int] = []\n\
    \    var sum: Int = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        sorted = append(sorted, nums[i])\n    }\n    sort.Slice(sorted, func(i,\
    \ j int) bool {\n        return sorted[i] + sorted[j] > sorted[j] + sorted[i]\n\
    \    })\n    for i := 0; i < len(sorted); i++ {\n        result = append(result,\
    \ sorted[i])\n    }\n    return result", "    nums.sort((a, b) -> {\n        if\
    \ a.sum_of_digits() == b.sum_of_digits() {\n            return a.index - b.index\n\
    \        } else {\n            return a.sum_of_digits() - b.sum_of_digits()\n\
    \        }\n    })\n    return nums", "    var sorted_nums = []Int\n    var sum_digits\
    \ = 0\n    for i := 0; i < len(nums); i++ {\n        sum_digits += nums[i]\n \
    \       sorted_nums = append(sorted_nums, nums[i])\n    }\n    sort.Slice(sorted_nums,\
    \ func(i, j int) bool {\n        return sorted_nums[i] + sum_digits < sorted_nums[j]\
    \ + sum_digits\n    })\n    return sorted_nums", "    var result = [Int]\n   \
    \ var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i,\
    \ j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    nums.sort((a, b) -> {\n        if a.sum_of_digits()\
    \ == b.sum_of_digits() {\n            return a.index - b.index\n        }\n  \
    \      return a.sum_of_digits() - b.sum_of_digits()\n    })\n    return nums",
  "    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[j] >\
    \ nums[j] + nums[i]\n    })\n    return nums", "    nums.sort((a, b) => a + a.to_i()\
    \ - b.to_i())\n    return nums", "    var result = [Int]{}\n    var sum = 0\n\
    \    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result\
    \ = append(result, nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool\
    \ {\n        return result[i] + result[j] < result[j] + result[i]\n    })\n  \
    \  return result", "    sort.Slice(nums, func(i, j int) bool {\n        return\
    \ nums[i] + nums[j] < nums[j] + nums[i]\n    })\n    return nums", "    var sorted_nums\
    \ = []Int\n    var sum_digits = 0\n    for i := 0; i < len(nums); i++ {\n    \
    \    sum_digits += nums[i]\n        sorted_nums = append(sorted_nums, nums[i])\n\
    \    }\n    sort.Slice(sorted_nums, func(i, j int) bool {\n        return sorted_nums[i]\
    \ + sum_digits < sorted_nums[j] + sum_digits\n    })\n    return sorted_nums",
  "    var result = []Int{}\n    var sum = 0\n    for _, num := range nums {\n   \
    \     sum += num\n    }\n    for _, num := range nums {\n        if num > 0 {\n\
    \            result = append(result, num)\n        } else if num < 0 {\n     \
    \       result = append(result, -num)\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    return nums.sort((a, b) -> {\n        let sum_a\
    \ = sum_of_digits(a)\n        let sum_b = sum_of_digits(b)\n        if sum_a ==\
    \ sum_b {\n            return a - b\n        } else {\n            return sum_a\
    \ - sum_b\n        }\n    })", "    \n    sort.Sort(sort.Reverse(by_points(nums)))\n\
    \    return nums", "    \n    nums.sort(func(a, b) {\n        return a.sum_of_digits()\
    \ - b.sum_of_digits()\n    })\n    return nums", "    var result = []Int{}\n \
    \   var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i,\
    \ j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result", "    nums.sort((a, b) -> a + a.digit_sum() - b.digit_sum())\n\
    \    return nums", "    var result = []Int{}\n    for i := 0; i < len(nums); i++\
    \ {\n        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n      \
    \      sum += nums[i][j]\n        }\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(", "    return\
    \ nums.sort(func(a, b) {\n        return a.points() - b.points()\n    })", " \
    \   // Sort the array by sum of digits\n    nums.sort(func(a, b) {\n        return\
    \ a.sum_of_digits() - b.sum_of_digits()\n    })\n    return nums", "    nums.sort((a,\
    \ b) -> {\n        if a.sum_of_digits() == b.sum_of_digits() {\n            return\
    \ a.index - b.index\n        }\n        return a.sum_of_digits() - b.sum_of_digits()\n\
    \    })\n    return nums", "    var result = [Int]\n    var sum = 0\n    for i\
    \ := 0; i < len(nums); i++ {\n        sum += nums[i]\n        result = append(result,\
    \ nums[i])\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] + result[j] < result[j] + result[i]\n    })\n    return result", " \
    \   var result = [Int]\n    for i := 0; i < len(nums); i++ {\n        var sum\
    \ = 0\n        for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n\
    \        }\n        result = append(result, nums[i], sum)\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i][1] < result[j][1]\n    })\n\
    \    return result", "    nums.sort(func(a, b) {\n        return a.sum_of_digits()\
    \ - b.sum_of_digits()\n    })\n    return nums", "    var result: [Int] = []\n\
    \    var sum: Int = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    var result: [Int] = []\n    var sum: Int = 0\n    for\
    \ _, num := range nums {\n        sum += num\n    }\n    for _, num := range nums\
    \ {\n        if num > 0 {\n            result = append(result, num)\n        }\
    \ else if num < 0 {\n            result = append(result, -num)\n        } else\
    \ {\n            result = append(result, 0)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result", "    nums.sort((a, b) => a + a.to_i() - b.to_i())\n    return\
    \ nums", "    \n    // Sort the array based on the sum of digits\n    sort_by_sum_digits(nums)\n\
    \    \n    // Sort the array based on the index\n    sort_by_index(nums)\n   \
    \ \n    return nums", "    nums.sort((a, b) -> a + a.digits() - b.digits())\n\
    \    return nums", "    \n    sort_by_sum_digits(nums)\n    \n    return nums",
  "    var result = []Int{}\n    var sum_digits = func(n: Int) -> Int {\n        return\
    \ n % 10\n    }\n    for i, n := range nums {\n        sum_digits_sum := sum_digits(n)\n\
    \        for j, m := range nums {\n            if i != j && sum_digits_sum ==\
    \ sum_digits(m) {\n                result = append(result, m)\n            }\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ := 0; i < len(nums); i++ {\n        var sum: Int = 0\n        for j := 0; j\
    \ < len(nums[i]); j++ {\n            sum += nums[i][j]\n        }\n        result\
    \ = append(result, nums[i])\n        result = append(result, nums[i])\n      \
    \  result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result", '    return nums', "    var sorted_nums = []\n    var sum_digits\
    \ = 0\n    for i := 0; i < len(nums); i++ {\n        sum_digits += nums[i]\n \
    \       sorted_nums = append(sorted_nums, nums[i])\n    }\n    sort.Slice(sorted_nums,\
    \ func(i, j int) bool {\n        return sorted_nums[i] + sum_digits < sorted_nums[j]\
    \ + sum_digits\n    })\n    return sorted_nums", "    nums.sort(func(a, b) {\n\
    \        return a.sum_of_digits() - b.sum_of_digits()\n    })\n    return nums",
  '    return nums', "    var result = []Int{}\n    for i := 0; i < len(nums); i++\
    \ {\n        var sum = 0\n        for j := 0; j < len(nums[i]); j++ {\n      \
    \      sum += nums[i][j]\n        }\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(result, nums[i])\n\
    \        result = append(result, nums[i])\n        result = append(", '    return
    nums', "    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] + nums[i]\
    \ > nums[j] + nums[j]\n    })\n    return nums", "    var result = []Int{}\n \
    \   var sum = 0\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        result = append(result, nums[i])\n    }\n    sort.Slice(result, func(i,\
    \ j int) bool {\n        return result[i] + result[j] < result[j] + result[i]\n\
    \    })\n    return result"]
stop_tokens:
- "\n}"
