{
  "name": "HumanEval_30_get_positive",
  "language": "swift",
  "prompt": "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l: [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])",
  "completions": [
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result = append(result, i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, is_positive)",
    "    return filter(l, (x) => x > 0)",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for i:=0; i<len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            result = append(result, l[i])\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result = append(result, i)\n        }\n    }\n    return result",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    var res: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return res",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    let positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var res: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return res",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var res = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return res",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for _, i := range l {\n        if i > 0 {\n            positive = append(positive, i)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    return filter(l, (x) => x > 0)",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, is_positive)",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result = append(result, i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result = append(result, i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result = append(result, i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var positive: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    return filter(l, (x) => x > 0)",
    "    var positive: [Int] = []\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n            positive = append(positive, l[i])\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    let positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    return filter(l, (x) => x > 0)",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l",
    "    let positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    let positive = []\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var res: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return res",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var positive: [Int] = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    return filter(l, is_positive)",
    "    var positive = []Int{}\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive",
    "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for _, v := range l {\n        if v > 0 {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    let positive = []\n    for i in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n    return positive",
    "    return filter(l, (x) => x > 0)",
    "    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = 0\n        }\n    }\n    return l"
  ],
  "stop_tokens": [
    "\n}"
  ]
}