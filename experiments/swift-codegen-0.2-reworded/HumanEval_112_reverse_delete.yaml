name: HumanEval_112_reverse_delete
language: swift
prompt: "\n/// Task\n/// We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n/// then check if the\
  \ result string is palindrome.\n/// A string is called palindrome if it reads the\
  \ same backward as forward.\n/// You should return a tuple containing the result\
  \ string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s: \"\
  abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
  , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\", c:\
  \ \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String) -> (String,\
  \ Bool) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\")\
  \ == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\"\
  , false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
  assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
  \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
  \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\
  v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") ==\
  \ (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
completions: ["\t// Write your code here\n\treturn", "    // Write your code here\n\
    \    if len(s) == 0 || len(c) == 0 {\n        return s, false\n    }\n    \n \
    \   var result string\n    var isPalindrome bool\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if c[0] == s[i] {\n            result = result + s[i]\n     \
    \       c = c[1:]\n        } else {\n            result = result + s[i]\n    \
    \    }\n    }\n    \n    if len(c) == 0 {\n        isPalindrome = true\n    }\
    \ else {\n        isPalindrome = false\n    }\n    \n    return result, isPalindrome",
  "    // Write your code here\n    return", "\t// Write your code here\n\treturn",
  '    ', "\t// Write your code here\n\treturn", "\t// Write your code here\n\treturn",
  "\tvar result string\n\tvar isPalindrome bool\n\tfor i := len(s) - 1; i >= 0; i--\
    \ {\n\t\tif c.Contains(s[i]) {\n\t\t\tresult = result + s[i]\n\t\t} else {\n\t\
    \t\tbreak\n\t\t}\n\t}\n\tif len(result) == 0 {\n\t\tresult = s\n\t}\n\tif len(result)\
    \ == len(s) {\n\t\tisPalindrome = true\n\t}\n\treturn result, isPalindrome", '    ',
  '    ', "\t", '    ', '    ', "\t// Write your code here\n\treturn", '    ', '    ',
  "\t", "\tvar result String\n\tvar isPalindrome Bool\n\tfor i := len(s) - 1; i >=\
    \ 0; i-- {\n\t\tif s[i] == c[0] {\n\t\t\tresult = result + s[i]\n\t\t\tc = c[1:]\n\
    \t\t} else {\n\t\t\tresult = result + s[i]\n\t\t}\n\t}\n\tif len(c) == 0 {\n\t\
    \tisPalindrome = true\n\t}\n\treturn result, isPalindrome", "\t// Write your code\
    \ here\n\treturn", "\t// Write your code here\n\treturn", '    ', '    ', '    ',
  "\t// Write your code here\n\treturn", "\t// Write your code here\n\treturn", '    ',
  "\t", "\t// Write your code here\n\treturn", "    var result String\n    var is_palindrome\
    \ Bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if c.Contains(s[i]) {\n\
    \            result = result + s[i]\n        } else {\n            result = result\
    \ + s[i]\n            is_palindrome = is_palindrome && (s[i] == s[len(s) - i -\
    \ 1])\n        }\n    }\n    return result, is_palindrome", '    ', '    ', '    ',
  "\t", '    ', '    ', '    ', "\t", '    ', '    ', '    ', "    var result String\n\
    \    var isPalindrome Bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if\
    \ c.Contains(s[i]) {\n            result = result + s[i]\n        } else {\n \
    \           result = result + s[i]\n            isPalindrome = !isPalindrome\n\
    \        }\n    }\n    return result, isPalindrome", "\t", "    var result String\n\
    \    var isPalindrome Bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if\
    \ s[i] == c[0] {\n            result = result + s[i]\n            c = c[1:]\n\
    \        } else {\n            result = result + s[i]\n        }\n    }\n    if\
    \ len(c) == 0 {\n        isPalindrome = true\n    } else {\n        isPalindrome\
    \ = false\n    }\n    return result, isPalindrome", '    ', '    ', '    ', '    ',
  '    ', '    ', '    ', "    // Write your code here\n    var result string\n  \
    \  var isPalindrome bool\n    for i := len(s) - 1; i >= 0; i-- {\n        for\
    \ j := 0; j < len(c); j++ {\n            if s[i] == c[j] {\n                result\
    \ = result + s[i]\n                isPalindrome = false\n                break\n\
    \            }\n        }\n    }\n    return result, isPalindrome", "\t// Write\
    \ your code here\n\treturn", '    ', '    ', "\t// Write your code here\n\treturn",
  '    ', '    ', '    ', '    ', "    // Write your code here\n    return", '    ',
  "\t", "\t// Write your code here\n\treturn", '    ', '    ', "    // Write your\
    \ code here\n    return", '    ', '    ', "\t// Write your code here\n\treturn",
  "\t", "    // Write your code here\n    var result string\n    var isPalindrome\
    \ bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if c.Contains(s[i]) {\n\
    \            result = result + s[i]\n        } else {\n            result = result\
    \ + s[i]\n            isPalindrome = isPalindrome && (s[i] == s[len(s) - i - 1])\n\
    \        }\n    }\n    return result, isPalindrome", '    ', '    ', "\t", "\t\
    // Write your code here\n\treturn", '    ', "\t// Write your code here\n\tif len(s)\
    \ == 0 || len(c) == 0 {\n\t\treturn \"\", false\n\t}\n\tif len(s) < len(c) {\n\
    \t\treturn \"\", false\n\t}\n\tvar result string\n\tvar isPalindrome bool\n\t\
    for i := 0; i < len(s); i++ {\n\t\tif c[0] == s[i] {\n\t\t\tresult = result +\
    \ s[i]\n\t\t\tc = c[1:]\n\t\t} else {\n\t\t\tresult = result + s[i]\n\t\t}\n\t\
    }\n\tif len(c) == 0 {\n\t\tisPalindrome = true\n\t}\n\treturn result, isPalindrome",
  '    ', '    ', '    ', "\t", '    ', "\t", "\t// Write your code here\n\treturn",
  '    ', '    ', '    ', '    ', "\t// Write your code here\n\treturn", "\t// Write\
    \ your code here\n\treturn", '    ', "\t", "\t// Write your code here\n\treturn",
  '    ', "\tvar result String\n\tvar isPalindrome Bool\n\tfor i := len(s) - 1; i\
    \ >= 0; i-- {\n\t\tif c.Contains(s[i]) {\n\t\t\tresult = result + s[i]\n\t\t}\
    \ else {\n\t\t\tresult = result + s[i]\n\t\t\tisPalindrome = !isPalindrome\n\t\
    \t}\n\t}\n\treturn result, isPalindrome", '    ', "\t", "\t// Write your code\
    \ here\n\treturn", '    ', '    ', '    ', "\t", "\t// Write your code here\n\t\
    return", "\t// Write your code here\n\treturn", "\t// Write your code here\n\t\
    return", '    ', '    ', '    ', "\t// Write your code here\n\treturn", "\t//\
    \ Write your code here\n\treturn", '    ', '    ', "\t// Write your code here\n\
    \treturn", "\t// Write your code here\n\treturn", '    ', '    ', "    // Write\
    \ your code here\n    return", "\t// Write your code here\n\treturn", '    ',
  "\t// Write your code here\n\tif len(s) == 0 || len(c) == 0 {\n\t\treturn \"\",\
    \ false\n\t}\n\tvar result string\n\tvar isPalindrome bool\n\tfor i := len(s)\
    \ - 1; i >= 0; i-- {\n\t\tif c[0] == s[i] {\n\t\t\tresult = result + s[i]\n\t\t\
    \tc = c[1:]\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tif len(c) == 0 {\n\t\tisPalindrome\
    \ = true\n\t}\n\treturn result, isPalindrome", "\t// Write your code here\n\t\
    return", '    ', '    ', '    ', '    ', '    ', "\t// Write your code here\n\t\
    return", "\t// Write your code here\n\treturn", '    ', '    ', "\t// Write your\
    \ code here\n\treturn", "\t// Write your code here\n\treturn", "\t", '    ', "\t\
    // Write your code here\n\treturn", '    ', "\t// Write your code here\n\treturn",
  "\t// Write your code here\n\treturn", "\t// Write your code here\n\tif len(s) <\
    \ len(c) {\n\t\treturn s, false\n\t}\n\tvar result string\n\tvar isPalindrome\
    \ bool\n\tfor i := 0; i < len(s); i++ {\n\t\tif c[0] == s[i] {\n\t\t\tresult =\
    \ result + s[i]\n\t\t\tc = c[1:]\n\t\t} else {\n\t\t\tresult = result + s[i]\n\
    \t\t}\n\t}\n\tif len(c) == 0 {\n\t\tisPalindrome = true\n\t}\n\treturn result,\
    \ isPalindrome", "\t// Write your code here\n\treturn", '    ', '    ', '    ',
  '    ', '    ', '    ', '    ', "\t// Write your code here\n\treturn", "\t// Write\
    \ your code here\n\treturn", '    ', '    ', "\t", "\t// Write your code here\n\
    \treturn", "\t", "\t// Write your code here\n\treturn", "\t// Write your code\
    \ here\n\treturn", '    ', '    ', '    ', "\t", "\t", '    ', '    ', '    ',
  "    // Write your code here\n    return", '    ', '    ', "\t", '    ', '    ',
  "\t// Write your code here\n\treturn", '    ', "\t", "\t// Write your code here\n\
    \treturn", '    ', '    ', "\t// Write your code here\n\treturn", '    ', '    ',
  "\t// Write your code here\n\treturn", "\t// Write your code here\n\treturn", " \
    \   // Write your code here\n    if len(s) == 0 || len(c) == 0 {\n        return\
    \ s, false\n    }\n    \n    for i := 0; i < len(c); i++ {\n        for j := 0;\
    \ j < len(s); j++ {\n            if c[i] == s[j] {\n                s = s[:j]\
    \ + s[j+1:]\n            }\n        }\n    }\n    \n    if s == s[::-1] {\n  \
    \      return s, true\n    }\n    \n    return s, false", "\t// Write your code\
    \ here\n\treturn", "\t// Write your code here\n\treturn", "\t// Write your code\
    \ here\n\treturn", "\t// Write your code here\n\treturn", '    ', "\t// Write\
    \ your code here\n\tvar result string\n\tvar isPalindrome bool\n\tfor i := len(s)\
    \ - 1; i >= 0; i-- {\n\t\tif s[i] == c[0] {\n\t\t\tresult = result + s[i]\n\t\t\
    \tc = c[1:]\n\t\t}\n\t}\n\tif len(c) == 0 {\n\t\tisPalindrome = true\n\t}\n\t\
    return result, isPalindrome", '    ', '    ', "\t", '    ', '    ', '    ', "\t\
    var result String\n\tvar isPalindrome Bool\n\tfor i := len(s) - 1; i >= 0; i--\
    \ {\n\t\tif s[i] == c[0] {\n\t\t\tresult = result + s[i]\n\t\t\tc = c[1:]\n\t\t\
    } else {\n\t\t\tresult = result + s[i]\n\t\t}\n\t}\n\tif len(c) == 0 {\n\t\tisPalindrome\
    \ = true\n\t}\n\treturn result, isPalindrome", '    ', "    // Write your code\
    \ here\n    if len(s) == 0 {\n        return \"\", false\n    }\n    if len(c)\
    \ == 0 {\n        return s, true\n    }\n    var result string\n    var isPalindrome\
    \ bool\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == c[0] {\n  \
    \          result = result + s[i]\n            c = c[1:]\n        } else {\n \
    \           result = result + s[i]\n        }\n    }\n    if len(c) == 0 {\n \
    \       isPalindrome = true\n    }\n    return result, isPalindrome", '    ',
  "\t// Write your code here\n\treturn", "\t// Write your code here\n\treturn"]
stop_tokens:
- "\n}"
