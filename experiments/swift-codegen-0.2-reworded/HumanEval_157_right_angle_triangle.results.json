{
  "name": "HumanEval_157_right_angle_triangle",
  "language": "swift",
  "prompt": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a == b == c {\n        return true\n    }\n    if a == b or b == c or a == c {\n        return false\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp7g0cwr1f.swift:18:15: error: expected '{' after 'if' condition\n    if a == b or b == c or a == c {\n              ^\n/tmp/tmp7g0cwr1f.swift:15:10: error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n    if a == b == c {\n         ^    ~~\n/tmp/tmp7g0cwr1f.swift:15:15: error: binary operator '==' cannot be applied to operands of type 'Bool' and 'Int'\n    if a == b == c {\n       ~~~~~~ ^  ~\n/tmp/tmp7g0cwr1f.swift:15:15: note: overloads for '==' exist with these partially matching parameter lists: (Bool, Bool), (Int, Int)\n    if a == b == c {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c and b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpa7ucnkgs.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                 ^\n                 ;\n/tmp/tmpa7ucnkgs.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                     ^\n                     ;\n/tmp/tmpa7ucnkgs.swift:12:19: error: cannot find 'and' in scope\n    return a == c and b == c\n                  ^~~\n/tmp/tmpa7ucnkgs.swift:12:25: warning: result of operator '==' is unused\n    return a == c and b == c\n                      ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b || b == c || a == c {\n        return true\n    }\n    return a >= b && b >= c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpecn1v5fv/tmpecn1v5fv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acd883c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acd880bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acd880bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acd880bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpecn1v5fv                        0x0000565279ec11bb <unavailable> + 4539\n5    libc.so.6                          0x00002acd885b1460 __libc_start_main + 245\n6    tmpecn1v5fv                        0x0000565279ec0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a > b + c or b > a + c or c > a + b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp98207hvi.swift:12:18: error: expected '{' after 'if' condition\n    if a > b + c or b > a + c or c > a + b {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5sjg_s_p/tmp5sjg_s_p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef7d58ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef7d285b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef7d285988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef7d2847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5sjg_s_p                        0x0000559fde003335 <unavailable> + 4917\n5    libc.so.6                          0x00002aef7d77a460 __libc_start_main + 245\n6    tmp5sjg_s_p                        0x0000559fde002e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c and b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpa7ucnkgs.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                 ^\n                 ;\n/tmp/tmpa7ucnkgs.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                     ^\n                     ;\n/tmp/tmpa7ucnkgs.swift:12:19: error: cannot find 'and' in scope\n    return a == c and b == c\n                  ^~~\n/tmp/tmpa7ucnkgs.swift:12:25: warning: result of operator '==' is unused\n    return a == c and b == c\n                      ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == b - c or a == c - b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpzs205hds.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == b - c or a == c - b\n                     ^\n                     ;\n/tmp/tmpzs205hds.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == b - c or a == c - b\n                        ^\n                        ;\n/tmp/tmpzs205hds.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == b - c or a == c - b\n                                   ^\n                                   ;\n/tmp/tmpzs205hds.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == b - c or a == c - b\n                                      ^\n                                      ;\n/tmp/tmpzs205hds.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == b - c or a == c - b\n                      ^~\n/tmp/tmpzs205hds.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == b - c or a == c - b\n                         ~ ^  ~~~~~\n/tmp/tmpzs205hds.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == b - c or a == c - b\n                                    ^~\n/tmp/tmpzs205hds.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == b - c or a == c - b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (b + c > a) && (a + c > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5xrgkh0u/tmp5xrgkh0u.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebf7e3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebf7b31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebf7b31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebf7b307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xrgkh0u                        0x0000564ca85e1335 <unavailable> + 4917\n5    libc.so.6                          0x00002aebf8026460 __libc_start_main + 245\n6    tmp5xrgkh0u                        0x0000564ca85e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c or b == c or a == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpc31pc16d.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                 ^\n                 ;\n/tmp/tmpc31pc16d.swift:12:21: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                    ^\n                    ;\n/tmp/tmpc31pc16d.swift:12:28: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                           ^\n                           ;\n/tmp/tmpc31pc16d.swift:12:31: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                              ^\n                              ;\n/tmp/tmpc31pc16d.swift:12:19: error: cannot find 'or' in scope\n    return a == c or b == c or a == b\n                  ^~\n/tmp/tmpc31pc16d.swift:12:24: warning: result of operator '==' is unused\n    return a == c or b == c or a == b\n                     ~ ^  ~\n/tmp/tmpc31pc16d.swift:12:29: error: cannot find 'or' in scope\n    return a == c or b == c or a == b\n                            ^~\n/tmp/tmpc31pc16d.swift:12:34: warning: result of operator '==' is unused\n    return a == c or b == c or a == b\n                               ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (b + c > a) && (a + c > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5xrgkh0u/tmp5xrgkh0u.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebf7e3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebf7b31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebf7b31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebf7b307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xrgkh0u                        0x0000564ca85e1335 <unavailable> + 4917\n5    libc.so.6                          0x00002aebf8026460 __libc_start_main + 245\n6    tmp5xrgkh0u                        0x0000564ca85e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a == b == c {\n        return true\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpmu27_e2h.swift:15:10: error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n    if a == b == c {\n         ^    ~~\n/tmp/tmpmu27_e2h.swift:15:15: error: binary operator '==' cannot be applied to operands of type 'Bool' and 'Int'\n    if a == b == c {\n       ~~~~~~ ^  ~\n/tmp/tmpmu27_e2h.swift:15:15: note: overloads for '==' exist with these partially matching parameter lists: (Bool, Bool), (Int, Int)\n    if a == b == c {\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || b + c < a || a + c < b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpvvs1cz7n/tmpvvs1cz7n.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0a516fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0a4e66b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0a4e66988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0a4e657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvvs1cz7n                        0x00005576a024623b <unavailable> + 4667\n5    libc.so.6                          0x00002af0a535b460 __libc_start_main + 245\n6    tmpvvs1cz7n                        0x00005576a0245e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c || b == c + a || c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp31uflggf/tmp31uflggf.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b919ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b8e95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b8e95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b8e947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp31uflggf                        0x000055dec943f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba8b938a460 __libc_start_main + 245\n6    tmp31uflggf                        0x000055dec943ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c || a == c + b || a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpnm5snald/tmpnm5snald.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a272fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a2426b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a2426988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a24257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnm5snald                        0x00005621cf0331bb <unavailable> + 4539\n5    libc.so.6                          0x00002ab5a291b460 __libc_start_main + 245\n6    tmpnm5snald                        0x00005621cf032e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if a == b || b == c || c == a {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmprgph_zz3/tmprgph_zz3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5cac9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5ca995b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5ca995988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5ca9947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprgph_zz3                        0x0000562106c2f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ae5cae8a460 __libc_start_main + 245\n6    tmprgph_zz3                        0x0000562106c2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || b + c < a || c + a < b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpkkhq0l1v/tmpkkhq0l1v.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b3da1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b3a98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b3a98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b3a977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkhq0l1v                        0x00005596f7e6b23b <unavailable> + 4667\n5    libc.so.6                          0x00002b11b3f8d460 __libc_start_main + 245\n6    tmpkkhq0l1v                        0x00005596f7e6ae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a + b <= c || b + c <= a || c + a <= b {\n        return false\n    } else {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpl51lad4h/tmpl51lad4h.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5630223c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b562ff1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b562ff1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b562ff197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl51lad4h                        0x000055988635c335 <unavailable> + 4917\n5    libc.so.6                          0x00002b563040f460 __libc_start_main + 245\n6    tmpl51lad4h                        0x000055988635be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c or b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp03ywdgv4.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c\n                 ^\n                 ;\n/tmp/tmp03ywdgv4.swift:12:21: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c\n                    ^\n                    ;\n/tmp/tmp03ywdgv4.swift:12:19: error: cannot find 'or' in scope\n    return a == c or b == c\n                  ^~\n/tmp/tmp03ywdgv4.swift:12:24: warning: result of operator '==' is unused\n    return a == c or b == c\n                     ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return a + b > c && a + c > b && b + c > a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmppqlgji8b/tmppqlgji8b.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8148977c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b814866eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b814866e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b814866d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppqlgji8b                        0x0000561eeccac335 <unavailable> + 4917\n5    libc.so.6                          0x00002b8148b63460 __libc_start_main + 245\n6    tmppqlgji8b                        0x0000561eeccabe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if a == b || b == c || a == c {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmpzbze3_ei/tmpzbze3_ei.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71633f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71630e9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71630e9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71630e87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzbze3_ei                        0x000055d6468d61bb <unavailable> + 4539\n5    libc.so.6                          0x00002b71635de460 __libc_start_main + 245\n6    tmpzbze3_ei                        0x000055d6468d5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || b + c < a || a + c < b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpvvs1cz7n/tmpvvs1cz7n.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0a516fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0a4e66b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0a4e66988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0a4e657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvvs1cz7n                        0x00005576a024623b <unavailable> + 4667\n5    libc.so.6                          0x00002af0a535b460 __libc_start_main + 245\n6    tmpvvs1cz7n                        0x00005576a0245e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c and b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpa7ucnkgs.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                 ^\n                 ;\n/tmp/tmpa7ucnkgs.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                     ^\n                     ;\n/tmp/tmpa7ucnkgs.swift:12:19: error: cannot find 'and' in scope\n    return a == c and b == c\n                  ^~~\n/tmp/tmpa7ucnkgs.swift:12:25: warning: result of operator '==' is unused\n    return a == c and b == c\n                      ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (b + c > a) && (a + c > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5xrgkh0u/tmp5xrgkh0u.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebf7e3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebf7b31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebf7b31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebf7b307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xrgkh0u                        0x0000564ca85e1335 <unavailable> + 4917\n5    libc.so.6                          0x00002aebf8026460 __libc_start_main + 245\n6    tmp5xrgkh0u                        0x0000564ca85e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c || b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmpyuoxb4ht/tmpyuoxb4ht.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba1a996c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba1a68db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba1a68d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba1a68c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyuoxb4ht                        0x000055b5d92c61bb <unavailable> + 4539\n5    libc.so.6                          0x00002aba1ab82460 __libc_start_main + 245\n6    tmpyuoxb4ht                        0x000055b5d92c5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c || a == c + b || a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpnm5snald/tmpnm5snald.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a272fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a2426b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a2426988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a24257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnm5snald                        0x00005621cf0331bb <unavailable> + 4539\n5    libc.so.6                          0x00002ab5a291b460 __libc_start_main + 245\n6    tmpnm5snald                        0x00005621cf032e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c || a == c + b || a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpnm5snald/tmpnm5snald.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a272fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a2426b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a2426988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a24257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnm5snald                        0x00005621cf0331bb <unavailable> + 4539\n5    libc.so.6                          0x00002ab5a291b460 __libc_start_main + 245\n6    tmpnm5snald                        0x00005621cf032e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b <= c || b + c <= a || c + a <= b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmpifvu5zbk/tmpifvu5zbk.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8eb3d35c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8eb3a2cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8eb3a2c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8eb3a2b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpifvu5zbk                        0x00005637b196d335 <unavailable> + 4917\n5    libc.so.6                          0x00002b8eb3f21460 __libc_start_main + 245\n6    tmpifvu5zbk                        0x00005637b196ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || a + c < b || b + c < a {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmp119zse4d/tmp119zse4d.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2eba2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2eb724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2eb724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2eb7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp119zse4d                        0x00005566b956523b <unavailable> + 4667\n5    libc.so.6                          0x00002ad2ebc19460 __libc_start_main + 245\n6    tmp119zse4d                        0x00005566b9564e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) and (a + c > b) and (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpp9wx837z.swift:12:23: error: consecutive statements on a line must be separated by ';'\n    return (a + b > c) and (a + c > b) and (b + c > a)\n                      ^\n                      ;\n/tmp/tmpp9wx837z.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return (a + b > c) and (a + c > b) and (b + c > a)\n                                      ^\n                                      ;\n/tmp/tmpp9wx837z.swift:12:24: error: cannot find 'and' in scope\n    return (a + b > c) and (a + c > b) and (b + c > a)\n                       ^~~\n/tmp/tmpp9wx837z.swift:12:40: error: cannot find 'and' in scope\n    return (a + b > c) and (a + c > b) and (b + c > a)\n                                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a > b + c or b > a + c or c > a + b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp98207hvi.swift:12:18: error: expected '{' after 'if' condition\n    if a > b + c or b > a + c or c > a + b {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c && b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmp3gs78n6z/tmp3gs78n6z.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45b9230c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45b8f27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45b8f27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45b8f267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3gs78n6z                        0x00005594000791bb <unavailable> + 4539\n5    libc.so.6                          0x00002b45b941c460 __libc_start_main + 245\n6    tmp3gs78n6z                        0x0000559400078e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5sjg_s_p/tmp5sjg_s_p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef7d58ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef7d285b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef7d285988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef7d2847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5sjg_s_p                        0x0000559fde003335 <unavailable> + 4917\n5    libc.so.6                          0x00002aef7d77a460 __libc_start_main + 245\n6    tmp5sjg_s_p                        0x0000559fde002e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if a == b || b == c || c == a {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmprgph_zz3/tmprgph_zz3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5cac9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5ca995b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5ca995988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5ca9947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprgph_zz3                        0x0000562106c2f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ae5cae8a460 __libc_start_main + 245\n6    tmprgph_zz3                        0x0000562106c2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || b + c < a || a + c < b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpvvs1cz7n/tmpvvs1cz7n.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0a516fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0a4e66b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0a4e66988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0a4e657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvvs1cz7n                        0x00005576a024623b <unavailable> + 4667\n5    libc.so.6                          0x00002af0a535b460 __libc_start_main + 245\n6    tmpvvs1cz7n                        0x00005576a0245e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if a + b <= c || b + c <= a || c + a <= b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmpq910xrfj/tmpq910xrfj.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037bd27c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037ba1eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037ba1e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037ba1d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq910xrfj                        0x0000557ec5d03335 <unavailable> + 4917\n5    libc.so.6                          0x00002b037bf13460 __libc_start_main + 245\n6    tmpq910xrfj                        0x0000557ec5d02e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a == b + c || b == c + a || c == a + b {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp47ffogy3/tmp47ffogy3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d14dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d14aa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d14aa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d14aa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47ffogy3                        0x000055e3914f21bb <unavailable> + 4539\n5    libc.so.6                          0x00002b8d14f9b460 __libc_start_main + 245\n6    tmp47ffogy3                        0x000055e3914f1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c and b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpa7ucnkgs.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                 ^\n                 ;\n/tmp/tmpa7ucnkgs.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                     ^\n                     ;\n/tmp/tmpa7ucnkgs.swift:12:19: error: cannot find 'and' in scope\n    return a == c and b == c\n                  ^~~\n/tmp/tmpa7ucnkgs.swift:12:25: warning: result of operator '==' is unused\n    return a == c and b == c\n                      ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c and b == c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpa7ucnkgs.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                 ^\n                 ;\n/tmp/tmpa7ucnkgs.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == c and b == c\n                     ^\n                     ;\n/tmp/tmpa7ucnkgs.swift:12:19: error: cannot find 'and' in scope\n    return a == c and b == c\n                  ^~~\n/tmp/tmpa7ucnkgs.swift:12:25: warning: result of operator '==' is unused\n    return a == c and b == c\n                      ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c || a == c + b || a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpnm5snald/tmpnm5snald.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a272fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a2426b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a2426988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a24257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnm5snald                        0x00005621cf0331bb <unavailable> + 4539\n5    libc.so.6                          0x00002ab5a291b460 __libc_start_main + 245\n6    tmpnm5snald                        0x00005621cf032e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a + b <= c || b + c <= a || c + a <= b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "tmpbj04p8lk/tmpbj04p8lk.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a17889c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a17580b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a17580988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a1757f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbj04p8lk                        0x000055daf39bd335 <unavailable> + 4917\n5    libc.so.6                          0x00002b6a17a75460 __libc_start_main + 245\n6    tmpbj04p8lk                        0x000055daf39bce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a + b < c || b + c < a || c + a < b {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpkkhq0l1v/tmpkkhq0l1v.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b3da1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b3a98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b3a98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b3a977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkhq0l1v                        0x00005596f7e6b23b <unavailable> + 4667\n5    libc.so.6                          0x00002b11b3f8d460 __libc_start_main + 245\n6    tmpkkhq0l1v                        0x00005596f7e6ae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (b + c > a) && (a + c > b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5xrgkh0u/tmp5xrgkh0u.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebf7e3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebf7b31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebf7b31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebf7b307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xrgkh0u                        0x0000564ca85e1335 <unavailable> + 4917\n5    libc.so.6                          0x00002aebf8026460 __libc_start_main + 245\n6    tmp5xrgkh0u                        0x0000564ca85e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5sjg_s_p/tmp5sjg_s_p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef7d58ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef7d285b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef7d285988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef7d2847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5sjg_s_p                        0x0000559fde003335 <unavailable> + 4917\n5    libc.so.6                          0x00002aef7d77a460 __libc_start_main + 245\n6    tmp5sjg_s_p                        0x0000559fde002e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5sjg_s_p/tmp5sjg_s_p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef7d58ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef7d285b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef7d285988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef7d2847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5sjg_s_p                        0x0000559fde003335 <unavailable> + 4917\n5    libc.so.6                          0x00002aef7d77a460 __libc_start_main + 245\n6    tmp5sjg_s_p                        0x0000559fde002e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or b == c + a or c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmp1aow_2ck.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                     ^\n                     ;\n/tmp/tmp1aow_2ck.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                        ^\n                        ;\n/tmp/tmp1aow_2ck.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                   ^\n                                   ;\n/tmp/tmp1aow_2ck.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or b == c + a or c == a + b\n                                      ^\n                                      ;\n/tmp/tmp1aow_2ck.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                      ^~\n/tmp/tmp1aow_2ck.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                         ~ ^  ~~~~~\n/tmp/tmp1aow_2ck.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or b == c + a or c == a + b\n                                    ^~\n/tmp/tmp1aow_2ck.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or b == c + a or c == a + b\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c or a == c + b or a == b - c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpz4ktzxhu.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                     ^\n                     ;\n/tmp/tmpz4ktzxhu.swift:12:25: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                        ^\n                        ;\n/tmp/tmpz4ktzxhu.swift:12:36: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                   ^\n                                   ;\n/tmp/tmpz4ktzxhu.swift:12:39: error: consecutive statements on a line must be separated by ';'\n    return a == b + c or a == c + b or a == b - c\n                                      ^\n                                      ;\n/tmp/tmpz4ktzxhu.swift:12:23: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                      ^~\n/tmp/tmpz4ktzxhu.swift:12:28: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                         ~ ^  ~~~~~\n/tmp/tmpz4ktzxhu.swift:12:37: error: cannot find 'or' in scope\n    return a == b + c or a == c + b or a == b - c\n                                    ^~\n/tmp/tmpz4ktzxhu.swift:12:42: warning: result of operator '==' is unused\n    return a == b + c or a == c + b or a == b - c\n                                       ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if a == b || b == c || c == a {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmprgph_zz3/tmprgph_zz3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5cac9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5ca995b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5ca995988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5ca9947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprgph_zz3                        0x0000562106c2f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ae5cae8a460 __libc_start_main + 245\n6    tmprgph_zz3                        0x0000562106c2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c and b == c + a and c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpk71nmnhd.swift:12:22: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                     ^\n                     ;\n/tmp/tmpk71nmnhd.swift:12:26: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                         ^\n                         ;\n/tmp/tmpk71nmnhd.swift:12:37: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                    ^\n                                    ;\n/tmp/tmpk71nmnhd.swift:12:41: error: consecutive statements on a line must be separated by ';'\n    return a == b + c and b == c + a and c == a + b\n                                        ^\n                                        ;\n/tmp/tmpk71nmnhd.swift:12:23: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                      ^~~\n/tmp/tmpk71nmnhd.swift:12:29: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                          ~ ^  ~~~~~\n/tmp/tmpk71nmnhd.swift:12:38: error: cannot find 'and' in scope\n    return a == b + c and b == c + a and c == a + b\n                                     ^~~\n/tmp/tmpk71nmnhd.swift:12:44: warning: result of operator '==' is unused\n    return a == b + c and b == c + a and c == a + b\n                                         ~ ^  ~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == c or b == c or a == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "/tmp/tmpc31pc16d.swift:12:18: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                 ^\n                 ;\n/tmp/tmpc31pc16d.swift:12:21: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                    ^\n                    ;\n/tmp/tmpc31pc16d.swift:12:28: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                           ^\n                           ;\n/tmp/tmpc31pc16d.swift:12:31: error: consecutive statements on a line must be separated by ';'\n    return a == c or b == c or a == b\n                              ^\n                              ;\n/tmp/tmpc31pc16d.swift:12:19: error: cannot find 'or' in scope\n    return a == c or b == c or a == b\n                  ^~\n/tmp/tmpc31pc16d.swift:12:24: warning: result of operator '==' is unused\n    return a == c or b == c or a == b\n                     ~ ^  ~\n/tmp/tmpc31pc16d.swift:12:29: error: cannot find 'or' in scope\n    return a == c or b == c or a == b\n                            ^~\n/tmp/tmpc31pc16d.swift:12:34: warning: result of operator '==' is unused\n    return a == c or b == c or a == b\n                               ~ ^  ~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return (a + b > c) && (a + c > b) && (b + c > a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmp5o7qw76n/tmp5o7qw76n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9bd5a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9bd29bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9bd29b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9bd29a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o7qw76n                        0x000056447ccfb335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab9bd790460 __libc_start_main + 245\n6    tmp5o7qw76n                        0x000056447ccfae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    return a == b + c && b == c + a && c == a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "tmpha9qfr31/tmpha9qfr31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba316471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba316168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba316168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3161677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpha9qfr31                        0x000055b2f473f1bb <unavailable> + 4539\n5    libc.so.6                          0x00002ba31665d460 __libc_start_main + 245\n6    tmpha9qfr31                        0x000055b2f473ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}