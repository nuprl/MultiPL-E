{
  "name": "HumanEval_44_change_base",
  "language": "swift",
  "prompt": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
  "completions": [
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return \"\"",
    "    var result = \"\"\n    var digit = 0\n    for x > 0 {\n        digit = x % base\n        result = digit.toString() + result\n        x = x / base\n    }\n    return result",
    "    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        remainder := x % base\n        result = to_string(remainder) + result\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_octal(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_decimal(x, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    var result: String = \"\"\n    for i := 0; i < x.len; i++ {\n        result += Int(x.digits[i] * base)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_octal(x)\n    }\n    if base == 4 {\n        return to_hex(x)\n    }",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x < base*base {\n        return to_string(x % base)\n    }\n    if x < base*base*base {\n        return to_string(x % base) + change_base(x / base, base)\n    }\n    return to_string(x % base) + change_base(x / base, base) + change_base(x / base / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    var result = \"\"\n    var digit = 0\n    var power = 1\n    for x > 0 {\n        digit = x % base\n        result = digit + result\n        x /= base\n        power *= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return \"1\"\n    }\n    if x == 3 {\n        return \"2\"\n    }\n    if x == 4 {\n        return \"3\"\n    }\n    if x == 5 {\n        return \"4\"\n    }\n    if x == 6 {\n        return \"5\"\n    }\n    if x == 7 {\n        return \"6\"\n    }\n    if x == 8 {\n        return \"7\"\n    }\n    if x == 9 {\n        return \"8\"\n    }\n    if x == 10 {\n        return \"9\"\n    }\n    if x == 11 {\n        return to_string(base) + \"1\"\n    }\n    if x == 12 {\n        return to_string(base) + \"2\"\n    }\n    if x == 13 {\n        return to_string(base) + \"3\"\n    }\n    if x == 14 {\n        return to_string(base) + \"4\"\n    }\n    if x == 15 {\n        return to_string(base) + \"5\"\n    }\n    if x == 16 {\n        return to_string(base) + \"6\"\n    }\n    if x == 17 {\n        return to_string(base) + \"7\"\n    }\n    if x == 18 {\n        return to_string(base) + \"8\"\n    }\n    if x == 19 {\n        return to_string(base) + \"9\"\n    }\n    if x == 20 {\n        return to_string(base) + \"10\"\n",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(abs(x))\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return to_nonuple(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x >= base {\n        result = to_string(x % base) + result\n        x = x / base\n    }\n    result = to_string(x) + result\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if base < 2 || base > 10 {\n        panic(\"Base should be 2 to 10\")\n    }\n    if x < 0 {\n        panic(\"Input number should be positive\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for i := x; i > 0; i /= base {\n        result = string(i % base) + result\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 <= base <= 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x < base*base {\n        return to_string(x % base)\n    }\n    if x < base*base*base {\n        return to_string(x % base) + change_base(x / base, base)\n    }\n    panic(\"base too big\")",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base * base)\n    }\n    if x == 3 {\n        return to_string(base * base * base)\n    }\n    if x == 4 {\n        return to_string(base * base * base * base)\n    }\n    if x == 5 {\n        return to_string(base * base * base * base * base)\n    }\n    if x == 6 {\n        return to_string(base * base * base * base * base * base)\n    }\n    if x == 7 {\n        return to_string(base * base * base * base * base * base * base)\n    }\n    if x == 8 {\n        return to_string(base * base * base * base * base * base * base * base)\n    }\n    if x == 9 {\n        return to_string(base * base * base * base * base * base * base * base * base)\n    }\n    if x == 10 {\n        return to_string(base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 11 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 12 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 13 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 14 {",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"error\"",
    "    var result = \"\"\n    for i := 0; i < x.length; i++ {\n        digit := x[i]\n        if digit < base {\n            result += string(digit)\n        } else {\n            result += string(digit - base + 10)\n        }\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n    return \"0\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return change_base(x, base)\n    }\n    digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % base)\n        x /= base\n    }\n    return string(digits)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_tri(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + \" \" + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) +",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"invalid base\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_decimal(x, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    var result: String = \"\"\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    digits := make([]string, 0)\n    for x > 0 {\n        digits = append(digits, to_string(x % base))\n        x /= base\n    }\n    return \"\".join(digits)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    s := \"\"\n    for x > 0 {\n        s = to_string(x % base) + s\n        x /= base\n    }\n    return s",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nary(x)\n    }\n    return \"error\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    if base == 4 {\n        return to_string(x, 4)\n    }\n    if base == 5 {\n        return to_string(x, 5)\n    }\n    if base == 6 {\n        return to_string(x, 6)\n    }\n    if base == 7 {\n        return to_string(x, 7)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 9 {\n        return to_string(x, 9)\n    }\n    if base == 10 {\n        return to_string(x, 10)\n    }\n    if base == 11 {\n        return to_string(x, 11)\n    }\n    if base == 12 {\n        return to_string(x, 12)\n    }\n    if base == 13 {\n        return to_string(x, 13)\n    }\n    if base == 14 {\n        return to_string(x, 14)\n    }\n    if base == 15 {\n        return to_string(x, 15)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 17 {\n        return to_string(x, 17)\n    }\n    if base == 18 {\n        return to_string(x, 18)\n    }\n    if base == 19 {\n        return to_string(x, 19)\n    }\n    if base == 20 {\n        return to_string(x, 20)\n    }\n    if base == 21 {\n        return to_string(x, 21)\n    }\n    if base == 22 {\n        return to_",
    "    var result = \"\"\n    var digit = 0\n    for x > 0 {\n        digit = x % base\n        result = digit.to_string() + result\n        x = x / base\n    }\n    return result",
    "    if base < 2 || base > 10 {\n        panic(\"base must be between 2 and 10\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x%base == 0 {\n        return to_string(x/base)\n    }\n    return to_string(x/base) + to_string(x%base)",
    "    var result = \"\"\n    for i := 0; i < x.len; i++ {\n        result += strconv.Itoa(x.digits[i] * base)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    var result Int\n    var digit Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if base == 10 {\n        return str(x)\n    }\n    if base == 2 {\n        return str(x)\n    }\n    if base == 16 {\n        return str(x)\n    }\n    if base == 8 {\n        return str(x)\n    }\n    if base == 3 {\n        return str(x)\n    }\n    if base == 5 {\n        return str(x)\n    }\n    if base == 7 {\n        return str(x)\n    }\n    if base == 9 {\n        return str(x)\n    }\n    if base == 11 {\n        return str(x)\n    }\n    if base == 13 {\n        return str(x)\n    }\n    if base == 17 {\n        return str(x)\n    }\n    if base == 19 {\n        return str(x)\n    }\n    if base == 23 {\n        return str(x)\n    }\n    if base == 29 {\n        return str(x)\n    }\n    if base == 31 {\n        return str(x)\n    }\n    if base == 37 {\n        return str(x)\n    }\n    if base == 41 {\n        return str(x)\n    }\n    if base == 43 {\n        return str(x)\n    }\n    if base == 47 {\n        return str(x)\n    }\n    if base == 53 {\n        return str(x)\n    }\n    if base == 59 {\n        return str(x)\n    }\n    if base == 61 {\n        return str(x)\n    }\n    if base == 67 {\n        return str(x)\n    }\n    if base == 71 {\n        return str(x)\n    }\n    if base == 73 {\n        return str(x)\n    }\n    if base == 79 {\n        return str(x",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"ERROR\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    if base == 5 {\n        return to_string(x, 5)\n    }\n    if base == 7 {\n        return to_string(x, 7)\n    }\n    if base == 9 {\n        return to_string(x, 9)\n    }\n    if base == 11 {\n        return to_string(x, 11)\n    }\n    if base == 13 {\n        return to_string(x, 13)\n    }\n    if base == 14 {\n        return to_string(x, 14)\n    }\n    if base == 15 {\n        return to_string(x, 15)\n    }\n    if base == 17 {\n        return to_string(x, 17)\n    }\n    if base == 18 {\n        return to_string(x, 18)\n    }\n    if base == 19 {\n        return to_string(x, 19)\n    }\n    if base == 20 {\n        return to_string(x, 20)\n    }\n    if base == 21 {\n        return to_string(x, 21)\n    }\n    if base == 22 {\n        return to_string(x, 22)\n    }\n    if base == 23 {\n        return to_string(x, 23)\n    ",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 2 {\n        return strconv.Itoa(x)\n    }\n    if base == 16 {\n        return strconv.Itoa(x)\n    }\n    if base == 8 {\n        return strconv.Itoa(x)\n    }\n    if base == 3 {\n        return strconv.Itoa(x)\n    }\n    if base == 5 {\n        return strconv.Itoa(x)\n    }\n    if base == 7 {\n        return strconv.Itoa(x)\n    }\n    if base == 9 {\n        return strconv.Itoa(x)\n    }\n    if base == 11 {\n        return strconv.Itoa(x)\n    }\n    if base == 13 {\n        return strconv.Itoa(x)\n    }\n    if base == 14 {\n        return strconv.Itoa(x)\n    }\n    if base == 15 {\n        return strconv.Itoa(x)\n    }\n    if base == 17 {\n        return strconv.Itoa(x)\n    }\n    if base == 19 {\n        return strconv.Itoa(x)\n    }\n    if base == 20 {\n        return strconv.Itoa(x)\n    }\n    if base == 21 {\n        return strconv.Itoa(x)\n    }\n    if base == 22 {\n        return strconv.Itoa(x)\n    }\n    if base == 23 {\n        return strconv.Itoa(x)\n    }\n    if base == 24 {\n        return strconv.Itoa(x)\n    }\n    if base == 25 {\n        return strconv.Itoa(x)\n    }\n    if base == 26 {",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if base < 2 || base > 36 {\n        panic(\"Base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + \"2\"\n    }\n    if x == 3 {\n        return to_string(base) + \"3\"\n    }\n    if x == 4 {\n        return to_string(base) + \"4\"\n    }\n    if x == 5 {\n        return to_string(base) + \"5\"\n    }\n    if x == 6 {\n        return to_string(base) + \"6\"\n    }\n    if x == 7 {\n        return to_string(base) + \"7\"\n    }\n    if x == 8 {\n        return to_string(base) + \"8\"\n    }\n    if x == 9 {\n        return to_string(base) + \"9\"\n    }\n    if x == 10 {\n        return to_string(base) + \"10\"\n    }\n    if x == 11 {\n        return to_string(base) + \"11\"\n    }\n    if x == 12 {\n        return to_string(base) + \"12\"\n    }\n    if x == 13 {\n        return to_string(base) + \"13\"\n    }\n    if x == 14 {\n        return to_string(base) + \"14\"\n    }\n    if x == 15 {\n        return to_string(base) + \"15\"\n    }\n    if x == 16 {\n        return to_string(base) + \"16\"\n    }\n    if x == 17 {\n        return to_string(base) + \"17\"\n    }\n    if x ==",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base * base)\n    }\n    if x == 3 {\n        return to_string(base * base * base)\n    }\n    if x == 4 {\n        return to_string(base * base * base * base)\n    }\n    if x == 5 {\n        return to_string(base * base * base * base * base)\n    }\n    if x == 6 {\n        return to_string(base * base * base * base * base * base)\n    }\n    if x == 7 {\n        return to_string(base * base * base * base * base * base * base)\n    }\n    if x == 8 {\n        return to_string(base * base * base * base * base * base * base * base)\n    }\n    if x == 9 {\n        return to_string(base * base * base * base * base * base * base * base * base)\n    }\n    if x == 10 {\n        return to_string(base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 11 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 12 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 13 {\n        return to_string(base * base * base * base * base * base * base * base * base * base *",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to",
    "    var result = \"\"\n    var digit = 0\n    var i = 0\n    for i < x {\n        digit = x % base\n        result = result + digit.toString()\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 <= base <= 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    s := \"\"\n    for x > 0 {\n        s = string(base) + s\n        x, base = divmod(x, base)\n    }\n    return s",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"\"",
    "    var result: String = \"\"\n    var digit: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    var result: String = \"\"\n    for i:=0; i<x; i++ {\n        result = result + str(x%base)\n        x = x / base\n    }\n    return result",
    "    var result: String = \"\"\n    for i:=0; i<x; i++ {\n        result += str(x%base)\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"ERROR\"\n    }\n    if x < 0 {\n        return \"ERROR\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 0 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)",
    "    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nonary(x)\n    }\n    return \"error\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x >= base {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if x < base {\n        return change_base(x / base, base)\n    }\n    return change_base(x / base, base) + str(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return to_string(x)",
    "    var result = \"\"\n    for i := 0; i < x; i++ {\n        result += str(base)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x%base == 0 {\n        return to_string(x/base)\n    }\n    return to_string(x/base) + to_string(x%base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result string\n    for x > 0 {\n        var digit = x % base\n        x /= base\n        result = string(digit) + result\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be in 2 to 36\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = str(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 10 {\n        return strconv.Itoa(x)\n    }\n    var result string\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result",
    "    var result: String = \"\"\n    var digit: Int = 0\n    var power: Int = 0\n    var digit_count: Int = 0\n    var power_count: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var n1: Int = 0\n    var n2: Int = 0\n    var n3: Int = 0\n    var n4: Int = 0\n    var n5: Int = 0\n    var n6: Int = 0\n    var n7: Int = 0\n    var n8: Int = 0\n    var n9: Int = 0\n    var n10: Int = 0\n    var n11: Int = 0\n    var n12: Int = 0\n    var n13: Int = 0\n    var n14: Int = 0\n    var n15: Int = 0\n    var n16: Int = 0\n    var n17: Int = 0\n    var n18: Int = 0\n    var n19: Int = 0\n    var n20: Int = 0\n    var n21: Int = 0\n    var n22: Int = 0\n    var n23: Int = 0\n    var n24: Int = 0\n    var n25: Int = 0\n    var n26: Int = 0\n    var n27: Int = 0\n    var n28: Int = 0\n    var n29: Int = 0\n    var n30: Int = 0\n    var n31: Int = 0\n    var n32: Int = 0\n    var n33: Int = 0\n    var n34: Int = 0\n    var n35: Int = 0\n    var n36: Int = 0\n    var n37: Int = 0",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % base)\n        x /= base\n    }\n    return to_string(digits)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if base == 10 {\n        return str(x)\n    }\n    if base == 2 {\n        return str(x)\n    }\n    if base == 16 {\n        return str(x)\n    }\n    if base == 8 {\n        return str(x)\n    }\n    if base == 3 {\n        return str(x)\n    }\n    if base == 5 {\n        return str(x)\n    }\n    if base == 6 {\n        return str(x)\n    }\n    if base == 7 {\n        return str(x)\n    }\n    if base == 9 {\n        return str(x)\n    }\n    return \"\"",
    "    if base < 2 || base > 10 {\n        panic(\"Base should be between 2 and 10\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = str(x % base) + result\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"negative numbers cannot be converted\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    panic(\"base must be between 2 and 36\")",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be between 2 and 36\")\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if x < base {\n        return change_base(x / base, base)\n    }\n    return change_base(x / base, base) + strconv.Itoa(x % base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"error\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be in 2 ~ 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x, base = divmod(x, base)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    return \"invalid base\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 to 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    panic(\"unreachable\")",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nonary(x)\n    }\n    return \"ERROR\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    var result = \"\"\n    for i := 0; i < x.len; i++ {\n        digit := x.digits[i]\n        if digit >= base {\n            digit = digit - base\n        }\n        result = result + strconv.Itoa(digit)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)",
    "    var result: String = \"\"\n    for i := 0; i < x.len(); i++ {\n        result += str(x.get(i) * base)\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if base < 2 || base > 36 {\n        panic(\"Base should be in 2..36\")\n    }\n    if x < 0 {\n        panic(\"Negative number is not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        remainder := x % base\n        result = string(remainder) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }",
    "    if base < 2 || base > 10 {\n        panic(\"Base should be 2 to 10\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x = x / base\n    }\n    return result",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"",
    "    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\""
  ],
  "stop_tokens": [
    "\n}"
  ]
}