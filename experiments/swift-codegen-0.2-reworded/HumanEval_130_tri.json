{
  "name": "HumanEval_130_tri",
  "language": "swift",
  "prompt": "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])",
  "completions": [
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n <= 0 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    return [1, 3, 2, 8]",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    return []Int{1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1 + (n - 1) / 2}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 2, 3, 5]\n    }\n    return [1, 3, 2, 8]",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2}\n    }\n    return [Int]{1, tri(n - 1) + tri(n - 2) + tri(n + 1)}",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 1 + n / 2}\n    }\n    return []Int{1, 1 + n / 2, 1 + n / 2 + 1}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    a := []Int{1, 3}\n    b := []Int{1, 2}\n    c := []Int{1, 1}\n    \n    for i := 2; i <= n; i++ {\n        a = append(a, b[0] + b[1] + c[0] + c[1])\n        b = append(b, a[0] + a[1] + c[0] + c[1])\n        c = append(c, a[0] + a[1] + b[0] + b[1])\n    }\n    \n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 2, 3, 5}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return []Int{1}\n    }\n    if n == 1 {\n        return []Int{3}\n    }\n    if n == 2 {\n        return []Int{2}\n    }\n    \n    var a, b, c, result []Int\n    a = []Int{1, 3}\n    b = []Int{1, 1}\n    c = []Int{1, 2}\n    \n    for i := 0; i < n - 2; i++ {\n        result = append(result, a[0] + b[0] + c[0])\n        a = append(a, b[0] + c[0])\n        b = append(b, c[0])\n        c = append(c, a[0] + b[0])\n    }\n    \n    result = append(result, a[0] + b[0] + c[0])\n    return result",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1, 2, 3}\n    }\n    return [Int]{1, 2, 3, 5, 8}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 3, 2, 8]\n    }\n    return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n <= 0 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n == 2 {\n        return [1, 2]\n    }\n    if n == 3 {\n        return [1, 3, 2, 8]\n    }\n    if n % 2 == 0 {\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    }\n    return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1]",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n == 2 {\n        return [Int]{2, 3}\n    }\n    \n    var a, b, c [Int]\n    a = [Int]{1}\n    b = [Int]{3}\n    c = [Int]{2, 3}\n    \n    for i := 3; i <= n; i++ {\n        a = append(a, b...)\n        b = append(b, c...)\n        c = append(c, a...)\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    \n    var a = [Int]{}\n    a[0] = 1\n    a[1] = 3\n    \n    for i := 2; i <= n; i++ {\n        a[i] = 1 + (i / 2)\n        if i % 2 == 0 {\n            a[i] += a[i - 1] + a[i - 2]\n        } else {\n            a[i] += a[i - 1] + a[i - 2] + a[i + 1]\n        }\n    }\n    return a",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1, tri(n - 2), tri(n - 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n - 1), 1)",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    a := []Int{1, 3}\n    b := []Int{1, 1}\n    c := []Int{1, 2}\n    \n    for i := 2; i <= n; i++ {\n        a = append(a, b[0] + b[1] + c[0] + c[1])\n        b = append(b, c[0] + c[1])\n        c = append(c, a[0] + a[1])\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 5}",
    "\tif n < 0 {\n\t\tpanic(\"n should be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn []Int{1}\n\t}\n\tif n == 1 {\n\t\treturn []Int{3}\n\t}\n\tif n == 2 {\n\t\treturn []Int{2}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    \n    a := [Int]{}\n    a.append(1)\n    a.append(3)\n    a.append(2)\n    \n    for i := 3; i <= n; i++ {\n        a.append(a[i - 1] + a[i - 2] + a[i - 3])\n    }\n    \n    return a",
    "\tif n == 0 {\n\t\treturn []int{}\n\t}\n\tif n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1, 3}\n\t}\n\tif n == 3 {\n\t\treturn []int{1, 3, 2, 8}\n\t}\n\tif n % 2 == 0 {\n\t\treturn append(tri(n - 1), 1, tri(n - 2), tri(n - 1))\n\t}\n\treturn append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2 + 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    \n    var a = [Int]{1, 3}\n    for i := 2; i <= n; i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i+1])\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2)...)\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2, 1 + n / 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    a := []Int{1, 1}\n    b := []Int{1, 1}\n    c := []Int{1, 1}\n    \n    for i := 2; i <= n; i++ {\n        a = append(a, 1 + (i / 2))\n        b = append(b, 1 + (i - 1))\n        c = append(c, 1 + (i - 2))\n    }\n    \n    return append(append(append(a, b...), c...), 1 + (n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 2, 3]\n    }\n    return [1, 3, 2, 8]",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    a := []Int{1, 3}\n    b := []Int{1, 1}\n    c := []Int{1, 1}\n    \n    for i := 2; i <= n; i++ {\n        a = append(a, b[0] + b[1])\n        b = append(b, a[0] + a[1])\n        c = append(c, b[0] + b[1])\n    }\n    \n    return c",
    "\tif n < 0 {\n\t\tpanic(\"n should be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn []Int{1}\n\t}\n\tif n == 1 {\n\t\treturn []Int{3}\n\t}\n\tif n == 2 {\n\t\treturn []Int{2}\n\t}\n\tif n == 3 {\n\t\treturn []Int{8}\n\t}\n\t\n\tvar a, b, c, d, e, f, g, h, i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    var a = []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i-3])\n    }\n    return a",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else if n == 3 {\n        return []Int{1, 3, 2, 8}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 2}\n    } else if n == 3 {\n        return []Int{1, 3, 2, 8}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 3, 2, 8]\n    }\n    return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n <= 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2) + tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    return []Int{1, 3, 2, 8}",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + (n / 2))\n    }\n    return append(tri(n - 1), tri(n - 2), 1 + tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2) + tri(n + 1))\n    } else {\n        return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))\n    }",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 3, 2, 8}\n\t}\n\treturn []Int{1, 3, 2, 8, 1, 5, 3, 4, 2, 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + (n / 2), 2}\n    }\n    return [Int]{1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 2}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2, 1 + n / 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1}",
    "\tif n == 0 {\n\t\treturn [Int]{1}\n\t}\n\tif n == 1 {\n\t\treturn [Int]{3}\n\t}\n\tif n % 2 == 0 {\n\t\treturn [Int]{1, 2, 3}\n\t}\n\treturn [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    result := []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i - 1] + result[i - 2] + result[i - 3])\n    }\n    return result",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    \n    a := [Int]{}\n    a[0] = 1\n    a[1] = 3\n    \n    for i := 2; i <= n; i++ {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 1]\n    }\n    \n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 5, 13, 10}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2) + tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 1 + n / 2, 2}\n    }\n    return []Int{1, 1 + n / 2, 1 + n / 2 + n / 2, 3}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 5}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    a := []Int{1, 3}\n    b := []Int{1, 1}\n    c := []Int{3, 2}\n    \n    for i := 2; i <= n; i++ {\n        a = append(a, b[0] + b[1])\n        b = append(b, c[0] + c[1])\n        c = append(c, a[0] + a[1])\n    }\n    \n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1, 2, 3}\n    }\n    return [Int]{1, 1, 1, 1, 2, 3}",
    "\tif n == 0 {\n\t\treturn [Int]{1}\n\t}\n\tif n == 1 {\n\t\treturn [Int]{3}\n\t}\n\tif n % 2 == 0 {\n\t\treturn [Int]{1, 2, 3}\n\t}\n\treturn [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 2, 3}\n    }\n    return []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    } else {\n        return [Int]{1, 3, 5, 8}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n == 2 {\n        return [Int]{2, 3}\n    }\n    if n == 3 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    return []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 2}\n    } else if n == 3 {\n        return []Int{1, 3, 2, 8}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    \n    var result = []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i-1] + result[i-2] + result[i-1])\n    }\n    return result",
    "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    \n    var a = []int{1, 3}\n    for i := 2; i <= n; i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i-3])\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 2, 3}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 2, 3}\n    }\n    return []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    \n    result := []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i - 1] + result[i - 2] + result[i - 1])\n    }\n    return result",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n % 2 == 0 {\n        return []Int{1, n / 2, tri(n - 2) + tri(n - 1) + tri(n + 1)}\n    } else {\n        return []Int{tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 5, 8}",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else if n == 3 {\n        return []Int{1, 3, 2, 8}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    var result = []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i - 1] + result[i - 2] + result[i - 1])\n    }\n    return result",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, 1}\n    }\n    return [Int]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "\tif n == 0 {\n\t\treturn []int{}\n\t}\n\tif n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1, 2}\n\t}\n\tif n == 3 {\n\t\treturn []int{1, 3, 2, 8}\n\t}\n\tif n % 2 == 0 {\n\t\treturn append(tri(n - 1), 1, tri(n - 2), tri(n - 1))\n\t}\n\treturn append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n - 1))",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n == 3 {\n        return [Int]{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8} + tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2))\n    } else {\n        return append(tri(n - 1), tri(n - 2), 1 + tri(n - 1))\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    \n    var a = [Int]{}\n    a[0] = 1\n    a[1] = 3\n    if n % 2 == 0 {\n        for i := 2; i < n; i += 2 {\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n        }\n    } else {\n        for i := 2; i < n; i += 2 {\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n        }\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 5}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    } else {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 5, 8}",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    } else {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }",
    "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    var a = []int{1, 3, 2, 8}\n    for i := 4; i <= n; i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i-3])\n    }\n    return a",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 3, 2, 8}\n    }\n    return []Int{1, 2, 3, 5, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2) + tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 2, 3}\n    }\n    return []Int{1, 3, 5, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    if n % 2 == 0 {\n        return []Int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    return [Int]{1, 1 + (n / 2), 1 + (n / 2) + (n / 2)}",
    "    if n <= 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n == 2 {\n        return [Int]{1, 3}\n    } else if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    } else {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }",
    "\tif n < 0 {\n\t\tpanic(\"n should be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn []Int{1}\n\t}\n\tif n == 1 {\n\t\treturn []Int{3}\n\t}\n\tif n == 2 {\n\t\treturn []Int{2}\n\t}\n\tif n == 3 {\n\t\treturn []Int{3}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 2, 3}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 5, 8}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, 1}\n    }\n    return [Int]{1, 1, 1, 1, n, n + 1, n + 2}",
    "\tif n < 0 {\n\t\tpanic(\"n should be non-negative\")\n\t}\n\tif n == 0 {\n\t\treturn []Int{1}\n\t}\n\tif n == 1 {\n\t\treturn []Int{3}\n\t}\n\tif n == 2 {\n\t\treturn []Int{2}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    a := []Int{1, 1}\n    b := []Int{1, 1}\n    for i := 2; i <= n; i++ {\n        a = append(a, 1 + (i / 2))\n        b = append(b, 1 + (i / 2))\n        b = append(b, 1 + (i / 2))\n        a = append(a, b[i - 2] + b[i - 1] + b[i])\n    }\n    return a",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 3, 2, 8}\n\t}\n\treturn []Int{1, 3, 2, 8, 1, 5, 3, 2, 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    return []Int{1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1 + (n - 1) / 2}",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 1, 2, 3}\n\t}\n\treturn []Int{1, 1, 2, 3, 5, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    var result = []Int{}\n    result = append(result, 1)\n    result = append(result, 3)\n    result = append(result, 2)\n    \n    if n % 2 == 0 {\n        result = append(result, tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result = append(result, tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n == 2 {\n        return [Int]{2, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1, tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n == 2 {\n        return [Int]{2, 3}\n    }\n    if n == 3 {\n        return [Int]{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return [Int]{3, 1, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    \n    var result = [Int]{}\n    result[0] = 1\n    result[1] = 3\n    \n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = result[i - 1] + result[i - 2]\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1]\n        }\n    }\n    \n    return result",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 2, 3}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + (n / 2), 2}\n    }\n    return [Int]{1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 2}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1, tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2}\n    }\n    return [Int]{1, tri(n - 1) + tri(n - 2) + tri(n + 1)}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "\tif n == 0 {\n\t\treturn []int{}\n\t}\n\tif n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1, 3}\n\t}\n\tif n == 3 {\n\t\treturn []int{1, 3, 2, 8}\n\t}\n\tif n % 2 == 0 {\n\t\treturn append(tri(n - 1), 1, tri(n - 2), tri(n - 1))\n\t}\n\treturn append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n == 2 {\n        return [Int]{1, 3}\n    } else if n == 3 {\n        return [Int]{1, 3, 2, 8}\n    } else {\n        return [Int]{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n    } else {\n        return [Int]{tri(n - 1) + tri(n - 2) + tri(n + 1), 1, n / 2}\n    }",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 1 + n / 2, 1 + n / 2}\n    }\n    return []Int{1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8} + tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    var a = []Int{1, 1}\n    for i := 2; i <= n; i++ {\n        a = append(a, 1 + a[i - 1] + a[i - 2])\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2, 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2 + n / 2, 3}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8, 1, 5, 3, 4, 6}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return []Int{1}\n    }\n    if n == 1 {\n        return []Int{3}\n    }\n    if n == 2 {\n        return []Int{2}\n    }\n    if n == 3 {\n        return []Int{8}\n    }\n    \n    result := []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i-1] + result[i-2] + result[i-3])\n    }\n    return result",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2))\n    }\n    return append(tri(n - 1), tri(n - 2), 1 + tri(n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    \n    var result = []Int{1, 3}\n    for i := 2; i <= n; i++ {\n        result = append(result, result[i - 1] + result[i - 2] + result[i - 1])\n    }\n    return result",
    "\tif n < 1 {\n\t\treturn []Int{}\n\t}\n\tif n == 1 {\n\t\treturn []Int{1}\n\t}\n\tif n % 2 == 0 {\n\t\treturn []Int{1, 2, 3}\n\t}\n\treturn []Int{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 5, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), 1, tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    } else if n == 1 {\n        return [Int]{1}\n    } else if n % 2 == 0 {\n        return append(tri(n - 1), 1 + tri(n - 2))\n    } else {\n        return append(tri(n - 1), tri(n - 2), 1 + tri(n - 1))\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    return append(tri(n - 1), tri(n - 2) + tri(n - 1) + tri(n + 1))",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 3}\n    }\n    if n % 2 == 0 {\n        return []Int{1, 1 + n / 2, 2}\n    }\n    return []Int{1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 2, 3, 5, 8]\n    }\n    return [1, 3, 2, 8, 7, 6]",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 2, 8, 1, 5, 3, 4, 2, 1}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2, 1 + n / 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1}",
    "    if n == 0 {\n        return []Int{}\n    } else if n == 1 {\n        return []Int{1}\n    } else if n == 2 {\n        return []Int{1, 3}\n    } else if n == 3 {\n        return []Int{1, 3, 2, 8}\n    } else {\n        return []Int{1, 3, 2, 8}\n    }",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n == 3 {\n        return [Int]{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3, 5, 8} + tri(n - 2)\n    }\n    return [Int]{1, 3, 5, 8} + tri(n - 1) + tri(n - 2)",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n == 2 {\n        return [Int]{2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n < 1 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n < 1 {\n        return []Int{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return append(tri(n - 1), tri(n - 2), tri(n + 1))\n    }\n    return append(tri(n - 1), tri(n - 2), tri(n + 1))",
    "    if n <= 0 {\n        return []Int{}\n    }\n    if n == 1 {\n        return []Int{1}\n    }\n    if n == 2 {\n        return []Int{1, 2}\n    }\n    if n == 3 {\n        return []Int{1, 3, 2, 8}\n    }\n    \n    var a = []Int{1, 3, 2, 8}\n    for i := 4; i <= n; i++ {\n        a = append(a, a[i - 1] + a[i - 2] + a[i - 3])\n    }\n    return a",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 3, 2, 8}\n    }\n    return [Int]{1, 3, 5, 8}",
    "\tif n == 0 {\n\t\treturn []int{}\n\t}\n\tif n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1, 2}\n\t}\n\tif n == 3 {\n\t\treturn []int{1, 3, 2, 8}\n\t}\n\tif n % 2 == 0 {\n\t\treturn append(tri(n - 1), 1, tri(n - 2), tri(n - 1))\n\t}\n\treturn append(tri(n - 1), tri(n - 2), tri(n - 1), tri(n - 1))",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 3}\n    }\n    return [Int]{1, 3, 2, 8}",
    "    if n == 0 {\n        return [Int]{1}\n    }\n    if n == 1 {\n        return [Int]{3}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{3, 1, 2, 3}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n == 2 {\n        return [Int]{1, 2}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 1 + n / 2, 2}\n    }\n    return [Int]{1, 1 + n / 2, 1 + n / 2 + n / 2, 2}",
    "    if n == 0 {\n        return [Int]{}\n    }\n    if n == 1 {\n        return [Int]{1}\n    }\n    if n % 2 == 0 {\n        return [Int]{1, 2, 3}\n    }\n    return [Int]{1, 3, 2, 8}"
  ],
  "stop_tokens": [
    "\n}"
  ]
}