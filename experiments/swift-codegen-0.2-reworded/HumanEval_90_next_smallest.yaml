name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n/// Return nil if there is\
  \ no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>>\
  \ next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n\
  /// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int])\
  \ -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[0]\n    }\n    if lst[1] < lst[2] {\n        return\
    \ lst[1]\n    }\n    if lst[0] < lst[2] {\n        return lst[0]\n    }\n    return\
    \ lst[2]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    var min\
    \ = lst[0]\n    var minIndex = 0\n    for i := 1; i < len(lst); i++ {\n      \
    \  if lst[i] < min {\n            min = lst[i]\n            minIndex = i\n   \
    \     }\n    }\n    \n    if len(lst) == 1 {\n        return min\n    }\n    \n\
    \    return lst[minIndex + 1]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    \n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    \n \
    \   return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n\
    \    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i += 1 {\n        if lst[i] == min {\n            return min\n \
    \       }\n    }\n    \n    return nil", "  if len(lst) == 0 {\n    return nil\n\
    \  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n \
    \   return lst[1]\n  }\n  return lst[0]", '    ', '    ', "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "  if\
    \ len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] < lst[1] {\n    return lst[0]\n  }\n  return lst[1]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    min := lst[0]\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min\
    \ {\n            return lst[i+1]\n        }\n    }\n    return nil", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i++\
    \ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i <\
    \ len(lst); i++ {\n    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n\
    \  return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n   \
    \ min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return min\n        }\n    }\n\
    \    \n    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n \
    \   \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            return min\n    \
    \    }\n    }\n    \n    return nil", "  if len(lst) == 0 {\n    return nil\n\
    \  }\n  \n  min := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] <\
    \ min {\n      min = lst[i]\n    }\n  }\n  \n  for i := 0; i < len(lst); i++ {\n\
    \    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n  \n  return nil",
  "  if len(lst) == 0 {\n    return nil\n  }\n  \n  min := lst[0]\n  for i := 1; i\
    \ < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n \
    \ \n  for i := 0; i < len(lst); i++ {\n    if lst[i] == min {\n      return lst[i+1]\n\
    \    }\n  }\n  \n  return nil", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n   \
    \ for i := 0; i < len(lst); i += 1 {\n        if lst[i] == min {\n           \
    \ return lst[i + 1]\n        }\n    }\n    \n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var minIndex\
    \ = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n            minIndex = i\n        }\n    }\n    \n\
    \    return lst[minIndex + 1]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    var min = lst[0]\n    var min_index = 0\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n            min_index = i\n        }\n    }\n    \n    if len(lst)\
    \ == 1 {\n        return min\n    }\n    \n    if min_index == 0 {\n        return\
    \ lst[1]\n    }\n    \n    return lst[min_index - 1]", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    \n    for i := 0; i < len(lst); i += 1 {\n        if lst[i] == min\
    \ {\n            return lst[i + 1]\n        }\n    }\n    \n    return nil", " \
    \ if len(lst) == 0 {\n    return nil\n  }\n  \n  min := lst[0]\n  for i := 1;\
    \ i < len(lst); i += 1 {\n    if lst[i] < min {\n      min = lst[i]\n    }\n \
    \ }\n  \n  for i := 0; i < len(lst); i += 1 {\n    if lst[i] == min {\n      return\
    \ lst[i + 1]\n    }\n  }\n  \n  return nil", "  if len(lst) == 0 {\n    return\
    \ nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i]\
    \ < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i < len(lst); i++ {\n\
    \    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n  return nil", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    min\
    \ := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i +=\
    \ 1 {\n        if lst[i] == min {\n            return lst[i + 1]\n        }\n\
    \    }\n    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return lst[i+1]\n        }\n\
    \    }\n    return nil", "    var min, min_index, next_index Int\n    for i, v\
    \ := range lst {\n        if i == 0 {\n            min = v\n            min_index\
    \ = i\n            continue\n        }\n        if v < min {\n            min\
    \ = v\n            min_index = i\n        }\n    }\n    if min_index == 0 {\n\
    \        return nil\n    }\n    next_index = min_index - 1\n    for next_index\
    \ >= 0 && lst[next_index] >= lst[min_index] {\n        next_index -= 1\n    }\n\
    \    return lst[next_index + 1]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n  \
    \  }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    for i := 2;\
    \ i < len(lst); i++ {\n        if lst[i] > lst[1] {\n            return lst[i]\n\
    \        }\n    }\n    return lst[1]", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n\
    \    var min_index = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n            min_index = i\n      \
    \  }\n    }\n    \n    if min_index == 0 {\n        return nil\n    }\n    \n\
    \    return lst[min_index]", "    if len(lst) == 0 {\n        return nil\n   \
    \ }\n    \n    var min = lst[0]\n    var min_index = 0\n    \n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \           min_index = i\n        }\n    }\n    \n    if len(lst) == 1 {\n  \
    \      return min\n    }\n    \n    return lst[min_index + 1]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(lst); i += 1 {\n        if lst[i]\
    \ == min {\n            return min\n        }\n    }\n    \n    return nil", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n  \
    \      return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[0]\n\
    \    }\n    if lst[1] > lst[2] {\n        return lst[1]\n    }\n    return lst[2]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    min := lst[0]\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min\
    \ {\n            return lst[i+1]\n        }\n    }\n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(lst); i += 1 {\n        if lst[i]\
    \ == min {\n            return lst[i + 1]\n        }\n    }\n    \n    return\
    \ nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n \
    \   if len(lst) == 1 {\n        return lst[0]\n    }\n    \n    if lst[0] > lst[1]\
    \ {\n        return lst[0]\n    }\n    \n    return lst[1]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  \n  min := lst[0]\n  for i := 1; i\
    \ < len(lst); i += 1 {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n\
    \  \n  for i := 0; i < len(lst); i += 1 {\n    if lst[i] == min {\n      return\
    \ lst[i + 1]\n    }\n  }\n  \n  return nil", "    if len(lst) == 0 {\n       \
    \ return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i\
    \ += 1 {\n        if lst[i] < min {\n            min = lst[i]\n        }\n   \
    \ }\n    \n    for i := 0; i < len(lst); i += 1 {\n        if lst[i] == min {\n\
    \            return min\n        }\n    }\n    \n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    if len(lst) == 1 {\n        return\
    \ lst[0]\n    }\n    \n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n\
    \    \n    return lst[0]", '    ', "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    var min = lst[0]\n\
    \    var min_index = 0\n    for i, v := range lst {\n        if v < min {\n  \
    \          min = v\n            min_index = i\n        }\n    }\n    if len(lst)\
    \ == 1 {\n        return nil\n    }\n    return lst[min_index + 1]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i += 1 {\n        if lst[i] == min {\n  \
    \          return min\n        }\n    }\n    return nil", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  if lst[0] > lst[2] {\n\
    \    return lst[2]\n  }\n  return lst[0]", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[0]\n    }\n    if lst[0]\
    \ < lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n\
    \    var min_index = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n            min_index = i\n      \
    \  }\n    }\n    \n    return lst[min_index + 1]", "    if len(lst) == 0 {\n \
    \       return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n   \
    \ }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    for i := 2; i\
    \ < len(lst); i++ {\n        if lst[i] > lst[1] {\n            lst[1] = lst[i]\n\
    \        }\n    }\n    return lst[1]", "  if len(lst) == 0 {\n    return nil\n\
    \  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n \
    \   return lst[1]\n  }\n  return lst[0]", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return min\n        }\n    }\n    \n    return nil", "  if len(lst) == 0 {\n\
    \    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0]\
    \ > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if len(lst) == 0\
    \ {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n\
    \    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n     \
    \       return lst[i+1]\n        }\n    }\n    \n    return nil", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n\
    \  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n\
    \  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  if lst[0] > lst[2] {\n    return\
    \ lst[2]\n  }\n  return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ min\n        }\n    }\n    \n    return nil", '    ', "  if len(lst) == 0 {\n\
    \    return nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i++ {\n   \
    \ if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i < len(lst);\
    \ i++ {\n    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n  return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            return lst[i+1]\n\
    \        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return min\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n  \
    \  }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n  \
    \  for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n           \
    \ min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i += 1 {\n\
    \        if lst[i] == min {\n            return min\n        }\n    }\n    \n\
    \    return nil", "    var min, min_index, min_index_2 Int\n    var min_index_2_found\
    \ bool\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n     \
    \       min = lst[i]\n            min_index = i\n        }\n    }\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == min {\n            if !min_index_2_found\
    \ {\n                min_index_2 = i\n                min_index_2_found = true\n\
    \            }\n        }\n    }\n    if min_index_2_found {\n        return min_index_2\n\
    \    } else {\n        return nil\n    }", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    if len(lst) == 1 {\n        return lst[0]\n    }\n   \
    \ \n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    \n    return lst[0]",
  "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            return lst[i+1]\n\
    \        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    var min = lst[0]\n    var min_index = 0\n    \n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \            min_index = i\n        }\n    }\n    \n    return lst[min_index +\
    \ 1]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n \
    \   min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return lst[i+1]\n        }\n\
    \    }\n    \n    return nil", "    if len(lst) == 0 {\n        return nil\n \
    \   }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n     \
    \   if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i += 1 {\n        if lst[i] == min {\n            return\
    \ min\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n    \
    \    return nil\n    }\n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ min\n        }\n    }\n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    var min_index = 0\n    var min_value = lst[0]\n    \n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min_value {\n      \
    \      min_value = lst[i]\n            min_index = i\n        }\n    }\n    \n\
    \    if min_index == 0 {\n        return lst[1]\n    } else {\n        return\
    \ lst[min_index - 1]\n    }", "  if len(lst) == 0 {\n    return nil\n  }\n  if\
    \ len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n    return\
    \ lst[1]\n  }\n  if lst[0] > lst[2] {\n    return lst[2]\n  }\n  return lst[0]",
  "    var smallest, second_smallest Int\n    for i := 0; i < len(lst); i++ {\n  \
    \      if lst[i] < smallest {\n            second_smallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < second_smallest {\n     \
    \       second_smallest = lst[i]\n        }\n    }\n    if second_smallest ==\
    \ smallest {\n        return nil\n    } else {\n        return second_smallest\n\
    \    }", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) ==\
    \ 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "  if len(lst) ==\
    \ 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if\
    \ lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var min_index\
    \ = 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      min = lst[i]\n            min_index = i\n        }\n    }\n    \n    if\
    \ len(lst) == 1 {\n        return min\n    }\n    \n    return lst[min_index +\
    \ 1]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n \
    \   min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return lst[i+1]\n        }\n\
    \    }\n    \n    return nil", "    if len(lst) == 0 {\n        return nil\n \
    \   }\n    \n    var min = lst[0]\n    var min_index = 0\n    \n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \           min_index = i\n        }\n    }\n    \n    return lst[min_index +\
    \ 1]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return lst[i + 1]\n        }\n    }\n    return lst[0]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n       \
    \ return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n\
    \    return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n\
    \    var min = lst[0]\n    var min_index = 0\n    \n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n            min_index\
    \ = i\n        }\n    }\n    \n    return lst[min_index + 1]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var min_index\
    \ = 0\n    \n    for i, v := range lst {\n        if v < min {\n            min\
    \ = v\n            min_index = i\n        }\n    }\n    \n    if len(lst) == 1\
    \ {\n        return min\n    }\n    \n    for i, v := range lst {\n        if\
    \ v == min {\n            continue\n        }\n        \n        if v < min {\n\
    \            min = v\n            min_index = i\n        }\n    }\n    \n    return\
    \ min_index", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", '    ', "    if len(lst) == 0 {\n       \
    \ return nil\n    }\n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ min\n        }\n    }\n    return nil", "  if len(lst) == 0 {\n    return nil\n\
    \  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n \
    \   return lst[1]\n  }\n  return lst[0]", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    var min = lst[0]\n    var min_index = 0\n    \n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \            min_index = i\n        }\n    }\n    \n    return lst[min_index +\
    \ 1]", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    var min =\
    \ lst[0]\n    var minIndex = 0\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n            minIndex = i\n       \
    \ }\n    }\n    \n    if minIndex == 0 {\n        return nil\n    }\n    \n  \
    \  return lst[minIndex]", '    ', "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n\
    \    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n     \
    \       return min\n        }\n    }\n    \n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n\
    \  }\n  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    \n    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i += 1 {\n        if lst[i] == min {\n            return min\n \
    \       }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return min\n        }\n    }\n    \n    return min", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n  \
    \  }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return lst[i+1]\n        }\n\
    \    }\n    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    \n    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i += 1 {\n        if lst[i] == min {\n            return lst[i +\
    \ 1]\n        }\n    }\n    \n    return nil", "    var min, min_index, min_index_lst,\
    \ min_index_lst_index Int\n    min_index_lst = Int(0)\n    min_index_lst_index\
    \ = Int(0)\n    min = Int(0)\n    for i := Int(0); i < lst.len(); i++ {\n    \
    \    if lst[i] < min {\n            min = lst[i]\n            min_index = i\n\
    \            min_index_lst = Int(0)\n            min_index_lst_index = Int(0)\n\
    \        } else if lst[i] < min && lst[i] > lst[min_index_lst] {\n           \
    \ min_index_lst = i\n            min_index_lst_index = Int(0)\n        } else\
    \ if lst[i] > lst[min_index_lst] && lst[i] < lst[min_index_lst_index] {\n    \
    \        min_index_lst_index = i\n        }\n    }\n    if min_index_lst_index\
    \ == Int(0) {\n        return nil\n    } else {\n        return min_index_lst\n\
    \    }", '    ', "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", '    ', "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n       \
    \ return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n\
    \    return lst[0]", "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst)\
    \ == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n    return lst[1]\n\
    \  }\n  return lst[0]", "    if len(lst) == 0 {\n        return nil\n    }\n \
    \   \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            return lst[i+1]\n\
    \        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n   \
    \ for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return\
    \ lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n\
    \    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n     \
    \       return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    var min, min_index int\n    for i, v := range\
    \ lst {\n        if i == 0 || v < min {\n            min = v\n            min_index\
    \ = i\n        }\n    }\n    if min_index == len(lst) - 1 {\n        return nil\n\
    \    }\n    return lst[min_index + 1]", "  if len(lst) == 0 {\n    return nil\n\
    \  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n \
    \   return lst[1]\n  }\n  return lst[0]", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n  \
    \  for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "  if len(lst) == 0 {\n    return nil\n \
    \ }\n  \n  min := lst[0]\n  for i := 1; i < len(lst); i++ {\n    if lst[i] < min\
    \ {\n      min = lst[i]\n    }\n  }\n  \n  for i := 0; i < len(lst); i++ {\n \
    \   if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n  \n  return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    min := lst[0]\n    for i\
    \ := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i += 1 {\n        if lst[i] ==\
    \ min {\n            return min\n        }\n    }\n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var min_index\
    \ = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n            min_index = i\n        }\n    }\n    \n\
    \    return lst[min_index + 1]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var min_index\
    \ = 0\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      min = lst[i]\n            min_index = i\n        }\n    }\n    \n    if\
    \ len(lst) == 1 {\n        return min\n    }\n    \n    for i := min_index + 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \           min_index = i\n        }\n    }\n    \n    return min", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  '    ', "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n \
    \   var min = lst[0]\n    var minIndex = 0\n    \n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n            minIndex\
    \ = i\n        }\n    }\n    \n    return minIndex + 1", "    // Write your code\
    \ here\n    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    min,\
    \ max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            return lst[i]\n        }\n    }\n    return\
    \ max", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) ==\
    \ 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return\
    \ lst[1]\n    }\n    for i := 2; i < len(lst); i++ {\n        if lst[i] > lst[0]\
    \ && lst[i] < lst[1] {\n            return lst[i]\n        }\n    }\n    return\
    \ nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return min\n        }\n    }\n    \n    return\
    \ nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return lst[i + 1]\n        }\n    }\n   \
    \ \n    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n\
    \    if len(lst) == 1 {\n        return lst[0]\n    }\n    \n    if lst[0] > lst[1]\
    \ {\n        return lst[1]\n    }\n    \n    return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n  \
    \  for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n           \
    \ min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i += 1 {\n\
    \        if lst[i] == min {\n            return min\n        }\n    }\n    \n\
    \    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n    \n \
    \   min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            return min\n        }\n    }\n\
    \    \n    return nil", "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst)\
    \ == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n    return lst[1]\n\
    \  }\n  if lst[0] > lst[2] {\n    return lst[2]\n  }\n  return lst[0]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return lst[i+1]\n        }\n    }\n    \n    return nil",
  '    ', "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min {\n            return min\n        }\n    }\n    \n    return\
    \ min", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) ==\
    \ 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[0]\n    }\n    return lst[1]", "  if len(lst) ==\
    \ 0 {\n    return nil\n  }\n  \n  var min = lst[0]\n  var min_index = 0\n  \n\
    \  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n\
    \      min_index = i\n    }\n  }\n  \n  return min_index", "    var min, min_index\
    \ Int\n    for i, v := range lst {\n        if i == 0 || v < min {\n         \
    \   min = v\n            min_index = i\n        }\n    }\n    if min_index ==\
    \ len(lst) - 1 {\n        return nil\n    }\n    return lst[min_index + 1]", " \
    \   var min = lst[0]\n    var min_index = 0\n    for i, v := range lst {\n   \
    \     if v < min {\n            min = v\n            min_index = i\n        }\n\
    \    }\n    if len(lst) == 1 {\n        return nil\n    }\n    return lst[min_index\
    \ + 1]", "  if len(lst) == 0 {\n    return nil\n  }\n  \n  min := lst[0]\n  for\
    \ i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n   \
    \ }\n  }\n  \n  for i := 0; i < len(lst); i++ {\n    if lst[i] == min {\n    \
    \  return lst[i+1]\n    }\n  }\n  \n  return nil", "    if len(lst) == 0 {\n \
    \       return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n\
    \    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n     \
    \       return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if len(lst) == 0 {\n        return nil\n    }\n    min := lst[0]\n    for i\
    \ := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i += 1 {\n        if lst[i] ==\
    \ min {\n            return lst[i + 1]\n        }\n    }\n    return nil", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n\
    \    var min_index = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n            min_index = i\n      \
    \  }\n    }\n    \n    if len(lst) == 1 {\n        return min\n    }\n    \n \
    \   return lst[min_index + 1]", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n   \
    \ for i := 0; i < len(lst); i += 1 {\n        if lst[i] == min {\n           \
    \ return min\n        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n\
    \    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n     \
    \       return lst[i+1]\n        }\n    }\n    \n    return nil", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n\
    \  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    var min = lst[0]\n    var minIndex\
    \ = 0\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n            minIndex = i\n        }\n    }\n    \n\
    \    return lst[minIndex + 1]", "  if len(lst) == 0 {\n    return nil\n  }\n \
    \ if len(lst) == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n    return\
    \ lst[1]\n  }\n  return lst[0]", "    var result Int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < lst[result] {\n            result = i\n        }\n\
    \    }\n    return result", "    if len(lst) == 0 {\n        return nil\n    }\n\
    \    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            return lst[i+1]\n\
    \        }\n    }\n    \n    return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n \
    \       if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ return lst[i+1]\n        }\n    }\n    \n    return nil", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    \n    min, max := lst[0], lst[0]\n    for\
    \ _, v := range lst {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    \n    for _,\
    \ v := range lst {\n        if v == min {\n            continue\n        }\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    \n    return max", '    ', "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  if len(lst) == 1 {\n    return lst[0]\n  }\n\
    \  if lst[0] > lst[1] {\n    return lst[1]\n  }\n  return lst[0]", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i++\
    \ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i <\
    \ len(lst); i++ {\n    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n\
    \  return nil", "    // Write your code here\n    if len(lst) == 0 {\n       \
    \ return nil\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n    \
    \    if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return lst[i+1]\n\
    \        }\n    }\n    return nil", "    if len(lst) == 0 {\n        return nil\n\
    \    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    if lst[0] >\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n \
    \       }\n    }\n    \n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            return min\n        }\n    }\n    \n    return min", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n \
    \   for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n          \
    \  min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i += 1\
    \ {\n        if lst[i] == min {\n            return lst[i + 1]\n        }\n  \
    \  }\n    \n    return nil", "    if len(lst) == 0 {\n        return nil\n   \
    \ }\n    \n    min := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            min = lst[i]\n        }\n    }\n    \n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            return min\n\
    \        }\n    }\n    \n    return min", "    // Write your code here\n    return\
    \ nil", "    if len(lst) == 0 {\n        return nil\n    }\n    if len(lst) ==\
    \ 1 {\n        return lst[0]\n    }\n    if lst[0] > lst[1] {\n        return\
    \ lst[1]\n    }\n    return lst[0]", '    ', "  if len(lst) == 0 {\n    return\
    \ nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i += 1 {\n    if lst[i]\
    \ < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i < len(lst); i += 1\
    \ {\n    if lst[i] == min {\n      return lst[i+1]\n    }\n  }\n  return nil",
  '    ', "    if len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n\
    \    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n         \
    \   min = lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i += 1\
    \ {\n        if lst[i] == min {\n            return lst[i+1]\n        }\n    }\n\
    \    \n    return nil", "    if len(lst) == 0 {\n        return nil\n    }\n \
    \   \n    var min_index = 0\n    var min_value = lst[0]\n    \n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] < min_value {\n            min_value\
    \ = lst[i]\n            min_index = i\n        }\n    }\n    \n    if min_index\
    \ == 0 {\n        return nil\n    }\n    \n    return lst[min_index]", "    if\
    \ len(lst) == 0 {\n        return nil\n    }\n    \n    min := lst[0]\n    for\
    \ i := 1; i < len(lst); i += 1 {\n        if lst[i] < min {\n            min =\
    \ lst[i]\n        }\n    }\n    \n    for i := 0; i < len(lst); i += 1 {\n   \
    \     if lst[i] == min {\n            return lst[i + 1]\n        }\n    }\n  \
    \  \n    return nil", "  if len(lst) == 0 {\n    return nil\n  }\n  if len(lst)\
    \ == 1 {\n    return lst[0]\n  }\n  if lst[0] > lst[1] {\n    return lst[1]\n\
    \  }\n  if lst[0] < lst[1] {\n    return lst[0]\n  }\n  if lst[1] > lst[2] {\n\
    \    return lst[2]\n  }\n  if lst[1] < lst[2] {\n    return lst[1]\n  }\n  if\
    \ lst[2] > lst[3] {\n    return lst[3]\n  }\n  if lst[2] < lst[3] {\n    return\
    \ lst[2]\n  }\n  if lst[3] > lst[4] {\n    return lst[4]\n  }\n  if lst[3] < lst[4]\
    \ {\n    return lst[3]\n  }\n  if lst[4] > lst[5] {\n    return lst[5]\n  }\n\
    \  if lst[4] < lst[5] {\n    return lst[4]\n  }\n  if lst[5] > lst[6] {\n    return\
    \ lst[6]\n  }\n  if lst[5] < lst[6] {\n    return lst[5]\n  }\n  if lst[6] > lst[7]\
    \ {\n    return lst[7]\n  }\n  if lst[6] < lst[7] {\n    return lst[6]\n  }\n\
    \  if lst[7] > lst[8] {\n    return lst[8]\n  }\n  if lst[7] < lst[8] {\n    return\
    \ lst[7]\n  }\n  if lst[8] > lst[9] {\n    return lst[9]\n  }\n  if lst[8] < lst[9]\
    \ {\n    return lst[8]\n  }\n  if lst", "    // Write your code here\n    return\
    \ nil", "  if len(lst) == 0 {\n    return nil\n  }\n  min := lst[0]\n  for i :=\
    \ 1; i < len(lst); i += 1 {\n    if lst[i] < min {\n      min = lst[i]\n    }\n\
    \  }\n  for i := 0; i < len(lst); i += 1 {\n    if lst[i] == min {\n      return\
    \ lst[i+1]\n    }\n  }\n  return nil", "    if len(lst) == 0 {\n        return\
    \ nil\n    }\n    \n    var min = lst[0]\n    var minIndex = 0\n    \n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \            minIndex = i\n        }\n    }\n    \n    return lst[minIndex + 1]",
  "  if len(lst) == 0 {\n    return nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst);\
    \ i++ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i := 0;\
    \ i < len(lst); i++ {\n    if lst[i] == min {\n      return lst[i+1]\n    }\n\
    \  }\n  return nil", "  if len(lst) == 0 {\n    return nil\n  }\n  min := lst[0]\n\
    \  for i := 1; i < len(lst); i++ {\n    if lst[i] < min {\n      min = lst[i]\n\
    \    }\n  }\n  for i := 0; i < len(lst); i++ {\n    if lst[i] == min {\n     \
    \ return lst[i + 1]\n    }\n  }\n  return nil", "    if len(lst) == 0 {\n    \
    \    return nil\n    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n\
    \    if lst[0] > lst[1] {\n        return lst[1]\n    }\n    return lst[0]", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    min := lst[0]\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min\
    \ {\n            return lst[i+1]\n        }\n    }\n    return nil", "  if len(lst)\
    \ == 0 {\n    return nil\n  }\n  min := lst[0]\n  for i := 1; i < len(lst); i++\
    \ {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i := 0; i <\
    \ len(lst); i++ {\n    if lst[i] == min {\n      return min\n    }\n  }\n  return\
    \ nil"]
stop_tokens:
- "\n}"
