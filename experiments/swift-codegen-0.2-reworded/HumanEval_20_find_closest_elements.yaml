name: HumanEval_20_find_closest_elements
language: swift
prompt: "\n/// From a supplied array of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
  \ [Double]) -> (Double, Double) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
completions: ["\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor\
    \ _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor index, number := range\
    \ numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\
    \tif number == max_number {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar closest_number = min_number\n\tvar closest_index = 0\n\tfor i,\
    \ number := range numbers {\n\t\tif number < closest_number {\n\t\t\tclosest_number\
    \ = number\n\t\t\tclosest_index = i\n\t\t}\n\t}\n\treturn (closest_number, numbers[closest_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ number in numbers {\n        if number < min_number {\n            min_number\
    \ = number\n            min_index = index\n        }\n        if number > max_number\
    \ {\n            max_number = number\n            max_index = index\n        }\n\
    \    }\n    return (min_number, max_number)", "\tvar min_number = numbers[0]\n\
    \tvar max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index\
    \ = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number {\n\t\t\
    \tmin_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\
    \t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_value :=\
    \ numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif\
    \ numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers {\n\t\t\
    if number < min_number {\n\t\t\tmin_number = number\n\t\t\tmin_index = i\n\t\t\
    }\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t\tmax_index =\
    \ i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\t// TODO:\
    \ Implement this function\n\treturn (0.0, 0.0)", "    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n  \
    \      if numbers[i] < min_number {\n            min_number = numbers[i]\n   \
    \     }\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \        }\n    }\n    return (min_number, max_number)", "    var min_value =\
    \ numbers[0]\n    var max_value = numbers[0]\n    for _, value := range numbers\
    \ {\n        if value < min_value {\n            min_value = value\n        }\n\
    \        if value > max_value {\n            max_value = value\n        }\n  \
    \  }\n    var closest_value = min_value\n    var closest_index = 0\n    for i,\
    \ value := range numbers {\n        if value < closest_value {\n            closest_value\
    \ = value\n            closest_index = i\n        }\n    }\n    return (closest_value,\
    \ numbers[closest_index])", "\tvar min_number = numbers[0]\n\tvar max_number =\
    \ numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number {\n\
    \t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t\
    \tbreak\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tif number == max_number\
    \ {\n\t\t\tmax_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    var min_index = 0\n\
    \    var max_index = 0\n    for i, number := range numbers {\n        if number\
    \ == min_number {\n            min_index = i\n        }\n        if number ==\
    \ max_number {\n            max_index = i\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] <\
    \ min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tmin_number := numbers[0]\n\tmin_index := 0\n\t\
    for i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_number {\n\t\t\t\
    min_number = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\
    \tmax_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_number\
    \ {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn\
    \ (numbers[min_index], numbers[max_index])", "    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for _, number in numbers {\n        if number\
    \ < min_number {\n            min_number = number\n        }\n        if number\
    \ > max_number {\n            max_number = number\n        }\n    }\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i, number in numbers {\n        if number\
    \ < min_number {\n            min_number = number\n            min_index = i\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \            max_index = i\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tmax_value\
    \ := numbers[0]\n\tmax_index := 0\n\tfor i, v := range numbers {\n\t\tif v < min_value\
    \ {\n\t\t\tmin_value = v\n\t\t\tmin_index = i\n\t\t}\n\t\tif v > max_value {\n\
    \t\t\tmax_value = v\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index],\
    \ numbers[max_index]", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i in numbers {\n        if i < min_number {\n          \
    \  min_number = i\n        }\n        if i > max_number {\n            max_number\
    \ = i\n        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for\
    \ i in range(len(numbers)) {\n        if numbers[i] == min_number {\n        \
    \    min_index = i\n        }\n        if numbers[i] == max_number {\n       \
    \     max_index = i\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        if numbers[i] < min_number {\n         \
    \   min_number = numbers[i]\n        }\n        if numbers[i] > max_number {\n\
    \            max_number = numbers[i]\n        }\n    }\n    return (min_number,\
    \ max_number)", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\
    \t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\t\
    max_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var min_index = 0\n  \
    \  var max_index = 0\n    for index, number in numbers {\n        if number ==\
    \ min_number {\n            min_index = index\n        }\n        if number ==\
    \ max_number {\n            max_index = index\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var min_index = 0\n  \
    \  var max_index = 0\n    for index, number in numbers {\n        if number ==\
    \ min_number {\n            min_index = index\n        }\n        if number ==\
    \ max_number {\n            max_index = index\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers\
    \ {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number\
    \ == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] <\
    \ min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tmin_value := numbers[0]\n\tmin_index := 0\n\t\
    for i, v := range numbers {\n\t\tif v < min_value {\n\t\t\tmin_value = v\n\t\t\
    \tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor\
    \ i, v := range numbers {\n\t\tif v > max_value {\n\t\t\tmax_value = v\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", " \
    \   var min_value = numbers[0]\n    var max_value = numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min_value {\n            min_value =\
    \ value\n        }\n        if value > max_value {\n            max_value = value\n\
    \        }\n    }\n    for _, value := range numbers {\n        if value == min_value\
    \ {\n            return (value, max_value)\n        }\n        if value == max_value\
    \ {\n            return (min_value, value)\n        }\n    }\n    return (min_value,\
    \ max_value)", "    var min_number = numbers[0]\n    var max_number = numbers[0]\n\
    \    for _, number in numbers {\n        if number < min_number {\n          \
    \  min_number = number\n        }\n        if number > max_number {\n        \
    \    max_number = number\n        }\n    }\n    return (min_number, max_number)",
  "\tvar min_value = numbers[0]\n\tvar max_value = numbers[0]\n\tfor _, value := range\
    \ numbers {\n\t\tif value < min_value {\n\t\t\tmin_value = value\n\t\t}\n\t\t\
    if value > max_value {\n\t\t\tmax_value = value\n\t\t}\n\t}\n\tfor _, value :=\
    \ range numbers {\n\t\tif value == min_value {\n\t\t\treturn value, max_value\n\
    \t\t}\n\t}\n\treturn min_value, max_value", "\t// TODO: Implement this function\n\
    \treturn (0.0, 0.0)", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar closest_pair = (min_number, max_number)\n\tfor _, number := range\
    \ numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\
    \tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\treturn closest_pair",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number: Double = numbers[0]\n    var max_number:\
    \ Double = numbers[0]\n    for i in range(1, len(numbers)) {\n        if numbers[i]\
    \ < min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t\
    }\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers\
    \ {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number\
    \ == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index],\
    \ numbers[max_index]", "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_number\
    \ {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn\
    \ (numbers[min_index], numbers[max_index])", "\tvar min_number = numbers[0]\n\t\
    var max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index\
    \ = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number {\n\t\t\
    \tmin_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\
    \t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for _, number in numbers\
    \ {\n        if number < min_number {\n            min_number = number\n     \
    \   }\n        if number > max_number {\n            max_number = number\n   \
    \     }\n    }\n    return (min_number, max_number)", "\tvar min_number = numbers[0]\n\
    \tvar max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tfor _, number := range numbers {\n\
    \t\tif number == min_number {\n\t\t\tcontinue\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tcontinue\n\t\t}\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\t\
    return (min_number, max_number)", "\tmin_value := numbers[0]\n\tmin_index := 0\n\
    \tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\
    \t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_index := 0\n\tmax_value := numbers[0]\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var closest_number = min_number\n\
    \    var closest_number_index = 0\n    for i, number in numbers {\n        if\
    \ number < closest_number {\n            closest_number = number\n           \
    \ closest_number_index = i\n        }\n    }\n    return (closest_number, numbers[closest_number_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ number in numbers {\n        if number == min_number {\n            min_index\
    \ = index\n        }\n        if number == max_number {\n            max_index\
    \ = index\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        if numbers[i] < min_number {\n         \
    \   min_number = numbers[i]\n        }\n        if numbers[i] > max_number {\n\
    \            max_number = numbers[i]\n        }\n    }\n    return (min_number,\
    \ max_number)", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\
    \t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\t\
    max_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == min_number {\n            return (number, max_number)\n\
    \        }\n        if number == max_number {\n            return (min_number,\
    \ number)\n        }\n    }\n    return (min_number, max_number)", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tfor _, number := range\
    \ numbers {\n\t\tif number == min_number {\n\t\t\tcontinue\n\t\t}\n\t\tif number\
    \ == max_number {\n\t\t\tcontinue\n\t\t}\n\t\tif number < min_number {\n\t\t\t\
    min_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\
    \t\t}\n\t}\n\treturn (min_number, max_number)", "    var min_value = numbers[0]\n\
    \    var max_value = numbers[0]\n    for _, value := range numbers {\n       \
    \ if value < min_value {\n            min_value = value\n        }\n        if\
    \ value > max_value {\n            max_value = value\n        }\n    }\n    var\
    \ min_index = 0\n    var max_index = 0\n    for i, value := range numbers {\n\
    \        if value == min_value {\n            min_index = i\n        }\n     \
    \   if value == max_value {\n            max_index = i\n        }\n    }\n   \
    \ return (numbers[min_index], numbers[max_index])", "\tvar min_number = numbers[0]\n\
    \tvar max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tfor _, number := range numbers {\n\
    \t\tif number == min_number {\n\t\t\tcontinue\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tcontinue\n\t\t}\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\t\
    return (min_number, max_number)", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t\tmin_index = i\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_value: Double = numbers[0]\n\tvar max_value:\
    \ Double = numbers[0]\n\tfor _, value := range numbers {\n\t\tif value < min_value\
    \ {\n\t\t\tmin_value = value\n\t\t}\n\t\tif value > max_value {\n\t\t\tmax_value\
    \ = value\n\t\t}\n\t}\n\tfor _, value := range numbers {\n\t\tif value < min_value\
    \ {\n\t\t\tmin_value = value\n\t\t}\n\t\tif value > max_value {\n\t\t\tmax_value\
    \ = value\n\t\t}\n\t}\n\treturn (min_value, max_value)", "\tvar min_number = numbers[0]\n\
    \tvar max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tfor _, number := range numbers {\n\
    \t\tif number == min_number {\n\t\t\tcontinue\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tcontinue\n\t\t}\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\t\
    return (min_number, max_number)", "\tmin_index := 0\n\tmin_value := numbers[0]\n\
    \tmax_index := 0\n\tmax_value := numbers[0]\n\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\t\
    min_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\t\
    min_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i,\
    \ value := range numbers {\n\t\tif value < min_value {\n\t\t\tmin_value = value\n\
    \t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\
    \tfor i, value := range numbers {\n\t\tif value > max_value {\n\t\t\tmax_value\
    \ = value\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    var min_index = 0\n    var max_index = 0\n \
    \   for i, number := range numbers {\n        if number == min_number {\n    \
    \        min_index = i\n        }\n        if number == max_number {\n       \
    \     max_index = i\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "\tmin_val := numbers[0]\n\tmin_index := 0\n\tmax_val := numbers[0]\n\tmax_index\
    \ := 0\n\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_val {\n\
    \t\t\tmin_val = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_val\
    \ {\n\t\t\tmax_val = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index\
    \ := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_value\
    \ := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    var min_index = 0\n    var max_index = 0\n \
    \   for index, number := range numbers {\n        if number == min_number {\n\
    \            min_index = index\n        }\n        if number == max_number {\n\
    \            max_index = index\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "    var min_value = numbers[0]\n    var max_value = numbers[0]\n\
    \    for _, value := range numbers {\n        if value < min_value {\n       \
    \     min_value = value\n        }\n        if value > max_value {\n         \
    \   max_value = value\n        }\n    }\n    var closest_pair = (min_value, max_value)\n\
    \    for _, value := range numbers {\n        if value < closest_pair[0] {\n \
    \           closest_pair = (value, closest_pair[1])\n        } else if value >\
    \ closest_pair[1] {\n            closest_pair = (closest_pair[0], value)\n   \
    \     }\n    }\n    return closest_pair", "\tvar min_number = numbers[0]\n\tvar\
    \ max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number <\
    \ min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\
    \t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index =\
    \ 0\n\tfor i, number := range numbers {\n\t\tif number == min_number {\n\t\t\t\
    min_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\t\
    }\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tvar min_value =\
    \ numbers[0]\n\tvar max_value = numbers[0]\n\tfor _, value := range numbers {\n\
    \t\tif value < min_value {\n\t\t\tmin_value = value\n\t\t}\n\t\tif value > max_value\
    \ {\n\t\t\tmax_value = value\n\t\t}\n\t}\n\tvar closest_pair = (min_value, max_value)\n\
    \tfor _, value := range numbers {\n\t\tif value < closest_pair[0] {\n\t\t\tclosest_pair\
    \ = (value, closest_pair[1])\n\t\t}\n\t\tif value > closest_pair[1] {\n\t\t\t\
    closest_pair = (closest_pair[0], value)\n\t\t}\n\t}\n\treturn closest_pair", " \
    \   // TODO: Implement this function\n    return (0.0, 0.0)", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar closest_number\
    \ = min_number\n\tvar closest_index = 0\n\tfor i, number := range numbers {\n\t\
    \tif number < closest_number {\n\t\t\tclosest_number = number\n\t\t\tclosest_index\
    \ = i\n\t\t}\n\t}\n\treturn closest_number, numbers[closest_index]", "    var\
    \ min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    return (min_number, max_number)", "\tmin_index := 0\n\t\
    min_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i]\
    \ < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\
    }\n\treturn numbers[min_index], numbers[(min_index + 1) % len(numbers)]", "\t\
    var min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers {\n\t\t\
    if number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for i in\
    \ numbers {\n        if i < min_number {\n            min_number = i\n       \
    \ }\n        if i > max_number {\n            max_number = i\n        }\n    }\n\
    \    var min_index = 0\n    var max_index = 0\n    for i in range(len(numbers))\
    \ {\n        if numbers[i] == min_number {\n            min_index = i\n      \
    \  }\n        if numbers[i] == max_number {\n            max_index = i\n     \
    \   }\n    }\n    return (numbers[min_index], numbers[max_index])", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\
    \tvar max_index = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number\
    \ {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_index\
    \ := 0\n\tmin_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\treturn numbers[min_index], numbers[(min_index + 1) % len(numbers)]",
  "\tvar min_value = numbers[0]\n\tvar max_value = numbers[0]\n\tfor _, value := range\
    \ numbers {\n\t\tif value < min_value {\n\t\t\tmin_value = value\n\t\t}\n\t\t\
    if value > max_value {\n\t\t\tmax_value = value\n\t\t}\n\t}\n\tfor _, value :=\
    \ range numbers {\n\t\tif value < min_value {\n\t\t\tmin_value = value\n\t\t}\n\
    \t\tif value > max_value {\n\t\t\tmax_value = value\n\t\t}\n\t}\n\treturn (min_value,\
    \ max_value)", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tfor _, number := range numbers {\n\t\tif number == min_number {\n\t\
    \t\treturn (number, max_number)\n\t\t}\n\t\tif number == max_number {\n\t\t\t\
    return (min_number, number)\n\t\t}\n\t}\n\treturn (min_number, max_number)", " \
    \   var min_value = numbers[0]\n    var max_value = numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min_value {\n            min_value =\
    \ value\n        }\n        if value > max_value {\n            max_value = value\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ value := range numbers {\n        if value == min_value {\n            min_index\
    \ = index\n        }\n        if value == max_value {\n            max_index =\
    \ index\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ number in numbers {\n        if number == min_number {\n            min_index\
    \ = index\n        }\n        if number == max_number {\n            max_index\
    \ = index\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min_value {\n            min_value =\
    \ value\n        }\n        if value > max_value {\n            max_value = value\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, value\
    \ := range numbers {\n        if value == min_value {\n            min_index =\
    \ i\n        }\n        if value == max_value {\n            max_index = i\n \
    \       }\n    }\n    return (numbers[min_index], numbers[max_index])", "    var\
    \ min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    return (min_number, max_number)", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for _, number in numbers\
    \ {\n        if number < min_number {\n            min_number = number\n     \
    \   }\n        if number > max_number {\n            max_number = number\n   \
    \     }\n    }\n    return (min_number, max_number)", "\t// TODO: Implement this\
    \ function\n\treturn (0.0, 0.0)", "    var min_number = numbers[0]\n    var max_number\
    \ = numbers[0]\n    for _, number in numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    var min_index = 0\n\
    \    var max_index = 0\n    for index, number in numbers {\n        if number\
    \ == min_number {\n            min_index = index\n        }\n        if number\
    \ == max_number {\n            max_index = index\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])", "\tmin_index := 0\n\tmin_value :=\
    \ numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\t\
    min_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers\
    \ {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number\
    \ == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar closest_number = min_number\n\tvar closest_index = 0\n\tfor i,\
    \ number := range numbers {\n\t\tif number < closest_number {\n\t\t\tclosest_number\
    \ = number\n\t\t\tclosest_index = i\n\t\t}\n\t}\n\treturn (closest_number, numbers[closest_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\t\
    min_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var min_index = 0\n  \
    \  var max_index = 0\n    for i, number in numbers {\n        if number == min_number\
    \ {\n            min_index = i\n        }\n        if number == max_number {\n\
    \            max_index = i\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "    let min_value = numbers[0]\n    let max_value = numbers[0]\n\
    \    for _, number in numbers {\n        if number < min_value {\n           \
    \ min_value = number\n        }\n        if number > max_value {\n           \
    \ max_value = number\n        }\n    }\n    let min_index = 0\n    let max_index\
    \ = 0\n    for i, number in numbers {\n        if number == min_value {\n    \
    \        min_index = i\n        }\n        if number == max_value {\n        \
    \    max_index = i\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i in range(1,\
    \ len(numbers)) {\n        if numbers[i] < min_value {\n            min_value\
    \ = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value\
    \ = numbers[i]\n        }\n    }\n    return (min_value, max_value)", "    //\
    \ TODO: Implement this function\n    var min_number = numbers[0]\n    var max_number\
    \ = numbers[0]\n    for _, number in numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    return (min_number,\
    \ max_number)", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\
    \t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\t\
    max_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var min_index = 0\n  \
    \  var max_index = 0\n    for index, number in numbers {\n        if number ==\
    \ min_number {\n            min_index = index\n        }\n        if number ==\
    \ max_number {\n            max_index = index\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    return (min_number, max_number)",
  "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min_value {\n            min_value =\
    \ value\n        }\n        if value > max_value {\n            max_value = value\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ value := range numbers {\n        if value == min_value {\n            min_index\
    \ = index\n        }\n        if value == max_value {\n            max_index =\
    \ index\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers {\n\t\t\
    if number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ closest_number = min_number\n\tvar closest_number_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number < closest_number {\n\t\t\tclosest_number =\
    \ number\n\t\t\tclosest_number_index = i\n\t\t}\n\t}\n\treturn closest_number,\
    \ numbers[closest_number_index]", "\tmin_index := 0\n\tmin_value := numbers[0]\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\t\
    min_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_index := 0\n\t\
    max_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i]\
    \ > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t\
    }\n\treturn (numbers[min_index], numbers[max_index])", "    var min_number: Double\
    \ = numbers[0]\n    var max_number: Double = numbers[0]\n    for i in numbers\
    \ {\n        if i < min_number {\n            min_number = i\n        }\n    \
    \    if i > max_number {\n            max_number = i\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t\
    }\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_value = numbers[0]\n\tvar max_value = numbers[0]\n\
    \tfor _, value := range numbers {\n\t\tif value < min_value {\n\t\t\tmin_value\
    \ = value\n\t\t}\n\t\tif value > max_value {\n\t\t\tmax_value = value\n\t\t}\n\
    \t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, value := range numbers\
    \ {\n\t\tif value == min_value {\n\t\t\tmin_index = i\n\t\t}\n\t\tif value ==\
    \ max_value {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[(min_index + 1) % len(numbers)]",
  "\tvar min_value = numbers[0]\n\tvar max_value = numbers[0]\n\tfor _, value := range\
    \ numbers {\n\t\tif value < min_value {\n\t\t\tmin_value = value\n\t\t}\n\t\t\
    if value > max_value {\n\t\t\tmax_value = value\n\t\t}\n\t}\n\tvar min_index =\
    \ 0\n\tvar max_index = 0\n\tfor i, value := range numbers {\n\t\tif value == min_value\
    \ {\n\t\t\tmin_index = i\n\t\t}\n\t\tif value == max_value {\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "    var\
    \ min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \            min_index = i\n        }\n        if number > max_number {\n    \
    \        max_number = number\n            max_index = i\n        }\n    }\n  \
    \  return (numbers[min_index], numbers[max_index])", "    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for _, number in numbers {\n        if number\
    \ < min_number {\n            min_number = number\n        }\n        if number\
    \ > max_number {\n            max_number = number\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t\tmin_index = i\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tvar min_diff = math.MaxFloat64\n\tvar min_index = 0\n\tvar max_index = 0\n\t\
    for i := 0; i < len(numbers); i++ {\n\t\tdiff := math.Abs(numbers[i] - numbers[0])\n\
    \t\tif diff < min_diff {\n\t\t\tmin_diff = diff\n\t\t\tmin_index = i\n\t\t}\n\t\
    \tdiff = math.Abs(numbers[i] - numbers[len(numbers)-1])\n\t\tif diff < min_diff\
    \ {\n\t\t\tmin_diff = diff\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn numbers[min_index],\
    \ numbers[max_index]", "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_number\
    \ {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn\
    \ (numbers[min_index], numbers[max_index])", "\tmin_val := numbers[0]\n\tmin_index\
    \ := 0\n\tmax_val := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] < min_val {\n\t\t\tmin_val = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t\tif numbers[i] > max_val {\n\t\t\tmax_val = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i, num := range numbers {\n\
    \t\tif num < min_number {\n\t\t\tmin_number = num\n\t\t\tmin_index = i\n\t\t}\n\
    \t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i, num := range numbers\
    \ {\n\t\tif num > max_number {\n\t\t\tmax_number = num\n\t\t\tmax_index = i\n\t\
    \t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\
    \tvar max_index = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number\
    \ {\n\t\t\tmin_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\tfor i, number := range numbers\
    \ {\n\t\tif number == max_number {\n\t\t\tmax_index = i\n\t\t\tbreak\n\t\t}\n\t\
    }\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_number := numbers[0]\n\
    \tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_number\
    \ {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number\
    \ := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] > max_number {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index =\
    \ i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "    // Write\
    \ your code here\n    return (numbers[0], numbers[1])", "\tmin_number := numbers[0]\n\
    \tmin_index := 0\n\tmax_number := numbers[0]\n\tmax_index := 0\n\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_number {\n\
    \t\t\tmax_number = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] <\
    \ min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor index,\
    \ number := range numbers {\n\t\tif number == min_number {\n\t\t\tmin_index =\
    \ index\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index = index\n\t\t}\n\
    \t}\n\treturn numbers[min_index], numbers[max_index]", "\tvar min_value = numbers[0]\n\
    \tvar max_value = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_value {\n\t\t\tmin_value = number\n\t\t}\n\t\tif number > max_value {\n\
    \t\t\tmax_value = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\
    \tfor i, number := range numbers {\n\t\tif number == min_value {\n\t\t\tmin_index\
    \ = i\n\t\t\tbreak\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tif number\
    \ == max_value {\n\t\t\tmax_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] <\
    \ min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "    var min_number = numbers[0]\n    var max_number\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    return (min_number,\
    \ max_number)", "    // Write your code here\n    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for _, number in numbers {\n        if number\
    \ < min_number {\n            min_number = number\n        }\n        if number\
    \ > max_number {\n            max_number = number\n        }\n    }\n    return\
    \ (min_number, max_number)", "    var min_number = numbers[0]\n    var max_number\
    \ = numbers[0]\n    for _, number in numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    return (min_number,\
    \ max_number)", "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index := 0\n\
    \tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i]\
    \ < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\t\
    if numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\
    \t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for _, number in numbers\
    \ {\n        if number < min_number {\n            min_number = number\n     \
    \   }\n        if number > max_number {\n            max_number = number\n   \
    \     }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \            min_index = index\n        }\n        if number > max_number {\n\
    \            max_number = number\n            max_index = index\n        }\n \
    \   }\n    return (min_number, max_number)", "\tvar min_number = numbers[0]\n\t\
    var max_number = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number\
    \ < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number\
    \ {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index\
    \ = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number {\n\t\t\
    \tmin_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\
    \t\tif number == max_number {\n\t\t\tmax_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\t\
    return (numbers[min_index], numbers[max_index])", "\tmin_value := numbers[0]\n\
    \tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value\
    \ {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value\
    \ := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\
    \t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i += 1 {\n        if numbers[i] < min_number {\n            min_number = numbers[i]\n\
    \        }\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \        }\n    }\n    return (min_number, max_number)", "    // Write your code\
    \ here\n    return (numbers[0], numbers[1])", "\tmin_value := numbers[0]\n\tmin_index\
    \ := 0\n\tmax_value := numbers[0]\n\tmax_index := 0\n\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\t\
    min_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\n\treturn (numbers[min_index], numbers[max_index])",
  "\tvar min_diff = math.MaxFloat64\n\tvar min_index = 0\n\tvar max_index = 0\n\t\
    for i := 0; i < len(numbers); i++ {\n\t\tfor j := 0; j < len(numbers); j++ {\n\
    \t\t\tif i == j {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdiff := numbers[i] - numbers[j]\n\
    \t\t\tif diff < 0 {\n\t\t\t\tdiff = -diff\n\t\t\t}\n\t\t\tif diff < min_diff {\n\
    \t\t\t\tmin_diff = diff\n\t\t\t\tmin_index = i\n\t\t\t\tmax_index = j\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i += 1 {\n        if numbers[i] < min_number {\n            min_number = numbers[i]\n\
    \        }\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \        }\n    }\n    return (min_number, max_number)", "\tmin_index := 0\n\t\
    min_value := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\
    \t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor index, number := range\
    \ numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\
    \tif number == max_number {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] <\
    \ min_number {\n            min_number = numbers[i]\n        }\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i]\n        }\n    }\n    return\
    \ (min_number, max_number)", "\tmin_number := numbers[0]\n\tmin_index := 0\n\t\
    for i, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index\
    \ := 0\n\tfor i, number := range numbers {\n\t\tif number > max_number {\n\t\t\
    \tmax_number = number\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\t// TODO: Implement find_closest_elements\n\treturn",
  "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers {\n\t\t\
    if number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    return (min_number, max_number)", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\
    \tvar max_index = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number\
    \ {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", "\tmin_number\
    \ := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index =\
    \ i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ number in numbers {\n        if number == min_number {\n            min_index\
    \ = index\n        }\n        if number == max_number {\n            max_index\
    \ = index\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        if numbers[i] < min_number {\n         \
    \   min_number = numbers[i]\n        }\n        if numbers[i] > max_number {\n\
    \            max_number = numbers[i]\n        }\n    }\n    return (min_number,\
    \ max_number)", "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number =\
    \ numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_number\
    \ {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn\
    \ (numbers[min_index], numbers[max_index])", "    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < min_number {\n            min_number = number\n        }\n   \
    \     if number > max_number {\n            max_number = number\n        }\n \
    \   }\n    var min_index = 0\n    var max_index = 0\n    for i, number := range\
    \ numbers {\n        if number == min_number {\n            min_index = i\n  \
    \      }\n        if number == max_number {\n            max_index = i\n     \
    \   }\n    }\n    return (numbers[min_index], numbers[max_index])", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min_number {\n            min_number = number\n     \
    \   }\n        if number > max_number {\n            max_number = number\n   \
    \     }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, number\
    \ := range numbers {\n        if number == min_number {\n            min_index\
    \ = i\n        }\n        if number == max_number {\n            max_index = i\n\
    \        }\n    }\n    return (numbers[min_index], numbers[max_index])", "\tvar\
    \ min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range\
    \ numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\
    \tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index\
    \ = 0\n\tvar max_index = 0\n\tfor index, number := range numbers {\n\t\tif number\
    \ == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\tif number == max_number\
    \ {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    var min_index = 0\n    var max_index = 0\n \
    \   for i, number := range numbers {\n        if number == min_number {\n    \
    \        min_index = i\n        }\n        if number == max_number {\n       \
    \     max_index = i\n        }\n    }\n    return (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[(min_index + 1) % len(numbers)]",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \            min_index = i\n        }\n        if number > max_number {\n    \
    \        max_number = number\n            max_index = i\n        }\n    }\n  \
    \  return (min_number, max_number)", "    var min_number = numbers[0]\n    var\
    \ max_number = numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min_number {\n            min_number = number\n        }\n        if number\
    \ > max_number {\n            max_number = number\n        }\n    }\n    var min_index\
    \ = 0\n    var max_index = 0\n    for index, number := range numbers {\n     \
    \   if number == min_number {\n            min_index = index\n        }\n    \
    \    if number == max_number {\n            max_index = index\n        }\n   \
    \ }\n    return (numbers[min_index], numbers[max_index])", "    var min_number\
    \ = numbers[0]\n    var max_number = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < min_number {\n            min_number = numbers[i]\n\
    \        }\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \        }\n    }\n    return (min_number, max_number)", "\tmin_value := numbers[0]\n\
    \tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value\
    \ {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\treturn numbers[min_index],\
    \ numbers[(min_index + 1) % len(numbers)]", "\tmin_value := numbers[0]\n\tmin_index\
    \ := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\
    \t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value :=\
    \ numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif\
    \ numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\
    \t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_value :=\
    \ numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif\
    \ numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\t\
    min_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i\
    \ := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value\
    \ = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\t\
    max_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number := range numbers\
    \ {\n\t\tif number == min_number {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number\
    \ == max_number {\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index\
    \ := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tmin_index\
    \ := 0\n\tmin_value := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\
    \tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\t\
    min_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value\
    \ {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor index, number := range\
    \ numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\
    \tif number == max_number {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\
    \tfor _, number := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number\
    \ = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\
    \t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor index, number := range\
    \ numbers {\n\t\tif number == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\
    \tif number == max_number {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\t// TODO: Implement this function\n\tnumbers.sort()\n\
    \treturn numbers[0], numbers[1]", "\tvar min_number = numbers[0]\n\tvar max_number\
    \ = numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_number\
    \ {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number\
    \ = number\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\tfor i, number\
    \ := range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\
    \t\t\tmin_index = i\n\t\t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min_value {\n            min_value =\
    \ value\n        }\n        if value > max_value {\n            max_value = value\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, value\
    \ := range numbers {\n        if value == min_value {\n            min_index =\
    \ i\n        }\n        if value == max_value {\n            max_index = i\n \
    \       }\n    }\n    return (numbers[min_index], numbers[max_index])", "    var\
    \ min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var closest_number = min_number\n    var closest_index\
    \ = 0\n    for i, number in numbers {\n        if number < closest_number {\n\
    \            closest_number = number\n            closest_index = i\n        }\n\
    \    }\n    return (closest_number, numbers[closest_index])", "\t// TODO: Implement\
    \ this function\n\treturn (0.0, 0.0)", "\tvar min_value = numbers[0]\n\tvar max_value\
    \ = numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value\
    \ {\n\t\t\tmin_value = numbers[i]\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\
    \tmax_value = numbers[i]\n\t\t}\n\t}\n\tvar min_index = 0\n\tvar max_index = 0\n\
    \tfor i := 0; i < len(numbers); i++ {\n\t\tif numbers[i] == min_value {\n\t\t\t\
    min_index = i\n\t\t\tbreak\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\
    \t\tif numbers[i] == max_value {\n\t\t\tmax_index = i\n\t\t\tbreak\n\t\t}\n\t\
    }\n\treturn (numbers[min_index], numbers[max_index])", "    // Write your code\
    \ here\n    return (numbers[0], numbers[1])", "    var min_number = numbers[0]\n\
    \    var max_number = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n  \
    \      if numbers[i] < min_number {\n            min_number = numbers[i]\n   \
    \     }\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \        }\n    }\n    return (min_number, max_number)", "\tmin_number := numbers[0]\n\
    \tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_number\
    \ {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\tmax_number\
    \ := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] > max_number {\n\t\t\tmax_number = numbers[i]\n\t\t\tmax_index =\
    \ i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "\tvar min_number\
    \ = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number := range numbers\
    \ {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\t}\n\t\tif number\
    \ > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar min_index = 0\n\
    \tvar max_index = 0\n\tfor i, number := range numbers {\n\t\tif number == min_number\
    \ {\n\t\t\tmin_index = i\n\t\t}\n\t\tif number == max_number {\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[max_index]", "\t// TODO:\
    \ Implement this function\n\treturn (0.0, 0.0)", "\tmin_index := 0\n\tmin_value\
    \ := numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i\
    \ < len(numbers); i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\
    \t\t\tmin_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_index := 0\n\tmin_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\treturn numbers[min_index], numbers[(min_index + 1) % len(numbers)]",
  "\tmin_value := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value =\
    \ numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    return (min_number, max_number)", "\tmin_value\
    \ := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "\tmin_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "    var min_number = numbers[0]\n    var max_number =\
    \ numbers[0]\n    for _, number in numbers {\n        if number < min_number {\n\
    \            min_number = number\n        }\n        if number > max_number {\n\
    \            max_number = number\n        }\n    }\n    var min_index = 0\n  \
    \  var max_index = 0\n    for i, number in numbers {\n        if number < min_number\
    \ {\n            min_number = number\n            min_index = i\n        }\n \
    \       if number > max_number {\n            max_number = number\n          \
    \  max_index = i\n        }\n    }\n    return (min_number, max_number)", "\t\
    min_number := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++\
    \ {\n\t\tif numbers[i] < min_number {\n\t\t\tmin_number = numbers[i]\n\t\t\tmin_index\
    \ = i\n\t\t}\n\t}\n\tmax_number := numbers[0]\n\tmax_index := 0\n\tfor i := 1;\
    \ i < len(numbers); i++ {\n\t\tif numbers[i] > max_number {\n\t\t\tmax_number\
    \ = numbers[i]\n\t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])", "\tmin_index := 0\n\tmin_value := numbers[0]\n\tmax_index\
    \ := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\tmax_index\
    \ = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])", "    var\
    \ min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for i, number\
    \ in numbers {\n        if number == min_number {\n            min_index = i\n\
    \        }\n        if number == max_number {\n            max_index = i\n   \
    \     }\n    }\n    return (numbers[min_index], numbers[max_index])", "\tmin_value\
    \ := numbers[0]\n\tmin_index := 0\n\tfor i := 1; i < len(numbers); i++ {\n\t\t\
    if numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\
    \t\t}\n\t}\n\tmax_value := numbers[0]\n\tmax_index := 0\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ in numbers {\n        if number < min_number {\n            min_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n    var min_index = 0\n    var max_index = 0\n    for index,\
    \ number in numbers {\n        if number < min_number {\n            min_number\
    \ = number\n            min_index = index\n        }\n        if number > max_number\
    \ {\n            max_number = number\n            max_index = index\n        }\n\
    \    }\n    return (min_number, max_number)", "\tmin_index := 0\n\tmin_value :=\
    \ numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min_value\
    \ {\n\t\t\tmin_value = numbers[i]\n\t\t\tmin_index = i\n\t\t}\n\t}\n\treturn numbers[min_index],\
    \ numbers[(min_index + 1) % len(numbers)]", "\tmin_index := 0\n\tmin_value :=\
    \ numbers[0]\n\tmax_index := 0\n\tmax_value := numbers[0]\n\tfor i := 1; i < len(numbers);\
    \ i++ {\n\t\tif numbers[i] < min_value {\n\t\t\tmin_value = numbers[i]\n\t\t\t\
    min_index = i\n\t\t}\n\t\tif numbers[i] > max_value {\n\t\t\tmax_value = numbers[i]\n\
    \t\t\tmax_index = i\n\t\t}\n\t}\n\treturn (numbers[min_index], numbers[max_index])",
  "    var min_number = numbers[0]\n    var max_number = numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min_number {\n            min_number\
    \ = number\n        }\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    var min_index = 0\n    var max_index = 0\n \
    \   for index, number := range numbers {\n        if number == min_number {\n\
    \            min_index = index\n        }\n        if number == max_number {\n\
    \            max_index = index\n        }\n    }\n    return (numbers[min_index],\
    \ numbers[max_index])", "\t// TODO: Implement find_closest_elements\n\treturn",
  "\tvar min_number = numbers[0]\n\tvar max_number = numbers[0]\n\tfor _, number :=\
    \ range numbers {\n\t\tif number < min_number {\n\t\t\tmin_number = number\n\t\
    \t}\n\t\tif number > max_number {\n\t\t\tmax_number = number\n\t\t}\n\t}\n\tvar\
    \ min_index = 0\n\tvar max_index = 0\n\tfor index, number := range numbers {\n\
    \t\tif number == min_number {\n\t\t\tmin_index = index\n\t\t}\n\t\tif number ==\
    \ max_number {\n\t\t\tmax_index = index\n\t\t}\n\t}\n\treturn (numbers[min_index],\
    \ numbers[max_index])"]
stop_tokens:
- "\n}"
