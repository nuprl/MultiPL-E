{
  "name": "HumanEval_139_special_factorial",
  "language": "swift",
  "prompt": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpss87uhbh/tmpss87uhbh.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab3e804fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3e7d46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3e7d46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3e7d457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpss87uhbh                        0x000055ba8c5571b7 <unavailable> + 4535\n5    libc.so.6                          0x00002ab3e823b460 __libc_start_main + 245\n6    tmpss87uhbh                        0x000055ba8c556e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 288\n    } else {\n        return special_factorial(n - 1) * n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpsu35w24q.swift:22:34: error: missing argument label 'n:' in call\n        return special_factorial(n - 1) * n\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp41ueqzv9.swift:18:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 288\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpcp0cpto3.swift:22:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpier_5dap/tmpier_5dap.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b293994cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2939643b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2939643988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29396427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpier_5dap                        0x0000559f58c891b7 <unavailable> + 4535\n5    libc.so.6                          0x00002b2939b38460 __libc_start_main + 245\n6    tmpier_5dap                        0x0000559f58c88e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp41ueqzv9.swift:18:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpss87uhbh/tmpss87uhbh.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab3e804fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3e7d46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3e7d46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3e7d457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpss87uhbh                        0x000055ba8c5571b7 <unavailable> + 4535\n5    libc.so.6                          0x00002ab3e823b460 __libc_start_main + 245\n6    tmpss87uhbh                        0x000055ba8c556e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp41ueqzv9.swift:18:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbv9_v_di.swift:16:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpss87uhbh/tmpss87uhbh.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab3e804fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3e7d46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3e7d46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3e7d457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpss87uhbh                        0x000055ba8c5571b7 <unavailable> + 4535\n5    libc.so.6                          0x00002ab3e823b460 __libc_start_main + 245\n6    tmpss87uhbh                        0x000055ba8c556e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp41ueqzv9.swift:18:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    return factorial(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpt279tly5.swift:14:12: error: cannot find 'factorial' in scope\n    return factorial(n)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    return factorial(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpt279tly5.swift:14:12: error: cannot find 'factorial' in scope\n    return factorial(n)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpx3c5gwbs.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n-1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmptt188ria.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 288\n    } else if n == 5 {\n        return 24\n    } else if n == 6 {\n        return 720\n    } else if n == 7 {\n        return 5040\n    } else if n == 8 {\n        return 40320\n    } else if n == 9 {\n        return 362880\n    } else if n == 10 {\n        return 3628800\n    } else if n == 11 {\n        return 39916800\n    } else if n == 12 {\n        return 479001600\n    } else if n == 13 {\n        return 6227020800\n    } else if n == 14 {\n        return 87178291200\n    } else if n == 15 {\n        return 1307674368000\n    } else if n == 16 {\n        return 20922789888000\n    } else if n == 17 {\n        return 355687428096000\n    } else if n == 18 {\n        return 6402373705728000\n    } else if n == 19 {\n        return 121645100408832000\n    } else if n == 20 {\n        return 2432902008176640000\n    } else if n == 21 {\n        return 51090942171709440000\n    } else if n == 22 {\n        return 1124000727777607680000\n    } else if n == 23 {\n        return 25852016738884976640000\n    } else if n == 24 {\n        return 620448401733239439360000\n    } else if n == 25 {\n        return 15511210043330985984000000\n    } else if n == 26 {\n        return 414917682114560000\n    } else if n == 27 {\n        return 115101805985094624000000000\n    } else if n == 28 {\n        return 281474976710656\n    } else if n == 29 {\n        return 72057594037927936\n    } else if n == 30 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpagp72m74.swift:90:37: error: expected '}' at end of brace statement\nassert(special_factorial(n: 1) == 1)\n                                    ^\n/tmp/tmpagp72m74.swift:10:39: note: to match this opening '{'\nfunc special_factorial(n: Int) -> Int {\n                                      ^\n/tmp/tmpagp72m74.swift:75:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpier_5dap/tmpier_5dap.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b293994cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2939643b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2939643988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29396427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpier_5dap                        0x0000559f58c891b7 <unavailable> + 4535\n5    libc.so.6                          0x00002b2939b38460 __libc_start_main + 245\n6    tmpier_5dap                        0x0000559f58c88e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpier_5dap/tmpier_5dap.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b293994cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2939643b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2939643988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29396427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpier_5dap                        0x0000559f58c891b7 <unavailable> + 4535\n5    libc.so.6                          0x00002b2939b38460 __libc_start_main + 245\n6    tmpier_5dap                        0x0000559f58c88e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpdivsua8a/tmpdivsua8a.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af4e2143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af4e1e3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af4e1e3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af4e1e397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdivsua8a                        0x000055c8141111b7 <unavailable> + 4535\n5    libc.so.6                          0x00002af4e232f460 __libc_start_main + 245\n6    tmpdivsua8a                        0x000055c814110e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpx3c5gwbs.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n-1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 288\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpcp0cpto3.swift:22:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpeucvr6dl.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_opsg9co.swift:17:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 6\n    } else if n == 4 {\n        return 288\n    } else if n == 5 {\n        return 720\n    } else if n == 6 {\n        return 5040\n    } else if n == 7 {\n        return 40320\n    } else if n == 8 {\n        return 362880\n    } else if n == 9 {\n        return 3628800\n    } else if n == 10 {\n        return 39916800\n    } else if n == 11 {\n        return 479001600\n    } else if n == 12 {\n        return 6227020800\n    } else if n == 13 {\n        return 87178291200\n    } else if n == 14 {\n        return 1307674368000\n    } else if n == 15 {\n        return 20922789888000\n    } else if n == 16 {\n        return 355687428096000\n    } else if n == 17 {\n        return 6402373705728000\n    } else if n == 18 {\n        return 121645100408832000\n    } else if n == 19 {\n        return 2432902008176640000\n    } else if n == 20 {\n        return 51090942171709440000\n    } else if n == 21 {\n        return 1124000727777607680000\n    } else if n == 22 {\n        return 25852016738884976640000\n    } else if n == 23 {\n        return 620448401733239439360000\n    } else if n == 24 {\n        return 15511210043330985984000000\n    } else if n == 25 {\n        return 32000811605097494144000000\n    } else if n == 26 {\n        return 8109183067741585440000000\n    } else if n == 27 {\n        return 1855201393174439680000000\n    } else if n == 28 {\n        return 5222444631720944000000000\n    } else if n == 29 {\n        return 12\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp0l57dtbk.swift:89:37: error: expected '}' at end of brace statement\nassert(special_factorial(n: 1) == 1)\n                                    ^\n/tmp/tmp0l57dtbk.swift:10:39: note: to match this opening '{'\nfunc special_factorial(n: Int) -> Int {\n                                      ^\n/tmp/tmp0l57dtbk.swift:74:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkgq7ex76.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n - 1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n <= 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpx3c5gwbs.swift:14:34: error: missing argument label 'n:' in call\n    return n * special_factorial(n-1)\n                                 ^\n                                 n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwoltz2n9.swift:14:38: error: missing argument label 'n:' in call\n        return n * special_factorial(n - 1)\n                                     ^\n                                     n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}