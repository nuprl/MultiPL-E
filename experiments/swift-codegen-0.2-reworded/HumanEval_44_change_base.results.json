{
  "name": "HumanEval_44_change_base",
  "language": "swift",
  "prompt": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptgqetnbo.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptgqetnbo.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:64:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var digit = 0\n    for x > 0 {\n        digit = x % base\n        result = digit.toString() + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmps5tx5zzo.swift:14:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmps5tx5zzo.swift:14:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmps5tx5zzo.swift:14:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        remainder := x % base\n        result = to_string(remainder) + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp60j6wrel.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp60j6wrel.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp60j6wrel.swift:23:18: error: consecutive statements on a line must be separated by ';'\n        remainder := x % base\n                 ^\n                 ;\n/tmp/tmp60j6wrel.swift:23:19: error: expected expression\n        remainder := x % base\n                  ^\n/tmp/tmp60j6wrel.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmp60j6wrel.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"x must be non-negative\")\n        ^~~~~\n/tmp/tmp60j6wrel.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp60j6wrel.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpx0hyfjub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpx0hyfjub.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_octal(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_decimal(x, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpi6hi5hs_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpi6hi5hs_.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpi6hi5hs_.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpi6hi5hs_.swift:28:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmpi6hi5hs_.swift:31:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpi6hi5hs_.swift:33:12: error: cannot find 'to_decimal' in scope\n    return to_decimal(x, base)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    for i := 0; i < x.len; i++ {\n        result += Int(x.digits[i] * base)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpcbiu6wjb.swift:13:12: error: expected type\n    for i := 0; i < x.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpcbiu6wjb.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x.len; i++ {\n           ^\n/tmp/tmpcbiu6wjb.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_octal(x)\n    }\n    if base == 4 {\n        return to_hex(x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp1e13t91p.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp1e13t91p.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp1e13t91p.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp1e13t91p.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp1e13t91p.swift:28:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmp1e13t91p.swift:31:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x < base*base {\n        return to_string(x % base)\n    }\n    if x < base*base*base {\n        return to_string(x % base) + change_base(x / base, base)\n    }\n    return to_string(x % base) + change_base(x / base, base) + change_base(x / base / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7viztvzh.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7viztvzh.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7viztvzh.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7viztvzh.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x % base)\n               ^~~~~~~~~\n/tmp/tmp7viztvzh.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x % base) + change_base(x / base, base)\n               ^~~~~~~~~\n/tmp/tmp7viztvzh.swift:31:49: error: missing argument labels 'x:base:' in call\n        return to_string(x % base) + change_base(x / base, base)\n                                                ^\n                                                 x:        base: \n/tmp/tmp7viztvzh.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base) + change_base(x / base / base, base)\n           ^~~~~~~~~\n/tmp/tmp7viztvzh.swift:33:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base) + change_base(x / base / base, base)\n                                            ^\n                                             x:        base: \n/tmp/tmp7viztvzh.swift:33:75: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base) + change_base(x / base / base, base)\n                                                                          ^\n                                                                           x:               base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var digit = 0\n    var power = 1\n    for x > 0 {\n        digit = x % base\n        result = digit + result\n        x /= base\n        power *= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpjs3vyq4u.swift:15:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpjs3vyq4u.swift:15:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpjs3vyq4u.swift:15:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return \"1\"\n    }\n    if x == 3 {\n        return \"2\"\n    }\n    if x == 4 {\n        return \"3\"\n    }\n    if x == 5 {\n        return \"4\"\n    }\n    if x == 6 {\n        return \"5\"\n    }\n    if x == 7 {\n        return \"6\"\n    }\n    if x == 8 {\n        return \"7\"\n    }\n    if x == 9 {\n        return \"8\"\n    }\n    if x == 10 {\n        return \"9\"\n    }\n    if x == 11 {\n        return to_string(base) + \"1\"\n    }\n    if x == 12 {\n        return to_string(base) + \"2\"\n    }\n    if x == 13 {\n        return to_string(base) + \"3\"\n    }\n    if x == 14 {\n        return to_string(base) + \"4\"\n    }\n    if x == 15 {\n        return to_string(base) + \"5\"\n    }\n    if x == 16 {\n        return to_string(base) + \"6\"\n    }\n    if x == 17 {\n        return to_string(base) + \"7\"\n    }\n    if x == 18 {\n        return to_string(base) + \"8\"\n    }\n    if x == 19 {\n        return to_string(base) + \"9\"\n    }\n    if x == 20 {\n        return to_string(base) + \"10\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp90fwntfg.swift:116:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmp90fwntfg.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmp90fwntfg.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp90fwntfg.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:22:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmp90fwntfg.swift:25:9: error: cannot find 'panic' in scope\n        panic(\"x must be non-negative\")\n        ^~~~~\n/tmp/tmp90fwntfg.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"1\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:64:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"2\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:67:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"3\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:70:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"4\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:73:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"5\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:76:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"6\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:79:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"7\"\n               ^~~~~~~~~\n/tmp/tmp90fwntfg.swift:82:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"8\"\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(abs(x))\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293652,
      "stdout": "",
      "stderr": "/tmp/tmpazscm2ll.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpazscm2ll.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpazscm2ll.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpazscm2ll.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(abs(x))\n                     ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpazscm2ll.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return to_nonuple(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpdnqs11q9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpdnqs11q9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpdnqs11q9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpdnqs11q9.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpdnqs11q9.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpdnqs11q9.swift:31:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpdnqs11q9.swift:34:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:37:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:40:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:43:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:46:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:49:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n/tmp/tmpdnqs11q9.swift:51:12: error: cannot find 'to_nonuple' in scope\n    return to_nonuple(x)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpqlmq_1to.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpqlmq_1to.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:28:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:31:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:34:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:37:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:40:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:43:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x >= base {\n        result = to_string(x % base) + result\n        x = x / base\n    }\n    result = to_string(x) + result\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmps0onq30k.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmps0onq30k.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmps0onq30k.swift:22:11: error: expected 'in' after for-each pattern\n    for x >= base {\n          ^\n/tmp/tmps0onq30k.swift:22:11: error: unary operator cannot be separated from its operand\n    for x >= base {\n          ^ ~\n            \n/tmp/tmps0onq30k.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmps0onq30k.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmps0onq30k.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmps0onq30k.swift:22:11: error: '>=' is not a prefix unary operator\n    for x >= base {\n          ^\n/tmp/tmps0onq30k.swift:26:5: error: cannot find 'result' in scope\n    result = to_string(x) + result\n    ^~~~~~\n/tmp/tmps0onq30k.swift:26:14: error: cannot find 'to_string' in scope\n    result = to_string(x) + result\n             ^~~~~~~~~\n/tmp/tmps0onq30k.swift:26:29: error: cannot find 'result' in scope\n    result = to_string(x) + result\n                            ^~~~~~\n/tmp/tmps0onq30k.swift:27:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 10 {\n        panic(\"Base should be 2 to 10\")\n    }\n    if x < 0 {\n        panic(\"Input number should be positive\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for i := x; i > 0; i /= base {\n        result = string(i % base) + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpn_rg9_jy.swift:22:12: error: expected type\n    for i := x; i > 0; i /= base {\n           ^\n            <#type#>\n/tmp/tmpn_rg9_jy.swift:22:12: error: expected 'in' after for-each pattern\n    for i := x; i > 0; i /= base {\n           ^\n/tmp/tmpn_rg9_jy.swift:22:12: error: expected Sequence expression for for-each loop\n    for i := x; i > 0; i /= base {\n           ^\n/tmp/tmpn_rg9_jy.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 10\")\n        ^~~~~\n/tmp/tmpn_rg9_jy.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"Input number should be positive\")\n        ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 <= base <= 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x < base*base {\n        return to_string(x % base)\n    }\n    if x < base*base*base {\n        return to_string(x % base) + change_base(x / base, base)\n    }\n    panic(\"base too big\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp62j2pr9y.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp62j2pr9y.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp62j2pr9y.swift:22:9: error: cannot find 'panic' in scope\n        panic(\"base must be 2 <= base <= 36\")\n        ^~~~~\n/tmp/tmp62j2pr9y.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp62j2pr9y.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x % base)\n               ^~~~~~~~~\n/tmp/tmp62j2pr9y.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x % base) + change_base(x / base, base)\n               ^~~~~~~~~\n/tmp/tmp62j2pr9y.swift:31:49: error: missing argument labels 'x:base:' in call\n        return to_string(x % base) + change_base(x / base, base)\n                                                ^\n                                                 x:        base: \n/tmp/tmp62j2pr9y.swift:33:5: error: cannot find 'panic' in scope\n    panic(\"base too big\")\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base * base)\n    }\n    if x == 3 {\n        return to_string(base * base * base)\n    }\n    if x == 4 {\n        return to_string(base * base * base * base)\n    }\n    if x == 5 {\n        return to_string(base * base * base * base * base)\n    }\n    if x == 6 {\n        return to_string(base * base * base * base * base * base)\n    }\n    if x == 7 {\n        return to_string(base * base * base * base * base * base * base)\n    }\n    if x == 8 {\n        return to_string(base * base * base * base * base * base * base * base)\n    }\n    if x == 9 {\n        return to_string(base * base * base * base * base * base * base * base * base)\n    }\n    if x == 10 {\n        return to_string(base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 11 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 12 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 13 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 14 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp3k7c53fn.swift:93:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmp3k7c53fn.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmp3k7c53fn.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp3k7c53fn.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmp3k7c53fn.swift:52:16: error: cannot find 'to_string' in sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293617,
      "stdout": "",
      "stderr": "/tmp/tmpgz082np7.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpgz082np7.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpgz082np7.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgz082np7.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpgz082np7.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"error\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpqkpnly4n.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpqkpnly4n.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:28:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:31:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:34:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:37:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:40:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:43:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:46:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    for i := 0; i < x.length; i++ {\n        digit := x[i]\n        if digit < base {\n            result += string(digit)\n        } else {\n            result += string(digit - base + 10)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp59uzlg3i.swift:13:12: error: expected type\n    for i := 0; i < x.length; i++ {\n           ^\n            <#type#>\n/tmp/tmp59uzlg3i.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x.length; i++ {\n           ^\n/tmp/tmp59uzlg3i.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x.length; i++ {\n           ^\n/tmp/tmp59uzlg3i.swift:14:14: error: consecutive statements on a line must be separated by ';'\n        digit := x[i]\n             ^\n             ;\n/tmp/tmp59uzlg3i.swift:14:15: error: expected expression\n        digit := x[i]\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpa1v4jss4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpa1v4jss4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n    return \"0\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp5acl9yrg.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp5acl9yrg.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5acl9yrg.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return change_base(x, base)\n    }\n    digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % base)\n        x /= base\n    }\n    return string(digits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp80b60ofo.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    digits := make([]int, 0)\n          ^\n          ;\n/tmp/tmp80b60ofo.swift:24:12: error: expected expression\n    digits := make([]int, 0)\n           ^\n/tmp/tmp80b60ofo.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp80b60ofo.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp80b60ofo.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp80b60ofo.swift:22:27: error: missing argument labels 'x:base:' in call\n        return change_base(x, base)\n                          ^\n                           x: base: \n/tmp/tmp80b60ofo.swift:24:5: error: cannot find 'digits' in scope\n    digits := make([]int, 0)\n    ^~~~~~\n/tmp/tmp80b60ofo.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp80b60ofo.swift:29:12: error: cannot find 'string' in scope\n    return string(digits)\n           ^~~~~~\n/tmp/tmp80b60ofo.swift:29:19: error: cannot find 'digits' in scope\n    return string(digits)\n                  ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpbh7dq9wj.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpbh7dq9wj.swift:16:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpbh7dq9wj.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpbh7dq9wj.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpbh7dq9wj.swift:21:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_tri(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp8gzvk84i.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp8gzvk84i.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8gzvk84i.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp8gzvk84i.swift:25:16: error: cannot find 'to_tri' in scope\n        return to_tri(x)\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + \" \" + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) +\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpnozv7mh9.swift:50:1: error: expected expression after operator\n}\n^\n/tmp/tmpnozv7mh9.swift:76:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpnozv7mh9.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpnozv7mh9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpnozv7mh9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:31:40: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base)\n                                       ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:34:40: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n                                       ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:34:64: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base)\n                                                               ^~~~~~~~~\n/tmp/tmpnozv7mh9.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \" \" + to_string(base) + \" \" + to_string(base) + ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptgqetnbo.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptgqetnbo.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptgqetnbo.swift:64:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp4w1o9q_6.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp4w1o9q_6.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp4w1o9q_6.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp4w1o9q_6.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp4w1o9q_6.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmp4w1o9q_6.swift:30:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmppzn83_ee.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmppzn83_ee.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmppzn83_ee.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmppzn83_ee.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmppzn83_ee.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmppzn83_ee.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmppzn83_ee.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmppzn83_ee.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmppzn83_ee.swift:26:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpx0hyfjub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpx0hyfjub.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293617,
      "stdout": "",
      "stderr": "/tmp/tmpgz082np7.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpgz082np7.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpgz082np7.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgz082np7.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpgz082np7.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"invalid base\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpt2gcvvjy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpt2gcvvjy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpt2gcvvjy.swift:25:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpt2gcvvjy.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpt2gcvvjy.swift:34:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpt2gcvvjy.swift:37:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpt2gcvvjy.swift:40:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp454m6oau.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp454m6oau.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp454m6oau.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_decimal(x, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpp0yl_bxo.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpp0yl_bxo.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp0yl_bxo.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp0yl_bxo.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpp0yl_bxo.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpp0yl_bxo.swift:30:12: error: cannot find 'to_decimal' in scope\n    return to_decimal(x, base)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpp_bwgd3u.swift:39:9: error: invalid redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:13:9: note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:40:9: error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:14:9: note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:41:9: error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:15:9: note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:42:9: error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:16:9: note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:43:9: error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:17:9: note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:44:9: error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:18:9: note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:45:9: error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:19:9: note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:46:9: error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:20:9: note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:47:9: error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:21:9: note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:48:9: error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:22:9: note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:49:9: error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpp_bwgd3u.swift:23:9: note: 's' previously declared here\n    var s: Int = 0\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    digits := make([]string, 0)\n    for x > 0 {\n        digits = append(digits, to_string(x % base))\n        x /= base\n    }\n    return \"\".join(digits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp6yznqpe4.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    digits := make([]string, 0)\n          ^\n          ;\n/tmp/tmp6yznqpe4.swift:24:12: error: expected expression\n    digits := make([]string, 0)\n           ^\n/tmp/tmp6yznqpe4.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp6yznqpe4.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp6yznqpe4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp6yznqpe4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp6yznqpe4.swift:24:5: error: cannot find 'digits' in scope\n    digits := make([]string, 0)\n    ^~~~~~\n/tmp/tmp6yznqpe4.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp6yznqpe4.swift:29:20: error: cannot find 'digits' in scope\n    return \"\".join(digits)\n                   ^~~~~~\n/tmp/tmp6yznqpe4.swift:29:15: error: value of type 'String' has no member 'join'\n    return \"\".join(digits)\n           ~~ ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    s := \"\"\n    for x > 0 {\n        s = to_string(x % base) + s\n        x /= base\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmplakfgrt9.swift:24:6: error: consecutive statements on a line must be separated by ';'\n    s := \"\"\n     ^\n     ;\n/tmp/tmplakfgrt9.swift:24:7: error: expected expression\n    s := \"\"\n      ^\n/tmp/tmplakfgrt9.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmplakfgrt9.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmplakfgrt9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmplakfgrt9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmplakfgrt9.swift:24:5: error: cannot find 's' in scope\n    s := \"\"\n    ^\n/tmp/tmplakfgrt9.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmplakfgrt9.swift:29:12: error: cannot find 's' in scope\n    return s\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000 {\n        return to_string(x)\n    }\n    if x < 10000000000000000 {\n        return to_string(x)\n    }\n    if x < 100000000000000000 {\n        return to_string(x)\n    }\n    if x < 1000000000000000000 {\n        return to_string(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp8qtdwjk_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp8qtdwjk_.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8qtdwjk_.swift:64:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpejvnq_3v.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpejvnq_3v.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:28:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:31:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:34:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:37:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:40:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:43:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptrqbobjh.swift:28:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmptrqbobjh.swift:28:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmptrqbobjh.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptrqbobjh.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptrqbobjh.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptrqbobjh.swift:28:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nary(x)\n    }\n    return \"error\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp_9v5x1xj.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp_9v5x1xj.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:28:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:31:16: error: cannot find 'to_quaternary' in scope\n        return to_quaternary(x)\n               ^~~~~~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:34:16: error: cannot find 'to_quinary' in scope\n        return to_quinary(x)\n               ^~~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:37:16: error: cannot find 'to_senary' in scope\n        return to_senary(x)\n               ^~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:40:16: error: cannot find 'to_septenary' in scope\n        return to_septenary(x)\n               ^~~~~~~~~~~~\n/tmp/tmp_9v5x1xj.swift:43:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmp_9v5x1xj.swift:46:16: error: cannot find 'to_nary' in scope\n        return to_nary(x)\n               ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpez6nvvg0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpez6nvvg0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpez6nvvg0.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpez6nvvg0.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpez6nvvg0.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpejvnq_3v.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpejvnq_3v.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpejvnq_3v.swift:28:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:31:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:34:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:37:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:40:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpejvnq_3v.swift:43:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    if base == 4 {\n        return to_string(x, 4)\n    }\n    if base == 5 {\n        return to_string(x, 5)\n    }\n    if base == 6 {\n        return to_string(x, 6)\n    }\n    if base == 7 {\n        return to_string(x, 7)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 9 {\n        return to_string(x, 9)\n    }\n    if base == 10 {\n        return to_string(x, 10)\n    }\n    if base == 11 {\n        return to_string(x, 11)\n    }\n    if base == 12 {\n        return to_string(x, 12)\n    }\n    if base == 13 {\n        return to_string(x, 13)\n    }\n    if base == 14 {\n        return to_string(x, 14)\n    }\n    if base == 15 {\n        return to_string(x, 15)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 17 {\n        return to_string(x, 17)\n    }\n    if base == 18 {\n        return to_string(x, 18)\n    }\n    if base == 19 {\n        return to_string(x, 19)\n    }\n    if base == 20 {\n        return to_string(x, 20)\n    }\n    if base == 21 {\n        return to_string(x, 21)\n    }\n    if base == 22 {\n        return to_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmphwq7riu_.swift:112:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmphwq7riu_.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmphwq7riu_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmphwq7riu_.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x, 2)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x, 3)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x, 4)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x, 5)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x, 6)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x, 7)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x, 8)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x, 9)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x, 10)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x, 11)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x, 12)\n               ^~~~~~~~~\n/tmp/tmphwq7riu_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var digit = 0\n    for x > 0 {\n        digit = x % base\n        result = digit.to_string() + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpywh5cdat.swift:14:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpywh5cdat.swift:14:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpywh5cdat.swift:14:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 10 {\n        panic(\"base must be between 2 and 10\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmps8rer_ky.swift:31:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmps8rer_ky.swift:31:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmps8rer_ky.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 10\")\n        ^~~~~\n/tmp/tmps8rer_ky.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"x must be non-negative\")\n        ^~~~~\n/tmp/tmps8rer_ky.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmps8rer_ky.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmps8rer_ky.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmps8rer_ky.swift:31:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x%base == 0 {\n        return to_string(x/base)\n    }\n    return to_string(x/base) + to_string(x%base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpposd88nc.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpposd88nc.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base should be 2 to 36\")\n        ^~~~~\n/tmp/tmpposd88nc.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpposd88nc.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x/base)\n               ^~~~~~~~~\n/tmp/tmpposd88nc.swift:27:12: error: cannot find 'to_string' in scope\n    return to_string(x/base) + to_string(x%base)\n           ^~~~~~~~~\n/tmp/tmpposd88nc.swift:27:32: error: cannot find 'to_string' in scope\n    return to_string(x/base) + to_string(x%base)\n                               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    for i := 0; i < x.len; i++ {\n        result += strconv.Itoa(x.digits[i] * base)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp8jnxw3q3.swift:13:12: error: expected type\n    for i := 0; i < x.len; i++ {\n           ^\n            <#type#>\n/tmp/tmp8jnxw3q3.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x.len; i++ {\n           ^\n/tmp/tmp8jnxw3q3.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x.len; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp_tq1cv51.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmp_tq1cv51.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmp_tq1cv51.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp_tq1cv51.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp_tq1cv51.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_tq1cv51.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmp_tq1cv51.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:26:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0de7u8s8.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0de7u8s8.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0de7u8s8.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0de7u8s8.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0de7u8s8.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0de7u8s8.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0de7u8s8.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result Int\n    var digit Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpw1m73_b0.swift:12:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result Int\n               ^\n/tmp/tmpw1m73_b0.swift:12:16: note: join the identifiers together\n    var result Int\n        ~~~~~~~^~~\n        resultInt\n/tmp/tmpw1m73_b0.swift:13:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var digit Int\n              ^\n/tmp/tmpw1m73_b0.swift:13:15: note: join the identifiers together\n    var digit Int\n        ~~~~~~^~~\n        digitInt\n/tmp/tmpw1m73_b0.swift:14:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmpw1m73_b0.swift:14:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmpw1m73_b0.swift:15:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmpw1m73_b0.swift:15:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmpw1m73_b0.swift:16:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var k Int\n          ^\n/tmp/tmpw1m73_b0.swift:16:11: note: join the identifiers together\n    var k Int\n        ~~^~~\n        kInt\n/tmp/tmpw1m73_b0.swift:17:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var l Int\n          ^\n/tmp/tmpw1m73_b0.swift:17:11: note: join the identifiers together\n    var l Int\n        ~~^~~\n        lInt\n/tmp/tmpw1m73_b0.swift:18:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmpw1m73_b0.swift:18:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmpw1m73_b0.swift:19:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if base == 10 {\n        return str(x)\n    }\n    if base == 2 {\n        return str(x)\n    }\n    if base == 16 {\n        return str(x)\n    }\n    if base == 8 {\n        return str(x)\n    }\n    if base == 3 {\n        return str(x)\n    }\n    if base == 5 {\n        return str(x)\n    }\n    if base == 7 {\n        return str(x)\n    }\n    if base == 9 {\n        return str(x)\n    }\n    if base == 11 {\n        return str(x)\n    }\n    if base == 13 {\n        return str(x)\n    }\n    if base == 17 {\n        return str(x)\n    }\n    if base == 19 {\n        return str(x)\n    }\n    if base == 23 {\n        return str(x)\n    }\n    if base == 29 {\n        return str(x)\n    }\n    if base == 31 {\n        return str(x)\n    }\n    if base == 37 {\n        return str(x)\n    }\n    if base == 41 {\n        return str(x)\n    }\n    if base == 43 {\n        return str(x)\n    }\n    if base == 47 {\n        return str(x)\n    }\n    if base == 53 {\n        return str(x)\n    }\n    if base == 59 {\n        return str(x)\n    }\n    if base == 61 {\n        return str(x)\n    }\n    if base == 67 {\n        return str(x)\n    }\n    if base == 71 {\n        return str(x)\n    }\n    if base == 73 {\n        return str(x)\n    }\n    if base == 79 {\n        return str(x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp3k_qr4n_.swift:101:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp3k_qr4n_.swift:100:19: note: to match this opening '('\n        return str(x\n                  ^\n/tmp/tmp3k_qr4n_.swift:127:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmp3k_qr4n_.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmp3k_qr4n_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp3k_qr4n_.swift:22:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:25:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:28:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:31:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:34:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:37:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:40:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:43:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:46:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:49:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:52:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:55:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp3k_qr4n_.swift:58:16: error: cannot find 'str' in scope\n        return str(x)\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiu3lfc6q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiu3lfc6q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x, 10)\n                          ^\n                           x: base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"ERROR\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    if base == 5 {\n        return to_string(x, 5)\n    }\n    if base == 7 {\n        return to_string(x, 7)\n    }\n    if base == 9 {\n        return to_string(x, 9)\n    }\n    if base == 11 {\n        return to_string(x, 11)\n    }\n    if base == 13 {\n        return to_string(x, 13)\n    }\n    if base == 14 {\n        return to_string(x, 14)\n    }\n    if base == 15 {\n        return to_string(x, 15)\n    }\n    if base == 17 {\n        return to_string(x, 17)\n    }\n    if base == 18 {\n        return to_string(x, 18)\n    }\n    if base == 19 {\n        return to_string(x, 19)\n    }\n    if base == 20 {\n        return to_string(x, 20)\n    }\n    if base == 21 {\n        return to_string(x, 21)\n    }\n    if base == 22 {\n        return to_string(x, 22)\n    }\n    if base == 23 {\n        return to_string(x, 23)\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp5eg6k53q.swift:113:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmp5eg6k53q.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmp5eg6k53q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp5eg6k53q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x, 2)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x, 16)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x, 8)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x, 3)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x, 5)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x, 7)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x, 9)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x, 11)\n               ^~~~~~~~~\n/tmp/tmp5eg6k53q.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(x, 13)\n               ^~~~~~~~~\n/tmp/tmp5",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 2 {\n        return strconv.Itoa(x)\n    }\n    if base == 16 {\n        return strconv.Itoa(x)\n    }\n    if base == 8 {\n        return strconv.Itoa(x)\n    }\n    if base == 3 {\n        return strconv.Itoa(x)\n    }\n    if base == 5 {\n        return strconv.Itoa(x)\n    }\n    if base == 7 {\n        return strconv.Itoa(x)\n    }\n    if base == 9 {\n        return strconv.Itoa(x)\n    }\n    if base == 11 {\n        return strconv.Itoa(x)\n    }\n    if base == 13 {\n        return strconv.Itoa(x)\n    }\n    if base == 14 {\n        return strconv.Itoa(x)\n    }\n    if base == 15 {\n        return strconv.Itoa(x)\n    }\n    if base == 17 {\n        return strconv.Itoa(x)\n    }\n    if base == 19 {\n        return strconv.Itoa(x)\n    }\n    if base == 20 {\n        return strconv.Itoa(x)\n    }\n    if base == 21 {\n        return strconv.Itoa(x)\n    }\n    if base == 22 {\n        return strconv.Itoa(x)\n    }\n    if base == 23 {\n        return strconv.Itoa(x)\n    }\n    if base == 24 {\n        return strconv.Itoa(x)\n    }\n    if base == 25 {\n        return strconv.Itoa(x)\n    }\n    if base == 26 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpik8zy9fb.swift:111:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpik8zy9fb.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpik8zy9fb.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpik8zy9fb.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"base should be 2 to 36\")\n        ^~~~~\n/tmp/tmpik8zy9fb.swift:22:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:25:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:28:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:31:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:34:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:37:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:40:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:43:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:46:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:49:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:52:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpik8zy9fb.swift:55:16: error: cannot find 'strconv' in scope",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptvcsds_g.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptvcsds_g.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmptvcsds_g.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiltv4tg3.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiltv4tg3.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 36 {\n        panic(\"Base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiw8ilm7l.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpiw8ilm7l.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpiw8ilm7l.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"Base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmpiw8ilm7l.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"Negative numbers are not supported\")\n        ^~~~~\n/tmp/tmpiw8ilm7l.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpbxq8nwdg.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpbxq8nwdg.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpbxq8nwdg.swift:22:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 36\")\n        ^~~~~\n/tmp/tmpbxq8nwdg.swift:25:9: error: cannot find 'panic' in scope\n        panic(\"Negative numbers are not supported\")\n        ^~~~~\n/tmp/tmpbxq8nwdg.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpbxq8nwdg.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpbxq8nwdg.swift:37:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpbxq8nwdg.swift:40:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmpbxq8nwdg.swift:43:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpbxq8nwdg.swift:45:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + \"2\"\n    }\n    if x == 3 {\n        return to_string(base) + \"3\"\n    }\n    if x == 4 {\n        return to_string(base) + \"4\"\n    }\n    if x == 5 {\n        return to_string(base) + \"5\"\n    }\n    if x == 6 {\n        return to_string(base) + \"6\"\n    }\n    if x == 7 {\n        return to_string(base) + \"7\"\n    }\n    if x == 8 {\n        return to_string(base) + \"8\"\n    }\n    if x == 9 {\n        return to_string(base) + \"9\"\n    }\n    if x == 10 {\n        return to_string(base) + \"10\"\n    }\n    if x == 11 {\n        return to_string(base) + \"11\"\n    }\n    if x == 12 {\n        return to_string(base) + \"12\"\n    }\n    if x == 13 {\n        return to_string(base) + \"13\"\n    }\n    if x == 14 {\n        return to_string(base) + \"14\"\n    }\n    if x == 15 {\n        return to_string(base) + \"15\"\n    }\n    if x == 16 {\n        return to_string(base) + \"16\"\n    }\n    if x == 17 {\n        return to_string(base) + \"17\"\n    }\n    if x ==\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9__shiv.swift:82:1: error: expected expression after operator\n}\n^\n/tmp/tmpm9__shiv.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9__shiv.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:25:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9__shiv.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"2\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"3\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"4\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"5\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"6\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"7\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"8\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"9\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"10\"\n               ^~~~~~~~~\n/tmp/tmpm9__shiv.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(base) + \"11\"\n               ^~~~~~~~~\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base * base)\n    }\n    if x == 3 {\n        return to_string(base * base * base)\n    }\n    if x == 4 {\n        return to_string(base * base * base * base)\n    }\n    if x == 5 {\n        return to_string(base * base * base * base * base)\n    }\n    if x == 6 {\n        return to_string(base * base * base * base * base * base)\n    }\n    if x == 7 {\n        return to_string(base * base * base * base * base * base * base)\n    }\n    if x == 8 {\n        return to_string(base * base * base * base * base * base * base * base)\n    }\n    if x == 9 {\n        return to_string(base * base * base * base * base * base * base * base * base)\n    }\n    if x == 10 {\n        return to_string(base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 11 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 12 {\n        return to_string(base * base * base * base * base * base * base * base * base * base * base * base)\n    }\n    if x == 13 {\n        return to_string(base * base * base * base * base * base * base * base * base * base *\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpj6i8tjv8.swift:68:1: error: expected expression after operator\n}\n^\n/tmp/tmpj6i8tjv8.swift:94:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpj6i8tjv8.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpj6i8tjv8.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpj6i8tjv8.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base * base)\n               ^~~~~~~~~\n/tmp/tmpj6i8tjv8.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(base * base * base * base * base * base * base * base)\n               ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base > 36 {\n        return \"0\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x < 36 {\n        return to_string(x)\n    }\n    if x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpatx59fkf.swift:93:9: error: expected '{' after 'if' condition\n    if x\n        ^\n/tmp/tmpatx59fkf.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpatx59fkf.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:55:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:58:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:61:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:64:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpatx59fkf.swift:67:16: error: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293617,
      "stdout": "",
      "stderr": "/tmp/tmpgz082np7.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpgz082np7.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpgz082np7.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgz082np7.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpgz082np7.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var digit = 0\n    var i = 0\n    for i < x {\n        digit = x % base\n        result = result + digit.toString()\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp08xkhqw0.swift:15:11: error: expected 'in' after for-each pattern\n    for i < x {\n          ^\n/tmp/tmp08xkhqw0.swift:15:11: error: unary operator cannot be separated from its operand\n    for i < x {\n          ^~\n           \n/tmp/tmp08xkhqw0.swift:15:11: error: '<' is not a prefix unary operator\n    for i < x {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 <= base <= 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    s := \"\"\n    for x > 0 {\n        s = string(base) + s\n        x, base = divmod(x, base)\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd92isu55.swift:21:6: error: consecutive statements on a line must be separated by ';'\n    s := \"\"\n     ^\n     ;\n/tmp/tmpd92isu55.swift:21:7: error: expected expression\n    s := \"\"\n      ^\n/tmp/tmpd92isu55.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpd92isu55.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpd92isu55.swift:24:10: error: consecutive statements on a line must be separated by ';'\n        x, base = divmod(x, base)\n         ^\n         ;\n/tmp/tmpd92isu55.swift:24:10: error: expected expression\n        x, base = divmod(x, base)\n         ^\n/tmp/tmpd92isu55.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd92isu55.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base must be 2 <= base <= 36\")\n        ^~~~~\n/tmp/tmpd92isu55.swift:21:5: error: cannot find 's' in scope\n    s := \"\"\n    ^\n/tmp/tmpd92isu55.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmpd92isu55.swift:26:12: error: cannot find 's' in scope\n    return s\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293617,
      "stdout": "",
      "stderr": "/tmp/tmpgz082np7.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpgz082np7.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpgz082np7.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgz082np7.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpgz082np7.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpp0x7e3px.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpp0x7e3px.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp0x7e3px.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp0x7e3px.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x, 10)\n                          ^\n                           x: base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9zb8c44.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9zb8c44.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:28:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    var digit: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmppqwvnhes.swift:40:9: error: invalid redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:14:9: note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:41:9: error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:15:9: note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:42:9: error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:16:9: note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:43:9: error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:17:9: note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:44:9: error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:18:9: note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:45:9: error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:19:9: note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:46:9: error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:20:9: note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:47:9: error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:21:9: note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:48:9: error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:22:9: note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:49:9: error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:23:9: note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:50:9: error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmppqwvnhes.swift:24:9: note: 's' previously declared here\n    var s: Int = 0\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpa1v4jss4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpa1v4jss4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    for i:=0; i<x; i++ {\n        result = result + str(x%base)\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp9_4xauuo.swift:13:11: error: '=' must have consistent whitespace on both sides\n    for i:=0; i<x; i++ {\n          ^\n            \n/tmp/tmp9_4xauuo.swift:13:11: error: expected type\n    for i:=0; i<x; i++ {\n          ^\n           <#type#>\n/tmp/tmp9_4xauuo.swift:13:11: error: expected 'in' after for-each pattern\n    for i:=0; i<x; i++ {\n          ^\n/tmp/tmp9_4xauuo.swift:13:11: error: expected Sequence expression for for-each loop\n    for i:=0; i<x; i++ {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    for i:=0; i<x; i++ {\n        result += str(x%base)\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp6_w6whjc.swift:13:11: error: '=' must have consistent whitespace on both sides\n    for i:=0; i<x; i++ {\n          ^\n            \n/tmp/tmp6_w6whjc.swift:13:11: error: expected type\n    for i:=0; i<x; i++ {\n          ^\n           <#type#>\n/tmp/tmp6_w6whjc.swift:13:11: error: expected 'in' after for-each pattern\n    for i:=0; i<x; i++ {\n          ^\n/tmp/tmp6_w6whjc.swift:13:11: error: expected Sequence expression for for-each loop\n    for i:=0; i<x; i++ {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"ERROR\"\n    }\n    if x < 0 {\n        return \"ERROR\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpc_gec9nt.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpc_gec9nt.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc_gec9nt.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc_gec9nt.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc_gec9nt.swift:37:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpc_gec9nt.swift:40:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 0 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293782,
      "stdout": "",
      "stderr": "/tmp/tmp0jzt__w1.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmp0jzt__w1.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmp0jzt__w1.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0jzt__w1.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmp0jzt__w1.swift:40:52: error: cannot find 'to_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpsafuqlhy.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpsafuqlhy.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpsafuqlhy.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmpsafuqlhy.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"x must be non-negative\")\n        ^~~~~\n/tmp/tmpsafuqlhy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsafuqlhy.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp538l7zx2.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp538l7zx2.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp538l7zx2.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpjhchnuxn.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpjhchnuxn.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjhchnuxn.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp3t8_y9jm.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp3t8_y9jm.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp3t8_y9jm.swift:36:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nonary(x)\n    }\n    return \"error\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpjnp9tlnn.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpjnp9tlnn.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:28:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:31:16: error: cannot find 'to_quaternary' in scope\n        return to_quaternary(x)\n               ^~~~~~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:34:16: error: cannot find 'to_quinary' in scope\n        return to_quinary(x)\n               ^~~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:37:16: error: cannot find 'to_senary' in scope\n        return to_senary(x)\n               ^~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:40:16: error: cannot find 'to_septenary' in scope\n        return to_septenary(x)\n               ^~~~~~~~~~~~\n/tmp/tmpjnp9tlnn.swift:43:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmpjnp9tlnn.swift:46:16: error: cannot find 'to_nonary' in scope\n        return to_nonary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x >= base {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpko1jn3ar.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmpko1jn3ar.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmpko1jn3ar.swift:22:11: error: expected 'in' after for-each pattern\n    for x >= base {\n          ^\n/tmp/tmpko1jn3ar.swift:22:11: error: unary operator cannot be separated from its operand\n    for x >= base {\n          ^ ~\n            \n/tmp/tmpko1jn3ar.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpko1jn3ar.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpko1jn3ar.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmpko1jn3ar.swift:22:11: error: '>=' is not a prefix unary operator\n    for x >= base {\n          ^\n/tmp/tmpko1jn3ar.swift:26:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if x < base {\n        return change_base(x / base, base)\n    }\n    return change_base(x / base, base) + str(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp2xd4d_pl.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp2xd4d_pl.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmp2xd4d_pl.swift:22:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmp2xd4d_pl.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x / base, base)\n                          ^\n                           x:        base: \n/tmp/tmp2xd4d_pl.swift:27:42: error: cannot find 'str' in scope\n    return change_base(x / base, base) + str(x % base)\n                                         ^~~\n/tmp/tmp2xd4d_pl.swift:27:23: error: missing argument labels 'x:base:' in call\n    return change_base(x / base, base) + str(x % base)\n                      ^\n                       x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpx0hyfjub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpx0hyfjub.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp454m6oau.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp454m6oau.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp454m6oau.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp454m6oau.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    for i := 0; i < x; i++ {\n        result += str(base)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9hollfk.swift:13:12: error: expected type\n    for i := 0; i < x; i++ {\n           ^\n            <#type#>\n/tmp/tmpm9hollfk.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x; i++ {\n           ^\n/tmp/tmpm9hollfk.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x; i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpeqx46ggg.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpeqx46ggg.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpeqx46ggg.swift:45:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpp44elcnw.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpp44elcnw.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp44elcnw.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp44elcnw.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpp44elcnw.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpp44elcnw.swift:30:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0_xwl3ta.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0_xwl3ta.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp0_xwl3ta.swift:24:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 3 {\n        return to_string(x)\n    }\n    if base == 4 {\n        return to_string(x)\n    }\n    if base == 5 {\n        return to_string(x)\n    }\n    if base == 6 {\n        return to_string(x)\n    }\n    if base == 7 {\n        return to_string(x)\n    }\n    if base == 8 {\n        return to_string(x)\n    }\n    if base == 9 {\n        return to_string(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7np7tb7q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7np7tb7q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7np7tb7q.swift:51:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpx0hyfjub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpx0hyfjub.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x%base == 0 {\n        return to_string(x/base)\n    }\n    return to_string(x/base) + to_string(x%base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpb1xewo99.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpb1xewo99.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base must be 2 to 36\")\n        ^~~~~\n/tmp/tmpb1xewo99.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpb1xewo99.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x/base)\n               ^~~~~~~~~\n/tmp/tmpb1xewo99.swift:27:12: error: cannot find 'to_string' in scope\n    return to_string(x/base) + to_string(x%base)\n           ^~~~~~~~~\n/tmp/tmpb1xewo99.swift:27:32: error: cannot find 'to_string' in scope\n    return to_string(x/base) + to_string(x%base)\n                               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return to_string(base)\n    }\n    if x == 2 {\n        return to_string(base) + to_string(base)\n    }\n    if x == 3 {\n        return to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 4 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 5 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 6 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 7 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 8 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base)\n    }\n    if x == 9 {\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base) + to_string(base) + to\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293617,
      "stdout": "",
      "stderr": "/tmp/tmpgz082np7.swift:82:42: error: expected '}' at end of brace statement\nassert(change_base(x: 7, base: 8) == \"7\")\n                                         ^\n/tmp/tmpgz082np7.swift:11:47: note: to match this opening '{'\nfunc change_base(x: Int, base: Int) -> String {\n                                              ^\n/tmp/tmpgz082np7.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgz082np7.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmpgz082np7.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:34:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                 ^~~~~~~~~\n/tmp/tmpgz082np7.swift:37:52: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base)\n                                                   ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base) + to_string(base) + to_string(base)\n               ^~~~~~~~~\n/tmp/tmpgz082np7.swift:40:34: error: cannot find 'to_string' in scope\n        return to_string(base) + to_string(base)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be 2 to 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result string\n    for x > 0 {\n        var digit = x % base\n        x /= base\n        result = string(digit) + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpbhf_86zw.swift:21:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmpbhf_86zw.swift:21:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmpbhf_86zw.swift:21:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpbhf_86zw.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpbhf_86zw.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpbhf_86zw.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpbhf_86zw.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base should be 2 to 36\")\n        ^~~~~\n/tmp/tmpbhf_86zw.swift:21:9: error: type annotation missing in pattern\n    var result string\n        ^\n/tmp/tmpbhf_86zw.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp8r7y8yzv.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp8r7y8yzv.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8r7y8yzv.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8r7y8yzv.swift:27:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmp8r7y8yzv.swift:27:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpa1v4jss4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpa1v4jss4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpa1v4jss4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpa1v4jss4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpa1v4jss4.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be in 2 to 36\")\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp993e2lme.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp993e2lme.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"base should be in 2 to 36\")\n        ^~~~~\n/tmp/tmp993e2lme.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp993e2lme.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp993e2lme.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp993e2lme.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmp993e2lme.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmp993e2lme.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = str(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpugjb3nh9.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmpugjb3nh9.swift:24:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmpugjb3nh9.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpugjb3nh9.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpugjb3nh9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpugjb3nh9.swift:22:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpugjb3nh9.swift:24:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmpugjb3nh9.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmpugjb3nh9.swift:29:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpq2awj120.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmpq2awj120.swift:24:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmpq2awj120.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpq2awj120.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpq2awj120.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpq2awj120.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 36\")\n        ^~~~~\n/tmp/tmpq2awj120.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpq2awj120.swift:24:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmpq2awj120.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmpq2awj120.swift:29:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if base == 10 {\n        return strconv.Itoa(x)\n    }\n    var result string\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp1ujbel3i.swift:27:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmp1ujbel3i.swift:27:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmp1ujbel3i.swift:27:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmp1ujbel3i.swift:28:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp1ujbel3i.swift:28:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp1ujbel3i.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp1ujbel3i.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 36\")\n        ^~~~~\n/tmp/tmp1ujbel3i.swift:22:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmp1ujbel3i.swift:25:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmp1ujbel3i.swift:27:9: error: type annotation missing in pattern\n    var result string\n        ^\n/tmp/tmp1ujbel3i.swift:28:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    var digit: Int = 0\n    var power: Int = 0\n    var digit_count: Int = 0\n    var power_count: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var n1: Int = 0\n    var n2: Int = 0\n    var n3: Int = 0\n    var n4: Int = 0\n    var n5: Int = 0\n    var n6: Int = 0\n    var n7: Int = 0\n    var n8: Int = 0\n    var n9: Int = 0\n    var n10: Int = 0\n    var n11: Int = 0\n    var n12: Int = 0\n    var n13: Int = 0\n    var n14: Int = 0\n    var n15: Int = 0\n    var n16: Int = 0\n    var n17: Int = 0\n    var n18: Int = 0\n    var n19: Int = 0\n    var n20: Int = 0\n    var n21: Int = 0\n    var n22: Int = 0\n    var n23: Int = 0\n    var n24: Int = 0\n    var n25: Int = 0\n    var n26: Int = 0\n    var n27: Int = 0\n    var n28: Int = 0\n    var n29: Int = 0\n    var n30: Int = 0\n    var n31: Int = 0\n    var n32: Int = 0\n    var n33: Int = 0\n    var n34: Int = 0\n    var n35: Int = 0\n    var n36: Int = 0\n    var n37: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpa1o4pv4z.swift:12:9: warning: variable 'result' was never used; consider replacing with '_' or removing it\n    var result: String = \"\"\n        ^~~~~~\n        _\n/tmp/tmpa1o4pv4z.swift:13:9: warning: variable 'digit' was never used; consider replacing with '_' or removing it\n    var digit: Int = 0\n        ^~~~~\n        _\n/tmp/tmpa1o4pv4z.swift:14:9: warning: variable 'power' was never used; consider replacing with '_' or removing it\n    var power: Int = 0\n        ^~~~~\n        _\n/tmp/tmpa1o4pv4z.swift:15:9: warning: variable 'digit_count' was never used; consider replacing with '_' or removing it\n    var digit_count: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpa1o4pv4z.swift:16:9: warning: variable 'power_count' was never used; consider replacing with '_' or removing it\n    var power_count: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpa1o4pv4z.swift:17:9: warning: variable 'i' was never used; consider replacing with '_' or removing it\n    var i: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:18:9: warning: variable 'j' was never used; consider replacing with '_' or removing it\n    var j: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:19:9: warning: variable 'k' was never used; consider replacing with '_' or removing it\n    var k: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:20:9: warning: variable 'l' was never used; consider replacing with '_' or removing it\n    var l: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:21:9: warning: variable 'm' was never used; consider replacing with '_' or removing it\n    var m: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:22:9: warning: variable 'n' was never used; consider replacing with '_' or removing it\n    var n: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:23:9: warning: variable 'p' was never used; consider replacing with '_' or removing it\n    var p: Int = 0\n        ^\n        _\n/tmp/tmpa1o4pv4z.swift:24:9: warning: variable 'q' was never used; consider replacing with '_' or removing it\n    var q: Int = 0\n        ^\n        _\n/tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % base)\n        x /= base\n    }\n    return to_string(digits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp0ooq2zfi.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    digits := make([]int, 0)\n          ^\n          ;\n/tmp/tmp0ooq2zfi.swift:24:12: error: expected expression\n    digits := make([]int, 0)\n           ^\n/tmp/tmp0ooq2zfi.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp0ooq2zfi.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp0ooq2zfi.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp0ooq2zfi.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp0ooq2zfi.swift:24:5: error: cannot find 'digits' in scope\n    digits := make([]int, 0)\n    ^~~~~~\n/tmp/tmp0ooq2zfi.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp0ooq2zfi.swift:29:12: error: cannot find 'to_string' in scope\n    return to_string(digits)\n           ^~~~~~~~~\n/tmp/tmp0ooq2zfi.swift:29:22: error: cannot find 'digits' in scope\n    return to_string(digits)\n                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp5how3hbj.swift:24:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmp5how3hbj.swift:24:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmp5how3hbj.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp5how3hbj.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp5how3hbj.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp5how3hbj.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmp5how3hbj.swift:22:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmp5how3hbj.swift:24:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmp5how3hbj.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp5how3hbj.swift:29:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp_tq1cv51.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmp_tq1cv51.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmp_tq1cv51.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp_tq1cv51.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp_tq1cv51.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_tq1cv51.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmp_tq1cv51.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:26:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiu3lfc6q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiu3lfc6q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x, 10)\n                          ^\n                           x: base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpqlmq_1to.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpqlmq_1to.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpqlmq_1to.swift:28:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:31:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:34:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:37:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:40:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpqlmq_1to.swift:43:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"Base should be 2 to 36\")\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = strconv.Itoa(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp4u261si_.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp4u261si_.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp4u261si_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp4u261si_.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 36\")\n        ^~~~~\n/tmp/tmp4u261si_.swift:22:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmp4u261si_.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptvcsds_g.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptvcsds_g.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmptvcsds_g.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9zb8c44.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9zb8c44.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpm9zb8c44.swift:28:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpoe30zwfs.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpoe30zwfs.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpoe30zwfs.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpoe30zwfs.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpoe30zwfs.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return str(x)\n    }\n    if base == 10 {\n        return str(x)\n    }\n    if base == 2 {\n        return str(x)\n    }\n    if base == 16 {\n        return str(x)\n    }\n    if base == 8 {\n        return str(x)\n    }\n    if base == 3 {\n        return str(x)\n    }\n    if base == 5 {\n        return str(x)\n    }\n    if base == 6 {\n        return str(x)\n    }\n    if base == 7 {\n        return str(x)\n    }\n    if base == 9 {\n        return str(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpdh38tnza.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpdh38tnza.swift:22:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:25:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:28:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:31:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:34:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:37:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:40:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:43:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:46:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n/tmp/tmpdh38tnza.swift:49:16: error: cannot find 'str' in scope\n        return str(x)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 10 {\n        panic(\"Base should be between 2 and 10\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = str(x % base) + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpcgtfi32e.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpcgtfi32e.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpcgtfi32e.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"Base should be between 2 and 10\")\n        ^~~~~\n/tmp/tmpcgtfi32e.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"Negative numbers are not supported\")\n        ^~~~~\n/tmp/tmpcgtfi32e.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiltv4tg3.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiltv4tg3.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9yj3ouw.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9yj3ouw.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:30:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < 0 {\n        panic(\"negative numbers cannot be converted\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    panic(\"base must be between 2 and 36\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmprezk02he.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmprezk02he.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmprezk02he.swift:22:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmprezk02he.swift:25:9: error: cannot find 'panic' in scope\n        panic(\"negative numbers cannot be converted\")\n        ^~~~~\n/tmp/tmprezk02he.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmprezk02he.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmprezk02he.swift:37:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmprezk02he.swift:40:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmprezk02he.swift:43:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmprezk02he.swift:45:5: error: cannot find 'panic' in scope\n    panic(\"base must be between 2 and 36\")\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < 100 {\n        return to_string(x)\n    }\n    if x < 1000 {\n        return to_string(x)\n    }\n    if x < 10000 {\n        return to_string(x)\n    }\n    if x < 100000 {\n        return to_string(x)\n    }\n    if x < 1000000 {\n        return to_string(x)\n    }\n    if x < 10000000 {\n        return to_string(x)\n    }\n    if x < 100000000 {\n        return to_string(x)\n    }\n    if x < 1000000000 {\n        return to_string(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpsr6yh47q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpsr6yh47q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:46:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:49:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:52:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpsr6yh47q.swift:54:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be between 2 and 36\")\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp8di1x1ww.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp8di1x1ww.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"base should be between 2 and 36\")\n        ^~~~~\n/tmp/tmp8di1x1ww.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8di1x1ww.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp8di1x1ww.swift:27:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmp8di1x1ww.swift:27:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 10 {\n        return strconv.Itoa(x)\n    }\n    if x < base {\n        return change_base(x / base, base)\n    }\n    return change_base(x / base, base) + strconv.Itoa(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpc75jvu1y.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpc75jvu1y.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmpc75jvu1y.swift:22:16: error: cannot find 'strconv' in scope\n        return strconv.Itoa(x)\n               ^~~~~~~\n/tmp/tmpc75jvu1y.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x / base, base)\n                          ^\n                           x:        base: \n/tmp/tmpc75jvu1y.swift:27:42: error: cannot find 'strconv' in scope\n    return change_base(x / base, base) + strconv.Itoa(x % base)\n                                         ^~~~~~~\n/tmp/tmpc75jvu1y.swift:27:23: error: missing argument labels 'x:base:' in call\n    return change_base(x / base, base) + strconv.Itoa(x % base)\n                      ^\n                       x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmp_gzuppew.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp_gzuppew.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp_gzuppew.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp_gzuppew.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_gzuppew.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    if base == 4 {\n        return to_quadruple(x)\n    }\n    if base == 5 {\n        return to_quintuple(x)\n    }\n    if base == 6 {\n        return to_sextuple(x)\n    }\n    if base == 7 {\n        return to_septuple(x)\n    }\n    if base == 8 {\n        return to_octuple(x)\n    }\n    if base == 9 {\n        return to_nonuple(x)\n    }\n    return \"error\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpqkpnly4n.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpqkpnly4n.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:28:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n/tmp/tmpqkpnly4n.swift:31:16: error: cannot find 'to_quadruple' in scope\n        return to_quadruple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:34:16: error: cannot find 'to_quintuple' in scope\n        return to_quintuple(x)\n               ^~~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:37:16: error: cannot find 'to_sextuple' in scope\n        return to_sextuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:40:16: error: cannot find 'to_septuple' in scope\n        return to_septuple(x)\n               ^~~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:43:16: error: cannot find 'to_octuple' in scope\n        return to_octuple(x)\n               ^~~~~~~~~~\n/tmp/tmpqkpnly4n.swift:46:16: error: cannot find 'to_nonuple' in scope\n        return to_nonuple(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpd5qykq53.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpd5qykq53.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpd5qykq53.swift:25:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpd5qykq53.swift:28:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpgj0gkttm.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgj0gkttm.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpgj0gkttm.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base should be in 2 ~ 36\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x, base = divmod(x, base)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpuxwbp5ub.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpuxwbp5ub.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpuxwbp5ub.swift:24:10: error: consecutive statements on a line must be separated by ';'\n        x, base = divmod(x, base)\n         ^\n         ;\n/tmp/tmpuxwbp5ub.swift:24:10: error: expected expression\n        x, base = divmod(x, base)\n         ^\n/tmp/tmpuxwbp5ub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpuxwbp5ub.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"base should be in 2 ~ 36\")\n        ^~~~~\n/tmp/tmpuxwbp5ub.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmptvcsds_g.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmptvcsds_g.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmptvcsds_g.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmptvcsds_g.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpmybq4ihp.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpmybq4ihp.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpmybq4ihp.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpmybq4ihp.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"\"\n    }\n    if x < 10 {\n        return to_string(x)\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpm9yj3ouw.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm9yj3ouw.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpm9yj3ouw.swift:30:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"invalid base\"\n    }\n    if x < 0 {\n        return \"-\" + to_string(-x)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_string(x, 2)\n    }\n    if base == 16 {\n        return to_string(x, 16)\n    }\n    if base == 8 {\n        return to_string(x, 8)\n    }\n    if base == 3 {\n        return to_string(x, 3)\n    }\n    return \"invalid base\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmprrd7vxny.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmprrd7vxny.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:25:22: error: cannot find 'to_string' in scope\n        return \"-\" + to_string(-x)\n                     ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x, 2)\n               ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:37:16: error: cannot find 'to_string' in scope\n        return to_string(x, 16)\n               ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:40:16: error: cannot find 'to_string' in scope\n        return to_string(x, 8)\n               ^~~~~~~~~\n/tmp/tmprrd7vxny.swift:43:16: error: cannot find 'to_string' in scope\n        return to_string(x, 3)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpm75apdp_.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpm75apdp_.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpm75apdp_.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpm75apdp_.swift:25:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be 2 to 36\")\n    }\n    if x < 0 {\n        panic(\"x must be non-negative\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 2 {\n        return to_string(x)\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 3 {\n        return to_binary(x)\n    }\n    panic(\"unreachable\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpc5lqqyty.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpc5lqqyty.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc5lqqyty.swift:22:9: error: cannot find 'panic' in scope\n        panic(\"base must be 2 to 36\")\n        ^~~~~\n/tmp/tmpc5lqqyty.swift:25:9: error: cannot find 'panic' in scope\n        panic(\"x must be non-negative\")\n        ^~~~~\n/tmp/tmpc5lqqyty.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc5lqqyty.swift:34:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpc5lqqyty.swift:37:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpc5lqqyty.swift:40:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmpc5lqqyty.swift:43:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpc5lqqyty.swift:45:5: error: cannot find 'panic' in scope\n    panic(\"unreachable\")\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    return to_string(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7vh56kq4.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7vh56kq4.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp7vh56kq4.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmp7vh56kq4.swift:30:12: error: cannot find 'to_string' in scope\n    return to_string(x)\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return to_string(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiltv4tg3.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiltv4tg3.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiltv4tg3.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpgj0gkttm.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgj0gkttm.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpgj0gkttm.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_ternary(x)\n    }\n    if base == 4 {\n        return to_quaternary(x)\n    }\n    if base == 5 {\n        return to_quinary(x)\n    }\n    if base == 6 {\n        return to_senary(x)\n    }\n    if base == 7 {\n        return to_septenary(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    if base == 9 {\n        return to_nonary(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmp22wn_93o.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp22wn_93o.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp22wn_93o.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp22wn_93o.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmp22wn_93o.swift:28:16: error: cannot find 'to_ternary' in scope\n        return to_ternary(x)\n               ^~~~~~~~~~\n/tmp/tmp22wn_93o.swift:31:16: error: cannot find 'to_quaternary' in scope\n        return to_quaternary(x)\n               ^~~~~~~~~~~~~\n/tmp/tmp22wn_93o.swift:34:16: error: cannot find 'to_quinary' in scope\n        return to_quinary(x)\n               ^~~~~~~~~~\n/tmp/tmp22wn_93o.swift:37:16: error: cannot find 'to_senary' in scope\n        return to_senary(x)\n               ^~~~~~~~~\n/tmp/tmp22wn_93o.swift:40:16: error: cannot find 'to_septenary' in scope\n        return to_septenary(x)\n               ^~~~~~~~~~~~\n/tmp/tmp22wn_93o.swift:43:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n/tmp/tmp22wn_93o.swift:46:16: error: cannot find 'to_nonary' in scope\n        return to_nonary(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 3 {\n        return to_triple(x)\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpera__ic0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpera__ic0.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:22:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpera__ic0.swift:25:16: error: cannot find 'to_triple' in scope\n        return to_triple(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 || base > 36 {\n        panic(\"base must be between 2 and 36\")\n    }\n    if x < base {\n        return to_string(x)\n    }\n    var result = \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpdmp4bnz0.swift:25:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmpdmp4bnz0.swift:25:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmpdmp4bnz0.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpdmp4bnz0.swift:19:9: error: cannot find 'panic' in scope\n        panic(\"base must be between 2 and 36\")\n        ^~~~~\n/tmp/tmpdmp4bnz0.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpdmp4bnz0.swift:25:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 2 || base > 36 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmp7giav8h9.swift:27:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmp7giav8h9.swift:27:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmp7giav8h9.swift:28:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp7giav8h9.swift:28:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp7giav8h9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7giav8h9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7giav8h9.swift:25:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7giav8h9.swift:27:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmp7giav8h9.swift:28:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp7giav8h9.swift:32:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    for i := 0; i < x.len; i++ {\n        digit := x.digits[i]\n        if digit >= base {\n            digit = digit - base\n        }\n        result = result + strconv.Itoa(digit)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpnx8vx0b7.swift:13:12: error: expected type\n    for i := 0; i < x.len; i++ {\n           ^\n            <#type#>\n/tmp/tmpnx8vx0b7.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x.len; i++ {\n           ^\n/tmp/tmpnx8vx0b7.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x.len; i++ {\n           ^\n/tmp/tmpnx8vx0b7.swift:14:14: error: consecutive statements on a line must be separated by ';'\n        digit := x.digits[i]\n             ^\n             ;\n/tmp/tmpnx8vx0b7.swift:14:15: error: expected expression\n        digit := x.digits[i]\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base < 2 {\n        return \"\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    if x % base == 0 {\n        return to_string(x / base)\n    }\n    return to_string(x / base) + to_string(x % base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpx0hyfjub.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpx0hyfjub.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:28:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:31:16: error: cannot find 'to_string' in scope\n        return to_string(x / base)\n               ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:12: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n           ^~~~~~~~~\n/tmp/tmpx0hyfjub.swift:33:34: error: cannot find 'to_string' in scope\n    return to_string(x / base) + to_string(x % base)\n                                 ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result: String = \"\"\n    for i := 0; i < x.len(); i++ {\n        result += str(x.get(i) * base)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpm040p6pk.swift:13:12: error: expected type\n    for i := 0; i < x.len(); i++ {\n           ^\n            <#type#>\n/tmp/tmpm040p6pk.swift:13:12: error: expected 'in' after for-each pattern\n    for i := 0; i < x.len(); i++ {\n           ^\n/tmp/tmpm040p6pk.swift:13:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < x.len(); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 36 {\n        panic(\"Base should be in 2..36\")\n    }\n    if x < 0 {\n        panic(\"Negative number is not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        remainder := x % base\n        result = string(remainder) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmp6w16chp4.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp6w16chp4.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp6w16chp4.swift:23:18: error: consecutive statements on a line must be separated by ';'\n        remainder := x % base\n                 ^\n                 ;\n/tmp/tmp6w16chp4.swift:23:19: error: expected expression\n        remainder := x % base\n                  ^\n/tmp/tmp6w16chp4.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"Base should be in 2..36\")\n        ^~~~~\n/tmp/tmp6w16chp4.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"Negative number is not supported\")\n        ^~~~~\n/tmp/tmp6w16chp4.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    return to_string(x % base) + change_base(x / base, base)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpulotlfxy.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpulotlfxy.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:12: error: cannot find 'to_string' in scope\n    return to_string(x % base) + change_base(x / base, base)\n           ^~~~~~~~~\n/tmp/tmpulotlfxy.swift:21:45: error: missing argument labels 'x:base:' in call\n    return to_string(x % base) + change_base(x / base, base)\n                                            ^\n                                             x:        base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if x < base {\n        return to_string(x)\n    }\n    result := \"\"\n    for x > 0 {\n        result = to_string(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp_tq1cv51.swift:21:11: error: consecutive statements on a line must be separated by ';'\n    result := \"\"\n          ^\n          ;\n/tmp/tmp_tq1cv51.swift:21:12: error: expected expression\n    result := \"\"\n           ^\n/tmp/tmp_tq1cv51.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp_tq1cv51.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp_tq1cv51.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp_tq1cv51.swift:21:5: error: cannot find 'result' in scope\n    result := \"\"\n    ^~~~~~\n/tmp/tmp_tq1cv51.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n/tmp/tmp_tq1cv51.swift:26:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return change_base(x, 10)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmpiu3lfc6q.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpiu3lfc6q.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpiu3lfc6q.swift:25:27: error: missing argument labels 'x:base:' in call\n        return change_base(x, 10)\n                          ^\n                           x: base: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if base < 2 || base > 10 {\n        panic(\"Base should be 2 to 10\")\n    }\n    if x < 0 {\n        panic(\"Negative numbers are not supported\")\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for x > 0 {\n        result = string(base) + result\n        x = x / base\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmp67u_5fpz.swift:22:11: error: expected 'in' after for-each pattern\n    for x > 0 {\n          ^\n/tmp/tmp67u_5fpz.swift:22:11: error: unary operator cannot be separated from its operand\n    for x > 0 {\n          ^~\n           \n/tmp/tmp67u_5fpz.swift:13:9: error: cannot find 'panic' in scope\n        panic(\"Base should be 2 to 10\")\n        ^~~~~\n/tmp/tmp67u_5fpz.swift:16:9: error: cannot find 'panic' in scope\n        panic(\"Negative numbers are not supported\")\n        ^~~~~\n/tmp/tmp67u_5fpz.swift:22:11: error: '>' is not a prefix unary operator\n    for x > 0 {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base > 10 {\n        return \"\"\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "/tmp/tmp7bbybso9.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmp7bbybso9.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmp7bbybso9.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n    }\n    if base == 10 {\n        return to_string(x)\n    }\n    if base < 10 {\n        return to_string(x)\n    }\n    if base == 2 {\n        return to_binary(x)\n    }\n    if base == 16 {\n        return to_hex(x)\n    }\n    if base == 8 {\n        return to_octal(x)\n    }\n    return \"ERROR\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "/tmp/tmpgj0gkttm.swift:13:33: error: missing argument labels 'x:base:' in call\n        return \"-\" + change_base(-x, base)\n                                ^\n                                 x:  base: \n/tmp/tmpgj0gkttm.swift:19:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:22:16: error: cannot find 'to_string' in scope\n        return to_string(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:25:16: error: cannot find 'to_binary' in scope\n        return to_binary(x)\n               ^~~~~~~~~\n/tmp/tmpgj0gkttm.swift:28:16: error: cannot find 'to_hex' in scope\n        return to_hex(x)\n               ^~~~~~\n/tmp/tmpgj0gkttm.swift:31:16: error: cannot find 'to_octal' in scope\n        return to_octal(x)\n               ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}