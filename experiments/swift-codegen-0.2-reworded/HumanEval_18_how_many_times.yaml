name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
  \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
  \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string:\
  \ String, substring: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    if string == \"\" {\n        return 0\n    }\n    \n    count :=\
    \ 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    var i = 0\n    var j = 0\n    for i < len(string) {\n        for j < len(substring)\
    \ {\n            if string[i] == substring[j] {\n                count += 1\n\
    \                j += 1\n            } else {\n                j = 0\n       \
    \     }\n        }\n        i += 1\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  count -= 1\n                    break\n                }\n            }\n \
    \       }\n    }\n    \n    return count", "    var count = 0\n    var i = 0\n\
    \    var j = 0\n    for i < len(string) {\n        for j < len(substring) {\n\
    \            if string[i] == substring[j] {\n                count += 1\n    \
    \            i += 1\n                j += 1\n            } else {\n          \
    \      j = 0\n            }\n        }\n        i += 1\n    }\n    return count",
  "    if substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n   \
    \ \n    for i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n   \
    \ \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    \n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(substring) == 0 {\n        return 0\n    }\n\
    \    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n \
    \   count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i] ==\
    \ substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    for i < len(string) {\n        for j < len(substring)\
    \ {\n            if string[i] == substring[j] {\n                count += 1\n\
    \                j += 1\n            } else {\n                j = 0\n       \
    \     }\n        }\n        i += 1\n    }\n    return count", "    if len(substring)\
    \ == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var substring_length = len(substring)\n\
    \    var string_length = len(string)\n    for i < string_length {\n        for\
    \ j < substring_length {\n            if string[i] == substring[j] {\n       \
    \         count += 1\n                i += 1\n                j += 1\n       \
    \     } else {\n                j = 0\n            }\n        }\n        i +=\
    \ 1\n    }\n    return count", "    if len(string) == 0 || len(substring) == 0\
    \ {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n \
    \   count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                \n        \
    \        count += 1\n            }\n        }\n    }\n    \n    return count",
  "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n   \
    \ count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i] ==\
    \ substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    count\
    \ := 0\n    for i := 0; i < len(string) - len(substring) + 1; i++ {\n        if\
    \ string[i:i + len(substring)] == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    if substring == \"\" {\n        return 0\n\
    \    }\n    \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n \
    \       if string[i] == substring[0] {\n            count += 1\n            \n\
    \            if len(substring) == 1 {\n                break\n            }\n\
    \            \n            for j := 1; j < len(substring); j++ {\n           \
    \     if string[i+j] != substring[j] {\n                    break\n          \
    \      }\n                \n                count += 1\n            }\n      \
    \  }\n    }\n    \n    return count", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i <\
    \ len(string); i++ {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            \n            for j := 1; j < len(substring); j++ {\n    \
    \            if string[i+j] != substring[j] {\n                    break\n   \
    \             }\n                \n                count += 1\n            }\n\
    \        }\n    }\n    \n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i :=\
    \ 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i + len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    // Your code here\n    return 0", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            if\
    \ len(substring) == 1 {\n                break\n            }\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n \
    \   for i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 {\n        return 0\n\
    \    }\n    if len(substring) == 0 {\n        return 1\n    }\n    if string[0]\
    \ == substring[0] {\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\n    }\n    return how_many_times(string[1:], substring)", " \
    \   var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var j\
    \ = 0\n    for i < len(string) {\n        for j < len(substring) {\n         \
    \   if string[i] == substring[j] {\n                count += 1\n             \
    \   j += 1\n            } else {\n                j = 0\n            }\n     \
    \   }\n        i += 1\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i :=\
    \ 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i + len(substring)]\
    \ == substring {\n            count += 1\n        }\n    }\n    \n    return count",
  "    var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if string == \"\" || substring == \"\" {\n\
    \        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i + len(substring)] == substring\
    \ {\n            count += 1\n        }\n    }\n    \n    return count", "    var\
    \ count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    var j = 0\n   \
    \ var substring_len = len(substring)\n    var string_len = len(string)\n    while\
    \ i < string_len {\n        j = 0\n        while j < substring_len {\n       \
    \     if string[i+j] == substring[j] {\n                count += 1\n         \
    \       j += 1\n            } else {\n                j = 0\n            }\n \
    \       }\n        i += 1\n    }\n    return count", "    if len(string) == 0\
    \ {\n        return 0\n    }\n    if len(substring) == 0 {\n        return 1\n\
    \    }\n    count := 0\n    for i := 0; i < len(string) - len(substring) + 1;\
    \ i++ {\n        if string[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var substring_len = len(substring)\n    var string_len = len(string)\n\
    \    \n    while i < string_len {\n        j = 0\n        while j < substring_len\
    \ {\n            if string[i + j] == substring[j] {\n                count +=\
    \ 1\n                j += 1\n            } else {\n                j = 0\n   \
    \         }\n        }\n        i += 1\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            if len(substring) == 1 {\n          \
    \      break\n            }\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    \n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    count -=\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count", "    var count = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            if\
    \ len(substring) == 1 {\n                break\n            }\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(string); i++ {\n        if string[i] == substring[0] {\n           \
    \ count += 1\n            for j := 1; j < len(substring); j++ {\n            \
    \    if string[i+j] != substring[j] {\n                    break\n           \
    \     }\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string)\
    \ {\n        for j < len(substring) {\n            if string[i] == substring[j]\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else {\n                j = 0\n            }\n        }\n \
    \       i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if len(string) == 0\
    \ || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n  \
    \  for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    for j := 1; j < len(substring); j++ {\n                if string[i+j] !=\
    \ substring[j] {\n                    break\n                }\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    count -=\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count", "    if len(string) == 0 || len(substring) == 0 {\n\
    \        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            if len(substring) == 1 {\n                break\n\
    \            }\n            \n            for j := 1; j < len(substring); j++\
    \ {\n                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    \n    return count", "    if substring == \"\" {\n        return 0\n\
    \    }\n    \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n \
    \       if string[i] == substring[0] {\n            count += 1\n            \n\
    \            for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n  \
    \  \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if string == \"\" || substring == \"\" {\n\
    \        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if len(string) == 0\
    \ || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n  \
    \  \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    if string == \"\"\
    \ || substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    if len(string) ==\
    \ 0 || len(substring) == 0 {\n        return 0\n    }\n    count := 0\n    for\
    \ i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n \
    \       for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    for i < len(string) {\n        for j < len(substring) {\n       \
    \     if string[i] == substring[j] {\n                count += 1\n           \
    \     j += 1\n            } else {\n                j = 0\n            }\n   \
    \     }\n        i += 1\n    }\n    return count", "    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    while i < len(string) && j < len(substring) {\n  \
    \      if string[i] == substring[j] {\n            count += 1\n            i +=\
    \ 1\n            j += 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return count", "    if len(string) == 0 || len(substring) == 0 {\n  \
    \      return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n \
    \   var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b\
    \ = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =\
    \ 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var", "    var count = 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    var j = 0\n   \
    \ var substring_length = len(substring)\n    var string_length = len(string)\n\
    \    \n    for i < string_length {\n        for j < substring_length {\n     \
    \       if string[i] == substring[j] {\n                count += 1\n         \
    \       j += 1\n            } else {\n                j = 0\n            }\n \
    \       }\n        i += 1\n    }\n    return count", "    var count = 0\n    for\
    \ i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count", " \
    \   if len(string) == 0 {\n        return 0\n    }\n    if len(substring) == 0\
    \ {\n        return 1\n    }\n    \n    count := 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n        if\
    \ string[i] == substring[0] {\n            count += 1\n            for j := 1;\
    \ j < len(substring); j++ {\n                if string[i+j] != substring[j] {\n\
    \                    break\n                }\n                count += 1\n  \
    \          }\n        }\n    }\n    return count", "    if len(string) == 0 ||\
    \ len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            for j := 1; j < len(substring); j++ {\n    \
    \            if string[i+j] != substring[j] {\n                    break\n   \
    \             }\n                count += 1\n            }\n        }\n    }\n\
    \    return count", "    if substring == \"\" {\n        return 0\n    }\n   \
    \ \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                \n        \
    \        count += 1\n            }\n        }\n    }\n    \n    return count",
  "    if substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n   \
    \ for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    for j := 1; j < len(substring); j++ {\n                if string[i+j] !=\
    \ substring[j] {\n                    break\n                }\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var i = 0\n    for i < len(string) {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += 1\n            for i < len(substring)\
    \ {\n                if string[i] != substring[i] {\n                    break\n\
    \                }\n                i += 1\n            }\n        } else {\n\
    \            i += 1\n        }\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n \
    \   count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    \n    return count", "    if len(string)\
    \ == 0 {\n        return 0\n    }\n    if len(substring) == 0 {\n        return\
    \ 1\n    }\n    if string[0] == substring[0] {\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\n    } else {\n     \
    \   return how_many_times(string[1:], substring)\n    }", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n  \
    \      for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i <\
    \ len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n  \
    \      for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                j += 1\n            } else {\n  \
    \              j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string)\
    \ {\n        for j < len(substring) {\n            if string[i] == substring[j]\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else {\n                j = 0\n            }\n        }\n \
    \       i += 1\n    }\n    return count", "    var count = 0\n    for i := 0;\
    \ i < len(string) - len(substring) + 1; i++ {\n        if string[i:i + len(substring)]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n   \
    \ \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n \
    \       for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var", "    if len(string) == 0 || len(substring) == 0 {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            for j := 1; j < len(substring); j++ {\n    \
    \            if string[i+j] != substring[j] {\n                    break\n   \
    \             }\n                count += 1\n            }\n        }\n    }\n\
    \    return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(string) - len(substring) +\
    \ 1; i++ {\n        if string[i:i + len(substring)] == substring {\n         \
    \   count++\n        }\n    }\n    return count", "    if substring == \"\" {\n\
    \        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i + len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    \n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    \n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    count := 0\n   \
    \ for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(substring) == 0 {\n        return 0\n    }\n\
    \    \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var j\
    \ = 0\n    var substring_length = len(substring)\n    var string_length = len(string)\n\
    \    \n    for i < string_length {\n        for j < substring_length {\n     \
    \       if string[i] == substring[j] {\n                count += 1\n         \
    \       i += 1\n                j += 1\n            } else {\n               \
    \ j = 0\n            }\n        }\n        i += 1\n    }\n    \n    return count",
  "    var count = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    if len(string) ==\
    \ 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    \n    return count", "    if len(substring) == 0 {\n        return 0\n\
    \    }\n    if len(string) == 0 {\n        return 0\n    }\n    count := 0\n \
    \   for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    \n    return count", "    var\
    \ count = 0\n    var i = 0\n    for i < len(string) - len(substring) + 1 {\n \
    \       if string[i:i+len(substring)] == substring {\n            count += 1\n\
    \        }\n        i += 1\n    }\n    return count", "    if len(string) == 0\
    \ || len(substring) == 0 {\n        return 0\n    }\n    count := 0\n    for i\
    \ := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n     \
    \       count += 1\n            for j := 1; j < len(substring); j++ {\n      \
    \          if string[i+j] != substring[j] {\n                    break\n     \
    \           }\n                count += 1\n            }\n        }\n    }\n \
    \   return count", "    if len(string) == 0 || len(substring) == 0 {\n       \
    \ return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    for j := 1; j < len(substring); j++ {\n                if string[i+j] !=\
    \ substring[j] {\n                    break\n                }\n             \
    \   count += 1\n            }\n        }\n    }\n    \n    return count", "  \
    \  if string == \"\" || substring == \"\" {\n        return 0\n    }\n    count\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    var j = 0\n   \
    \ for i < len(string) {\n        for j < len(substring) {\n            if string[i]\
    \ == substring[j] {\n                count += 1\n                i += 1\n    \
    \            j += 1\n            } else {\n                j = 0\n           \
    \ }\n        }\n        i += 1\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n \
    \       if string[i] == substring[0] {\n            count += how_many_times(string[i+1:],\
    \ substring[1:])\n        }\n    }\n    \n    return count", "    var count =\
    \ 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    for i < len(string)\
    \ {\n        if string[i:i+len(substring)] == substring {\n            count +=\
    \ 1\n            i += len(substring)\n        } else {\n            i += 1\n \
    \       }\n    }\n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(substring) == 0 {\n        return 0\n    }\n    count := 0\n    for i :=\
    \ 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n        \
    \    count += 1\n            for j := 1; j < len(substring); j++ {\n         \
    \       if string[i+j] != substring[j] {\n                    break\n        \
    \        }\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = 0\n    var substring_len\
    \ = len(substring)\n    var string_len = len(string)\n    while i < string_len\
    \ {\n        if string[i] == substring[j] {\n            count += 1\n        \
    \    j += 1\n            if j == substring_len {\n                j = 0\n    \
    \            i += 1\n            }\n        } else {\n            j = 0\n    \
    \        i += 1\n        }\n    }\n    return count", "    var count = 0\n   \
    \ var i = 0\n    var j = 0\n    for i < len(string) {\n        for j < len(substring)\
    \ {\n            if string[i] == substring[j] {\n                count += 1\n\
    \                i += 1\n                j += 1\n            } else {\n      \
    \          j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n    count := 0\n    for i := 0; i < len(string) - len(substring) + 1; i++\
    \ {\n        if string[i:i + len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count", "    if substring == \"\" {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            if len(substring)\
    \ == 1 {\n                break\n            }\n            \n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n \
    \       for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i + len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    \n    count :=\
    \ 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    var i = 0\n    var j = 0\n    for i < len(string) {\n        for j < len(substring)\
    \ {\n            if string[i] == substring[j] {\n                count += 1\n\
    \                i += 1\n                j += 1\n            } else {\n      \
    \          j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n\
    \    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n       \
    \ if string[i] == substring[0] {\n            count += 1\n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    count -=\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count", "    if string == \"\" || substring == \"\" {\n   \
    \     return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        \n            for j := 1; j < len(substring); j++ {\n               \
    \ if string[i+j] != substring[j] {\n                    break\n              \
    \  }\n                \n                count += 1\n            }\n        }\n\
    \    }\n    \n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for i := 0; i < len(string) - len(substring) + 1; i++ {\n   \
    \     if string[i:i + len(substring)] == substring {\n            count++\n  \
    \      }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    for i < len(string) && j < len(substring) {\n        if string[i]\
    \ == substring[j] {\n            count += 1\n            i += 1\n            j\
    \ += 1\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    \n \
    \   count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                \n        \
    \        count += 1\n            }\n        }\n    }\n    \n    return count",
  "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n   \
    \ \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    \n    return count", "    if string == \"\" || substring ==\
    \ \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 0;\
    \ i < len(string); i++ {\n        if string[i] == substring[0] {\n           \
    \ count += 1\n            \n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    count -=\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    \n    return count", "    var count = 0\n    for i := 0; i < len(string)\
    \ - len(substring) + 1; i++ {\n        if string[i:i+len(substring)] == substring\
    \ {\n            count++\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    \n    count := 0\n    for i := 0; i < len(string) - len(substring)\
    \ + 1; i++ {\n        if string[i:i+len(substring)] == substring {\n         \
    \   count++\n        }\n    }\n    return count", "    if substring == \"\" {\n\
    \        return 0\n    }\n    count := 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    for j := 1; j < len(substring); j++ {\n                if string[i+j] !=\
    \ substring[j] {\n                    break\n                }\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    count := 0\n   \
    \ for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(substring) == 0 {\n        return 0\n    }\n\
    \    \n    count := 0\n    \n    for i := 0; i < len(string); {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += 1\n            \n\
    \            for j := 1; j < len(substring); {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      \n                count += 1\n                j += 1\n            }\n \
    \       } else {\n            i += 1\n        }\n    }\n    \n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    var substring_len = len(substring)\n\
    \    var string_len = len(string)\n    while i < string_len {\n        j = 0\n\
    \        while j < substring_len {\n            if string[i + j] != substring[j]\
    \ {\n                break\n            }\n            j += 1\n        }\n   \
    \     if j == substring_len {\n            count += 1\n            i += substring_len\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n \
    \       for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    if substring == \"\" {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(string) - len(substring) + 1; i++ {\n        if string[i:i + len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count", " \
    \   if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n  \
    \  \n    count := 0\n    for i := 0; i < len(string) - len(substring) + 1; i++\
    \ {\n        if string[i:i+len(substring)] == substring {\n            count +=\
    \ 1\n        }\n    }\n    \n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n \
    \   for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            \n            if len(substring) == 1 {\n\
    \                return count\n            }\n            \n            for j\
    \ := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    count -= 1\n                    break\n             \
    \   }\n            }\n        }\n    }\n    \n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    if len(string) ==\
    \ 0 {\n        return 0\n    }\n    if len(substring) == 0 {\n        return 1\n\
    \    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n    count\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if substring == \"\" {\n        return 0\n    }\n\
    \    count := 0\n    for i := 0; i < len(string) - len(substring) + 1; i++ {\n\
    \        if string[i:i+len(substring)] == substring {\n            count += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i <\
    \ len(string); i++ {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            \n            for j := 1; j < len(substring); j++ {\n    \
    \            if string[i+j] != substring[j] {\n                    break\n   \
    \             }\n                \n                count += 1\n            }\n\
    \        }\n    }\n    \n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n    count\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    var j = 0\n   \
    \ for i < len(string) && j < len(substring) {\n        if string[i] == substring[j]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                \n                count += 1\n  \
    \          }\n        }\n    }\n    \n    return count", "    var count = 0\n\
    \    var i = 0\n    var j = 0\n    for i < len(string) {\n        j = 0\n    \
    \    for j < len(substring) {\n            if string[i+j] == substring[j] {\n\
    \                count += 1\n                j += 1\n            } else {\n  \
    \              j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    var count = 0\n    for i := 0; i < len(string) - len(substring)\
    \ + 1; i++ {\n        if string[i:i + len(substring)] == substring {\n       \
    \     count++\n        }\n    }\n    return count", "    if len(string) == 0 ||\
    \ len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            for j := 1; j < len(substring); j++ {\n    \
    \            if string[i+j] != substring[j] {\n                    break\n   \
    \             }\n                count += 1\n            }\n        }\n    }\n\
    \    return count", "    var count = 0\n    var i = 0\n    var j = 0\n    for\
    \ i < len(string) {\n        for j < len(substring) {\n            if string[i]\
    \ == substring[j] {\n                count += 1\n                i += 1\n    \
    \            j += 1\n            } else {\n                j = 0\n           \
    \ }\n        }\n        i += 1\n    }\n    return count", "    if string == \"\
    \" || substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n   \
    \ \n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            \n            if len(substring) == 1\
    \ {\n                break\n            }\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                \n        \
    \        count += 1\n            }\n        }\n    }\n    \n    return count",
  "    if substring == \"\" {\n        return 0\n    }\n    \n    count := 0\n   \
    \ for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var i = 0\n    var j = 0\n   \
    \ for i < len(string) {\n        for j < len(substring) {\n            if string[i]\
    \ == substring[j] {\n                count += 1\n                i += 1\n    \
    \            j += 1\n            } else {\n                j = 0\n           \
    \ }\n        }\n        i += 1\n    }\n    return count", "    if len(string)\
    \ == 0 || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            for j := 1; j < len(substring); j++ {\n\
    \                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(string) == 0 {\n        return 0\n    }\n\
    \    if len(substring) == 0 {\n        return 1\n    }\n    count := 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += how_many_times(string[i+1:], substring[1:])\n        }\n  \
    \  }\n    return count", "    if substring == \"\" {\n        return 0\n    }\n\
    \    \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if\
    \ string[i] == substring[0] {\n            count += 1\n            \n        \
    \    if len(substring) == 1 {\n                return count\n            }\n \
    \           \n            for j := 1; j < len(substring); j++ {\n            \
    \    if string[i+j] != substring[j] {\n                    count -= 1\n      \
    \              break\n                }\n            }\n        }\n    }\n   \
    \ \n    return count", "    var count = 0\n    for i := 0; i < len(string); i++\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    for j := 1; j < len(substring); j++ {\n                if string[i+j] !=\
    \ substring[j] {\n                    break\n                }\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    \n    count :=\
    \ 0\n    for i := 0; i < len(string); i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count += 1\n        }\n    }\n    \n    return count",
  "    if len(string) == 0 {\n        return 0\n    }\n    if len(substring) == 0\
    \ {\n        return 1\n    }\n    if string[0] == substring[0] {\n        return\
    \ how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n\
    \    } else {\n        return how_many_times(string[1:], substring)\n    }", " \
    \   if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n  \
    \  \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    \n    return count", "    var count = 0\n    for i := 0; i <\
    \ len(string); i++ {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            for j := 1; j < len(substring); j++ {\n                if\
    \ string[i+j] != substring[j] {\n                    break\n                }\n\
    \                count += 1\n            }\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    \n \
    \   count := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            \n            for j :=\
    \ 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                \n        \
    \        count += 1\n            }\n        }\n    }\n    \n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n  \
    \      for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    var count = 0\n    for i := 0; i <\
    \ len(string); i++ {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            for j := 1; j < len(substring); j++ {\n                if\
    \ string[i+j] != substring[j] {\n                    break\n                }\n\
    \                count += 1\n            }\n        }\n    }\n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n  \
    \      for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    if substring == \"\" {\n        return\
    \ 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            \n\
    \            for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      \n                count += 1\n            }\n        }\n    }\n    \n \
    \   return count", "    if len(string) < len(substring) {\n        return 0\n\
    \    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n       \
    \ if string[i:i+len(substring)] == substring {\n            count += 1\n     \
    \   }\n    }\n    \n    return count", "    if len(string) == 0 || len(substring)\
    \ == 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ string == \"\" || substring == \"\" {\n        return 0\n    }\n    \n    count\
    \ := 0\n    \n    for i := 0; i < len(string); i++ {\n        if string[i] ==\
    \ substring[0] {\n            count += 1\n            \n            for j := 1;\
    \ j < len(substring); j++ {\n                if string[i+j] != substring[j] {\n\
    \                    break\n                }\n                \n            \
    \    count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string) {\n \
    \       for j < len(substring) {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    for i < len(string) {\n        for j < len(substring) {\n       \
    \     if string[i] == substring[j] {\n                count += 1\n           \
    \     j += 1\n            } else {\n                j = 0\n            }\n   \
    \     }\n        i += 1\n    }\n    return count", "    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    for i < len(string) {\n        for j < len(substring)\
    \ {\n            if string[i] == substring[j] {\n                count += 1\n\
    \                i += 1\n                j += 1\n            } else {\n      \
    \          j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = 0\n    for i < len(string)\
    \ {\n        for j < len(substring) {\n            if string[i] == substring[j]\
    \ {\n                count += 1\n                j += 1\n            } else {\n\
    \                j = 0\n            }\n        }\n        i += 1\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = 0\n    var substring_len\
    \ = len(substring)\n    var string_len = len(string)\n    for i < string_len {\n\
    \        for j < substring_len {\n            if string[i] == substring[j] {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \            } else {\n                j = 0\n            }\n        }\n     \
    \   i += 1\n    }\n    return count", "    var count = 0\n    for i := 0; i <\
    \ len(string); i++ {\n        if string[i:i+len(substring)] == substring {\n \
    \           count++\n        }\n    }\n    return count", "    if len(string)\
    \ == 0 {\n        return 0\n    }\n    if len(substring) == 0 {\n        return\
    \ 1\n    }\n    if string[0] == substring[0] {\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\n    }\n    return how_many_times(string[1:],\
    \ substring)", "    if len(string) == 0 || len(substring) == 0 {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string) - len(substring)\
    \ + 1; i++ {\n        if string[i:i+len(substring)] == substring {\n         \
    \   count++\n        }\n    }\n    \n    return count", "    var count = 0\n \
    \   for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(string) == 0 || len(substring) == 0 {\n  \
    \      return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        \n            if len(substring) == 1 {\n                break\n     \
    \       }\n            \n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                \n                count += 1\n           \
    \ }\n        }\n    }\n    \n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    \n    count := 0\n    \n    for i :=\
    \ 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    \n    return count",
  "    if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n   \
    \ \n    count := 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            for j := 1; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    if len(string) == 0 || len(substring) ==\
    \ 0 {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n    for\
    \ i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            if len(substring) == 1 {\n                break\n\
    \            }\n            \n            for j := 1; j < len(substring); j++\
    \ {\n                if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    \n    return count", "    if len(string) == 0 || len(substring) == 0\
    \ {\n        return 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    return count", "    if\
    \ string == \"\" || substring == \"\" {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(string) - len(substring) + 1; i++ {\n        if string[i:i\
    \ + len(substring)] == substring {\n            count++\n        }\n    }\n  \
    \  return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    \n    count := 0\n    for i := 0; i < len(string); i++ {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if len(string) == 0\
    \ || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n  \
    \  for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            for j := 1; j < len(substring); j++ {\n \
    \               if string[i+j] != substring[j] {\n                    break\n\
    \                }\n                count += 1\n            }\n        }\n   \
    \ }\n    return count", "    if len(string) == 0 || len(substring) == 0 {\n  \
    \      return 0\n    }\n    count := 0\n    for i := 0; i < len(string); i++ {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            for\
    \ j := 1; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(string); i++ {\n        if string[i] == substring[0] {\n           \
    \ count += 1\n            for j := 1; j < len(substring); j++ {\n            \
    \    if string[i+j] != substring[j] {\n                    break\n           \
    \     }\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    if len(string) < len(substring) {\n        return 0\n    }\n  \
    \  \n    count := 0\n    for i := 0; i < len(string) - len(substring) + 1; i++\
    \ {\n        if string[i:i + len(substring)] == substring {\n            count\
    \ += 1\n        }\n    }\n    \n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    \n    count := 0\n    \n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += 1\n    \
    \        for j := 1; j < len(substring); j++ {\n                if string[i+j]\
    \ != substring[j] {\n                    break\n                }\n          \
    \      count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   if len(string) == 0 || len(substring) == 0 {\n        return 0\n    }\n  \
    \  \n    count := 0\n    \n    for i := 0; i < len(string) - len(substring) +\
    \ 1; i++ {\n        if string[i:i+len(substring)] == substring {\n           \
    \ count++\n        }\n    }\n    \n    return count", "    if len(string) == 0\
    \ || len(substring) == 0 {\n        return 0\n    }\n    \n    count := 0\n  \
    \  for i := 0; i < len(string); i++ {\n        if string[i] == substring[0] {\n\
    \            count += how_many_times(string[i+1:], substring)\n        }\n   \
    \ }\n    return count"]
stop_tokens:
- "\n}"
