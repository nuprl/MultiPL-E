{
  "name": "HumanEval_21_rescale_to_unit",
  "language": "swift",
  "prompt": "\n/// Given array of numbers (of at least two elements), apply a linear transform to that array,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers: [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])",
  "completions": [
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min {\n\t\t\tmin = numbers[i]\n\t\t}\n\t\tif numbers[i] > max {\n\t\t\tmax = numbers[i]\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    let min = numbers[0]\n    let max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    return [min, (max - min) / (max - min)]",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i := range numbers {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var result = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i] - min_value\n        result[i] /= max_value - min_value\n    }\n    return result",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var rescaled_numbers = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    }\n    return rescaled_numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min_value := numbers[0]\n    max_value := numbers[0]\n    for _, value := range numbers {\n        if value < min_value {\n            min_value = value\n        }\n        if value > max_value {\n            max_value = value\n        }\n    }\n    return [min_value] + map(func(value: Double) Double {\n        return (value - min_value) / (max_value - min_value)\n    }, numbers) + [max_value]",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min_value) * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] /= max - min\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([Double]([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "    let min = numbers[0]\n    let max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    let scale = 1.0 / (max - min)\n    let result = []\n    for i := 0; i < len(numbers); i++ {\n        result = append(result, numbers[i] - min)\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = result[i] * scale\n    }\n    return result",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double] {\n\t\tmin,\n\t\t(max - min) / (max - min),\n\t\t0.0,\n\t}",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double] {\n\t\tmin,\n\t\t(max - min) / (max - min),\n\t}",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min\n    }\n    return numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min {\n\t\t\tmin = numbers[i]\n\t\t}\n\t\tif numbers[i] > max {\n\t\t\tmax = numbers[i]\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for _, number := range numbers {\n        number -= min\n        number /= (max - min)\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min_value\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var rescaled_numbers = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = numbers[i] - min_value\n        rescaled_numbers[i] /= max_value - min_value\n    }\n    return rescaled_numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    let min = numbers[0]\n    let max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    let scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min\n    }\n    return numbers",
    "    let min = numbers[0]\n    let max = numbers[0]\n    for i in numbers {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    let scale = 1.0 / (max - min)\n    for i in numbers {\n        numbers[i] = (i - min) * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, max})",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] /= max - min\n    }\n    return numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min_value) * scale\n    }\n    return numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return [Double] {\n        min,\n        (max - min) / (len(numbers) - 1),\n    }",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var rescaled_numbers = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    }\n    return rescaled_numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i, number := range numbers {\n        numbers[i] = (number - min) * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, max})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, v := range numbers {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\tfor i, v := range numbers {\n\t\tnumbers[i] = v - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, max})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([min, max])",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    if len(numbers) < 2 {\n        panic(\"rescale_to_unit: array must have at least two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i := range numbers {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([Double]{min, max})",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, v := range numbers {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    for i, v := range numbers {\n        numbers[i] = (v - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] /= max - min\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    let min = numbers[0]\n    let max = numbers[0]\n    for i in numbers {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    let scale = 1.0 / (max - min)\n    let result = []\n    for i in numbers {\n        result.append(i * scale)\n    }\n    return result",
    "\tmin_value := numbers[0]\n\tmax_value := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min_value {\n\t\t\tmin_value = number\n\t\t}\n\t\tif number > max_value {\n\t\t\tmax_value = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min_value\n\t\tnumbers[i] /= max_value - min_value\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    return [Double]([min, max])",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min {\n\t\t\tmin = numbers[i]\n\t\t}\n\t\tif numbers[i] > max {\n\t\t\tmax = numbers[i]\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min_value := numbers[0]\n    max_value := numbers[0]\n    for _, value := range numbers {\n        if value < min_value {\n            min_value = value\n        }\n        if value > max_value {\n            max_value = value\n        }\n    }\n    if min_value == max_value {\n        return numbers\n    }\n    for _, value := range numbers {\n        value -= min_value\n        value /= (max_value - min_value)\n    }\n    return numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "    // Write your code here\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min_value\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    return [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale - min\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) * scale\n    }\n    return numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for _, number := range numbers {\n        number -= min\n        number /= (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, v := range numbers {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "    min_value := numbers[0]\n    max_value := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] /= (max_value - min_value)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var rescaled_numbers = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    }\n    return rescaled_numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([Double]([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    return [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, max})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, v := range numbers {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, v := range numbers {\n\t\tv -= min\n\t\tv /= (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min_value := numbers[0]\n    max_value := numbers[0]\n    for _, number := range numbers {\n        if number < min_value {\n            min_value = number\n        }\n        if number > max_value {\n            max_value = number\n        }\n    }\n    for i := range numbers {\n        numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, max})",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([min, max])",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / 2, (max + min) / 2, max})",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([min, max])",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] *= scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double] {\n\t\t(number - min) / (max - min)\n\t}",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max - min)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min_value\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "    if len(numbers) < 2 {\n        panic(\"rescale_to_unit: array must have at least two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, v := range numbers {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max == min {\n        return numbers\n    }\n    for _, v := range numbers {\n        v -= min\n        v /= (max - min)\n    }\n    return numbers",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i := range numbers {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, (max - min) / (max - min)})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i := range numbers {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([Double]([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([Double])([",
    "    min := numbers[0]\n    max := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min {\n\t\t\tmin = numbers[i]\n\t\t}\n\t\tif numbers[i] > max {\n\t\t\tmax = numbers[i]\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double] {\n\t\tmin,\n\t\t(max - min) / (max - min),\n\t\t0.0,\n\t}",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var rescaled_numbers = make([]Double, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    }\n    return rescaled_numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - min\n        numbers[i] /= max - min\n    }\n    return numbers",
    "    var min = numbers[0]\n    var max = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n        }\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n    return [Double] {\n        min,\n        (max - min) / (max - min),\n    }",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([Double]{min, max})",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = number - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers",
    "    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < min_value {\n            min_value = numbers[i]\n        }\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n        }\n    }\n    var scale = 1.0 / (max_value - min_value)\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * scale\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\treturn numbers",
    "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n        if number > max {\n            max = number\n        }\n        if number < min {\n            min = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\tif max == min {\n\t\treturn numbers\n\t}\n\tfor _, number := range numbers {\n\t\tnumber -= min\n\t\tnumber /= (max - min)\n\t}\n\treturn numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\treturn [Double]([]Double{min, max})",
    "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, v := range numbers {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    for i := range numbers {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers",
    "\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < min {\n\t\t\tmin = numbers[i]\n\t\t}\n\t\tif numbers[i] > max {\n\t\t\tmax = numbers[i]\n\t\t}\n\t}\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = numbers[i] - min\n\t\tnumbers[i] /= max - min\n\t}\n\treturn numbers"
  ],
  "stop_tokens": [
    "\n}"
  ]
}