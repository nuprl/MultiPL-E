{
  "name": "HumanEval_22_filter_integers",
  "language": "swift",
  "prompt": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppv2whsx4.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, is_integer)\n               ^~~~~~\n/tmp/tmppv2whsx4.swift:8:24: error: cannot find 'is_integer' in scope\n        return filter(values, is_integer)\n                              ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter_values(values, func(value: AnyHashable) -> bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp9j89n792.swift:8:34: error: expected expression in list of expressions\n    return filter_values(values, func(value: AnyHashable) -> bool {\n                                 ^\n/tmp/tmp9j89n792.swift:8:38: error: expected identifier in function declaration\n    return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmp9j89n792.swift:8:12: error: cannot find 'filter_values' in scope\n    return filter_values(values, func(value: AnyHashable) -> bool {\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4mnp_nd4.swift:8:34: error: expected expression in list of expressions\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                 ^\n/tmp/tmp4mnp_nd4.swift:8:38: error: expected identifier in function declaration\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                     ^\n/tmp/tmp4mnp_nd4.swift:8:12: error: cannot find 'filter_values' in scope\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp1no2o6m1.swift:8:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return [Int]\n           ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.filter(is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpnu0gua0x.swift:8:26: error: cannot find 'is_integer' in scope\n    return values.filter(is_integer)\n                         ^~~~~~~~~~\n/tmp/tmpnu0gua0x.swift:8:19: error: cannot convert return expression of type '[AnyHashable]' to return type '[Int]'\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:19: note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter(is_integer)\n                  ^\n/tmp/tmpnu0gua0x.swift:8:26: error: converting non-escaping value to '(AnyHashable) throws -> Bool' may allow it to escape\n    return values.filter(is_integer)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if value is Int {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4chnnti9.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if value is Int {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4chnnti9.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4mnp_nd4.swift:8:34: error: expected expression in list of expressions\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                 ^\n/tmp/tmp4mnp_nd4.swift:8:38: error: expected identifier in function declaration\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                     ^\n/tmp/tmp4mnp_nd4.swift:8:12: error: cannot find 'filter_values' in scope\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if value is Int {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4chnnti9.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4mnp_nd4.swift:8:34: error: expected expression in list of expressions\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                 ^\n/tmp/tmp4mnp_nd4.swift:8:38: error: expected identifier in function declaration\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                     ^\n/tmp/tmp4mnp_nd4.swift:8:12: error: cannot find 'filter_values' in scope\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter_values(values, func(value: AnyHashable) -> bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpdzpi2d2r.swift:8:31: error: expected expression in list of expressions\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                     ^\n/tmp/tmpdzpi2d2r.swift:8:35: error: expected identifier in function declaration\n        return filter_values(values, func(value: AnyHashable) -> bool {\n                                         ^\n/tmp/tmpdzpi2d2r.swift:8:9: error: cannot find 'filter_values' in scope\n        return filter_values(values, func(value: AnyHashable) -> bool {\n               ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmp4mnp_nd4.swift:8:34: error: expected expression in list of expressions\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                 ^\n/tmp/tmp4mnp_nd4.swift:8:38: error: expected identifier in function declaration\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n                                     ^\n/tmp/tmp4mnp_nd4.swift:8:12: error: cannot find 'filter_values' in scope\n    return filter_values(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n\treturn filter(values, func(value: AnyHashable) -> Bool {\n\t\treturn is_integer(value)\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmpydipnsg6.swift:8:24: error: expected expression in list of expressions\n        return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmpydipnsg6.swift:8:28: error: expected identifier in function declaration\n        return filter(values, func(value: AnyHashable) -> Bool {\n                                  ^\n/tmp/tmpydipnsg6.swift:8:9: error: cannot find 'filter' in scope\n        return filter(values, func(value: AnyHashable) -> Bool {\n               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, func(value: AnyHashable) -> Bool {\n        return is_integer(value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmps_jrzl67.swift:8:27: error: expected expression in list of expressions\n    return filter(values, func(value: AnyHashable) -> Bool {\n                          ^\n/tmp/tmps_jrzl67.swift:8:31: error: expected identifier in function declaration\n    return filter(values, func(value: AnyHashable) -> Bool {\n                              ^\n/tmp/tmps_jrzl67.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, func(value: AnyHashable) -> Bool {\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if is_integer(value) {\n            result.append(value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmptqfdyjzn.swift:10:12: error: cannot find 'is_integer' in scope\n        if is_integer(value) {\n           ^~~~~~~~~~\n/tmp/tmptqfdyjzn.swift:11:27: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\n            result.append(value)\n                          ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return filter(values, is_integer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])",
      "timestamp": 1664292896,
      "stdout": "",
      "stderr": "/tmp/tmppbnt6n8d.swift:8:12: error: cannot find 'filter' in scope\n    return filter(values, is_integer)\n           ^~~~~~\n/tmp/tmppbnt6n8d.swift:8:27: error: cannot find 'is_integer' in scope\n    return filter(values, is_integer)\n                          ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}