{
  "name": "HumanEval_136_largest_smallest_integers",
  "language": "swift",
  "prompt": "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in an array.\n/// If there is no negative or positive integers, return them as nil.\n/// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil, 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>> largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\nassert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100, 1]) == (-3, 1))",
  "completions": [
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    \n    var max = lst[0]\n    var min = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            max_neg = max_neg if max_neg < lst[i] else lst[i]\n        } else if lst[i] > 0 {\n            min_pos = min_pos if min_pos > lst[i] else lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    var max_negative_int Int\n    var min_positive_int Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            max_negative_int = max_negative_int + lst[i]\n        } else if lst[i] > 0 {\n            min_positive_int = min_positive_int + lst[i]\n        }\n    }\n    if max_negative_int > 0 {\n        return (max_negative_int, min_positive_int)\n    } else if min_positive_int > 0 {\n        return (nil, min_positive_int)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_idx = -1\n    var pos_idx = -1\n    for i, v := range lst {\n        if v < 0 {\n            if neg_idx == -1 {\n                neg_idx = i\n            } else {\n                if v < lst[neg_idx] {\n                    neg_idx = i\n                }\n            }\n        } else if v > 0 {\n            if pos_idx == -1 {\n                pos_idx = i\n            } else {\n                if v > lst[pos_idx] {\n                    pos_idx = i\n                }\n            }\n        }\n    }\n    if neg_idx == -1 {\n        return (nil, nil)\n    } else if pos_idx == -1 {\n        return (lst[neg_idx], nil)\n    } else {\n        return (lst[neg_idx], lst[pos_idx])\n    }",
    "    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    if max_neg == -1 && min_pos == 1 {\n        return nil, nil\n    } else {\n        return max_neg, min_pos\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    }\n    if min_positive == 1 {\n        return (nil, nil)\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    }\n    return (nil, nil)",
    "    var a Int\n    var b Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if lst[i] > 0 {\n            b = lst[i]\n        }\n    }\n    return a, b",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    if lst[0] < 0 {\n        return (lst[0], lst[1])\n    }\n    if lst[len(lst) - 1] > 0 {\n        return (lst[len(lst) - 1], lst[0])\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_val := lst[0]\n    min_val := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_val {\n            max_val = lst[i]\n        }\n        if lst[i] < min_val {\n            min_val = lst[i]\n        }\n    }\n    return (max_val, min_val)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var neg_int = -1\n    var pos_int = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > neg_int {\n                neg_int = v\n            }\n        } else {\n            if v < pos_int {\n                pos_int = v\n            }\n        }\n    }\n    return neg_int, pos_int",
    "    var a Int\n    var b Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if lst[i] > 0 {\n            b = lst[i]\n        }\n    }\n    return a, b",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return nil, nil\n    }\n    if min_pos == 1 {\n        return nil, nil\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    \n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    \n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max, min Int\n    for _, v := range lst {\n        if v < 0 {\n            if v > max {\n                max = v\n            }\n        } else if v > 0 {\n            if v < min {\n                min = v\n            }\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max := lst[0]\n    min := lst[0]\n    for _, i := range lst {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_max Int\n    var pos_int_min Int\n    var neg_int_max_found bool\n    var pos_int_min_found bool\n    var neg_int_max_found_index Int\n    var pos_int_min_found_index Int\n    var i Int\n    var j Int\n    var k Int\n    var lst_len Int\n    var lst_len_minus_1 Int\n    var lst_len_minus_2 Int\n    var lst_len_minus_3 Int\n    var lst_len_minus_4 Int\n    var lst_len_minus_5 Int\n    var lst_len_minus_6 Int\n    var lst_len_minus_7 Int\n    var lst_len_minus_8 Int\n    var lst_len_minus_9 Int\n    var lst_len_minus_10 Int\n    var lst_len_minus_11 Int\n    var lst_len_minus_12 Int\n    var lst_len_minus_13 Int\n    var lst_len_minus_14 Int\n    var lst_len_minus_15 Int\n    var lst_len_minus_16 Int\n    var lst_len_minus_17 Int\n    var lst_len_minus_18 Int\n    var lst_len_minus_19 Int\n    var lst_len_minus_20 Int\n    var lst_len_minus_21 Int\n    var lst_len_minus_22 Int\n    var lst_len_minus_23 Int\n    var lst_len_minus_24 Int\n    var lst_len_minus_25 Int\n    var lst_len_minus_26 Int\n    var lst_len_minus_27 Int\n    var lst_len_minus_28 Int\n    var lst_len_minus_29 Int\n    var lst_len_minus_30 Int\n    var lst_len_minus_31 Int\n    var lst_len_minus_32 Int\n    var lst_len_minus_33 Int\n    var lst_len_minus_34 Int\n    ",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "\tif len(lst) == 0 {\n\t\treturn nil, nil\n\t}\n\tvar max_neg, min_pos Int\n\tfor _, v := range lst {\n\t\tif v < 0 {\n\t\t\tif v > max_neg {\n\t\t\t\tmax_neg = v\n\t\t\t}\n\t\t} else if v > 0 {\n\t\t\tif v < min_pos {\n\t\t\t\tmin_pos = v\n\t\t\t}\n\t\t}\n\t}\n\treturn max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_int = -1\n    var pos_int = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if neg_int == -1 {\n                neg_int = lst[i]\n            } else {\n                neg_int = max(neg_int, lst[i])\n            }\n        } else if lst[i] > 0 {\n            if pos_int == 1 {\n                pos_int = lst[i]\n            } else {\n                pos_int = min(pos_int, lst[i])\n            }\n        }\n    }\n    return (neg_int, pos_int)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max, min Int\n    for _, i := range lst {\n        if i < 0 {\n            if i > max {\n                max = i\n            }\n        } else {\n            if i < min {\n                min = i\n            }\n        }\n    }\n    return max, min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_idx = -1\n    var pos_idx = -1\n    var max_val = -1\n    var min_val = 1\n    for i, val := range lst {\n        if val < 0 {\n            if val > max_val {\n                max_val = val\n                neg_idx = i\n            }\n        } else {\n            if val < min_val {\n                min_val = val\n                pos_idx = i\n            }\n        }\n    }\n    if neg_idx == -1 && pos_idx == -1 {\n        return (nil, nil)\n    }\n    return (max_val, min_val)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return max_neg, min_pos",
    "\tif len(lst) == 0 {\n\t\treturn nil, nil\n\t}\n\tvar (\n\t\tmax_int = lst[0]\n\t\tmin_int = lst[0]\n\t)\n\tfor _, v := range lst {\n\t\tif v > max_int {\n\t\t\tmax_int = v\n\t\t}\n\t\tif v < min_int {\n\t\t\tmin_int = v\n\t\t}\n\t}\n\treturn max_int, min_int",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    } else if min_positive != 1 {\n        return (nil, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_max = -1\n    var pos_min = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > neg_max {\n                neg_max = v\n            }\n        } else if v > pos_min {\n            pos_min = v\n        }\n    }\n    if neg_max == -1 {\n        return (nil, nil)\n    }\n    return (neg_max, pos_min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 && min_pos == 1 {\n        return (nil, nil)\n    } else if max_neg == -1 {\n        return (nil, min_pos)\n    } else if min_pos == 1 {\n        return (max_neg, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_int = -1\n    var pos_int = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > neg_int {\n                neg_int = lst[i]\n            }\n        } else if lst[i] > pos_int {\n            pos_int = lst[i]\n        }\n    }\n    return (neg_int, pos_int)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg = false\n    var pos = false\n    var neg_idx = 0\n    var pos_idx = 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            neg = true\n            neg_idx = i\n            break\n        }\n        if lst[i] > 0 {\n            pos = true\n            pos_idx = i\n            break\n        }\n    }\n    if neg && pos {\n        return (lst[neg_idx], lst[pos_idx])\n    } else if neg {\n        return (lst[neg_idx], nil)\n    } else if pos {\n        return (nil, lst[pos_idx])\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max, min Int\n    for _, v := range lst {\n        if v < 0 {\n            if v > max {\n                max = v\n            }\n        } else {\n            if v < min {\n                min = v\n            }\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_val Int\n    var pos_int_val Int\n    var neg_int_found bool\n    var pos_int_found bool\n    var neg_int_index Int\n    var pos_int_index Int\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_int_val_index Int\n    var pos_int_val_index Int\n    var neg_int_val_found bool\n    var pos_int_val_found bool\n    var neg_",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_ints = []Int\n    var pos_ints = []Int\n    for _, v := range lst {\n        if v < 0 {\n            neg_ints = append(neg_ints, v)\n        } else if v > 0 {\n            pos_ints = append(pos_ints, v)\n        }\n    }\n    if len(neg_ints) == 0 {\n        return (nil, pos_ints[0])\n    }\n    if len(pos_ints) == 0 {\n        return (neg_ints[0], nil)\n    }\n    if neg_ints[0] > pos_ints[0] {\n        return (neg_ints[0], pos_ints[0])\n    }\n    return (pos_ints[0], neg_ints[0])",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, i := range lst {\n        if i < 0 {\n            neg_lst = append(neg_lst, i)\n        } else if i > 0 {\n            pos_lst = append(pos_lst, i)\n        }\n    }\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst[0])\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst[0], nil)\n    }\n    if neg_lst[0] > pos_lst[0] {\n        return (neg_lst[0], pos_lst[0])\n    }\n    return (pos_lst[0], neg_lst[0])",
    "\tif len(lst) == 0 {\n\t\treturn nil, nil\n\t}\n\tmin := lst[0]\n\tmax := lst[0]\n\tfor _, v := range lst {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max, min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    if len(lst) == 1 {\n        return lst[0], lst[0]\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    if max_negative == -1 {\n        return nil, nil\n    }\n    if min_positive == 1 {\n        return nil, nil\n    }\n    return max_negative, min_positive",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    if lst[0] < 0 {\n        return (lst[0], lst[1])\n    }\n    if lst[len(lst) - 1] > 0 {\n        return (lst[len(lst) - 1], lst[0])\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    if lst[0] < 0 {\n        return (lst[0], lst[1])\n    }\n    if lst[len(lst) - 1] > 0 {\n        return (lst[len(lst) - 1], lst[0])\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max, min Int\n    for _, v := range lst {\n        if v < 0 {\n            if v > max {\n                max = v\n            }\n        } else {\n            if v < min {\n                min = v\n            }\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var negative = false\n    var positive = false\n    for _, v := range lst {\n        if v < 0 {\n            negative = true\n        } else if v > 0 {\n            positive = true\n        }\n    }\n    if negative && positive {\n        return (nil, nil)\n    }\n    if negative {\n        return (min_int, max_int)\n    }\n    return (max_int, min_int)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_int = -1\n    var pos_int = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > neg_int {\n                neg_int = i\n            }\n        } else {\n            if i < pos_int {\n                pos_int = i\n            }\n        }\n    }\n    return (neg_int, pos_int)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_negative {\n                max_negative = i\n            }\n        } else if i > 0 {\n            if i < min_positive {\n                min_positive = i\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    } else if min_positive == 1 {\n        return (nil, nil)\n    } else {\n        return (max_negative, min_positive)\n    }",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_idx Int\n    var pos_int_idx Int\n    var neg_int_val Int\n    var pos_int_val Int\n    var neg_int_idx_val Int\n    var pos_int_idx_val Int\n    var neg_int_val_val Int\n    var pos_int_val_val Int\n    var neg_int_idx_val_val Int\n    var pos_int_idx_val_val Int\n    var neg_int_val_val_val Int\n    var pos_int_val_val_val Int\n    var neg_int_idx_val_val_val Int\n    var pos_int_idx_val_val_val Int\n    var neg_int_val_val_val_val Int\n    var pos_int_val_val_val_val Int\n    var neg_int_idx_val_val_val_val Int\n    var pos_int_idx_val_val_val_val Int\n    var neg_int_val_val_val_val_val Int\n    var pos_int_val_val_val_val_val Int\n    var neg_int_idx_val_val_val_val_val Int\n    var pos_int_idx_val_val_val_val_val Int\n    var neg_int_val_val_val_val_val_val Int\n    var pos_int_val_val_val_val_val_val Int\n    var neg_int_idx_val_val_val_val_val_val Int\n    var pos_int_idx_val_val_val_val_val_val Int\n    var neg_int_val_val_val_val_val_val_val Int\n    var pos_int_val_val_val_val_val_val_val Int\n    var neg_int_idx_val_val_val_val_val_val_val Int\n    var pos_int_idx_val_val_val_val_val_val_val Int\n    var neg_int_val_val_val_val_val_",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var negative = false\n    var positive = false\n    var max = 0\n    var min = 0\n    for _, i := range lst {\n        if i < 0 {\n            negative = true\n        } else if i > 0 {\n            positive = true\n        }\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if negative && positive {\n        return (nil, nil)\n    }\n    if negative {\n        return (max, min)\n    }\n    return (min, max)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max, min := lst[0], lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "\tif len(lst) == 0 {\n\t\treturn nil, nil\n\t}\n\tmin := lst[0]\n\tmax := lst[0]\n\tfor _, v := range lst {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max, min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, v := range lst {\n        if v < 0 {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst[0])\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst[0], nil)\n    }\n    if neg_lst[0] > pos_lst[0] {\n        return (neg_lst[0], pos_lst[0])\n    }\n    return (pos_lst[0], neg_lst[0])",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    max, min := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    return max, min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg, min_pos Int\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_negative := lst[0]\n    min_positive := lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    if min_pos == 1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "\tif len(lst) == 0 {\n\t\treturn nil, nil\n\t}\n\tmax, min := lst[0], lst[0]\n\tfor _, v := range lst {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn max, min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    if min_pos == 1 {\n        return (max_neg, min_pos)\n    }\n    return (max_neg, min_pos)",
    "    var max_negative_int Int\n    var min_positive_int Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            max_negative_int = max_negative_int + lst[i]\n        } else if lst[i] > 0 {\n            min_positive_int = min_positive_int + lst[i]\n        }\n    }\n    if max_negative_int > 0 {\n        return (max_negative_int, min_positive_int)\n    } else if min_positive_int > 0 {\n        return (nil, min_positive_int)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    if max_negative == -1 {\n        return nil, nil\n    }\n    return max_negative, min_positive",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < min_pos {\n            min_pos = v\n        }\n        if v > max_neg {\n            max_neg = v\n        }\n    }\n    return (max_neg, min_pos)",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_max Int\n    var pos_int_min Int\n    var neg_int_max_index Int\n    var pos_int_min_index Int\n    var neg_int_max_index_found Bool\n    var pos_int_min_index_found Bool\n    var neg_int_max_index_found_found Bool\n    var pos_int_min_index_found_found Bool\n    var neg_int_max_index_found_index Int\n    var pos_int_min_index_found_index Int\n    var neg_int_max_index_found_index_found Bool\n    var pos_int_min_index_found_index_found Bool\n    var neg_int_max_index_found_index_found_index Int\n    var pos_int_min_index_found_index_found_index Int\n    var neg_int_max_index_found_index_found_index_found Bool\n    var pos_int_min_index_found_index_found_index_found Bool\n    var neg_int_max_index_found_index_found_index_found_index Int\n    var pos_int_min_index_found_index_found_index_found_index Int\n    var neg_int_max_index_found_index_found_index_found_index_found Bool\n    var pos_int_min_index_found_index_found_index_found_index_found Bool\n    var neg_int_max_index_found_index_found_index_found_index_found_index Int\n    var pos_int_min_index_found_index_found_index_found_index_found_index Int\n    var neg_int_max_index_found_index_found_index_found_index_found_index_found Bool\n    var pos_int_min_index_found_index_found_index_found_index_found_index_found Bool\n    var neg_int_max_index_found_index_found_index_found_index_found_index_found_index Int\n    var pos_int_min",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    if lst[0] < 0 {\n        return (lst[0], lst[1])\n    }\n    if lst[len(lst)-1] > 0 {\n        return (lst[len(lst)-1], lst[0])\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    } else {\n        return (nil, nil)\n    }",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_found bool\n    var pos_int_found bool\n    var neg_int_index int\n    var pos_int_index int\n    var neg_int_value Int\n    var pos_int_value Int\n    var neg_int_value_found bool\n    var pos_int_value_found bool\n    var neg_int_value_index int\n    var pos_int_value_index int\n    var neg_int_value_value Int\n    var pos_int_value_value Int\n    var neg_int_value_value_found bool\n    var pos_int_value_value_found bool\n    var neg_int_value_value_index int\n    var pos_int_value_value_index int\n    var neg_int_value_value_value Int\n    var pos_int_value_value_value Int\n    var neg_int_value_value_value_found bool\n    var pos_int_value_value_value_found bool\n    var neg_int_value_value_value_index int\n    var pos_int_value_value_value_index int\n    var neg_int_value_value_value_value Int\n    var pos_int_value_value_value_value Int\n    var neg_int_value_value_value_value_found bool\n    var pos_int_value_value_value_value_found bool\n    var neg_int_value_value_value_value_index int\n    var pos_int_value_value_value_value_index int\n    var neg_int_value_value_value_value_value Int\n    var pos_int_value_value_value_value_value Int\n    var neg_int_value_value_value_value_value_found bool\n    var pos_int_value_value_value_value_value_found bool\n    var neg_int_value_value_value_value_value_index int\n    var pos_int_value_value_value_value_value_index int\n    var neg_int_value_value_value_value_value_value Int\n    var pos_int_value_value_value_value",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, v := range lst {\n        if v < 0 {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst[0])\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst[0], nil)\n    }\n    if neg_lst[0] > pos_lst[0] {\n        return (neg_lst[0], pos_lst[0])\n    }\n    return (pos_lst[0], neg_lst[0])",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := lst[0]\n    min_pos := lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_negative {\n                max_negative = i\n            }\n        } else if i > 0 {\n            if i < min_positive {\n                min_positive = i\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    if lst[0] < 0 {\n        return (lst[0], lst[1])\n    }\n    if lst[len(lst) - 1] > 0 {\n        return (lst[len(lst) - 1], lst[0])\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_idx = -1\n    var pos_idx = -1\n    var max_neg = -1\n    var min_pos = 1\n    for i, v := range lst {\n        if v < 0 {\n            if max_neg < 0 {\n                max_neg = i\n                neg_idx = i\n            }\n        } else {\n            if pos_idx < 0 {\n                pos_idx = i\n                min_pos = i\n            }\n        }\n    }\n    if max_neg >= 0 {\n        return (lst[max_neg], lst[pos_idx])\n    } else {\n        return (nil, lst[pos_idx])\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    } else if min_positive == 1 {\n        return (nil, nil)\n    } else {\n        return (max_negative, min_positive)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    if min_pos == 1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = lst.filter(lambda x: x < 0)\n    var pos_lst = lst.filter(lambda x: x > 0)\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst.min())\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst.max(), nil)\n    }\n    return (neg_lst.max(), pos_lst.min())",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (max_neg, min_pos)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    var a Int\n    var b Int\n    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    a = lst[0]\n    b = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > a {\n            a = lst[i]\n        }\n        if lst[i] < b {\n            b = lst[i]\n        }\n    }\n    return (a, b)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max, min := lst[0], lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    return (max, min)",
    "\tif len(lst) == 0 {\n\t\treturn (nil, nil)\n\t}\n\tvar max, min Int\n\tfor _, v := range lst {\n\t\tif v < 0 {\n\t\t\tif v > max {\n\t\t\t\tmax = v\n\t\t\t}\n\t\t} else {\n\t\t\tif v < min {\n\t\t\t\tmin = v\n\t\t\t}\n\t\t}\n\t}\n\treturn (max, min)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_neg {\n                max_neg = i\n            }\n        } else if i > 0 {\n            if i < min_pos {\n                min_pos = i\n            }\n        }\n    }\n    return max_neg, min_pos",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = lst[0]\n    var min_positive = lst[0]\n    for _, i := range lst {\n        if i < 0 {\n            if i > max_negative {\n                max_negative = i\n            }\n        } else {\n            if i < min_positive {\n                min_positive = i\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    \n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    \n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        \n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    \n    return max_neg, min_pos",
    "    var a Int\n    var b Int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if lst[i] > 0 {\n            b = lst[i]\n        }\n    }\n    return a, b",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var negative_integers = []Int\n    var positive_integers = []Int\n    for _, i := range lst {\n        if i < 0 {\n            negative_integers = append(negative_integers, i)\n        } else if i > 0 {\n            positive_integers = append(positive_integers, i)\n        }\n    }\n    if len(negative_integers) == 0 {\n        return (nil, positive_integers[0])\n    }\n    if len(positive_integers) == 0 {\n        return (negative_integers[0], nil)\n    }\n    var max_negative = negative_integers[0]\n    var min_positive = positive_integers[0]\n    for _, i := range negative_integers {\n        if i > max_negative {\n            max_negative = i\n        }\n    }\n    for _, i := range positive_integers {\n        if i < min_positive {\n            min_positive = i\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_val := lst[0]\n    min_val := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_val {\n            max_val = lst[i]\n        }\n        if lst[i] < min_val {\n            min_val = lst[i]\n        }\n    }\n    return (max_val, min_val)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_negative := -1 * lst[0]\n    min_positive := lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    \n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_ints = []Int\n    var pos_ints = []Int\n    for _, v := range lst {\n        if v < 0 {\n            neg_ints = append(neg_ints, v)\n        } else if v > 0 {\n            pos_ints = append(pos_ints, v)\n        }\n    }\n    if len(neg_ints) == 0 {\n        return (nil, pos_ints[0])\n    }\n    if len(pos_ints) == 0 {\n        return (neg_ints[0], nil)\n    }\n    if neg_ints[0] > pos_ints[0] {\n        return (neg_ints[0], pos_ints[0])\n    }\n    return (pos_ints[0], neg_ints[0])",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_negative {\n                max_negative = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_positive {\n                min_positive = lst[i]\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    }\n    if min_positive == 1 {\n        return (nil, nil)\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg != -1 {\n        return (max_neg, min_pos)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            if lst[i] > max_neg {\n                max_neg = lst[i]\n            }\n        } else if lst[i] > 0 {\n            if lst[i] < min_pos {\n                min_pos = lst[i]\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (nil, nil)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    } else if min_positive == 1 {\n        return (nil, nil)\n    } else {\n        return (max_negative, min_positive)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max, min := lst[0], lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative == -1 {\n        return (nil, nil)\n    } else if min_positive == 1 {\n        return (nil, nil)\n    } else {\n        return (max_negative, min_positive)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, i := range lst {\n        if i < 0 {\n            neg_lst = append(neg_lst, i)\n        } else if i > 0 {\n            pos_lst = append(pos_lst, i)\n        }\n    }\n    if len(neg_lst) > 0 {\n        return (max(neg_lst), min(pos_lst))\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, v := range lst {\n        if v < 0 {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst[0])\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst[0], nil)\n    }\n    if neg_lst[0] > pos_lst[0] {\n        return (neg_lst[0], pos_lst[0])\n    }\n    return (pos_lst[0], neg_lst[0])",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg_lst = []Int{}\n    var pos_lst = []Int{}\n    for _, v := range lst {\n        if v < 0 {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst) == 0 {\n        return (nil, pos_lst[0])\n    }\n    if len(pos_lst) == 0 {\n        return (neg_lst[0], nil)\n    }\n    if neg_lst[0] > pos_lst[0] {\n        return (neg_lst[0], pos_lst[0])\n    }\n    return (pos_lst[0], neg_lst[0])",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    max_negative := -1\n    min_positive := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return max_negative, min_positive\n    }\n    return nil, nil",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    var neg_int Int\n    var pos_int Int\n    var neg_int_max Int\n    var pos_int_min Int\n    var neg_int_max_found bool\n    var pos_int_min_found bool\n    var neg_int_max_found_index Int\n    var pos_int_min_found_index Int\n    var i Int\n    var max_index Int\n    var min_index Int\n    var max_index_found bool\n    var min_index_found bool\n    var max_index_found_index Int\n    var min_index_found_index Int\n    var max_index_found_value Int\n    var min_index_found_value Int\n    var max_index_found_value_found bool\n    var min_index_found_value_found bool\n    var max_index_found_value_found_index Int\n    var min_index_found_value_found_index Int\n    var max_index_found_value_found_value Int\n    var min_index_found_value_found_value Int\n    var max_index_found_value_found_value_found bool\n    var min_index_found_value_found_value_found bool\n    var max_index_found_value_found_value_found_index Int\n    var min_index_found_value_found_value_found_index Int\n    var max_index_found_value_found_value_found_value Int\n    var min_index_found_value_found_value_found_value Int\n    var max_index_found_value_found_value_found_value_found bool\n    var min_index_found_value_found_value_found_value_found bool\n    var max_index_found_value_found_value_found_value_found_index Int\n    var min_index_found_value_found_value_found_value_found_index Int\n    var max_index_found_value_found_value_found_value_found_value Int\n    var min_index_found_value_found_value_found_value_found_value Int\n    var max_index_found_value_found_value_found_value_found_value",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max_neg := -1\n    min_pos := 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var neg = false\n    var pos = false\n    for _, i := range lst {\n        if i < 0 {\n            neg = true\n        }\n        if i > 0 {\n            pos = true\n        }\n    }\n    if !neg && !pos {\n        return (nil, nil)\n    }\n    var max = 0\n    var min = 0\n    for _, i := range lst {\n        if i < 0 {\n            if i > max {\n                max = i\n            }\n        }\n        if i > 0 {\n            if i < min {\n                min = i\n            }\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    if len(lst) == 1 {\n        return (lst[0], lst[0])\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    return (max_negative, min_positive)",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    if len(lst) == 1 {\n        return lst[0], lst[0]\n    }\n    var max_negative_int Int\n    var min_positive_int Int\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative_int {\n                max_negative_int = v\n            }\n        } else if v > 0 {\n            if v < min_positive_int {\n                min_positive_int = v\n            }\n        }\n    }\n    if max_negative_int == 0 {\n        return nil, min_positive_int\n    }\n    return max_negative_int, min_positive_int",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var negative = false\n    var positive = false\n    var max_negative = -1\n    var min_positive = 1\n    for _, i := range lst {\n        if i < 0 {\n            negative = true\n            if max_negative < i {\n                max_negative = i\n            }\n        } else if i > 0 {\n            positive = true\n            if min_positive > i {\n                min_positive = i\n            }\n        }\n    }\n    if negative {\n        return (max_negative, min_positive)\n    } else if positive {\n        return (nil, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    max, min := lst[0], lst[0]\n    for _, i := range lst[1:] {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return (max, min)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    }\n    if min_pos == 1 {\n        return (nil, nil)\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    } else {\n        return (nil, nil)\n    }",
    "    if len(lst) == 0 {\n        return nil, nil\n    }\n    var neg_idx = -1\n    var pos_idx = -1\n    var max_val = lst[0]\n    var min_val = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_val {\n            max_val = lst[i]\n            pos_idx = i\n        }\n        if lst[i] < min_val {\n            min_val = lst[i]\n            neg_idx = i\n        }\n    }\n    if neg_idx == -1 && pos_idx == -1 {\n        return nil, nil\n    }\n    return max_val, min_val",
    "    var a Int\n    var b Int\n    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    a = lst[0]\n    b = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > a {\n            a = lst[i]\n        }\n        if lst[i] < b {\n            b = lst[i]\n        }\n    }\n    return (a, b)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    return (max_neg, min_pos)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = -1\n    var min_pos = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_neg {\n                max_neg = v\n            }\n        } else if v > 0 {\n            if v < min_pos {\n                min_pos = v\n            }\n        }\n    }\n    if max_neg == -1 {\n        return (nil, nil)\n    } else if min_pos == 1 {\n        return (max_neg, min_pos)\n    } else {\n        return (max_neg, min_pos)\n    }",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_negative = -1\n    var min_positive = 1\n    for _, v := range lst {\n        if v < 0 {\n            if v > max_negative {\n                max_negative = v\n            }\n        } else if v > 0 {\n            if v < min_positive {\n                min_positive = v\n            }\n        }\n    }\n    if max_negative != -1 {\n        return (max_negative, min_positive)\n    }\n    return (nil, nil)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max_neg = lst[0]\n    var min_pos = lst[0]\n    for i := 1; i < len(lst); i += 1 {\n        if lst[i] > max_neg {\n            max_neg = lst[i]\n        }\n        if lst[i] < min_pos {\n            min_pos = lst[i]\n        }\n    }\n    return (max_neg, min_pos)",
    "    var a Int\n    var b Int\n    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if lst[i] > 0 {\n            b = lst[i]\n        }\n    }\n    return (a, b)",
    "    if len(lst) == 0 {\n        return (nil, nil)\n    }\n    var max, min Int\n    for _, i := range lst {\n        if i < 0 {\n            if i > max {\n                max = i\n            }\n        } else {\n            if i < min {\n                min = i\n            }\n        }\n    }\n    return (max, min)"
  ],
  "stop_tokens": [
    "\n}"
  ]
}