{
  "name": "HumanEval_51_remove_vowels",
  "language": "swift",
  "prompt": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx5ckm2dj.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpteu2s8k3.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpteu2s8k3.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpteu2s8k3.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpteu2s8k3.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpteu2s8k3.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpteu2s8k3.swift:22:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmpteu2s8k3.swift:22:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmpteu2s8k3.swift:22:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmpteu2s8k3.swift:22:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmpteu2s8k3.swift:18:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpcbtu8kci.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpcbtu8kci.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpcbtu8kci.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpcbtu8kci.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpcbtu8kci.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpcbtu8kci.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmpcbtu8kci.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmpcbtu8kci.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmpcbtu8kci.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmpcbtu8kci.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpcbtu8kci.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3hlzq_nl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp9xfc7kpn.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp9xfc7kpn.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp9xfc7kpn.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp9xfc7kpn.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp9xfc7kpn.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp9xfc7kpn.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp9xfc7kpn.swift:25:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    var vowels_count int\n    for _, v := range vowels {\n        if strings.Contains(text, v) {\n            vowels_count += 1\n        }\n    }\n    \n    if vowels_count == 0 {\n        return text\n    }\n    \n    var vowels_index int\n    for vowels_index = 0; vowels_index < len(text); vowels_index++ {\n        if strings.Contains(vowels, text[vowels_index]) {\n            break\n        }\n    }\n    \n    var new_text string\n    for i := 0; i < len(text); i++ {\n        if i == vowels_index {\n            new_text += text[i]\n        } else {\n            new_text += text[i]\n        }\n    }\n    \n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp4qj363s0.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp4qj363s0.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp4qj363s0.swift:20:22: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var vowels_count int\n                     ^\n/tmp/tmp4qj363s0.swift:20:22: note: join the identifiers together\n    var vowels_count int\n        ~~~~~~~~~~~~~^~~\n        vowels_countint\n/tmp/tmp4qj363s0.swift:20:22: note: join the identifiers together with camel-case\n    var vowels_count int\n        ~~~~~~~~~~~~~^~~\n        vowels_countInt\n/tmp/tmp4qj363s0.swift:21:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp4qj363s0.swift:21:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp4qj363s0.swift:31:22: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var vowels_index int\n                     ^\n/tmp/tmp4qj363s0.swift:31:22: note: join the identifiers together\n    var vowels_index int\n        ~~~~~~~~~~~~~^~~\n        vowels_indexint\n/tmp/tmp4qj363s0.swift:31:22: note: join the identifiers together with camel-case\n    var vowels_index int\n        ~~~~~~~~~~~~~^~~\n        vowels_indexInt\n/tmp/tmp4qj363s0.swift:32:5: error: C-style for statement has been removed in Swift 3\n    for vowels_index = 0; vowels_index < len(text); vowels_index++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qj363s0.swift:38:18: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var new_text string\n                 ^\n/tmp/tmp4qj363s0.swift:38:18: note: join the identifiers together\n    var new_text string\n        ~~~~~~~~~^~~~~~\n        new_textstring\n/tmp/tmp4qj363s0.swift:38:18: note: join the identifiers together with camel-case\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmprnnkma7f/tmprnnkma7f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a0d266c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a0cf5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a0cf5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a0cf5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnnkma7f                        0x000055ae0dd483f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b9a0d452460 __libc_start_main + 245\n6    tmprnnkma7f                        0x000055ae0dd47f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmprnnkma7f/tmprnnkma7f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a0d266c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a0cf5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a0cf5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a0cf5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnnkma7f                        0x000055ae0dd483f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b9a0d452460 __libc_start_main + 245\n6    tmprnnkma7f                        0x000055ae0dd47f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return text.replace(/[aeiou]/g, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_kd9y6fu.swift:14:25: error: '/' is not a prefix unary operator\n    return text.replace(/[aeiou]/g, \"\")\n                        ^\n/tmp/tmp_kd9y6fu.swift:14:27: error: cannot find 'aeiou' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                          ^~~~~\n/tmp/tmp_kd9y6fu.swift:14:34: error: cannot find 'g' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                                 ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: no exact matches in call to instance method 'replace'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: note: found candidate with type '(_, String, Int) -> ()'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: cannot convert return expression of type '()' to return type 'String'\n    return text.replace(/[aeiou]/g, \"\")\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp38u97s4y.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp38u97s4y.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp38u97s4y.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpp05qrmfy.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpp05qrmfy.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpp05qrmfy.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpp05qrmfy.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpp05qrmfy.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpp05qrmfy.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpp05qrmfy.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpp05qrmfy.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpp05qrmfy.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpp05qrmfy.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text[0] == v {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if text[i] != vowels[0] {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmptkduyt8k.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmptkduyt8k.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmptkduyt8k.swift:28:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmptkduyt8k.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmptkduyt8k.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmptkduyt8k.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your Code Here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpn0adcjnm/tmpn0adcjnm.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af92fd23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af92fa1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af92fa1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af92fa197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0adcjnm                        0x000056392ba1e3f5 <unavailable> + 5109\n5    libc.so.6                          0x00002af92ff0f460 __libc_start_main + 245\n6    tmpn0adcjnm                        0x000056392ba1df49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiou\"\n    new_text := \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            new_text += c\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpun_hrtug.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiou\"\n          ^\n          ;\n/tmp/tmpun_hrtug.swift:17:12: error: expected expression\n    vowels := \"aeiou\"\n           ^\n/tmp/tmpun_hrtug.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpun_hrtug.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpun_hrtug.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiou\"\n    ^~~~~~\n/tmp/tmpun_hrtug.swift:24:12: error: cannot find 'new_text' in scope\n    return new_text\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.indexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpdn2p0f29.swift:17:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpdn2p0f29.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpdn2p0f29.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpdn2p0f29.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpt47044e7.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpt47044e7.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var text_len = len(text)\n    var i = 0\n    var j = 0\n    var result = \"\"\n    for i < text_len {\n        if text[i] in vowels {\n            i += 1\n        } else {\n            result += text[j]\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_1i11yb1.swift:20:11: error: expected 'in' after for-each pattern\n    for i < text_len {\n          ^\n/tmp/tmp_1i11yb1.swift:20:11: error: unary operator cannot be separated from its operand\n    for i < text_len {\n          ^~\n           \n/tmp/tmp_1i11yb1.swift:21:20: error: expected '{' after 'if' condition\n        if text[i] in vowels {\n                   ^\n/tmp/tmp_1i11yb1.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n/tmp/tmp_1i11yb1.swift:16:20: error: cannot find 'len' in scope\n    var text_len = len(text)\n                   ^~~\n/tmp/tmp_1i11yb1.swift:20:11: error: '<' is not a prefix unary operator\n    for i < text_len {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpt47044e7.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpt47044e7.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if strings.Index(vowels, string(c)) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp1ujfwkro.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp1ujfwkro.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp1ujfwkro.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp1ujfwkro.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp1ujfwkro.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp1ujfwkro.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp1ujfwkro.swift:24:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6tf1_h6j.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp6tf1_h6j.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp6tf1_h6j.swift:24:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(string(c)) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo3vftmod.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text.Contains(v) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(c) {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp1u5hs8rz.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp1u5hs8rz.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp1u5hs8rz.swift:28:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp1u5hs8rz.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) != -1 {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpda8aj3fu.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpda8aj3fu.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpda8aj3fu.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpda8aj3fu.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpda8aj3fu.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpda8aj3fu.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpda8aj3fu.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpda8aj3fu.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpda8aj3fu.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpda8aj3fu.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.IndexOf(char) == -1 {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo11jwhtq.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text.Contains(v) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, v := range text {\n        if vowels.Contains(v) {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpcb6mev0v.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmpcb6mev0v.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmpcb6mev0v.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmpcb6mev0v.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6tf1_h6j.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp6tf1_h6j.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp6tf1_h6j.swift:24:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwfb33sff.swift:14:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmpwfb33sff.swift:14:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your Code Here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpn0adcjnm/tmpn0adcjnm.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af92fd23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af92fa1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af92fa1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af92fa197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0adcjnm                        0x000056392ba1e3f5 <unavailable> + 5109\n5    libc.so.6                          0x00002af92ff0f460 __libc_start_main + 245\n6    tmpn0adcjnm                        0x000056392ba1df49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return text.replace(/[aeiou]/g, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_kd9y6fu.swift:14:25: error: '/' is not a prefix unary operator\n    return text.replace(/[aeiou]/g, \"\")\n                        ^\n/tmp/tmp_kd9y6fu.swift:14:27: error: cannot find 'aeiou' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                          ^~~~~\n/tmp/tmp_kd9y6fu.swift:14:34: error: cannot find 'g' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                                 ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: no exact matches in call to instance method 'replace'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: note: found candidate with type '(_, String, Int) -> ()'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: cannot convert return expression of type '()' to return type 'String'\n    return text.replace(/[aeiou]/g, \"\")\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp7pn4yc2v.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp7pn4yc2v.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp7pn4yc2v.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp7pn4yc2v.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7pn4yc2v.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7pn4yc2v.swift:22:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmp7pn4yc2v.swift:22:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmp7pn4yc2v.swift:22:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmp7pn4yc2v.swift:22:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmp7pn4yc2v.swift:18:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.Contains(string(char)) {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp1l970nnq.swift:16:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmp1l970nnq.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6tf1_h6j.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp6tf1_h6j.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp6tf1_h6j.swift:24:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx5ckm2dj.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpis_jsba9.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpis_jsba9.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpis_jsba9.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpis_jsba9.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpis_jsba9.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpis_jsba9.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpis_jsba9.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpis_jsba9.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpis_jsba9.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpis_jsba9.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) != -1 {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpda8aj3fu.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpda8aj3fu.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpda8aj3fu.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpda8aj3fu.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpda8aj3fu.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpda8aj3fu.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpda8aj3fu.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpda8aj3fu.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpda8aj3fu.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpda8aj3fu.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpc_61o69j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpc_61o69j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmprsx61g4h.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmprsx61g4h.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmprsx61g4h.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmprsx61g4h.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprsx61g4h.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprsx61g4h.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmprsx61g4h.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmprsx61g4h.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmprsx61g4h.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmprsx61g4h.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var new_text = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            vowels_count += 1\n        } else {\n            new_text += text[i]\n        }\n    }\n    if vowels_count == 0 {\n        return \"\"\n    } else {\n        return new_text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpcqj_xh8c.swift:17:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpcqj_xh8c.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpcqj_xh8c.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpe33t_vk6.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpe33t_vk6.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpe33t_vk6.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx5ckm2dj.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiou\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp2_u_i2g8.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiou\"\n          ^\n          ;\n/tmp/tmp2_u_i2g8.swift:17:12: error: expected expression\n    vowels := \"aeiou\"\n           ^\n/tmp/tmp2_u_i2g8.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp2_u_i2g8.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp2_u_i2g8.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp2_u_i2g8.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmp2_u_i2g8.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmp2_u_i2g8.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmp2_u_i2g8.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp2_u_i2g8.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiou\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3rjttn71.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp3rjttn71.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3rjttn71.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3rjttn71.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var new_text = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            new_text += text[i]\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpbydmg3dj.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpbydmg3dj.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpbydmg3dj.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpbydmg3dj.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwlbqe1zo.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpwlbqe1zo.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(string(c)) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo3vftmod.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3hlzq_nl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpt47044e7.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpt47044e7.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp38u97s4y.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp38u97s4y.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp38u97s4y.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n            continue\n        }\n        text = text[0:i] + text[i+1:]\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp680ofie1.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp680ofie1.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:15:23: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                      ^~~\n                      \"a\"\n/tmp/tmp680ofie1.swift:15:41: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                        ^~~\n                                        \"e\"\n/tmp/tmp680ofie1.swift:15:59: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                          ^~~\n                                                          \"i\"\n/tmp/tmp680ofie1.swift:15:77: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                            ^~~\n                                                                            \"o\"\n/tmp/tmp680ofie1.swift:15:95: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                                              ^~~\n                                                                                              \"u\"\n/tmp/tmp680ofie1.swift:18:22: error: expected ',' separator\n        text = text[0:i] + text[i+1:]\n                     ^\n                     ,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3rjttn71.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp3rjttn71.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3rjttn71.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3rjttn71.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpjwmv0a0f.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpjwmv0a0f.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    var vowels_count int\n    for _, v := range vowels {\n        if text[0] == v {\n            vowels_count++\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result string\n    for _, v := range text {\n        if vowels[v] {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp9sj6w566.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp9sj6w566.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp9sj6w566.swift:18:22: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var vowels_count int\n                     ^\n/tmp/tmp9sj6w566.swift:18:22: note: join the identifiers together\n    var vowels_count int\n        ~~~~~~~~~~~~~^~~\n        vowels_countint\n/tmp/tmp9sj6w566.swift:18:22: note: join the identifiers together with camel-case\n    var vowels_count int\n        ~~~~~~~~~~~~~^~~\n        vowels_countInt\n/tmp/tmp9sj6w566.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp9sj6w566.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp9sj6w566.swift:27:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmp9sj6w566.swift:27:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmp9sj6w566.swift:27:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmp9sj6w566.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmp9sj6w566.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n/tmp/tmp9sj6w566.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp9sj6w566.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp9sj6w566.swift:18:9: error: type annotation missing in pattern\n    var vowels_count int\n        ^\n/tmp/tmp9sj6w566.swift:27:9: error: type annotation missing in pattern\n    var result string\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.Contains(string(char)) {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp1l970nnq.swift:16:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmp1l970nnq.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return text.replace(/[aeiou]/g, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp2chc8s_s.swift:15:25: error: '/' is not a prefix unary operator\n    return text.replace(/[aeiou]/g, \"\")\n                        ^\n/tmp/tmp2chc8s_s.swift:15:27: error: cannot find 'aeiou' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                          ^~~~~\n/tmp/tmp2chc8s_s.swift:15:34: error: cannot find 'g' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                                 ^\n/tmp/tmp2chc8s_s.swift:15:17: error: no exact matches in call to instance method 'replace'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp2chc8s_s.swift:15:17: note: found candidate with type '(_, String, Int) -> ()'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp2chc8s_s.swift:15:17: error: cannot convert return expression of type '()' to return type 'String'\n    return text.replace(/[aeiou]/g, \"\")\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_0mrdcvl.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp_0mrdcvl.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp_0mrdcvl.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp_0mrdcvl.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp_0mrdcvl.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = string(text[i+1]) + text[i+2:]\n            i = i - 1\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphjvfwrjp.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmphjvfwrjp.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmphjvfwrjp.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmphjvfwrjp.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmphjvfwrjp.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmphjvfwrjp.swift:20:48: error: expected ',' separator\n            text = string(text[i+1]) + text[i+2:]\n                                               ^\n                                               ,\n/tmp/tmphjvfwrjp.swift:20:48: error: expected expression in list of expressions\n            text = string(text[i+1]) + text[i+2:]\n                                               ^\n/tmp/tmphjvfwrjp.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpf7dzzzkt.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpf7dzzzkt.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpf7dzzzkt.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpf7dzzzkt.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpf7dzzzkt.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpf7dzzzkt.swift:22:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmpf7dzzzkt.swift:22:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmpf7dzzzkt.swift:22:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmpf7dzzzkt.swift:22:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmpf7dzzzkt.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpf7dzzzkt.swift:18:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp8_j1epai.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp8_j1epai.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp8_j1epai.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var new_text = \"\"\n    for _, char := range text {\n        if vowels.Contains(char) {\n            vowels_count += 1\n        } else {\n            new_text += char\n        }\n    }\n    if vowels_count == 0 {\n        return \"\"\n    } else {\n        return new_text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpocyimuyy.swift:17:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpocyimuyy.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n            i = 0\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3hjuiyfd.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp3hjuiyfd.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3hjuiyfd.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp3hjuiyfd.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmp3hjuiyfd.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmp3hjuiyfd.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmplsz19gaf.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmplsz19gaf.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmplsz19gaf.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmplsz19gaf.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmplsz19gaf.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmplsz19gaf.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmplsz19gaf.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmplsz19gaf.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmplsz19gaf.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmplsz19gaf.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmplsz19gaf.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n            continue\n        }\n        text = text[0:i] + text[i+1:]\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp680ofie1.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp680ofie1.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:15:23: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                      ^~~\n                      \"a\"\n/tmp/tmp680ofie1.swift:15:41: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                        ^~~\n                                        \"e\"\n/tmp/tmp680ofie1.swift:15:59: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                          ^~~\n                                                          \"i\"\n/tmp/tmp680ofie1.swift:15:77: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                            ^~~\n                                                                            \"o\"\n/tmp/tmp680ofie1.swift:15:95: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                                              ^~~\n                                                                                              \"u\"\n/tmp/tmp680ofie1.swift:18:22: error: expected ',' separator\n        text = text[0:i] + text[i+1:]\n                     ^\n                     ,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    var result string\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppciu6_aj.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmppciu6_aj.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmppciu6_aj.swift:18:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmppciu6_aj.swift:18:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmppciu6_aj.swift:18:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmppciu6_aj.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmppciu6_aj.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmppciu6_aj.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmppciu6_aj.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmppciu6_aj.swift:18:9: error: type annotation missing in pattern\n    var result string\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpshb74adc.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpshb74adc.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpshb74adc.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpshb74adc.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpshb74adc.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpshb74adc.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpshb74adc.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpshb74adc.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpshb74adc.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp2iq660wi.swift:16:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp2iq660wi.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp2iq660wi.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    for _, char := range text {\n        if strings.Contains(vowels, string(char)) {\n            continue\n        }\n        \n        return text[:len(text) - 1]\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp0cpnrbij.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp0cpnrbij.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp0cpnrbij.swift:20:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmp0cpnrbij.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n/tmp/tmp0cpnrbij.swift:25:21: error: expected expression in list of expressions\n        return text[:len(text) - 1]\n                    ^\n/tmp/tmp0cpnrbij.swift:18:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpis_jsba9.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpis_jsba9.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpis_jsba9.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpis_jsba9.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpis_jsba9.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpis_jsba9.swift:20:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpis_jsba9.swift:20:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpis_jsba9.swift:20:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n/tmp/tmpis_jsba9.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpis_jsba9.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp7bh2evfr.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bh2evfr.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7bh2evfr.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text[0] == v {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, v := range text {\n        if vowels[v] {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp1mdfzqv2.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp1mdfzqv2.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp1mdfzqv2.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmp1mdfzqv2.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n/tmp/tmp1mdfzqv2.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text[0] == v {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, v := range text {\n        if vowels.Index(v) == -1 {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp0h4lvtwp.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp0h4lvtwp.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp0h4lvtwp.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmp0h4lvtwp.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n/tmp/tmp0h4lvtwp.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.IndexOf(char) == -1 {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo11jwhtq.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var new_text = \"\"\n    for _, char := range text {\n        if vowels.Contains(string(char)) {\n            vowels_count += 1\n        } else {\n            new_text += string(char)\n        }\n    }\n    if vowels_count == 0 {\n        return new_text\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpyil12234.swift:17:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpyil12234.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3hlzq_nl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            vowels_count++\n        }\n        if vowels_count == 0 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmphlozdwlf.swift:17:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmphlozdwlf.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmphlozdwlf.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpjwmv0a0f.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpjwmv0a0f.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx5ckm2dj.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(string(c)) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo3vftmod.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpe33t_vk6.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpe33t_vk6.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpe33t_vk6.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            vowels_count += 1\n        } else {\n            result += string(c)\n        }\n    }\n    if vowels_count == 0 {\n        return result\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpgej4af58.swift:17:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpgej4af58.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var text_len = len(text)\n    var new_text = \"\"\n    for i := 0; i < text_len; i++ {\n        if vowels.Contains(text[i]) {\n            continue\n        }\n        new_text += text[i]\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpv98f0znq.swift:18:12: error: expected type\n    for i := 0; i < text_len; i++ {\n           ^\n            <#type#>\n/tmp/tmpv98f0znq.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < text_len; i++ {\n           ^\n/tmp/tmpv98f0znq.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < text_len; i++ {\n           ^\n/tmp/tmpv98f0znq.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n/tmp/tmpv98f0znq.swift:16:20: error: cannot find 'len' in scope\n    var text_len = len(text)\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpk81c5i6w.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpk81c5i6w.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n            continue\n        }\n        text = text[0:i] + text[i+1:]\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp680ofie1.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp680ofie1.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp680ofie1.swift:15:23: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                      ^~~\n                      \"a\"\n/tmp/tmp680ofie1.swift:15:41: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                        ^~~\n                                        \"e\"\n/tmp/tmp680ofie1.swift:15:59: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                          ^~~\n                                                          \"i\"\n/tmp/tmp680ofie1.swift:15:77: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                            ^~~\n                                                                            \"o\"\n/tmp/tmp680ofie1.swift:15:95: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                                              ^~~\n                                                                                              \"u\"\n/tmp/tmp680ofie1.swift:18:22: error: expected ',' separator\n        text = text[0:i] + text[i+1:]\n                     ^\n                     ,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp8_2xx6bc.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp8_2xx6bc.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp8_2xx6bc.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmprsx61g4h.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmprsx61g4h.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmprsx61g4h.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmprsx61g4h.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprsx61g4h.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprsx61g4h.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmprsx61g4h.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmprsx61g4h.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmprsx61g4h.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmprsx61g4h.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.IndexOf(char) == -1 {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpg_50rxc3.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpg_50rxc3.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return text.replaceAll(\"[aeiou]\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpr_beco0k.swift:15:17: error: value of type 'String' has no member 'replaceAll'\n    return text.replaceAll(\"[aeiou]\", \"\")\n           ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text[0] == v {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var new_text = \"\"\n    for _, v := range text {\n        if vowels.Index(v) == -1 {\n            new_text += v\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp30ru1uwo.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp30ru1uwo.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp30ru1uwo.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmp30ru1uwo.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n/tmp/tmp30ru1uwo.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiou\"\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp7ab94ver.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiou\"\n          ^\n          ;\n/tmp/tmp7ab94ver.swift:17:12: error: expected expression\n    vowels := \"aeiou\"\n           ^\n/tmp/tmp7ab94ver.swift:18:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmp7ab94ver.swift:18:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmp7ab94ver.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp7ab94ver.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiou\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) != -1 {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmplf93kxbg.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmplf93kxbg.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmplf93kxbg.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmplf93kxbg.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmplf93kxbg.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmplf93kxbg.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmplf93kxbg.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmplf93kxbg.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmplf93kxbg.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmplf93kxbg.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpk450j__l.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpk450j__l.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpk450j__l.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(text[i]) {\n            vowels_count++\n        }\n        if vowels_count == 0 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpp7lfa11x.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpp7lfa11x.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpp7lfa11x.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) != -1 {\n            text = text[0:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpl7qdv12q.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmpl7qdv12q.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmpl7qdv12q.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpl7qdv12q.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpl7qdv12q.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpl7qdv12q.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmpl7qdv12q.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmpl7qdv12q.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmpl7qdv12q.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmpl7qdv12q.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmpl7qdv12q.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var text_len = len(text)\n    var i = 0\n    var j = 0\n    var result = \"\"\n    for i < text_len {\n        if text[i] in vowels {\n            i += 1\n        } else {\n            result += text[i]\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmphgvbzutb.swift:20:11: error: expected 'in' after for-each pattern\n    for i < text_len {\n          ^\n/tmp/tmphgvbzutb.swift:20:11: error: unary operator cannot be separated from its operand\n    for i < text_len {\n          ^~\n           \n/tmp/tmphgvbzutb.swift:21:20: error: expected '{' after 'if' condition\n        if text[i] in vowels {\n                   ^\n/tmp/tmphgvbzutb.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n/tmp/tmphgvbzutb.swift:16:20: error: cannot find 'len' in scope\n    var text_len = len(text)\n                   ^~~\n/tmp/tmphgvbzutb.swift:20:11: error: '<' is not a prefix unary operator\n    for i < text_len {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmprnnkma7f/tmprnnkma7f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a0d266c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a0cf5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a0cf5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a0cf5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnnkma7f                        0x000055ae0dd483f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b9a0d452460 __libc_start_main + 245\n6    tmprnnkma7f                        0x000055ae0dd47f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.IndexOf(char) == -1 {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpg_50rxc3.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpg_50rxc3.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, char := range text {\n        if vowels.IndexOf(char) == -1 {\n            result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo11jwhtq.swift:19:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n/tmp/tmpo11jwhtq.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(string(c)) == -1 {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpo3vftmod.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmpo3vftmod.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return text.replaceAll(\"[aeiou]\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpr_beco0k.swift:15:17: error: value of type 'String' has no member 'replaceAll'\n    return text.replaceAll(\"[aeiou]\", \"\")\n           ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp8_j1epai.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp8_j1epai.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp8_j1epai.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text.Contains(v) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, v := range text {\n        if vowels.Contains(v) {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmps4eevkj_.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmps4eevkj_.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmps4eevkj_.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmps4eevkj_.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var new_text = \"\"\n    for _, char := range text {\n        if vowels.Contains(char) {\n            vowels_count += 1\n        } else {\n            new_text += char\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp0ba_zqa5.swift:17:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmp0ba_zqa5.swift:17:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmptmivuzul.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmptmivuzul.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmptmivuzul.swift:28:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmptmivuzul.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmptmivuzul.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n            continue\n        }\n        text = text[:i] + text[i+1:]\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpm8dg1084.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpm8dg1084.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpm8dg1084.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpm8dg1084.swift:15:23: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                      ^~~\n                      \"a\"\n/tmp/tmpm8dg1084.swift:15:41: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                        ^~~\n                                        \"e\"\n/tmp/tmpm8dg1084.swift:15:59: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                          ^~~\n                                                          \"i\"\n/tmp/tmpm8dg1084.swift:15:77: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                            ^~~\n                                                                            \"o\"\n/tmp/tmpm8dg1084.swift:15:95: error: single-quoted string literal found, use '\"'\n        if text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' {\n                                                                                              ^~~\n                                                                                              \"u\"\n/tmp/tmpm8dg1084.swift:18:21: error: expected expression in list of expressions\n        text = text[:i] + text[i+1:]\n                    ^\n/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return text.replaceAll(\"[aeiou]\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpr_beco0k.swift:15:17: error: value of type 'String' has no member 'replaceAll'\n    return text.replaceAll(\"[aeiou]\", \"\")\n           ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpqhj0l3cl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpqhj0l3cl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text.Contains(v) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, v := range text {\n        if vowels.Contains(v) {\n            result += v\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmps4eevkj_.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmps4eevkj_.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmps4eevkj_.swift:28:10: error: expected 'in' after for-each pattern\n    for _, v := range text {\n         ^\n/tmp/tmps4eevkj_.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, v := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmprnnkma7f/tmprnnkma7f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a0d266c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a0cf5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a0cf5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a0cf5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnnkma7f                        0x000055ae0dd483f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b9a0d452460 __libc_start_main + 245\n6    tmprnnkma7f                        0x000055ae0dd47f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            vowels_count++\n        }\n        if vowels_count == 0 {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp7my7_fjt.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp7my7_fjt.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7my7_fjt.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    \n    vowels := \"aeiouAEIOU\"\n    \n    for _, char := range text {\n        if strings.Contains(vowels, string(char)) {\n            continue\n        }\n        \n        return text[:len(text)-1]\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp0lf5jz51.swift:18:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp0lf5jz51.swift:18:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp0lf5jz51.swift:20:10: error: expected 'in' after for-each pattern\n    for _, char := range text {\n         ^\n/tmp/tmp0lf5jz51.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, char := range text {\n         ^\n/tmp/tmp0lf5jz51.swift:25:21: error: expected expression in list of expressions\n        return text[:len(text)-1]\n                    ^\n/tmp/tmp0lf5jz51.swift:18:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if v == text[0] {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpflbeouh2.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmpflbeouh2.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmpflbeouh2.swift:28:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpflbeouh2.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp6tf1_h6j.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp6tf1_h6j.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp6tf1_h6j.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n/tmp/tmp6tf1_h6j.swift:24:12: error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpzz_tszrj.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpzz_tszrj.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmppmmb0xqo.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmppmmb0xqo.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmppmmb0xqo.swift:18:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpwlbqe1zo.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpwlbqe1zo.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:28:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpwlbqe1zo.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return text.replace(/[aeiou]/g, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp_kd9y6fu.swift:14:25: error: '/' is not a prefix unary operator\n    return text.replace(/[aeiou]/g, \"\")\n                        ^\n/tmp/tmp_kd9y6fu.swift:14:27: error: cannot find 'aeiou' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                          ^~~~~\n/tmp/tmp_kd9y6fu.swift:14:34: error: cannot find 'g' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                                 ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: no exact matches in call to instance method 'replace'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: note: found candidate with type '(_, String, Int) -> ()'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmp_kd9y6fu.swift:14:17: error: cannot convert return expression of type '()' to return type 'String'\n    return text.replace(/[aeiou]/g, \"\")\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp7bh2evfr.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp7bh2evfr.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7bh2evfr.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.IndexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmprb4mai0v.swift:17:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmprb4mai0v.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprb4mai0v.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmprb4mai0v.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpc_61o69j.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpc_61o69j.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.IndexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpi6bd2pik.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpi6bd2pik.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.indexOf(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp5_uyph0x.swift:16:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp5_uyph0x.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp5_uyph0x.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    for i := 0; i < len(text); i++ {\n        if is_vowel(text[i]) {\n            text = text[:i] + text[i+1:]\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpx5ckm2dj.swift:14:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpx5ckm2dj.swift:16:25: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                        ^\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected ',' separator\n            text = text[:i] + text[i+1:]\n                                      ^\n                                      ,\n/tmp/tmpx5ckm2dj.swift:16:39: error: expected expression in list of expressions\n            text = text[:i] + text[i+1:]\n                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if strings.Contains(vowels, string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp3hlzq_nl.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n/tmp/tmp3hlzq_nl.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your Code Here\n    return text.replaceAll(\"[aeiouAEIOU]\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpk2ck3do3.swift:15:17: error: value of type 'String' has no member 'replaceAll'\n    return text.replaceAll(\"[aeiouAEIOU]\", \"\")\n           ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpjow6xwqj.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpjow6xwqj.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpjow6xwqj.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpjow6xwqj.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            vowels_count++\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp6dgbr8by.swift:16:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp6dgbr8by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp6dgbr8by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp6dgbr8by.swift:25:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp6dgbr8by.swift:25:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp6dgbr8by.swift:25:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your Code Here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmpn0adcjnm/tmpn0adcjnm.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af92fd23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af92fa1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af92fa1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af92fa197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0adcjnm                        0x000056392ba1e3f5 <unavailable> + 5109\n5    libc.so.6                          0x00002af92ff0f460 __libc_start_main + 245\n6    tmpn0adcjnm                        0x000056392ba1df49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_len = len(vowels)\n    var text_len = len(text)\n    var i = 0\n    var j = 0\n    var result = \"\"\n    for i < text_len {\n        if text[i] in vowels {\n            i += 1\n            continue\n        }\n        result += text[i]\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpntq61tl_.swift:20:11: error: expected 'in' after for-each pattern\n    for i < text_len {\n          ^\n/tmp/tmpntq61tl_.swift:20:11: error: unary operator cannot be separated from its operand\n    for i < text_len {\n          ^~\n           \n/tmp/tmpntq61tl_.swift:21:20: error: expected '{' after 'if' condition\n        if text[i] in vowels {\n                   ^\n/tmp/tmpntq61tl_.swift:15:22: error: cannot find 'len' in scope\n    var vowels_len = len(vowels)\n                     ^~~\n/tmp/tmpntq61tl_.swift:16:20: error: cannot find 'len' in scope\n    var text_len = len(text)\n                   ^~~\n/tmp/tmpntq61tl_.swift:20:11: error: '<' is not a prefix unary operator\n    for i < text_len {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := \"aeiouAEIOU\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            text = text[0:i] + text[i+1:]\n            i--\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp7hvws_12.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    vowels := \"aeiouAEIOU\"\n          ^\n          ;\n/tmp/tmp7hvws_12.swift:17:12: error: expected expression\n    vowels := \"aeiouAEIOU\"\n           ^\n/tmp/tmp7hvws_12.swift:18:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmp7hvws_12.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7hvws_12.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmp7hvws_12.swift:20:26: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                         ^\n                         ,\n/tmp/tmp7hvws_12.swift:20:26: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                         ^\n/tmp/tmp7hvws_12.swift:20:40: error: expected ',' separator\n            text = text[0:i] + text[i+1:]\n                                       ^\n                                       ,\n/tmp/tmp7hvws_12.swift:20:40: error: expected expression in list of expressions\n            text = text[0:i] + text[i+1:]\n                                       ^\n/tmp/tmp7hvws_12.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n/tmp/tmp7hvws_12.swift:17:5: error: cannot find 'vowels' in scope\n    vowels := \"aeiouAEIOU\"\n    ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpwaj53r1k.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpwaj53r1k.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Contains(string(text[i])) {\n            vowels_count++\n        }\n        if vowels_count == 0 {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpcdh2vx54.swift:20:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpcdh2vx54.swift:20:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpcdh2vx54.swift:20:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpcdh2vx54.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if len(text) == 0 {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(text); i++ {\n        if vowels.Index(text[i]) == -1 {\n            result += text[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpt47044e7.swift:19:12: error: expected type\n    for i := 0; i < len(text); i++ {\n           ^\n            <#type#>\n/tmp/tmpt47044e7.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(text); i++ {\n           ^\n/tmp/tmpt47044e7.swift:14:8: error: cannot find 'len' in scope\n    if len(text) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    // Your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmprnnkma7f/tmprnnkma7f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a0d266c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a0cf5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a0cf5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a0cf5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnnkma7f                        0x000055ae0dd483f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b9a0d452460 __libc_start_main + 245\n6    tmprnnkma7f                        0x000055ae0dd47f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    return text.replace(/[aeiou]/g, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpveq4s72_.swift:17:25: error: '/' is not a prefix unary operator\n    return text.replace(/[aeiou]/g, \"\")\n                        ^\n/tmp/tmpveq4s72_.swift:17:27: error: cannot find 'aeiou' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                          ^~~~~\n/tmp/tmpveq4s72_.swift:17:34: error: cannot find 'g' in scope\n    return text.replace(/[aeiou]/g, \"\")\n                                 ^\n/tmp/tmpveq4s72_.swift:17:17: error: no exact matches in call to instance method 'replace'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmpveq4s72_.swift:17:17: note: found candidate with type '(_, String, Int) -> ()'\n    return text.replace(/[aeiou]/g, \"\")\n                ^\n/tmp/tmpveq4s72_.swift:17:17: error: cannot convert return expression of type '()' to return type 'String'\n    return text.replace(/[aeiou]/g, \"\")\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpjwmv0a0f.swift:19:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpjwmv0a0f.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, c := range text {\n        if vowels.indexOf(c) == -1 {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxhppll75.swift:16:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpxhppll75.swift:16:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if text == \"\" {\n        return \"\"\n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    for _, v := range vowels {\n        if text.Contains(v) {\n            vowels_count += 1\n        }\n    }\n    if vowels_count == 0 {\n        return text\n    }\n    var new_text = \"\"\n    for _, c := range text {\n        if vowels.Contains(string(c)) {\n            new_text += c\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpudcb_zlg.swift:19:10: error: expected 'in' after for-each pattern\n    for _, v := range vowels {\n         ^\n/tmp/tmpudcb_zlg.swift:19:10: error: expected Sequence expression for for-each loop\n    for _, v := range vowels {\n         ^\n/tmp/tmpudcb_zlg.swift:28:10: error: expected 'in' after for-each pattern\n    for _, c := range text {\n         ^\n/tmp/tmpudcb_zlg.swift:28:10: error: expected Sequence expression for for-each loop\n    for _, c := range text {\n         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "tmposm7occ9/tmposm7occ9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1839d75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1839a6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1839a6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1839a6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmposm7occ9                        0x000055d8981663f5 <unavailable> + 5109\n5    libc.so.6                          0x00002b1839f61460 __libc_start_main + 245\n6    tmposm7occ9                        0x000055d898165f49 <unavailable> + 3913\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}