{
  "name": "HumanEval_111_histogram",
  "language": "swift",
  "prompt": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])",
  "completions": [
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            } else if result[letter] == max {\n                result[letter] += 1\n            }\n        }\n    }\n    return result",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.toLowerCase() {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n      max_letter = letter\n    }\n  }\n  return dict",
    "    // Your histogram function here\n    return []",
    "    var histogram = [String : Int]()\n    for _, letter := range test.split(\" \") {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram",
    "    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict = {}\n    var max = 0\n    var max_key = \"\"\n    for _, letter := range test {\n        if _, ok := dict[letter]; ok {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_key = letter\n        }\n    }\n    return dict",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        var count: Int = 0\n        for _, v in result {\n            if v == letter {\n                count += 1\n            }\n        }\n        if count > max {\n            max = count\n            max_letter = letter\n        }\n        if count == max {\n            result.append(letter)\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram: [String : Int] = [:]\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == ' ' {\n            continue\n        }\n        if len(result) == 0 {\n            result = [test[i] : 1]\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                result = [test[i] : max]\n            } else if result[test[i]] == max {\n                result.append(test[i])\n            }\n        }\n    }\n    return result",
    "  // Your histogram function here\n  return []",
    "    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            result[letter] = count\n            count = 1\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return result",
    "    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            }\n            result[letter] += 1\n        }\n    }\n    if len(result) == 0 {\n        result = [max_letter : max]\n    }\n    return result",
    "  // Your histogram function here\n  return []",
    "    var result = [String : Int]\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    for key, value := range dict {\n        result[key] = value\n    }\n    return result",
    "    var histogram: [String : Int] = []\n    for _, letter := range test.toLower() {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter: 1])\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var histogram: [String : Int] = []\n  for _, letter := range test {\n    if histogram.contains(letter) {\n      histogram[letter] += 1\n    } else {\n      histogram.append(letter, 1)\n    }\n  }\n  return histogram",
    "    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == 1 {\n            count = 2\n            max = 2\n        } else if count == 2 {\n            count = 3\n            max = 3\n        } else if count == 3 {\n            count = 4\n            max = 4\n        } else if count == 4 {\n            count = 5\n            max = 5\n        } else if count == 5 {\n            count = 6\n            max = 6\n        } else if count == 6 {\n            count = 7\n            max = 7\n        } else if count == 7 {\n            count = 8\n            max = 8\n        } else if count == 8 {\n            count = 9\n            max = 9\n        } else if count == 9 {\n            count = 10\n            max = 10\n        } else if count == 10 {\n            count = 11\n            max = 11\n        } else if count == 11 {\n            count = 12\n            max = 12\n        } else if count == 12 {\n            count = 13\n            max = 13\n        } else if count == 13 {\n            count = 14\n            max = 14\n        } else if count == 14 {\n            count = 15\n            max = 15\n        } else if count == 15 {\n            count = 16\n            max = 16\n        } else if count == 16 {\n            count = 17\n            max = 17\n        } else if count == 17 {\n            count = 18\n            max = 18\n        } else if count == 18 {\n            count = 19\n            max = 19\n        } else if count == 19 {\n            count = 20\n            max = 20\n        } else if count == 20 {\n            count = 21\n            max = 21\n        } else if count == 21 {\n            count = 22\n            max = 22\n        } else if count == 22 {\n            count = 23\n            max = 23\n        } else if count == 23 {\n            count = 24\n            max = 24\n        } else if count == 24 {\n            count = 25\n            max = 25\n        } else if count == 25 {\n            ",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, [letter : count])\n        } else if count == 1 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 2 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 3 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 4 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 5 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 6 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 7 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 8 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 9 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 10 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 11 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 12 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 13 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 14 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 15 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 16 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 17 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 18 {\n            count = 1\n            result[0][letter] = count\n        } else if count == 19 {\n            count = 1\n            result[",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            count = 1\n            result.append(letter)\n        } else if count == 1 {\n            count = 2\n            result.append(letter)\n        } else if count > max {\n            max = count\n            result.append(letter)\n        }\n    }\n    return result",
    "    // Your histogram function here\n    return []",
    "    var result = [String : Int]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result[letter] = 1\n        } else if count == 1 {\n            count = 2\n            result[letter] = 2\n        } else if count > max {\n            max = count\n            result[letter] = count\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = [:]\n    var count: Int = 0\n    for _, letter := range test {\n        if dict[letter] == 0 {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        count += 1\n    }\n    return dict",
    "    // Your histogram function here\n    return []",
    "  // TODO: implement your function\n  return []",
    "    var histogram = [String : Int]()\n    for _, letter := range test.split(\" \") {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict",
    "  var histogram: [String : Int] = []\n  var max: Int = 0\n  for _, letter := range test {\n    if histogram.contains(letter) {\n      histogram[letter] += 1\n    } else {\n      histogram[letter] = 1\n    }\n    if histogram[letter] > max {\n      max = histogram[letter]\n    }\n  }\n  return histogram",
    "    // Your histogram function here\n    return []",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram = append(histogram, [letter : Int])\n        }\n        histogram[letter] += 1\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = result[0][0]\n        }\n    }\n    return result",
    "  var result = [:]\n  var count = 0\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if count == 0 {\n      count = 1\n      max = 1\n      max_letter = letter\n    } else if count == 1 {\n      if letter == max_letter {\n        count += 1\n      } else {\n        count = 1\n        max = 1\n        max_letter = letter\n      }\n    } else {\n      if letter == max_letter {\n        count += 1\n      } else {\n        count = 1\n        max = 1\n        max_letter = letter\n      }\n    }\n  }\n  for _, letter := range test {\n    if letter == max_letter {\n      result = append(result, [letter : count])\n    }\n  }\n  return result",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count == max {\n            count += 1\n            result[len(result) - 1][letter] = count\n        } else if count > max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else {\n            count += 1\n            result[len(result) - 1][letter] = count\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = result[0][0]\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.split(\" \"):\n        if len(result) == 0 or result[len(result) - 1][0] != letter:\n            result.append([letter, 1])\n        else:\n            result[len(result) - 1][1] += 1\n        if result[len(result) - 1][1] > max:\n            max = result[len(result) - 1][1]\n            max_letter = result[len(result) - 1][0]\n    return result",
    "    var result = [:]\n    var max = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        if result[letter] > max {\n            max = result[letter]\n        }\n    }\n    for _, v := range result {\n        if v == max {\n            result = append(result, v)\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, char := range test {\n        if _, ok := histogram[char]; !ok {\n            histogram[char] = 1\n        } else {\n            histogram[char] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var result = [:]\n    var count = 0\n    for _, c := range test {\n        if _, ok := result[c]; ok {\n            count += 1\n        } else {\n            result[c] = count\n            count = 1\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        if result[letter] > max {\n            max = result[letter]\n            max_letter = letter\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            count = 1\n            result.append(letter)\n        } else if count == 1 {\n            count = 2\n            result.append(letter)\n        } else if count > max {\n            count = 2\n            result.append(letter)\n        } else {\n            count = count + 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.split(\" \"):\n    if len(dict) == 0 or dict[letter] > max:\n      dict[letter] = 1\n    else:\n      dict[letter] += 1\n    if dict[letter] > max:\n      max = dict[letter]\n      max_letter = letter\n  return dict",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            result = append(result, letter)\n            count = 1\n        } else if letter == result[0] {\n            count += 1\n        } else {\n            result = append(result, letter)\n            count = 1\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter: String = <caret> test {\n        if count == 0 {\n            result = [letter : 1]\n        } else if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count += 1\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict",
    "    // Your histogram function here\n    return []",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  // your code here\n  return nil",
    "  // TODO: Implement this function\n  return []",
    "    var histogram = [String : Int]()\n    for _, char := range test {\n        if histogram[char] == 0 {\n            histogram[char] = 1\n        } else {\n            histogram[char] += 1\n        }\n    }\n    return histogram",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if _, ok := histogram[letter]; !ok {\n            histogram = append(histogram, [letter : Int]{0, 1})\n        } else {\n            histogram[letter] = histogram[letter] + 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict",
    "    var result: [String : Int] = []\n    var current: String = \"\"\n    var count: Int = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, current)\n                count = 1\n            }\n            current = letter\n        }\n    }\n    if count > 0 {\n        result = append(result, current)\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            result[test[i]] += 1\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                max_letter = test[i]\n            }\n            result[test[i]] = 1\n        }\n    }\n    return result",
    "    var result = [:]\n    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    for key, value := range dict {\n        result = append(result, [key, value])\n    }\n    return result",
    "    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == 1 {\n            count = 0\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n        } else {\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n            count = 1\n        }\n    }\n    if count > max {\n        max = count\n        result = [test[i] : count]\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = []\n            }\n        } else {\n            count = 0\n        }\n        if count > 0 {\n            result.append(test[i])\n        }\n    }\n    return result",
    "    var count = 0\n    var max = 0\n    var result = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count++\n            if count > max {\n                max = count\n                result = append(result, letter)\n            }\n        } else {\n            count--\n        }\n    }\n    return result",
    "    // Your histogram function here\n    return []",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for i := 0; i < len(test); i++ {\n        if count == 0 {\n            count = 1\n            result = append(result, test[i])\n        } else if test[i] == result[0] {\n            count += 1\n        } else if count > max {\n            max = count\n            result = append(result, test[i])\n        } else {\n            count = 1\n            result = append(result, test[i])\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram.append(letter, 1)\n        }\n    }\n    return histogram",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i + 1] {\n            count += 1\n        } else {\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n            count = 1\n        }\n    }\n    if count > max {\n        max = count\n        result = [test[i] : count]\n    }\n    return result",
    "    // Your histogram function here\n    return []",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for i := 0; i < len(test); i++ {\n        if dict.Contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict",
    "    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if len(result) == 0 || result[len(result) - 1][0] != letter {\n            result = append(result, [letter : 1])\n        } else {\n            result[len(result) - 1][1] += 1\n        }\n        if result[len(result) - 1][1] > max {\n            max = result[len(result) - 1][1]\n            max_letter = result[len(result) - 1][0]\n        }\n    }\n    return result",
    "    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            result[test[i]] += 1\n        } else {\n            if result[test[i]] > max {\n                max = result[test[i]]\n                max_letter = test[i]\n            }\n            result[test[i]] = 1\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    // Your histogram function here\n    return []",
    "    // TODO: Implement this function\n    return []",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_letter: String = \"\"\n  for letter in test.toLowerCase() {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n      max_letter = letter\n    }\n  }\n  return dict",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var dict: [String : Int] = {}\n    var max: Int = 0\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] in dict {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n        }\n    }\n    return dict",
    "    var dict: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; ok {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > count {\n            count = dict[letter]\n        }\n    }\n    return dict",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict",
    "    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result",
    "    // Your histogram function here\n    return []",
    "    var result = [:]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, current)\n                result = append(result, count)\n            }\n            current = letter\n            count = 1\n        }\n    }\n    if count > 0 {\n        result = append(result, current)\n        result = append(result, count)\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            result = append(result, letter)\n            count = count + 1\n        } else if count > max {\n            max = count\n            result = []\n            result = append(result, letter)\n            count = 1\n        } else {\n            count = count + 1\n        }\n    }\n    return result",
    "    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            count += 1\n            result[letter] = count\n        } else {\n            count -= 1\n            result[letter] = count\n        }\n    }\n    return result",
    "    var dict = [:] as [String : Int]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            dict[letter] = 1\n        } else if dict[letter] == 0 {\n            count = 1\n            dict[letter] = 1\n        } else {\n            count += 1\n            dict[letter] += 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return dict",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_key: String = \"\"\n    for key, value in String(test).split(\" \").to_dict().items() {\n        if value > max {\n            max = value\n            max_key = key\n        }\n        if value == max {\n            dict[key] = dict[key] + 1\n        }\n    }\n    return dict",
    "    var histogram: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n        if histogram[letter] > max {\n            max = histogram[letter]\n            max_letter = letter\n        }\n    }\n    return histogram",
    "    // Your histogram function here\n    return []",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var res = [String : Int]\n    for _, c := range test {\n        if _, ok := res[c]; ok {\n            res[c] += 1\n        } else {\n            res[c] = 1\n        }\n    }\n    return res",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result = [:]\n    var max = 0\n    var max_letter = \"\"\n    for _, letter := range test {\n        if len(result) == 0 || result[0][0] != letter {\n            result = [letter : 1]\n        } else if result[0][1] < 1 {\n            result[0][1] += 1\n        } else {\n            result = [letter : result[0][1] + 1]\n        }\n        if result[0][1] > max {\n            max = result[0][1]\n            max_letter = letter\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]()\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for letter in test.toLowerCase() {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                max = result[letter]\n                max_letter = letter\n            }\n            result[letter] += 1\n        }\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if test[i] == \" \" {\n            continue\n        }\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_letter = test[i]\n        }\n    }\n    return dict",
    "    // Your histogram function here\n    return []",
    "    var histogram = [String : Int]\n    for _, letter := range test.toLower() {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    // Your histogram function here\n    return []",
    "  var histogram = [String : Int]()\n  for _, letter := range test {\n    if _, ok := histogram[letter]; !ok {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var histogram = [String : Int]()\n  for _, letter := range test {\n    if histogram[letter] == 0 {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram",
    "    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = [letter : count]\n        } else if result[letter] == 0 {\n            result[letter] = count\n        } else {\n            result[letter] += count\n        }\n    }\n    return result",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    // Your histogram function here\n    return []",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            result = append(result, letter)\n            count = count + 1\n        } else if count > max {\n            max = count\n            result = []\n            result = append(result, letter)\n            count = 1\n        } else {\n            count = count + 1\n        }\n    }\n    return result",
    "    var dict: [String : Int] = {}\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict",
    "    var dict = [String : Int]\n    for _, letter := range test {\n        if dict[letter] == 0 {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict",
    "    var result = [String : Int]\n    var count = 0\n    for _, letter := range test {\n        if count == 0 {\n            result[letter] = 1\n        } else if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count++\n    }\n    return result",
    "    // your code here\n    return nil",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count = 0\n        } else {\n            count += 1\n        }\n        if count > max {\n            max = count\n            result = append(result, letter)\n        }\n    }\n    return result",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict = {}\n    var max = 0\n    for _, char := range test {\n        if _, ok := dict[char]; !ok {\n            dict[char] = 1\n        } else {\n            dict[char] += 1\n        }\n        if dict[char] > max {\n            max = dict[char]\n        }\n    }\n    return dict",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; !ok {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n        count += 1\n    }\n    return result",
    "  var result = [:]\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if _, ok := result[letter]; ok {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n    if result[letter] > max {\n      max = result[letter]\n      max_letter = letter\n    }\n  }\n  return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n            max_letter = letter\n        }\n    }\n    return dict",
    "    // TODO: Implement this function\n    return []",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count < max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count == max {\n            count += 1\n            max = count\n            result = append(result, [letter : count])\n        }\n    }\n    return result",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result: [String : Int] = []\n    var max: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if len(result) == 0 {\n            result = [letter : 1]\n        } else {\n            if result[letter] > max {\n                result = [letter : 1]\n            } else if result[letter] == max {\n                result[letter] += 1\n            }\n        }\n        if result[letter] > max {\n            max = result[letter]\n        }\n    }\n    return result",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else if count < max {\n            count += 1\n            result[0][letter] = count\n        } else if count > max {\n            count = 1\n            max = 1\n            result = append(result, [letter : count])\n        } else {\n            count += 1\n            result[0][letter] = count\n        }\n    }\n    return result",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var histogram: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram[letter] = 1\n        }\n        if histogram[letter] > max {\n            max = histogram[letter]\n        }\n    }\n    return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var result = [String : Int]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result[current] = count\n                count = 0\n            }\n            current = letter\n        }\n    }\n    if count > 0 {\n        result[current] = count\n    }\n    return result",
    "  // Your histogram function here\n  return []",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n        } else if count == max {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n            result = [letter : count]\n        } else if count == max {\n            result = [letter : count]\n        }\n    }\n    return result",
    "    var histogram: [String : Int] = []\n    for _, letter := range test {\n        if histogram.contains(letter) {\n            histogram[letter] += 1\n        } else {\n            histogram = append(histogram, [letter : 1])\n        }\n    }\n    return histogram",
    "  var dict: [String : Int] = []\n  var max: Int = 0\n  var max_key: String = \"\"\n  for i: Int = 0; i < len(test); i++ {\n    if test[i] == \" \" {\n      continue\n    }\n    if dict.contains(test[i]) {\n      dict[test[i]] += 1\n    } else {\n      dict[test[i]] = 1\n    }\n    if dict[test[i]] > max {\n      max = dict[test[i]]\n      max_key = test[i]\n    }\n  }\n  return dict",
    "    var result = [:]\n    var count = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; ok {\n            result[letter] += 1\n        } else {\n            result[letter] = 1\n        }\n        count += 1\n    }\n    return result",
    "    var count: Int = 0\n    var max: Int = 0\n    var result: [String : Int] = []\n    for i := 0; i < len(test); i++ {\n        if test[i] == test[i+1] {\n            count += 1\n            if count > max {\n                max = count\n                result = [test[i] : count]\n            }\n        } else {\n            count = 0\n        }\n    }\n    return result",
    "    var result = [:]\n    var current = \"\"\n    var count = 0\n    for _, letter := range test {\n        if letter == current {\n            count += 1\n        } else {\n            if count > 0 {\n                result = append(result, [String: Int]([letter: Int] {\n                    return [letter: Int](count)\n                }))\n            }\n            current = letter\n            count = 1\n        }\n    }\n    if count > 0 {\n        result = append(result, [String: Int]([letter: Int] {\n            return [letter: Int](count)\n        }))\n    }\n    return result",
    "  var result = [:]\n  var max = 0\n  var max_letter = \"\"\n  for _, letter := range test {\n    if _, ok := result[letter]; ok {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n    if result[letter] > max {\n      max = result[letter]\n      max_letter = letter\n    }\n  }\n  return result",
    "  var histogram: [String : Int] = []\n  var current: String = \"\"\n  var count: Int = 0\n  for _, letter := range test {\n    if letter == current {\n      count += 1\n    } else {\n      if count > 0 {\n        histogram = append(histogram, [current, count])\n      }\n      current = letter\n      count = 1\n    }\n  }\n  if count > 0 {\n    histogram = append(histogram, [current, count])\n  }\n  return histogram",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "  var histogram: [String : Int] = [:]\n  var current: String = \"\"\n  var count: Int = 0\n  for _, letter := range test {\n    if letter == current {\n      count += 1\n    } else {\n      if count > 0 {\n        histogram = append(histogram, [current, count])\n      }\n      current = letter\n      count = 1\n    }\n  }\n  if count > 0 {\n    histogram = append(histogram, [current, count])\n  }\n  return histogram",
    "    var result = [:]\n    var count = 0\n    var max = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            max = 1\n            result = [letter : count]\n        } else if count == 1 {\n            count = 1\n            if result[letter] > max {\n                max = result[letter]\n                result = [letter : count]\n            }\n        } else {\n            count = count + 1\n        }\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    for _, letter: String in test.split(\" \") {\n        if count == 0 {\n            result = append(result, [letter, 1])\n        } else if result[0][0] == letter {\n            result[0][1] += 1\n        } else {\n            result = append(result, [letter, 1])\n        }\n        count += 1\n    }\n    return result",
    "    var result: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    for _, letter := range test {\n        if count == 0 {\n            count = 1\n            result = append(result, letter)\n        } else if count == 1 {\n            count = 2\n            result = append(result, letter)\n        } else if count > max {\n            count = count + 1\n            result = append(result, letter)\n        } else if count == max {\n            result = append(result, letter)\n        }\n    }\n    return result",
    "    var dict = {}\n    for _, letter := range test {\n        if _, ok := dict[letter]; !ok {\n            dict[letter] = 1\n        } else {\n            dict[letter] += 1\n        }\n    }\n    return dict",
    "  var histogram = [String : Int]\n  for _, letter := range test {\n    if histogram[letter] == 0 {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram",
    "    var result = [String : Int]\n    var letters = test.split(\" \")\n    for _, letter := range letters {\n        if result[letter] == 0 {\n            result[letter] = 1\n        } else {\n            result[letter] += 1\n        }\n    }\n    return result",
    "  var dict: [String : Int] = []\n  var max: Int = 0\n  for _, letter := range test {\n    if dict.contains(letter) {\n      dict[letter] += 1\n    } else {\n      dict[letter] = 1\n    }\n    if dict[letter] > max {\n      max = dict[letter]\n    }\n  }\n  return dict",
    "    var histogram = [String : Int]()\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    // Your histogram function here\n    return []",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var result = [String : Int]\n    var count = 0\n    for _, letter := range test {\n        if _, ok := result[letter]; ok {\n            result[letter] += 1\n        } else {\n            result[letter] = 1\n        }\n        count += 1\n    }\n    return result",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    for _, letter := range test {\n        if dict.contains(letter) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter] > max {\n            max = dict[letter]\n        }\n    }\n    return dict",
    "    var histogram = [String : Int]\n    for _, letter := range test {\n        if histogram[letter] == 0 {\n            histogram[letter] = 1\n        } else {\n            histogram[letter] += 1\n        }\n    }\n    return histogram",
    "    var dict: [String : Int] = []\n    var count: Int = 0\n    var max: Int = 0\n    var max_key: String\n    for i := 0; i < len(test); i++ {\n        if count == 0 {\n            dict = append(dict, test[i])\n            count = 1\n        } else if test[i] == max_key {\n            count += 1\n        } else if count > max {\n            max = count\n            max_key = test[i]\n        }\n    }\n    return dict",
    "    // TODO: Implement this function\n    return []",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_key: String = \"\"\n    for i: Int = 0; i < len(test); i++ {\n        if dict.contains(test[i]) {\n            dict[test[i]] += 1\n        } else {\n            dict[test[i]] = 1\n        }\n        if dict[test[i]] > max {\n            max = dict[test[i]]\n            max_key = test[i]\n        }\n    }\n    return dict",
    "    // TODO: Implement this function\n    return []",
    "    var dict: [String : Int] = []\n    var max: Int = 0\n    var max_letter: String = \"\"\n    for i := 0; i < len(test); i++ {\n        if test[i] == max_letter {\n            dict[test[i]] += 1\n        } else {\n            if dict[test[i]] > max {\n                max = dict[test[i]]\n                max_letter = test[i]\n            }\n            dict[test[i]] = 1\n        }\n    }\n    return dict"
  ],
  "stop_tokens": [
    "\n}"
  ]
}