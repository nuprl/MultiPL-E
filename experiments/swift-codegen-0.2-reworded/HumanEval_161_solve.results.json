{
  "name": "HumanEval_161_solve",
  "language": "swift",
  "prompt": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += toUpper(s[i])\n            } else {\n                res += toLower(s[i])\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmptql921m7.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptql921m7.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptql921m7.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(tolower(s[i]))\n        } else {\n            res += string(s[i])\n        }\n    }\n    if len(res) == 0 {\n        return \" \"\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpk4phlm8g.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4phlm8g.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpk4phlm8g.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpk4phlm8g.swift:23:8: error: cannot find 'len' in scope\n    if len(res) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpzkedqd6c.swift:16:1: error: missing return in global function expected to return 'String'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpm83hx3ma.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpm83hx3ma.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpm83hx3ma.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:15:9: error: type annotation missing in pattern\n    var result string\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpm83hx3ma.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpm83hx3ma.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpm83hx3ma.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:15:9: error: type annotation missing in pattern\n    var result string\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += toUpper(s[i])\n            } else {\n                res += toLower(s[i])\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpj4bp40iw.swift:15:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var res String\n            ^\n/tmp/tmpj4bp40iw.swift:15:13: note: join the identifiers together\n    var res String\n        ~~~~^~~~~~\n        resString\n/tmp/tmpj4bp40iw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpj4bp40iw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpj4bp40iw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpj4bp40iw.swift:15:9: error: type annotation missing in pattern\n    var res String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    \n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp1joh1znw.swift:17:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp1joh1znw.swift:17:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp1joh1znw.swift:17:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpniowmpg4.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpniowmpg4.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpe4_0t1l4.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpe4_0t1l4.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpe4_0t1l4.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp2ewqqcz5.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += toUpper(s[i])\n            } else {\n                res += toLower(s[i])\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmptql921m7.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptql921m7.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptql921m7.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp8b2_i3l9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp8b2_i3l9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp8b2_i3l9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp8b2_i3l9.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(tolower(s[i]))\n        } else {\n            res += string(s[i])\n        }\n    }\n    if len(res) == 0 {\n        return \"Empty String\"\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp_tdtd8jb.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_tdtd8jb.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_tdtd8jb.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_tdtd8jb.swift:23:8: error: cannot find 'len' in scope\n    if len(res) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += reverse(s[i])\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpq58yi6w8.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpq58yi6w8.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpq58yi6w8.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp8b2_i3l9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp8b2_i3l9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp8b2_i3l9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp8b2_i3l9.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpm83hx3ma.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result string\n               ^\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together\n    var result string\n        ~~~~~~~^~~~~~\n        resultstring\n/tmp/tmpm83hx3ma.swift:15:16: note: join the identifiers together with camel-case\n    var result string\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpm83hx3ma.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpm83hx3ma.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpm83hx3ma.swift:15:9: error: type annotation missing in pattern\n    var result string\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(tolower(s[i]))\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp6_c4wshn.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp6_c4wshn.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp6_c4wshn.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(tolower(s[i]))\n        } else {\n            res += string(s[i])\n        }\n    }\n    if len(res) == 0 {\n        return s\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpqsf23szp.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpqsf23szp.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpqsf23szp.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpqsf23szp.swift:23:8: error: cannot find 'len' in scope\n    if len(res) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    if len(s) == 0 {\n        return \"\"\n    }\n    var result = make([]rune, len(s))\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result[i] = toUpper(s[i])\n        } else {\n            result[i] = toLower(s[i])\n        }\n    }\n    return string(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp9e7k9_iu.swift:18:25: error: expected ',' separator\n    var result = make([]rune, len(s))\n                        ^\n                        ,\n/tmp/tmp9e7k9_iu.swift:19:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp9e7k9_iu.swift:19:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp9e7k9_iu.swift:19:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp9e7k9_iu.swift:15:8: error: cannot find 'len' in scope\n    if len(s) == 0 {\n       ^~~\n/tmp/tmp9e7k9_iu.swift:18:18: error: cannot find 'make' in scope\n    var result = make([]rune, len(s))\n                 ^~~~\n/tmp/tmp9e7k9_iu.swift:18:25: error: cannot find 'rune' in scope\n    var result = make([]rune, len(s))\n                        ^~~~\n/tmp/tmp9e7k9_iu.swift:18:31: error: cannot find 'len' in scope\n    var result = make([]rune, len(s))\n                              ^~~\n/tmp/tmp9e7k9_iu.swift:26:12: error: cannot find 'string' in scope\n    return string(result)\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpc1gwq457.swift:15:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var res String\n            ^\n/tmp/tmpc1gwq457.swift:15:13: note: join the identifiers together\n    var res String\n        ~~~~^~~~~~\n        resString\n/tmp/tmpc1gwq457.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpc1gwq457.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpc1gwq457.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpc1gwq457.swift:15:9: error: type annotation missing in pattern\n    var res String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp2ewqqcz5.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnddtmrw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnddtmrw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnddtmrw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += toUpper(s[i])\n            } else {\n                res += toLower(s[i])\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmptql921m7.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmptql921m7.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmptql921m7.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    \n    var result = \"\"\n    \n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpdjx1_f39.swift:18:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpdjx1_f39.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpdjx1_f39.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + string(toupper(s[0]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbdi62qyy.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbdi62qyy.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n/tmp/tmpbdi62qyy.swift:24:22: error: cannot find 'string' in scope\n        return \"#\" + string(toupper(s[0]))\n                     ^~~~~~\n/tmp/tmpbdi62qyy.swift:24:29: error: cannot find 'toupper' in scope\n        return \"#\" + string(toupper(s[0]))\n                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + string(tolower(s[0]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpuvmg0qrz.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpuvmg0qrz.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpuvmg0qrz.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpuvmg0qrz.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n/tmp/tmpuvmg0qrz.swift:24:22: error: cannot find 'string' in scope\n        return \"#\" + string(tolower(s[0]))\n                     ^~~~~~\n/tmp/tmpuvmg0qrz.swift:24:29: error: cannot find 'tolower' in scope\n        return \"#\" + string(tolower(s[0]))\n                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnddtmrw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnddtmrw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnddtmrw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += reverse(s[i])\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp7xzhyfn8.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpkmg51x51.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpkmg51x51.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpkmg51x51.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpkmg51x51.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpkmg51x51.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpkmg51x51.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += reverse(s[i])\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp7xzhyfn8.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += reverse(s[i])\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp7xzhyfn8.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7xzhyfn8.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpzkedqd6c.swift:16:1: error: missing return in global function expected to return 'String'\n}\n^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnddtmrw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnddtmrw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnddtmrw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnddtmrw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnddtmrw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnddtmrw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp6ey10kb4.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp6ey10kb4.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp6ey10kb4.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += reverse(s[i])\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnm1wx70.swift:15:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var res String\n            ^\n/tmp/tmpbnm1wx70.swift:15:13: note: join the identifiers together\n    var res String\n        ~~~~^~~~~~\n        resString\n/tmp/tmpbnm1wx70.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnm1wx70.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnm1wx70.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnm1wx70.swift:15:9: error: type annotation missing in pattern\n    var res String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"0\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpaplt5w_6.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpaplt5w_6.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpaplt5w_6.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpaplt5w_6.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpniowmpg4.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpniowmpg4.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(toupper(s[i]))\n        } else {\n            res += string(tolower(s[i]))\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpa6f26lo0.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpa6f26lo0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpa6f26lo0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += toUpper(s[i])\n            } else {\n                res += toLower(s[i])\n            }\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpj4bp40iw.swift:15:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var res String\n            ^\n/tmp/tmpj4bp40iw.swift:15:13: note: join the identifiers together\n    var res String\n        ~~~~^~~~~~\n        resString\n/tmp/tmpj4bp40iw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpj4bp40iw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpj4bp40iw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpj4bp40iw.swift:15:9: error: type annotation missing in pattern\n    var res String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(toupper(s[i]))\n        } else {\n            res += string(tolower(s[i]))\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpa6f26lo0.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpa6f26lo0.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpa6f26lo0.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmp2ewqqcz5.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp2ewqqcz5.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + string(toupper(s[0]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbdi62qyy.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbdi62qyy.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n/tmp/tmpbdi62qyy.swift:24:22: error: cannot find 'string' in scope\n        return \"#\" + string(toupper(s[0]))\n                     ^~~~~~\n/tmp/tmpbdi62qyy.swift:24:29: error: cannot find 'toupper' in scope\n        return \"#\" + string(toupper(s[0]))\n                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += reverse(s[i])\n        } else {\n            res += s[i]\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnm1wx70.swift:15:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var res String\n            ^\n/tmp/tmpbnm1wx70.swift:15:13: note: join the identifiers together\n    var res String\n        ~~~~^~~~~~\n        resString\n/tmp/tmpbnm1wx70.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnm1wx70.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnm1wx70.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnm1wx70.swift:15:9: error: type annotation missing in pattern\n    var res String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(tolower(s[i]))\n        } else {\n            res += string(s[i])\n        }\n    }\n    if len(res) == 0 {\n        return \"0\"\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpk5tmbf84.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpk5tmbf84.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpk5tmbf84.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpk5tmbf84.swift:23:8: error: cannot find 'len' in scope\n    if len(res) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return \"#\" + string(toupper(s[0]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbdi62qyy.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbdi62qyy.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbdi62qyy.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n/tmp/tmpbdi62qyy.swift:24:22: error: cannot find 'string' in scope\n        return \"#\" + string(toupper(s[0]))\n                     ^~~~~~\n/tmp/tmpbdi62qyy.swift:24:29: error: cannot find 'toupper' in scope\n        return \"#\" + string(toupper(s[0]))\n                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpbnddtmrw.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpbnddtmrw.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpbnddtmrw.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(tolower(s[i]))\n        } else {\n            result += string(s[i])\n        }\n    }\n    if len(result) == 0 {\n        return s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpniowmpg4.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpniowmpg4.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpniowmpg4.swift:23:8: error: cannot find 'len' in scope\n    if len(result) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpggxz37rd.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpggxz37rd.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpggxz37rd.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += toUpper(s[i])\n            } else {\n                result += toLower(s[i])\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpygx1frs9.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpygx1frs9.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpygx1frs9.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpygx1frs9.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpygx1frs9.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result String\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpvvfh45by.swift:15:16: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var result String\n               ^\n/tmp/tmpvvfh45by.swift:15:16: note: join the identifiers together\n    var result String\n        ~~~~~~~^~~~~~\n        resultString\n/tmp/tmpvvfh45by.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpvvfh45by.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpvvfh45by.swift:15:9: error: type annotation missing in pattern\n    var result String\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                res += string(toupper(s[i]))\n            } else {\n                res += string(tolower(s[i]))\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmplvrfbf_m.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmplvrfbf_m.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmplvrfbf_m.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var res = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            res += string(toupper(s[i]))\n        } else {\n            res += string(tolower(s[i]))\n        }\n    }\n    if len(res) == 0 {\n        return s\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpw38bk6mx.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpw38bk6mx.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpw38bk6mx.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpw38bk6mx.swift:23:8: error: cannot find 'len' in scope\n    if len(res) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result += string(toupper(s[i]))\n            } else {\n                result += string(tolower(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpd7zt4wah.swift:16:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpd7zt4wah.swift:16:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpd7zt4wah.swift:16:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    \n    if len(s) == 0 {\n        return \"\"\n    }\n    \n    var result = \"\"\n    for i := 0; i < len(s); i++ {\n        if isLetter(s[i]) {\n            result += string(toupper(s[i]))\n        } else {\n            result += string(tolower(s[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "/tmp/tmpr_juko6c.swift:21:12: error: expected type\n    for i := 0; i < len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpr_juko6c.swift:21:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpr_juko6c.swift:21:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpr_juko6c.swift:16:8: error: cannot find 'len' in scope\n    if len(s) == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}