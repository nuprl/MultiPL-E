{
  "name": "HumanEval_34_unique",
  "language": "swift",
  "prompt": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store the unique elements\n\tm := make(map[Int]bool)\n\tfor _, v := range l {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\t// Return the sorted unique elements\n\treturn sort.Ints(keys(m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi5ww8cxj.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpi5ww8cxj.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:9:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; !ok {\n                         ^\n/tmp/tmpi5ww8cxj.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpi5ww8cxj.swift:14:9: error: cannot find 'sort' in scope\n        return sort.Ints(keys(m))\n               ^~~~\n/tmp/tmpi5ww8cxj.swift:14:19: error: cannot find 'keys' in scope\n        return sort.Ints(keys(m))\n                         ^~~~\n/tmp/tmpi5ww8cxj.swift:14:24: error: cannot find 'm' in scope\n        return sort.Ints(keys(m))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpehewkmuh.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpehewkmuh.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpehewkmuh.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for j := 0; j < len(l); j++ {\n        if i == len(result) || l[j] != result[i] {\n            result = append(result, l[j])\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp37cbum8v.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp37cbum8v.swift:8:12: error: expected type\n    for j := 0; j < len(l); j++ {\n           ^\n            <#type#>\n/tmp/tmp37cbum8v.swift:8:12: error: expected 'in' after for-each pattern\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmp37cbum8v.swift:8:12: error: expected Sequence expression for for-each loop\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmp37cbum8v.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp37cbum8v.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp37cbum8v.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp37cbum8v.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp37cbum8v.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp37cbum8v.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp37cbum8v.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, x := range l {\n        if !contains(result, x) {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpc0s49m72.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpc0s49m72.swift:7:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmpc0s49m72.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmpc0s49m72.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpc0s49m72.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpc0s49m72.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpc0s49m72.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpy275mgv6.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpy275mgv6.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpy275mgv6.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy275mgv6.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpy275mgv6.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpy275mgv6.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpy275mgv6.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpy275mgv6.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpehewkmuh.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpehewkmuh.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpehewkmuh.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result = []Int{}\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpxp__99lr.swift:6:17: error: consecutive statements on a line must be separated by ';'\n        var result = []Int{}\n                       ^\n                       ;\n/tmp/tmpxp__99lr.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpxp__99lr.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpxp__99lr.swift:6:15: error: empty collection literal requires an explicit type\n        var result = []Int{}\n                     ^~\n/tmp/tmpxp__99lr.swift:6:17: error: no exact matches in call to initializer \n        var result = []Int{}\n                       ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if i == 0 || l[i] != l[i-1] {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmprv1yq8vb.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmprv1yq8vb.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmprv1yq8vb.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmprv1yq8vb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmprv1yq8vb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmprv1yq8vb.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmprv1yq8vb.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmprv1yq8vb.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmprv1yq8vb.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmprv1yq8vb.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmprv1yq8vb.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmprv1yq8vb.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpehewkmuh.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpehewkmuh.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpehewkmuh.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpehewkmuh.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, x := range l {\n        if !seen[x] {\n            result = append(result, x)\n            seen[x] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi4bi0boa.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpi4bi0boa.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmpi4bi0boa.swift:8:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpi4bi0boa.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpi4bi0boa.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpi4bi0boa.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpi4bi0boa.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpi4bi0boa.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmpi4bi0boa.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmpi4bi0boa.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmpi4bi0boa.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpi4bi0boa.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i = 0; i < len(l); i++ {\n        for j = 0; j < len(result); j++ {\n            if l[i] == result[j] {\n                break\n            }\n        }\n        if j == len(result) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbjucd8nt.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpbjucd8nt.swift:10:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:11:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(result); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpbjucd8nt.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if i == 0 || l[i] != l[i-1] {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp2k5albvp.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp2k5albvp.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp2k5albvp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp2k5albvp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp2k5albvp.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp2k5albvp.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp2k5albvp.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp2k5albvp.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp2k5albvp.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp2k5albvp.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp2k5albvp.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i = 0; i < len(l); i++ {\n        for j = 0; j < len(result); j++ {\n            if l[i] == result[j] {\n                break\n            }\n        }\n        if j == len(result) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbjucd8nt.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpbjucd8nt.swift:10:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:11:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(result); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpbjucd8nt.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpomfqrszv.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpomfqrszv.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpomfqrszv.swift:6:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for _, v := range l {\n        if i == 0 || v != result[i-1] {\n            result = append(result, v)\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbt7dh63q.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbt7dh63q.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbt7dh63q.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbt7dh63q.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbt7dh63q.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbt7dh63q.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbt7dh63q.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbt7dh63q.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store unique elements\n\tm := make(map[Int]bool)\n\t// Iterate over the array\n\tfor _, v := range l {\n\t\t// If the element is already present in the map, skip it\n\t\tif _, ok := m[v]; ok {\n\t\t\tcontinue\n\t\t}\n\t\t// Otherwise, add it to the map\n\t\tm[v] = true\n\t}\n\t// Return the sorted unique elements\n\treturn keys(m)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp5sv8wf99.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmp5sv8wf99.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmp5sv8wf99.swift:9:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp5sv8wf99.swift:9:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp5sv8wf99.swift:11:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; ok {\n                         ^\n/tmp/tmp5sv8wf99.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmp5sv8wf99.swift:18:9: error: cannot find 'keys' in scope\n        return keys(m)\n               ^~~~\n/tmp/tmp5sv8wf99.swift:18:14: error: cannot find 'm' in scope\n        return keys(m)\n                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for j := 0; j < len(l); j++ {\n        if i == len(result) || l[i] != l[j] {\n            result = append(result, l[j])\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpzh4p0s7u.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected type\n    for j := 0; j < len(l); j++ {\n           ^\n            <#type#>\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected 'in' after for-each pattern\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected Sequence expression for for-each loop\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpzh4p0s7u.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpzh4p0s7u.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpzh4p0s7u.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpzh4p0s7u.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpzh4p0s7u.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpzh4p0s7u.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    var j = 0\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n                continue\n            }\n        }\n        result = append(result, l[i])\n        i++\n        j++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpnd42n3k0.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpnd42n3k0.swift:9:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpnd42n3k0.swift:9:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpnd42n3k0.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpnd42n3k0.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpnd42n3k0.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpnd42n3k0.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpnd42n3k0.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpnd42n3k0.swift:9:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpnd42n3k0.swift:9:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpnd42n3k0.swift:20:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpnd42n3k0.swift:20:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for i < len(l) {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbbw820_e.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbbw820_e.swift:8:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpbbw820_e.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbbw820_e.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbbw820_e.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbbw820_e.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbbw820_e.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbbw820_e.swift:8:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpbbw820_e.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbbw820_e.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpy275mgv6.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpy275mgv6.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpy275mgv6.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy275mgv6.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpy275mgv6.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpy275mgv6.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpy275mgv6.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpy275mgv6.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpjqqff92h.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpjqqff92h.swift:8:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjqqff92h.swift:8:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:8:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpjqqff92h.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store the unique elements\n\tm := make(map[Int]bool)\n\tfor _, v := range l {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\t// Return the sorted unique elements\n\treturn sort.Ints(keys(m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi5ww8cxj.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpi5ww8cxj.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:9:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; !ok {\n                         ^\n/tmp/tmpi5ww8cxj.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpi5ww8cxj.swift:14:9: error: cannot find 'sort' in scope\n        return sort.Ints(keys(m))\n               ^~~~\n/tmp/tmpi5ww8cxj.swift:14:19: error: cannot find 'keys' in scope\n        return sort.Ints(keys(m))\n                         ^~~~\n/tmp/tmpi5ww8cxj.swift:14:24: error: cannot find 'm' in scope\n        return sort.Ints(keys(m))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    return l.filter(function(x) {return l.indexOf(x) == l.lastIndexOf(x)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpo69w7w6j.swift:7:21: error: cannot find 'function' in scope\n    return l.filter(function(x) {return l.indexOf(x) == l.lastIndexOf(x)})\n                    ^~~~~~~~\n/tmp/tmpo69w7w6j.swift:7:30: error: cannot find 'x' in scope\n    return l.filter(function(x) {return l.indexOf(x) == l.lastIndexOf(x)})\n                             ^\n/tmp/tmpo69w7w6j.swift:7:51: error: cannot find 'x' in scope\n    return l.filter(function(x) {return l.indexOf(x) == l.lastIndexOf(x)})\n                                                  ^\n/tmp/tmpo69w7w6j.swift:7:71: error: cannot find 'x' in scope\n    return l.filter(function(x) {return l.indexOf(x) == l.lastIndexOf(x)})\n                                                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpy275mgv6.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpy275mgv6.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpy275mgv6.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy275mgv6.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpy275mgv6.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpy275mgv6.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpy275mgv6.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpy275mgv6.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpjqqff92h.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpjqqff92h.swift:8:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjqqff92h.swift:8:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:8:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpjqqff92h.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    var j = 0\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n                continue\n            }\n        }\n        result = append(result, l[i])\n        i++\n        j++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpnd42n3k0.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpnd42n3k0.swift:9:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpnd42n3k0.swift:9:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpnd42n3k0.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpnd42n3k0.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpnd42n3k0.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpnd42n3k0.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpnd42n3k0.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpnd42n3k0.swift:9:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpnd42n3k0.swift:9:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpnd42n3k0.swift:20:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpnd42n3k0.swift:20:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // Write your code here\n    var result = []Int{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpncukq_e4.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpncukq_e4.swift:8:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpncukq_e4.swift:8:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpncukq_e4.swift:8:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpncukq_e4.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpncukq_e4.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result = make([]Int, 0)\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp64le9wlm.swift:6:22: error: expected ',' separator\n        var result = make([]Int, 0)\n                            ^\n                            ,\n/tmp/tmp64le9wlm.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:6:15: error: cannot find 'make' in scope\n        var result = make([]Int, 0)\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpy275mgv6.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpy275mgv6.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpy275mgv6.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy275mgv6.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpy275mgv6.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpy275mgv6.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpy275mgv6.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpy275mgv6.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i = 0; i < len(l); i++ {\n        for j = 0; j < len(result); j++ {\n            if l[i] == result[j] {\n                break\n            }\n        }\n        if j == len(result) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbjucd8nt.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpbjucd8nt.swift:10:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:11:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(result); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpbjucd8nt.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result []Int\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp0tiu4cpn.swift:6:12: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                  ^\n                  ;\n/tmp/tmp0tiu4cpn.swift:6:15: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                     ^\n                     ;\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:6:6: error: type annotation missing in pattern\n        var result []Int\n            ^\n/tmp/tmp0tiu4cpn.swift:6:13: error: empty collection literal requires an explicit type\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:13: warning: expression of type '[Any]' is unused\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:15: error: expected member name or constructor call after type name\n        var result []Int\n                     ^\n/tmp/tmp0tiu4cpn.swift:6:15: note: add arguments after the type to construct a value of the type\n        var result []Int\n                     ^\n                        ()\n/tmp/tmp0tiu4cpn.swift:6:15: note: use '.self' to reference the type object\n        var result []Int\n                     ^\n                        .self\n/tmp/tmp0tiu4cpn.swift:6:15: warning: expression of type 'Int.Type' is unused\n        var result []Int\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result = make([]Int, 0)\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp64le9wlm.swift:6:22: error: expected ',' separator\n        var result = make([]Int, 0)\n                            ^\n                            ,\n/tmp/tmp64le9wlm.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:6:15: error: cannot find 'make' in scope\n        var result = make([]Int, 0)\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for j := 0; j < len(l); j++ {\n        if i == len(result) || l[i] != l[j] {\n            result = append(result, l[j])\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpzh4p0s7u.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected type\n    for j := 0; j < len(l); j++ {\n           ^\n            <#type#>\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected 'in' after for-each pattern\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected Sequence expression for for-each loop\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpzh4p0s7u.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpzh4p0s7u.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpzh4p0s7u.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpzh4p0s7u.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpzh4p0s7u.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpzh4p0s7u.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpy275mgv6.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpy275mgv6.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpy275mgv6.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpy275mgv6.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpy275mgv6.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpy275mgv6.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpy275mgv6.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpy275mgv6.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpy275mgv6.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpy275mgv6.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpjqqff92h.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpjqqff92h.swift:8:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjqqff92h.swift:8:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:8:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpjqqff92h.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for i < len(l) {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp3twearkg.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp3twearkg.swift:8:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp3twearkg.swift:8:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp3twearkg.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp3twearkg.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp3twearkg.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp3twearkg.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp3twearkg.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp3twearkg.swift:8:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmp3twearkg.swift:8:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmp3twearkg.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp3twearkg.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    var j = 0\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n            } else {\n                result[j] = l[i]\n                j++\n                i++\n            }\n        } else {\n            result[j] = l[i]\n            j++\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpu2235q8a.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpu2235q8a.swift:9:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpu2235q8a.swift:9:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpu2235q8a.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpu2235q8a.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpu2235q8a.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpu2235q8a.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpu2235q8a.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpu2235q8a.swift:9:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpu2235q8a.swift:9:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpu2235q8a.swift:24:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpu2235q8a.swift:24:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // Create a map to store the unique elements\n    m: Map[Int] = Map()\n    // Iterate over the array\n    for i:= 0; i < len(l); i++ {\n        // If the element is not in the map, add it\n        if !m.contains(l[i]) {\n            m.set(l[i], true)\n        }\n    }\n    // Return the unique elements\n    return m.keys()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp91zr5ljy.swift:7:6: error: consecutive statements on a line must be separated by ';'\n    m: Map[Int] = Map()\n     ^\n     ;\n/tmp/tmp91zr5ljy.swift:7:6: error: expected expression\n    m: Map[Int] = Map()\n     ^\n/tmp/tmp91zr5ljy.swift:9:11: error: expected type\n    for i:= 0; i < len(l); i++ {\n          ^\n           <#type#>\n/tmp/tmp91zr5ljy.swift:9:11: error: expected 'in' after for-each pattern\n    for i:= 0; i < len(l); i++ {\n          ^\n/tmp/tmp91zr5ljy.swift:9:11: error: expected Sequence expression for for-each loop\n    for i:= 0; i < len(l); i++ {\n          ^\n/tmp/tmp91zr5ljy.swift:7:5: error: cannot find 'm' in scope\n    m: Map[Int] = Map()\n    ^\n/tmp/tmp91zr5ljy.swift:16:12: error: cannot find 'm' in scope\n    return m.keys()\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store the unique elements\n\tm := make(map[Int]bool)\n\tfor _, v := range l {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\t// Return the sorted unique elements\n\treturn sort.Ints(keys(m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi5ww8cxj.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpi5ww8cxj.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:8:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpi5ww8cxj.swift:9:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; !ok {\n                         ^\n/tmp/tmpi5ww8cxj.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpi5ww8cxj.swift:14:9: error: cannot find 'sort' in scope\n        return sort.Ints(keys(m))\n               ^~~~\n/tmp/tmpi5ww8cxj.swift:14:19: error: cannot find 'keys' in scope\n        return sort.Ints(keys(m))\n                         ^~~~\n/tmp/tmpi5ww8cxj.swift:14:24: error: cannot find 'm' in scope\n        return sort.Ints(keys(m))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    var j = 0\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n            } else {\n                result[j] = l[i]\n                j++\n                i++\n            }\n        } else {\n            result[j] = l[i]\n            j++\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpu2235q8a.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpu2235q8a.swift:9:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpu2235q8a.swift:9:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpu2235q8a.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpu2235q8a.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpu2235q8a.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpu2235q8a.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpu2235q8a.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpu2235q8a.swift:9:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpu2235q8a.swift:9:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpu2235q8a.swift:24:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpu2235q8a.swift:24:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpomfqrszv.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpomfqrszv.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpomfqrszv.swift:6:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for j := 0; j < len(l); j++ {\n        if i == len(result) {\n            result = append(result, l[j])\n        } else if l[j] != result[i] {\n            result = append(result[:i], append([]Int{l[j]}, result[i:]...)...)\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi8en4rv_.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpi8en4rv_.swift:8:12: error: expected type\n    for j := 0; j < len(l); j++ {\n           ^\n            <#type#>\n/tmp/tmpi8en4rv_.swift:8:12: error: expected 'in' after for-each pattern\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpi8en4rv_.swift:8:12: error: expected Sequence expression for for-each loop\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpi8en4rv_.swift:12:36: error: expected expression in list of expressions\n            result = append(result[:i], append([]Int{l[j]}, result[i:]...)...)\n                                   ^\n/tmp/tmpi8en4rv_.swift:12:50: error: expected ',' separator\n            result = append(result[:i], append([]Int{l[j]}, result[i:]...)...)\n                                                 ^\n                                                 ,\n/tmp/tmpi8en4rv_.swift:12:70: error: expected expression in list of expressions\n            result = append(result[:i], append([]Int{l[j]}, result[i:]...)...)\n                                                                     ^\n/tmp/tmpi8en4rv_.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpi8en4rv_.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpi8en4rv_.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpi8en4rv_.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpi8en4rv_.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpi8en4rv_.swift:16:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i = 0; i < len(l); i++ {\n        for j = 0; j < len(result); j++ {\n            if l[i] == result[j] {\n                break\n            }\n        }\n        if j == len(result) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbjucd8nt.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpbjucd8nt.swift:10:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:11:9: error: C-style for statement has been removed in Swift 3\n        for j = 0; j < len(result); j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbjucd8nt.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpbjucd8nt.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmppbd25266.swift:7:12: error: 'nil' is incompatible with return type '[Int]'\n    return nil\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    var result = []Int{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpjqqff92h.swift:7:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpjqqff92h.swift:8:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpjqqff92h.swift:8:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:8:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpjqqff92h.swift:7:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpjqqff92h.swift:7:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, x := range l {\n        if !seen[x] {\n            result = append(result, x)\n            seen[x] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi4bi0boa.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpi4bi0boa.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmpi4bi0boa.swift:8:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpi4bi0boa.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpi4bi0boa.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpi4bi0boa.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpi4bi0boa.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpi4bi0boa.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmpi4bi0boa.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmpi4bi0boa.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmpi4bi0boa.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpi4bi0boa.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i = 0; i < len(l); i++ {\n        if j == len(result) {\n            result = append(result, l[i])\n        } else if l[i] == result[j] {\n            k = j\n        } else {\n            j = k + 1\n            result[k] = l[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpsdamo2x7.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpsdamo2x7.swift:10:5: error: C-style for statement has been removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsdamo2x7.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpsdamo2x7.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:5:23: note: candi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // Write your code here\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpkdsckf6d.swift:7:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpkdsckf6d.swift:7:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpkdsckf6d.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpkdsckf6d.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpkdsckf6d.swift:7:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpkdsckf6d.swift:7:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpkdsckf6d.swift:7:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpkdsckf6d.swift:7:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpkdsckf6d.swift:7:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpkdsckf6d.swift:7:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpkdsckf6d.swift:7:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for i < len(l) {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbbw820_e.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbbw820_e.swift:8:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpbbw820_e.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbbw820_e.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbbw820_e.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbbw820_e.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbbw820_e.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbbw820_e.swift:8:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpbbw820_e.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbbw820_e.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar i = 0\n\tvar j = 0\n\tvar k = 0\n\tvar m = 0\n\tvar n = 0\n\tvar o = 0\n\tvar p = 0\n\tvar q = 0\n\tvar r = 0\n\tvar s = 0\n\tvar t = 0\n\tvar u = 0\n\tvar v = 0\n\tvar w = 0\n\tvar x = 0\n\tvar y = 0\n\tvar z = 0\n\tvar a = 0\n\tvar b = 0\n\tvar c = 0\n\tvar d = 0\n\tvar e = 0\n\tvar f = 0\n\tvar g = 0\n\tvar h = 0\n\tvar i = 0\n\tvar j = 0\n\tvar k = 0\n\tvar l = 0\n\tvar m = 0\n\tvar n = 0\n\tvar o = 0\n\tvar p = 0\n\tvar q = 0\n\tvar r = 0\n\tvar s = 0\n\tvar t = 0\n\tvar u = 0\n\tvar v = 0\n\tvar w = 0\n\tvar x = 0\n\tvar y = 0\n\tvar z = 0\n\tvar a = 0\n\tvar b = 0\n\tvar c = 0\n\tvar d = 0\n\tvar e = 0\n\tvar f = 0\n\tvar g = 0\n\tvar h = 0\n\tvar i = 0\n\tvar j = 0\n\tvar k = 0\n\tvar l = 0\n\tvar m = 0\n\tvar n = 0\n\tvar o = 0\n\tvar p = 0\n\tvar q = 0\n\tvar r = 0\n\tvar s = 0\n\tvar t = 0\n\tvar u = 0\n\tvar v = 0\n\tvar w = 0\n\tvar x = 0\n\tvar y = 0\n\tvar z = 0\n\tvar a = 0\n\tvar b = 0\n\tvar c = 0\n\tvar d = 0\n\tvar e = 0\n\tvar f = 0\n\tvar g = 0\n\tvar h = 0\n\tvar i = 0\n\tvar j = 0\n\tvar k = 0\n\tvar l = 0\n\tvar m = 0\n\tvar n = 0\n\tvar o = 0\n\tvar p = 0\n\tvar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpnz6ii4il.swift:91:5: error: expected pattern\n        var\n           ^\n/tmp/tmpnz6ii4il.swift:31:6: error: invalid redeclaration of 'i'\n        var i = 0\n            ^\n/tmp/tmpnz6ii4il.swift:6:6: note: 'i' previously declared here\n        var i = 0\n            ^\n/tmp/tmpnz6ii4il.swift:32:6: error: invalid redeclaration of 'j'\n        var j = 0\n            ^\n/tmp/tmpnz6ii4il.swift:7:6: note: 'j' previously declared here\n        var j = 0\n            ^\n/tmp/tmpnz6ii4il.swift:33:6: error: invalid redeclaration of 'k'\n        var k = 0\n            ^\n/tmp/tmpnz6ii4il.swift:8:6: note: 'k' previously declared here\n        var k = 0\n            ^\n/tmp/tmpnz6ii4il.swift:35:6: error: invalid redeclaration of 'm'\n        var m = 0\n            ^\n/tmp/tmpnz6ii4il.swift:9:6: note: 'm' previously declared here\n        var m = 0\n            ^\n/tmp/tmpnz6ii4il.swift:36:6: error: invalid redeclaration of 'n'\n        var n = 0\n            ^\n/tmp/tmpnz6ii4il.swift:10:6: note: 'n' previously declared here\n        var n = 0\n            ^\n/tmp/tmpnz6ii4il.swift:37:6: error: invalid redeclaration of 'o'\n        var o = 0\n            ^\n/tmp/tmpnz6ii4il.swift:11:6: note: 'o' previously declared here\n        var o = 0\n            ^\n/tmp/tmpnz6ii4il.swift:38:6: error: invalid redeclaration of 'p'\n        var p = 0\n            ^\n/tmp/tmpnz6ii4il.swift:12:6: note: 'p' previously declared here\n        var p = 0\n            ^\n/tmp/tmpnz6ii4il.swift:39:6: error: invalid redeclaration of 'q'\n        var q = 0\n            ^\n/tmp/tmpnz6ii4il.swift:13:6: note: 'q' previously declared here\n        var q = 0\n            ^\n/tmp/tmpnz6ii4il.swift:40:6: error: invalid redeclaration of 'r'\n        var r = 0\n            ^\n/tmp/tmpnz6ii4il.swift:14:6: note: 'r' previously declared here\n        var r = 0\n            ^\n/tmp/tmpnz6ii4il.swift:41:6: error: invalid redeclaration of 's'\n        var s = 0\n            ^\n/tmp/tmpnz6ii4il.swift:15:6: note: 's' previously declared here\n        var s = 0\n            ^\n/tmp/tmpnz6ii4il.swift:42:6: error: invalid ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for _, v := range l {\n        if i == 0 || v != result[i-1] {\n            result = append(result, v)\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbt7dh63q.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbt7dh63q.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbt7dh63q.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbt7dh63q.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbt7dh63q.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbt7dh63q.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbt7dh63q.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbt7dh63q.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp5bkikjqt.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmp5bkikjqt.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp5bkikjqt.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5bkikjqt.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5bkikjqt.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmp5bkikjqt.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmp5bkikjqt.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmp5bkikjqt.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, x := range l {\n        if !contains(result, x) {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbttjzyph.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpbttjzyph.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpbttjzyph.swift:7:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmpbttjzyph.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmpbttjzyph.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpbttjzyph.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpbttjzyph.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpbttjzyph.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpbttjzyph.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpbttjzyph.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpbttjzyph.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i < len(l) {\n        if l[i] != l[j] {\n            result = append(result, l[i])\n            i++\n        } else {\n            k++\n        }\n        j++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp86enxwck.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmp86enxwck.swift:10:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp86enxwck.swift:10:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp86enxwck.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmp86enxwck.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for _, v := range l {\n        if i == 0 || v != result[i-1] {\n            result = append(result, v)\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbt7dh63q.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbt7dh63q.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbt7dh63q.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbt7dh63q.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbt7dh63q.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbt7dh63q.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbt7dh63q.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbt7dh63q.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpomfqrszv.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpomfqrszv.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpomfqrszv.swift:6:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store the unique elements\n\tm := make(map[Int]bool)\n\t// Iterate over the array and check if the element is unique\n\tfor _, v := range l {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\t// Return the sorted unique elements\n\treturn sort.Ints(keys(m))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbccgy6gu.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpbccgy6gu.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpbccgy6gu.swift:9:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpbccgy6gu.swift:9:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpbccgy6gu.swift:10:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; !ok {\n                         ^\n/tmp/tmpbccgy6gu.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpbccgy6gu.swift:15:9: error: cannot find 'sort' in scope\n        return sort.Ints(keys(m))\n               ^~~~\n/tmp/tmpbccgy6gu.swift:15:19: error: cannot find 'keys' in scope\n        return sort.Ints(keys(m))\n                         ^~~~\n/tmp/tmpbccgy6gu.swift:15:24: error: cannot find 'm' in scope\n        return sort.Ints(keys(m))\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result []Int\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp0tiu4cpn.swift:6:12: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                  ^\n                  ;\n/tmp/tmp0tiu4cpn.swift:6:15: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                     ^\n                     ;\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:6:6: error: type annotation missing in pattern\n        var result []Int\n            ^\n/tmp/tmp0tiu4cpn.swift:6:13: error: empty collection literal requires an explicit type\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:13: warning: expression of type '[Any]' is unused\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:15: error: expected member name or constructor call after type name\n        var result []Int\n                     ^\n/tmp/tmp0tiu4cpn.swift:6:15: note: add arguments after the type to construct a value of the type\n        var result []Int\n                     ^\n                        ()\n/tmp/tmp0tiu4cpn.swift:6:15: note: use '.self' to reference the type object\n        var result []Int\n                     ^\n                        .self\n/tmp/tmp0tiu4cpn.swift:6:15: warning: expression of type 'Int.Type' is unused\n        var result []Int\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmppbd25266.swift:7:12: error: 'nil' is incompatible with return type '[Int]'\n    return nil\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tif len(l) == 0 {\n\t\treturn l\n\t}\n\tm := make(map[Int]bool)\n\tfor _, v := range l {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\treturn keys(m)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpzndslukj.swift:9:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpzndslukj.swift:9:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpzndslukj.swift:10:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpzndslukj.swift:10:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpzndslukj.swift:11:12: error: expected '{' after 'if' condition\n                if _, ok := m[v]; !ok {\n                         ^\n/tmp/tmpzndslukj.swift:6:5: error: cannot find 'len' in scope\n        if len(l) == 0 {\n           ^~~\n/tmp/tmpzndslukj.swift:9:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpzndslukj.swift:15:9: error: cannot find 'keys' in scope\n        return keys(m)\n               ^~~~\n/tmp/tmpzndslukj.swift:15:14: error: cannot find 'm' in scope\n        return keys(m)\n                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result = make([]Int, 0)\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp64le9wlm.swift:6:22: error: expected ',' separator\n        var result = make([]Int, 0)\n                            ^\n                            ,\n/tmp/tmp64le9wlm.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:6:15: error: cannot find 'make' in scope\n        var result = make([]Int, 0)\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for _, v := range l {\n        if i == 0 || v != result[i-1] {\n            result = append(result, v)\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbt7dh63q.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbt7dh63q.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpbt7dh63q.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbt7dh63q.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbt7dh63q.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbt7dh63q.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbt7dh63q.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbt7dh63q.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbt7dh63q.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // write your code here\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmppbd25266.swift:7:12: error: 'nil' is incompatible with return type '[Int]'\n    return nil\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpomfqrszv.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpomfqrszv.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpomfqrszv.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpomfqrszv.swift:6:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T) where T :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, x := range l {\n        if !contains(result, x) {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmphxq0i642.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmphxq0i642.swift:7:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmphxq0i642.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmphxq0i642.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmphxq0i642.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmphxq0i642.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmphxq0i642.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmphxq0i642.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmphxq0i642.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmphxq0i642.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for i < len(l) {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpbbw820_e.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpbbw820_e.swift:8:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpbbw820_e.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpbbw820_e.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpbbw820_e.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpbbw820_e.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpbbw820_e.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpbbw820_e.swift:8:11: error: '<' is not a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpbbw820_e.swift:8:13: error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpbbw820_e.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpbbw820_e.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var result = []Int{}\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n                continue\n            }\n        }\n        result[k] = l[i]\n        k++\n        j++\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp3d_vs824.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmp3d_vs824.swift:10:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmp3d_vs824.swift:10:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmp3d_vs824.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmp3d_vs824.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpcv827b_e.swift:6:15: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n              ^\n              ;\n/tmp/tmpcv827b_e.swift:6:18: error: consecutive statements on a line must be separated by ';'\n    var result []Int\n                 ^\n                 ;\n/tmp/tmpcv827b_e.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpcv827b_e.swift:6:9: error: type annotation missing in pattern\n    var result []Int\n        ^\n/tmp/tmpcv827b_e.swift:6:16: error: empty collection literal requires an explicit type\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:16: warning: expression of type '[Any]' is unused\n    var result []Int\n               ^~\n/tmp/tmpcv827b_e.swift:6:18: error: expected member name or constructor call after type name\n    var result []Int\n                 ^\n/tmp/tmpcv827b_e.swift:6:18: note: add arguments after the type to construct a value of the type\n    var result []Int\n                 ^\n                    ()\n/tmp/tmpcv827b_e.swift:6:18: note: use '.self' to reference the type object\n    var result []Int\n                 ^\n                    .self\n/tmp/tmpcv827b_e.swift:6:18: warning: expression of type 'Int.Type' is unused\n    var result []Int\n                 ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var result = []Int{}\n    for i < len(l) {\n        if j < len(result) {\n            if l[i] == result[j] {\n                i++\n                continue\n            }\n        }\n        result = append(result, l[i])\n        j++\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpqto9n95z.swift:8:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpqto9n95z.swift:9:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpqto9n95z.swift:9:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpqto9n95z.swift:8:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpqto9n95z.swift:8:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: T)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, v := range l {\n        if !seen[v] {\n            result = append(result, v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp6g8p514b.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp6g8p514b.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmp6g8p514b.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmp6g8p514b.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp6g8p514b.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp6g8p514b.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp6g8p514b.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp6g8p514b.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp6g8p514b.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmp6g8p514b.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmp6g8p514b.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmp6g8p514b.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp6g8p514b.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result []Int\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp0tiu4cpn.swift:6:12: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                  ^\n                  ;\n/tmp/tmp0tiu4cpn.swift:6:15: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                     ^\n                     ;\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp0tiu4cpn.swift:6:6: error: type annotation missing in pattern\n        var result []Int\n            ^\n/tmp/tmp0tiu4cpn.swift:6:13: error: empty collection literal requires an explicit type\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:13: warning: expression of type '[Any]' is unused\n        var result []Int\n                   ^~\n/tmp/tmp0tiu4cpn.swift:6:15: error: expected member name or constructor call after type name\n        var result []Int\n                     ^\n/tmp/tmp0tiu4cpn.swift:6:15: note: add arguments after the type to construct a value of the type\n        var result []Int\n                     ^\n                        ()\n/tmp/tmp0tiu4cpn.swift:6:15: note: use '.self' to reference the type object\n        var result []Int\n                     ^\n                        .self\n/tmp/tmp0tiu4cpn.swift:6:15: warning: expression of type 'Int.Type' is unused\n        var result []Int\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var i = 0\n    for j := 0; j < len(l); j++ {\n        if i == len(result) || l[i] != l[j] {\n            result = append(result, l[j])\n            i++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpzh4p0s7u.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected type\n    for j := 0; j < len(l); j++ {\n           ^\n            <#type#>\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected 'in' after for-each pattern\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:8:12: error: expected Sequence expression for for-each loop\n    for j := 0; j < len(l); j++ {\n           ^\n/tmp/tmpzh4p0s7u.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpzh4p0s7u.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpzh4p0s7u.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpzh4p0s7u.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpzh4p0s7u.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpzh4p0s7u.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpzh4p0s7u.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tif len(l) == 0 {\n\t\treturn l\n\t}\n\tif len(l) == 1 {\n\t\treturn l\n\t}\n\tvar i = 0\n\tvar j = 1\n\tvar k = 0\n\tvar result = make([]Int, 0)\n\tfor i < len(l) {\n\t\tif l[i] != l[j] {\n\t\t\tresult = append(result, l[k])\n\t\t\tk++\n\t\t\tfor j < len(l) && l[j] == l[k] {\n\t\t\t\tj++\n\t\t\t\tk++\n\t\t\t}\n\t\t} else {\n\t\t\tj++\n\t\t}\n\t\ti++\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpe2p0i6es.swift:15:22: error: expected ',' separator\n        var result = make([]Int, 0)\n                            ^\n                            ,\n/tmp/tmpe2p0i6es.swift:16:8: error: expected 'in' after for-each pattern\n        for i < len(l) {\n              ^\n/tmp/tmpe2p0i6es.swift:16:8: error: unary operator cannot be separated from its operand\n        for i < len(l) {\n              ^~\n               \n/tmp/tmpe2p0i6es.swift:20:10: error: expected 'in' after for-each pattern\n                        for j < len(l) && l[j] == l[k] {\n                              ^\n/tmp/tmpe2p0i6es.swift:20:10: error: unary operator cannot be separated from its operand\n                        for j < len(l) && l[j] == l[k] {\n                              ^~\n                               \n/tmp/tmpe2p0i6es.swift:6:5: error: cannot find 'len' in scope\n        if len(l) == 0 {\n           ^~~\n/tmp/tmpe2p0i6es.swift:9:5: error: cannot find 'len' in scope\n        if len(l) == 1 {\n           ^~~\n/tmp/tmpe2p0i6es.swift:15:15: error: cannot find 'make' in scope\n        var result = make([]Int, 0)\n                     ^~~~\n/tmp/tmpe2p0i6es.swift:16:8: error: '<' is not a prefix unary operator\n        for i < len(l) {\n              ^\n/tmp/tmpe2p0i6es.swift:16:10: error: cannot find 'len' in scope\n        for i < len(l) {\n                ^~~\n/tmp/tmpe2p0i6es.swift:20:10: error: '<' is not a prefix unary operator\n                        for j < len(l) && l[j] == l[k] {\n                              ^\n/tmp/tmpe2p0i6es.swift:20:12: error: cannot find 'len' in scope\n                        for j < len(l) && l[j] == l[k] {\n                                ^~~\n/tmp/tmpe2p0i6es.swift:20:19: error: for-in loop requires 'Bool' to conform to 'Sequence'\n                        for j < len(l) && l[j] == l[k] {\n                              ~~~~~~~~~^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    // Create a map of the values\n    m := make(map[Int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    // Create a new array with unique values\n    var u []Int\n    for k, _ := range m {\n        u = append(u, k)\n    }\n    return u\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpuyayg2ne.swift:7:6: error: consecutive statements on a line must be separated by ';'\n    m := make(map[Int]bool)\n     ^\n     ;\n/tmp/tmpuyayg2ne.swift:7:7: error: expected expression\n    m := make(map[Int]bool)\n      ^\n/tmp/tmpuyayg2ne.swift:8:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpuyayg2ne.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpuyayg2ne.swift:12:10: error: consecutive statements on a line must be separated by ';'\n    var u []Int\n         ^\n         ;\n/tmp/tmpuyayg2ne.swift:12:13: error: consecutive statements on a line must be separated by ';'\n    var u []Int\n            ^\n            ;\n/tmp/tmpuyayg2ne.swift:13:10: error: expected 'in' after for-each pattern\n    for k, _ := range m {\n         ^\n/tmp/tmpuyayg2ne.swift:13:10: error: expected Sequence expression for for-each loop\n    for k, _ := range m {\n         ^\n/tmp/tmpuyayg2ne.swift:7:5: error: cannot find 'm' in scope\n    m := make(map[Int]bool)\n    ^\n/tmp/tmpuyayg2ne.swift:12:9: error: type annotation missing in pattern\n    var u []Int\n        ^\n/tmp/tmpuyayg2ne.swift:12:11: error: empty collection literal requires an explicit type\n    var u []Int\n          ^~\n/tmp/tmpuyayg2ne.swift:12:11: warning: expression of type '[Any]' is unused\n    var u []Int\n          ^~\n/tmp/tmpuyayg2ne.swift:12:13: error: expected member name or constructor call after type name\n    var u []Int\n            ^\n/tmp/tmpuyayg2ne.swift:12:13: note: add arguments after the type to construct a value of the type\n    var u []Int\n            ^\n               ()\n/tmp/tmpuyayg2ne.swift:12:13: note: use '.self' to reference the type object\n    var u []Int\n            ^\n               .self\n/tmp/tmpuyayg2ne.swift:12:13: warning: expression of type 'Int.Type' is unused\n    var u []Int\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    var seen = make(map[Int]bool)\n    for _, x := range l {\n        if !seen[x] {\n            result = append(result, x)\n            seen[x] = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpi4bi0boa.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpi4bi0boa.swift:7:29: error: expected ',' separator\n    var seen = make(map[Int]bool)\n                            ^\n                            ,\n/tmp/tmpi4bi0boa.swift:8:10: error: expected 'in' after for-each pattern\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:8:10: error: expected Sequence expression for for-each loop\n    for _, x := range l {\n         ^\n/tmp/tmpi4bi0boa.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpi4bi0boa.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpi4bi0boa.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpi4bi0boa.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpi4bi0boa.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpi4bi0boa.swift:7:16: error: cannot find 'make' in scope\n    var seen = make(map[Int]bool)\n               ^~~~\n/tmp/tmpi4bi0boa.swift:7:21: error: cannot find 'map' in scope\n    var seen = make(map[Int]bool)\n                    ^~~\n/tmp/tmpi4bi0boa.swift:7:29: error: cannot find 'bool' in scope\n    var seen = make(map[Int]bool)\n                            ^~~~\n/tmp/tmpi4bi0boa.swift:14:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpi4bi0boa.swift:14:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tvar result = make([]Int, 0)\n\tfor _, v := range l {\n\t\tif !contains(result, v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp64le9wlm.swift:6:22: error: expected ',' separator\n        var result = make([]Int, 0)\n                            ^\n                            ,\n/tmp/tmp64le9wlm.swift:7:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:7:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmp64le9wlm.swift:6:15: error: cannot find 'make' in scope\n        var result = make([]Int, 0)\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpd0rts7j6.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmpd0rts7j6.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpd0rts7j6.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmpd0rts7j6.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmpd0rts7j6.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmpd0rts7j6.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmpd0rts7j6.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmpd0rts7j6.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmpd0rts7j6.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\t// Create a map to store unique elements\n\tm := make(map[Int]bool)\n\t// Iterate over the input array\n\tfor _, v := range l {\n\t\t// If the element is not in the map, add it\n\t\tif !m[v] {\n\t\t\tm[v] = true\n\t\t}\n\t}\n\t// Create a new array with unique elements\n\treturn make([]Int, len(m))\n\t// Iterate over the map and add unique elements to the new array\n\tfor k, _ := range m {\n\t\tl = append(l, k)\n\t}\n\treturn l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpazjlyidt.swift:7:3: error: consecutive statements on a line must be separated by ';'\n        m := make(map[Int]bool)\n         ^\n         ;\n/tmp/tmpazjlyidt.swift:7:4: error: expected expression\n        m := make(map[Int]bool)\n          ^\n/tmp/tmpazjlyidt.swift:9:7: error: expected 'in' after for-each pattern\n        for _, v := range l {\n             ^\n/tmp/tmpazjlyidt.swift:9:7: error: expected Sequence expression for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpazjlyidt.swift:16:16: error: expected ',' separator\n        return make([]Int, len(m))\n                      ^\n                      ,\n/tmp/tmpazjlyidt.swift:18:7: error: expected 'in' after for-each pattern\n        for k, _ := range m {\n             ^\n/tmp/tmpazjlyidt.swift:18:7: error: expected Sequence expression for for-each loop\n        for k, _ := range m {\n             ^\n/tmp/tmpazjlyidt.swift:7:2: error: cannot find 'm' in scope\n        m := make(map[Int]bool)\n        ^\n/tmp/tmpazjlyidt.swift:16:9: error: cannot find 'make' in scope\n        return make([]Int, len(m))\n               ^~~~\n/tmp/tmpazjlyidt.swift:16:21: error: cannot find 'len' in scope\n        return make([]Int, len(m))\n                           ^~~\n/tmp/tmpazjlyidt.swift:16:25: error: cannot find 'm' in scope\n        return make([]Int, len(m))\n                               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = []Int\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp149fc323.swift:6:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int\n                   ^\n                   ;\n/tmp/tmp149fc323.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp149fc323.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp149fc323.swift:6:18: error: empty collection literal requires an explicit type\n    var result = []Int\n                 ^~\n/tmp/tmp149fc323.swift:6:20: error: expected member name or constructor call after type name\n    var result = []Int\n                   ^\n/tmp/tmp149fc323.swift:6:20: note: add arguments after the type to construct a value of the type\n    var result = []Int\n                   ^\n                      ()\n/tmp/tmp149fc323.swift:6:20: note: use '.self' to reference the type object\n    var result = []Int\n                   ^\n                      .self\n/tmp/tmp149fc323.swift:6:20: warning: expression of type 'Int.Type' is unused\n    var result = []Int\n                   ^~~\n/tmp/tmp149fc323.swift:12:12: error: cannot convert return expression of type '[Any]' to return type '[Int]'\n    return result\n           ^\n/tmp/tmp149fc323.swift:12:12: note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n    return result\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tif len(l) == 0 {\n\t\treturn l\n\t}\n\tif len(l) == 1 {\n\t\treturn l\n\t}\n\tif len(l) == 2 {\n\t\treturn l\n\t}\n\tif l[0] == l[1] {\n\t\treturn l\n\t}\n\tif l[0] > l[1] {\n\t\tl[0], l[1] = l[1], l[0]\n\t}\n\treturn append(l[:0], l[1:]...)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpa8lxnbvq.swift:19:7: error: consecutive statements on a line must be separated by ';'\n                l[0], l[1] = l[1], l[0]\n                    ^\n                    ;\n/tmp/tmpa8lxnbvq.swift:19:7: error: expected expression\n                l[0], l[1] = l[1], l[0]\n                    ^\n/tmp/tmpa8lxnbvq.swift:21:18: error: expected expression in list of expressions\n        return append(l[:0], l[1:]...)\n                        ^\n/tmp/tmpa8lxnbvq.swift:21:26: error: expected ',' separator\n        return append(l[:0], l[1:]...)\n                                ^\n                                ,\n/tmp/tmpa8lxnbvq.swift:21:26: error: expected expression in list of expressions\n        return append(l[:0], l[1:]...)\n                                ^\n/tmp/tmpa8lxnbvq.swift:6:5: error: cannot find 'len' in scope\n        if len(l) == 0 {\n           ^~~\n/tmp/tmpa8lxnbvq.swift:9:5: error: cannot find 'len' in scope\n        if len(l) == 1 {\n           ^~~\n/tmp/tmpa8lxnbvq.swift:12:5: error: cannot find 'len' in scope\n        if len(l) == 2 {\n           ^~~\n/tmp/tmpa8lxnbvq.swift:19:4: warning: expression of type 'Int' is unused\n                l[0], l[1] = l[1], l[0]\n                ~^~~\n/tmp/tmpa8lxnbvq.swift:21:9: error: cannot find 'append' in scope\n        return append(l[:0], l[1:]...)\n               ^~~~~~\n/tmp/tmpa8lxnbvq.swift:21:20: error: missing argument for parameter #1 in call\n        return append(l[:0], l[1:]...)\n                          ^\n                          <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for _, v := range l {\n        if !contains(result, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpl8vrk4cu.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected 'in' after for-each pattern\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:7:10: error: expected Sequence expression for for-each loop\n    for _, v := range l {\n         ^\n/tmp/tmpl8vrk4cu.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmpl8vrk4cu.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmpl8vrk4cu.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmpl8vrk4cu.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n\tif len(l) == 0 {\n\t\treturn l\n\t}\n\tvar result []Int\n\tfor i := 0; i < len(l); i++ {\n\t\tif i == 0 || l[i] != l[i-1] {\n\t\t\tresult = append(result, l[i])\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpjqjfvy7f.swift:9:12: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                  ^\n                  ;\n/tmp/tmpjqjfvy7f.swift:9:15: error: consecutive statements on a line must be separated by ';'\n        var result []Int\n                     ^\n                     ;\n/tmp/tmpjqjfvy7f.swift:10:9: error: expected type\n        for i := 0; i < len(l); i++ {\n               ^\n                <#type#>\n/tmp/tmpjqjfvy7f.swift:10:9: error: expected 'in' after for-each pattern\n        for i := 0; i < len(l); i++ {\n               ^\n/tmp/tmpjqjfvy7f.swift:10:9: error: expected Sequence expression for for-each loop\n        for i := 0; i < len(l); i++ {\n               ^\n/tmp/tmpjqjfvy7f.swift:6:5: error: cannot find 'len' in scope\n        if len(l) == 0 {\n           ^~~\n/tmp/tmpjqjfvy7f.swift:9:6: error: type annotation missing in pattern\n        var result []Int\n            ^\n/tmp/tmpjqjfvy7f.swift:9:13: error: empty collection literal requires an explicit type\n        var result []Int\n                   ^~\n/tmp/tmpjqjfvy7f.swift:9:13: warning: expression of type '[Any]' is unused\n        var result []Int\n                   ^~\n/tmp/tmpjqjfvy7f.swift:9:15: error: expected member name or constructor call after type name\n        var result []Int\n                     ^\n/tmp/tmpjqjfvy7f.swift:9:15: note: add arguments after the type to construct a value of the type\n        var result []Int\n                     ^\n                        ()\n/tmp/tmpjqjfvy7f.swift:9:15: note: use '.self' to reference the type object\n        var result []Int\n                     ^\n                        .self\n/tmp/tmpjqjfvy7f.swift:9:15: warning: expression of type 'Int.Type' is unused\n        var result []Int\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result = [Int]{}\n    for i := 0; i < len(l); i++ {\n        if !contains(result, l[i]) {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmp5bkikjqt.swift:6:23: error: unexpected '{' in declaration\n    var result = [Int]{}\n                      ^\n/tmp/tmp5bkikjqt.swift:7:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp5bkikjqt.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5bkikjqt.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmp5bkikjqt.swift:6:18: error: expected member name or constructor call after type name\n    var result = [Int]{}\n                 ^\n/tmp/tmp5bkikjqt.swift:6:22: note: add arguments after the type to construct a value of the type\n    var result = [Int]{}\n                     ^\n                      ()\n/tmp/tmp5bkikjqt.swift:6:22: note: use '.self' to reference the type object\n    var result = [Int]{}\n                     ^\n                      .self\n/tmp/tmp5bkikjqt.swift:12:12: error: cannot convert return expression of type '[Int].Type' to return type '[Int]'\n    return result\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var i = 0\n    var j = 1\n    var k = 0\n    var result = []Int{}\n    for i < len(l) {\n        if l[i] == l[j] {\n            j++\n            if j == len(l) {\n                result = append(result, l[i])\n            }\n        } else {\n            result = append(result, l[i])\n            j = i + 1\n        }\n        i = j\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpq2thj6st.swift:9:20: error: consecutive statements on a line must be separated by ';'\n    var result = []Int{}\n                   ^\n                   ;\n/tmp/tmpq2thj6st.swift:10:11: error: expected 'in' after for-each pattern\n    for i < len(l) {\n          ^\n/tmp/tmpq2thj6st.swift:10:11: error: unary operator cannot be separated from its operand\n    for i < len(l) {\n          ^~\n           \n/tmp/tmpq2thj6st.swift:9:18: error: empty collection literal requires an explicit type\n    var result = []Int{}\n                 ^~\n/tmp/tmpq2thj6st.swift:9:20: error: no exact matches in call to initializer \n    var result = []Int{}\n                   ^\nSwift.Int:6:12: note: candidate requires that '() -> ()' conform to 'CodingKey' (requirement specified as 'T' : 'CodingKey')\n    public init?<T>(codingKey: T) where T : CodingKey\n           ^\nSwift.SignedInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:4:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init?<T>(exactly source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that '() -> ()' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n                      ^\nSwift.SignedInteger:2:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n                      ^\nSwift.FixedWidthInteger:6:23: note: candidate requires that '() -> ()' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')\n    @inlinable public init<T>(truncatingIfNeeded source: ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}