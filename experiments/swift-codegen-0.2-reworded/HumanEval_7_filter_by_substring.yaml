name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input array of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as\
  \ [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"\
  array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["\treturn strings.filter(func(s: String) {\n\t\treturn s.contains(substring)\n\
    \t})", "\treturn strings.filter(func(s: String) {\n\t\treturn s.contains(substring)\n\
    \t})", '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', "\tif strings == nil {\n\t\treturn nil\n\t}\n\tvar\
    \ result = make([]String, 0)\n\tfor _, s := range strings {\n\t\tif strings.Contains(s,\
    \ substring) {\n\t\t\tresult = append(result, s)\n\t\t}\n\t}\n\treturn result",
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    var result []String\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result", '    return strings.filter(s => s.contains(substring))', '    return
    strings.filter(s => s.includes(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "\treturn strings.filter(func(s: String) {\n\t\treturn strings.contains(s, substring)\n\
    \t})", "    if strings == nil {\n        return nil\n    }\n    var result: [String]\
    \ = []\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            result = append(result, string)\n        }\n    }\n\
    \    return result", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "    var result: [String] = []\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result", '    return strings.filter(s => s.contains(substring))', "\t\
    return strings.filter(func(s: String) -> s.contains(substring))", '    return
    strings.filter(s => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "\treturn strings.filter(func(s: String) {\n\t\treturn s.contains(substring)\n\t\
    })", "    if strings == nil {\n        return nil\n    }\n    return strings.filter(func(s:\
    \ String) {\n        return s.contains(substring)\n    })", '    return strings.filter(substring.contains)',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.includes(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', "    if strings == nil\
    \ {\n        return nil\n    }\n    var result = []String{}\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result", "    if strings ==\
    \ nil {\n        return nil\n    }\n    return strings.filter(func(s: String)\
    \ -> s.contains(substring))", '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            result = append(result, string)\n        }\n    }\n\
    \    return result", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', "\treturn strings.filter(func(s: String) {\n\t\treturn\
    \ s.contains(substring)\n\t})", "    if strings == nil {\n        return nil\n\
    \    }\n    return strings.filter(func(s: String) {\n        return s.contains(substring)\n\
    \    })", '    return strings.filter(substring.contains)', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    return strings.filter(func(s:\
    \ String) {\n        return s.contains(substring)\n    })", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    var result: [String] =\
    \ []\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  "    if strings == nil {\n        return nil\n    }\n    return strings.filter(lambda\
    \ x: substring in x)", '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    var result = []String{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "\treturn strings.filter(func(s: String) {\n\t\treturn strings.contains(s, substring)\n\
    \t})", '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(x => x.contains(substring))',
  "\treturn strings.filter(func(s: String) {\n\t\treturn strings.contains(s, substring)\n\
    \t})", '    return strings.filter(x => x.contains(substring))', "    if strings\
    \ == nil {\n        return nil\n    }\n    var result: [String] = []\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       result = append(result, s)\n        }\n    }\n    return result", '    return
    strings.filter(s => s.contains(substring))', "\tif strings == nil {\n\t\treturn\
    \ nil\n\t}\n\treturn strings.filter(func(s: String) bool {\n\t\treturn strings.contains(s,\
    \ substring)\n\t})", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.includes(substring))', '    return strings.filter(s
    => s.includes(substring))', '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    return strings.filter(func(s:\
    \ String) {\n        return s.contains(substring)\n    })", "\tif strings == nil\
    \ {\n\t\treturn nil\n\t}\n\treturn strings.filter(func(s: String) bool {\n\t\t\
    return strings.contains(s, substring)\n\t})", '    return strings.filter(s =>
    s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.includes(substring))',
  '    return strings.filter(s => s.contains(substring))', "    if strings == nil\
    \ {\n        return nil\n    }\n    return filter(strings, func(s: String) ->\
    \ bool {\n        return strings.contains(s, substring)\n    })", '    return
    strings.filter(s => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.includes(substring))', '    return strings.filter(s => s.includes(substring))',
  '    return strings.filter(x => x.contains(substring))', "    if strings == nil\
    \ {\n        return nil\n    }\n    var result: [String] = []\n    for _, v :=\
    \ range strings {\n        if strings.Contains(v, substring) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    var result = make([]String,\
    \ 0)\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(x
    => x.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    var result = []String{}\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            result = append(result, s)\n \
    \       }\n    }\n    return result", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', "\treturn strings.filter(func(s:\
    \ String) {\n\t\treturn s.contains(substring)\n\t})", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(x => x.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    var result: [String] = []\n    for _, s: String\
    \ in strings {\n        if s.contains(substring) {\n            result.append(s)\n\
    \        }\n    }\n    return result", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.includes(substring))',
  '    return strings.filter(s => s.contains(substring))', "    if strings == nil\
    \ {\n        return nil\n    }\n    return filter(strings, func(s: String) bool\
    \ {\n        return strings.contains(s, substring)\n    })", '    return strings.filter(x
    => x.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    var result = []String{}\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            result = append(result, s)\n \
    \       }\n    }\n    return result", "    if strings == nil {\n        return\
    \ nil\n    }\n    var result = []String{}\n    for _, s := range strings {\n \
    \       if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result", '    return strings.filter(s => s.contains(substring))',
  "\tif strings == nil {\n\t\treturn nil\n\t}\n\tvar result = make([]String, 0)\n\t\
    for _, s := range strings {\n\t\tif strings.Contains(s, substring) {\n\t\t\tresult\
    \ = append(result, s)\n\t\t}\n\t}\n\treturn result", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.includes(substring))',
  '    return strings.filter(s => s.includes(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  "    var filtered_strings = []\n    for _, string in strings {\n        if string.contains(substring)\
    \ {\n            filtered_strings.append(string)\n        }\n    }\n    return\
    \ filtered_strings", '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    return strings.filter(func(s: String) {\n        return s.contains(substring)\n\
    \    })", '    return strings.filter(s => s.contains(substring))', '    return
    strings.filter(s => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(x => x.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    var result: [String] = []\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result", '    return strings.filter(s
    => s.includes(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.includes(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    var result = make([]String, 0)\n    for _, v := range strings {\n   \
    \     if strings.Contains(v, substring) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result", '    return strings.filter(s => s.contains(substring))',
  "    if strings == nil {\n        return nil\n    }\n    var result = []String{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result",
  '    return strings.filter(s => s.contains(substring))', "\treturn strings.filter(func(s:\
    \ String) -> s.contains(substring))", '    return strings.filter(x => x.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.includes(substring))',
  "\treturn strings.filter(func(s: String) {\n\t\treturn s.contains(substring)\n\t\
    })", '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.includes(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', "    if strings == nil\
    \ {\n        return nil\n    }\n    return strings.filter(func(s: String) {\n\
    \        return s.contains(substring)\n    })", '    return strings.filter(s =>
    s.contains(substring))', "    if strings == nil {\n        return nil\n    }\n\
    \    var result = make([]String, 0)\n    for _, string := range strings {\n  \
    \      if strings.Contains(string, substring) {\n            result = append(result,\
    \ string)\n        }\n    }\n    return result", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', "    if strings == nil {\n        return nil\n   \
    \ }\n    return strings.filter(lambda x: substring in x)", '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.contains(substring))',
  '    return strings.filter(s => s.contains(substring))', '    return strings.filter(s
    => s.contains(substring))', '    return strings.filter(s => s.includes(substring))',
  '    return strings.filter(s => s.contains(substring))', "\treturn strings.filter(func(s:\
    \ String) {\n\t\treturn strings.contains(s, substring)\n\t})", '    return strings.filter(s
    => s.contains(substring))']
stop_tokens:
- "\n}"
