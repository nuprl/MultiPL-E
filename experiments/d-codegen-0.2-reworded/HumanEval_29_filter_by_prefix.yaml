name: HumanEval_29_filter_by_prefix
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings\
  \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"\
  a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
  a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings,\
  \ string prefix) \n"
tests: "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = (string[])realloc(result,\
    \ (result.length + 1) * sizeof(string));\n            result[result.length - 1]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] =\
    \ s;\n            i++;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for(string s : strings)\n    {\n        if(s.startsWith(prefix))\n        {\n\
    \            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    return result;\n}", "{\n    string[] result = new string[0];\n   \
    \ for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = (string[]) (std.concat(result, new string[] { strings[i]\
    \ }));\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    return filter_by_prefix(strings, prefix, 0);\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++) \n    {\n        if (strings[i].startsWith(prefix)) \n\
    \        {\n            result = append(result, strings[i]);\n        }\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n   \
    \         result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n\
    \            result[result.length - 1] = strings[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n       \
    \     result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n\
    \        else\n            result[result.length] = strings[i];\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    return filter(strings, (string\
    \ s) -> starts_with(s, prefix));\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n    \
    \    if (strings[i].startsWith(prefix))\n        {\n            result = (string[])cat(result,\
    \ (Object[])new String[] {strings[i]});\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result\
    \ = append(result, strings[i]);\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    \
    \    if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result\
    \ = append(result, strings[i]);\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if\
    \ (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings) {\n        if (s.startsWith(prefix)) {\n         \
    \   result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) (std.lib.array.append(result, strings[i]));\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[])realloc(result, (result.length + 1)\
    \ * sizeof(string));\n            result[result.length - 1] = strings[i];\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for(string s : strings)\n    {\n        if(s.startsWith(prefix))\n\
    \        {\n            result[i] = s;\n            i++;\n        }\n    }\n \
    \   return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) (java.lang.reflect.Array.set(result,\
    \ i, strings[i]));\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result[i] =\
    \ s;\n            i++;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) \n    {\n        if (strings[i].startsWith(prefix)) \n        {\n     \
    \       result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n    \
    \    if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result,\
    \ (result.length + 1) * sizeof(string));\n            result[result.length - 1]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n     \
    \   if(strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[])cat(result, (Object[])new string[]{strings[i]});\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) Utils.append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n\
    \        {\n            result[i] = s;\n            i++;\n        }\n    }\n \
    \   return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if\
    \ (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for(string\
    \ s : strings)\n    {\n        if(s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    \
    \    if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n      \
    \  {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n       \
    \     result = append(result, strings[i]);\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    \
    \    if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = append(result, strings[i]);\n        }\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n    \
    \    if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result,\
    \ (result.length + 1) * sizeof(string));\n            result[result.length - 1]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n      \
    \  {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings) {\n        if (s.startsWith(prefix)) {\n         \
    \   result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n\
    \            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = (string[]) (java.lang.reflect.Array.set(result, i, strings[i]));\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = append(result, strings[i]);\n        }\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    return result;\n}", "{\n    string[] result = new string[0];\n   \
    \ for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[])append(result, strings[i]);\n     \
    \   }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n      \
    \      result[i++] = s;\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i] = s;\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result[i] =\
    \ s;\n            i++;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])\
    \ Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if\
    \ (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result,\
    \ (result.length + 1) * sizeof(string));\n            result[result.length - 1]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n       \
    \     i++;\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n     \
    \   if(strings[i].startsWith(prefix))\n        {\n            result = (string[])\
    \ Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n        \
    \    result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[])cat(result, (Object[])new String[]\
    \ {strings[i]});\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if\
    \ (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    return filter_by_prefix(strings, prefix, 0);\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = (string[])cat(result,\
    \ (Object[])new String[] {strings[i]});\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    \
    \    if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) Utils.append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++]\
    \ = s;\n    return result;\n}", "{\n    string[] result = new string[0];\n   \
    \ for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++) \n   \
    \ {\n        if (strings[i].startsWith(prefix)) \n        {\n            result\
    \ = append(result, strings[i]);\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n        \
    \    result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    return filter(strings,\
    \ (string s) -> starts_with(s, prefix));\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) Utils.append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n       \
    \     result = append(result, strings[i]);\n    return result;\n}", "{\n    string[]\
    \ result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].startsWith(prefix))\n        {\n            result = append(result,\
    \ strings[i]);\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = (string[]) (std.concat(result, new string[] {strings[i]}));\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = (string[]) append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[0];\n    for (int i = 0; i\
    \ < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = append(result, strings[i]);\n        }\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result = append(result, strings[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n\
    \        if (s.startsWith(prefix)) {\n            result[i] = s;\n           \
    \ i++;\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n\
    \        {\n            result[i] = s;\n            i++;\n        }\n    }\n \
    \   return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n        \
    \    result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result,\
    \ strings[i]);\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \        {\n            result = (string[]) (std.concat(result, new string[] {strings[i]}));\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[0];\n\
    \    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    return filter_by_prefix(strings,\
    \ prefix, 0);\n}", "{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n\
    \        {\n            result[i] = s;\n            i++;\n        }\n    }\n \
    \   return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n\
    \            result[i++] = s;\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if\
    \ (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n\
    \    return result;\n}", "{\n    string[] result = new string[0];\n    for (int\
    \ i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n\
    \            result = append(result, strings[i]);\n    return result;\n}", "{\n\
    \    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = append(result, strings[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n       \
    \     result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n\
    \            result[result.length - 1] = strings[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n  \
    \          result[i++] = s;\n    return result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n\
    \        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n      \
    \      result[i++] = s;\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[0];\n    for (int i = 0; i < strings.length; i++) \n    {\n   \
    \     if (strings[i].startsWith(prefix)) \n        {\n            result = (string[])\
    \ Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
