{
  "name": "HumanEval_114_minSubArraySum",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n",
  "tests": "unittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = std.math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpqtb4k851.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmpqtb4k851.d(21): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtb4k851.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        minSum = std.math.min(minSum, sum);\n        sum = std.math.max(sum, 0);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmp2nt9khhv.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmp2nt9khhv.d(21): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nt9khhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        minSum = Math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpmn65upx5.d(19): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn65upx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = std.math.max(0, sum);\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpgdhk412_.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmpgdhk412_.d(21): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgdhk412_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum == min)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplfazixrk.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmplfazixrk.__unittest_L28_C1() [0x427e03]\n??:? void tmplfazixrk.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomrfjg5i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpomrfjg5i.__unittest_L28_C1() [0x427dd7]\n??:? void tmpomrfjg5i.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(0, sum);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmprha2c09v.d(20): Error: undefined identifier `Math`\n/tmp/tmprha2c09v.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprha2c09v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmp27fdtihh.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27fdtihh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpnqkgjlyb.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqkgjlyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmprbgvhbt7.d(22): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbgvhbt7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum : 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpadtx2l8c.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadtx2l8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomrfjg5i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpomrfjg5i.__unittest_L28_C1() [0x427dd7]\n??:? void tmpomrfjg5i.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3bj6nniy.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp3bj6nniy.__unittest_L28_C1() [0x427dd7]\n??:? void tmp3bj6nniy.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = nums[0];\n    for (int i = 1; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if (sum < min)\n            min = sum;\n        else\n            sum = nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpap9ajsx8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpap9ajsx8.__unittest_L30_C1() [0x427e4b]\n??:? void tmpap9ajsx8.__modtest() [0x42824c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430551]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++)\n    {\n        min = Math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if (sum < min)\n        {\n            min = sum;\n        }\n        else if (sum == min)\n        {\n            min = Math.min(min, nums[i]);\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpu_sn5n7a.d(19): Error: undefined identifier `Math`\n/tmp/tmpu_sn5n7a.d(31): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_sn5n7a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpxgv1l2_s.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgv1l2_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpbesbt2yk.d(20): Error: undefined identifier `Math`\n/tmp/tmpbesbt2yk.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbesbt2yk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxofbu8wr.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpxofbu8wr.__unittest_L29_C1() [0x427dff]\n??:? void tmpxofbu8wr.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum -= nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmp2_8iljk8.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_8iljk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsofxk99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpmsofxk99.__unittest_L29_C1() [0x427dd7]\n??:? void tmpmsofxk99.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(0, sum);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpr_1o_67w.d(21): Error: undefined identifier `Math`\n/tmp/tmpr_1o_67w.d(22): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_1o_67w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < minSum)\n            minSum = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    long min_sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n        {\n            min = sum;\n            min_sum = 0;\n        }\n        if(sum > 0)\n            min_sum += sum;\n    }\n    return min_sum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt9otx19v.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428465]\n??:? void tmpt9otx19v.__unittest_L32_C1() [0x427de3]\n??:? void tmpt9otx19v.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b356]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430998]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430475]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b32d]\n??:? runModuleUnitTests [0x42c299]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428928]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < minSum)\n            minSum = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppgfdzj6z.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmppgfdzj6z.__unittest_L28_C1() [0x427dff]\n??:? void tmppgfdzj6z.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomrfjg5i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpomrfjg5i.__unittest_L28_C1() [0x427dd7]\n??:? void tmpomrfjg5i.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpj57g55v6.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj57g55v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min, nums[i] + minSubArraySum(nums, i));\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpmrajw7pc.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrajw7pc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp1sm0i9g4.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sm0i9g4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0) return 0;\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpsha_udrh.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsha_udrh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        min = std.math.min(min + nums[i], nums[i]);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp75gzbvhl.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75gzbvhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3bj6nniy.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp3bj6nniy.__unittest_L28_C1() [0x427dd7]\n??:? void tmp3bj6nniy.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkl24e1um.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpkl24e1um.__unittest_L28_C1() [0x4280ad]\n??:? void tmpkl24e1um.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp43blepkn.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43blepkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n        while (sum >= 0) {\n            sum -= nums[i];\n        }\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp4rt0vrtj.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rt0vrtj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum >= min)\n        {\n            sum -= nums[i];\n        }\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpy81nwcyt.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy81nwcyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if(nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else\n            sum = nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp25s3u4y6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmp25s3u4y6.__unittest_L30_C1() [0x427e4b]\n??:? void tmp25s3u4y6.__modtest() [0x42824c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430551]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsofxk99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpmsofxk99.__unittest_L29_C1() [0x427dd7]\n??:? void tmpmsofxk99.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpltbjq_4x.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltbjq_4x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0)\n        return 0;\n    \n    long min = nums[0];\n    long sum = nums[0];\n    for (int i = 1; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if (sum < min)\n            min = sum;\n        else\n            sum = nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd2jwp2dv.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmpd2jwp2dv.__unittest_L31_C1() [0x427e77]\n??:? void tmpd2jwp2dv.__modtest() [0x428278]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c553]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430579]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430505]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3bd]\n??:? runModuleUnitTests [0x42c329]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp52n2daas.d(20): Error: undefined identifier `Math`\n/tmp/tmp52n2daas.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52n2daas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum == min)\n        {\n            if(i > 0 && nums[i] < nums[i-1])\n                min = nums[i];\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfnqzlv91.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42850d]\n??:? void tmpfnqzlv91.__unittest_L31_C1() [0x427e8f]\n??:? void tmpfnqzlv91.__modtest() [0x428290]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430591]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43051d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d5]\n??:? runModuleUnitTests [0x42c341]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = std.math.max(0, sum);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp9wiihzjh.d(22): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmp9wiihzjh.d(23): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wiihzjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpxgv1l2_s.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgv1l2_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        min = std.math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum -= nums[i];\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmppfym3lqz.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfym3lqz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp1ch2ozsb.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ch2ozsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        minSum = std.math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpc24536b4.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc24536b4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum > min)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprjee02v6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmprjee02v6.__unittest_L28_C1() [0x427ecc]\n??:? void tmprjee02v6.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkvph_i3y.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvph_i3y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp092ld27c.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp092ld27c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpnqkgjlyb.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqkgjlyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum > min)\n            sum = min;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_cnewz_p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp_cnewz_p.__unittest_L28_C1() [0x427e03]\n??:? void tmp_cnewz_p.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp52n2daas.d(20): Error: undefined identifier `Math`\n/tmp/tmp52n2daas.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52n2daas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum -= nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmp2_8iljk8.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_8iljk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpexxnldra.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexxnldra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpnqkgjlyb.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqkgjlyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum > min)\n            sum = min;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_cnewz_p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp_cnewz_p.__unittest_L28_C1() [0x427e03]\n??:? void tmp_cnewz_p.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxofbu8wr.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpxofbu8wr.__unittest_L29_C1() [0x427dff]\n??:? void tmpxofbu8wr.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        min = std.math.min(min + nums[i], nums[i]);\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpyu8su2me.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyu8su2me.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp9b3eaw2w.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9b3eaw2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomrfjg5i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpomrfjg5i.__unittest_L28_C1() [0x427dd7]\n??:? void tmpomrfjg5i.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum == min)\n        {\n            if(i == 0)\n                min = nums[i];\n            else if(nums[i] < min)\n                min = nums[i];\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7lvqq76n.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428515]\n??:? void tmp7lvqq76n.__unittest_L33_C1() [0x427e97]\n??:? void tmp7lvqq76n.__modtest() [0x428298]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c573]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b406]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430599]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430525]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3dd]\n??:? runModuleUnitTests [0x42c349]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    long min_sum = 0;\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n        {\n            min = sum;\n            min_sum = 0;\n        }\n        if(sum == min)\n        {\n            min_sum += nums[i];\n        }\n    }\n    return min_sum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwq6h2xv.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmppwq6h2xv.__unittest_L35_C1() [0x427e0f]\n??:? void tmppwq6h2xv.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430511]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43049d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum == min)\n        {\n            if(i == 0 || nums[i] < nums[i-1])\n                min = nums[i];\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmwksxqqi.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42850d]\n??:? void tmpmwksxqqi.__unittest_L31_C1() [0x427e8f]\n??:? void tmpmwksxqqi.__modtest() [0x428290]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430591]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43051d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d5]\n??:? runModuleUnitTests [0x42c341]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        if (i == 0 || nums[i] < nums[i - 1]) {\n            minSum = nums[i];\n        }\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxx17brjv.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpxx17brjv.__unittest_L29_C1() [0x427ead]\n??:? void tmpxx17brjv.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430551]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b395]\n??:? runModuleUnitTests [0x42c301]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if (sum < min)\n        {\n            min = sum;\n        }\n        else if (sum == min)\n        {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp_kikxoq7.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kikxoq7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(0, sum);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpr_1o_67w.d(21): Error: undefined identifier `Math`\n/tmp/tmpr_1o_67w.d(22): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_1o_67w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpgdr_ur_e.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgdr_ur_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        minSum = std.math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpc24536b4.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc24536b4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        minSum = Math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp5l4alp0g.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5l4alp0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(0, sum);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpr_1o_67w.d(21): Error: undefined identifier `Math`\n/tmp/tmpr_1o_67w.d(22): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_1o_67w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0)\n        return 0;\n    \n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum -= nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp6aaxwhyq.d(23): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6aaxwhyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp52n2daas.d(20): Error: undefined identifier `Math`\n/tmp/tmp52n2daas.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52n2daas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        else if(sum == min)\n            min = std.math.min(min, nums[i]);\n        else\n            min = std.math.min(min, nums[i]);\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprd_wkx2b.d(24): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmprd_wkx2b.d(26): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd_wkx2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        minSum = Math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpmn65upx5.d(19): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn65upx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    long min_sum = 0;\n    long max_sum = 0;\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > max_sum)\n            max_sum = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    \n    if(min_sum == 0)\n        return max_sum;\n    \n    return min_sum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkccn8qr.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxkccn8qr.__unittest_L37_C1() [0x427e03]\n??:? void tmpxkccn8qr.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430509]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430495]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min)\n            min = sum;\n        if (sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\n            minSum = sum;\n        if (sum > 0)\n            sum = 0;\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp44kl_aoh.d(23): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44kl_aoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = Math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp52n2daas.d(20): Error: undefined identifier `Math`\n/tmp/tmp52n2daas.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52n2daas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min)\n            min = sum;\n        if (sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\n\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp09cb0_p2.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09cb0_p2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        minSum = std.math.min(minSum, sum);\n        sum = sum > 0 ? sum : 0;\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmps3sqkdsq.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3sqkdsq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpxgv1l2_s.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgv1l2_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum >= min)\n        {\n            return sum;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpq8kqqjpi.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8kqqjpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp8t0306lz.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t0306lz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpltbjq_4x.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltbjq_4x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxofbu8wr.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpxofbu8wr.__unittest_L29_C1() [0x427dff]\n??:? void tmpxofbu8wr.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    long max = 0;\n    long min_sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > max) {\n            max = sum;\n        }\n        if (sum < min_sum) {\n            min_sum = sum;\n        }\n    }\n    return min_sum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzqaut6a2.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpzqaut6a2.__unittest_L34_C1() [0x427df3]\n??:? void tmpzqaut6a2.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b366]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430485]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b33d]\n??:? runModuleUnitTests [0x42c2a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum < 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3mr6v2q0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp3mr6v2q0.__unittest_L28_C1() [0x427dff]\n??:? void tmp3mr6v2q0.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43048d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpa5ve_zho.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ve_zho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        min = std.math.min(min + nums[i], nums[i]);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp75gzbvhl.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75gzbvhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp43blepkn.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43blepkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum -= nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmp2_8iljk8.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_8iljk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkvph_i3y.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvph_i3y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpoahgdwj7.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoahgdwj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpd25mxys6.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd25mxys6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if(nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    if (nums == null || nums.length == 0)\n        return 0;\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmprbgvhbt7.d(22): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbgvhbt7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = std.math.max(sum, 0);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpzwpbnuti.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmpzwpbnuti.d(22): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwpbnuti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomrfjg5i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpomrfjg5i.__unittest_L28_C1() [0x427dd7]\n??:? void tmpomrfjg5i.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmprr5y9p0g.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr5y9p0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min + nums[i], nums[i]);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpykvk1g2t.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykvk1g2t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpkgxef0yr.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgxef0yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        min = std.math.min(min + nums[i], nums[i]);\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp75gzbvhl.d(18): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75gzbvhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum < 0 ? 0 : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp_f2276t3.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_f2276t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < min)\n            min = sum;\n        if (sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpspx1myje.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspx1myje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum - nums[i];\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpnqkgjlyb.d(21): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqkgjlyb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    for(int i = 1; i < nums.length; i++)\n    {\n        min = std.math.min(min, nums[i]);\n    }\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum >= min)\n            return min;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp5kzmh7as.d(19): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kzmh7as.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = std.math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpd25mxys6.d(20): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd25mxys6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum : 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "/tmp/tmpadtx2l8c.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadtx2l8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < 0)\n        {\n            sum = 0;\n        }\n        if(i == 0 || nums[i] < min)\n        {\n            min = nums[i];\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsgj1lwmw.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpsgj1lwmw.__unittest_L32_C1() [0x427e89]\n??:? void tmpsgj1lwmw.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b39e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430531]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b375]\n??:? runModuleUnitTests [0x42c2e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long minSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        minSum = Math.min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmp5l4alp0g.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5l4alp0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        min = Math.min(min, sum);\n        sum = sum > 0 ? sum - nums[i] : sum;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "/tmp/tmpspx1myje.d(21): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspx1myje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n    1L\n    >>> minSubArraySum([-1L, -2L, -3L])\n    -6L\n    \n*/\nlong minSubArraySum(long[] nums) \n{\n    long min = nums[0];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min;\n}\nunittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}