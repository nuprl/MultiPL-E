{
  "name": "HumanEval_48_is_palindrome",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n",
  "tests": "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmptbkp52ta.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbkp52ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len / 2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpz11_5azt.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz11_5azt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp5g3ye4na.d(18): Error: no property `length` for type `string`\n/tmp/tmp5g3ye4na.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5g3ye4na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int l = 0, r = text.length() - 1;\n    while(l < r)\n    {\n        if(text[l] != text[r])\n            return false;\n        l++;\n        r--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp57tpu2z4.d(18): Error: no property `length` for type `string`\n/tmp/tmp57tpu2z4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57tpu2z4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpdrxc_tx6.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrxc_tx6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpf6bn4mix.d(18): Error: no property `length` for type `string`\n/tmp/tmpf6bn4mix.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6bn4mix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp6uhymthl.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uhymthl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpgjrihk50.d(18): Error: no property `length` for type `string`\n/tmp/tmpgjrihk50.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjrihk50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    if (l == 0) return true;\n    int i = 0;\n    int j = l - 1;\n    while (i < j) {\n        if (text[i] != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpazu_q_3t.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazu_q_3t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpv99hab6p.d(18): Error: no property `length` for type `string`\n/tmp/tmpv99hab6p.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv99hab6p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmptbkp52ta.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbkp52ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    \n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp1v0k9lrd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1v0k9lrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpwr6pimcg.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwr6pimcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp2lw23hvx.d(18): Error: no property `length` for type `string`\n/tmp/tmp2lw23hvx.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lw23hvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end)\n    {\n        if(text[start] != text[end])\n            return false;\n        start++;\n        end--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp5dq0dzu0.d(18): Error: no property `length` for type `string`\n/tmp/tmp5dq0dzu0.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dq0dzu0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmph2x4u_p9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2x4u_p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp3tenug2h.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tenug2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp83mos47a.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83mos47a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp39isb5ju.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39isb5ju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpxrktag4k.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrktag4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxx_5lrxl.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx_5lrxl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - 1 - i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpi587iv22.d(18): Error: no property `length` for type `string`\n/tmp/tmpi587iv22.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi587iv22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpaty6fmwf.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaty6fmwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpwzdzj08d.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzdzj08d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpf6bn4mix.d(18): Error: no property `length` for type `string`\n/tmp/tmpf6bn4mix.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6bn4mix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpd6yva4km.d(18): Error: no property `length` for type `string`\n/tmp/tmpd6yva4km.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6yva4km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpr7bjuc7c.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7bjuc7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpimztxfmk.d(18): Error: no property `length` for type `string`\n/tmp/tmpimztxfmk.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimztxfmk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp7l7evuqu.d(18): Error: no property `length` for type `string`\n/tmp/tmp7l7evuqu.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l7evuqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    for(int i = 0; i < l/2; i++)\n    {\n        if(text[i] != text[l-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp9c8ezcq9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c8ezcq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - 1 - i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp2tn2qu42.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tn2qu42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len == 0) return true;\n    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len-i-1]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdztychtz.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdztychtz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp83mos47a.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83mos47a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = 0, r = text.length() - 1;\n    while (l < r) {\n        if (text[l] != text[r])\n            return false;\n        l++;\n        r--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpe8h2pzby.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8h2pzby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpngm0kfuw.d(18): Error: no property `length` for type `string`\n/tmp/tmpngm0kfuw.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngm0kfuw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp3tenug2h.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tenug2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpaty6fmwf.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaty6fmwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpmnbqbxh0.d(18): Error: no property `length` for type `string`\n/tmp/tmpmnbqbxh0.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnbqbxh0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() <= 1)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpwja_snav.d(18): Error: no property `length` for type `string`\n/tmp/tmpwja_snav.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwja_snav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len-i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmprv1t4h6z.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv1t4h6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpgjrihk50.d(18): Error: no property `length` for type `string`\n/tmp/tmpgjrihk50.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjrihk50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int l = 0, r = text.length() - 1;\n    while(l < r)\n    {\n        if(text[l] != text[r])\n            return false;\n        l++;\n        r--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp57tpu2z4.d(18): Error: no property `length` for type `string`\n/tmp/tmp57tpu2z4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57tpu2z4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmptbkp52ta.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbkp52ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmplbiacjcp.d(18): Error: no property `length` for type `string`\n/tmp/tmplbiacjcp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbiacjcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int half = len/2;\n    for(int i = 0; i < half; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp86rh813l.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86rh813l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxtnfe9dp.d(18): Error: no property `length` for type `string`\n/tmp/tmpxtnfe9dp.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxtnfe9dp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp2lw23hvx.d(18): Error: no property `length` for type `string`\n/tmp/tmp2lw23hvx.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lw23hvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp_bgroqur.d(18): Error: no property `length` for type `string`\n/tmp/tmp_bgroqur.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bgroqur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len == 0)\n        return true;\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpymcnk6fm.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymcnk6fm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxx_5lrxl.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx_5lrxl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmplbiacjcp.d(18): Error: no property `length` for type `string`\n/tmp/tmplbiacjcp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbiacjcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpaty6fmwf.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaty6fmwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpngm0kfuw.d(18): Error: no property `length` for type `string`\n/tmp/tmpngm0kfuw.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngm0kfuw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    \n    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpczcei28i.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczcei28i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmplbiacjcp.d(18): Error: no property `length` for type `string`\n/tmp/tmplbiacjcp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbiacjcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpgjrihk50.d(18): Error: no property `length` for type `string`\n/tmp/tmpgjrihk50.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjrihk50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp7l7evuqu.d(18): Error: no property `length` for type `string`\n/tmp/tmp7l7evuqu.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l7evuqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpedj1yarb.d(18): Error: no property `length` for type `string`\n/tmp/tmpedj1yarb.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedj1yarb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpaty6fmwf.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaty6fmwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpyc_mdjz9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyc_mdjz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpus9jf25k.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus9jf25k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdfbk7icc.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfbk7icc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpvn5l7yyt.d(18): Error: no property `length` for type `string`\n/tmp/tmpvn5l7yyt.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn5l7yyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmptbkp52ta.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbkp52ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpvrdarkh9.d(18): Error: no property `length` for type `string`\n/tmp/tmpvrdarkh9.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrdarkh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len / 2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpz11_5azt.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz11_5azt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    int left = 0;\n    int right = len - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpq_ihhc1w.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_ihhc1w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2) return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmptdwolws9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdwolws9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    int mid = len/2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpac1max01.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac1max01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    int i = 0, j = len - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpx633gse7.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx633gse7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    int left = 0;\n    int right = len - 1;\n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpfy5f4q8n.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy5f4q8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.size() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.size() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpfz4t17h3.d(18): Error: no property `size` for type `string`\n/tmp/tmpfz4t17h3.d(22): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfz4t17h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - i - 1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp2ag56a8z.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ag56a8z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int start = 0;\n    int end = text.length() - 1;\n    \n    while(start < end)\n    {\n        if(text[start] != text[end])\n            return false;\n        \n        start++;\n        end--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp_2azl5e5.d(18): Error: no property `length` for type `string`\n/tmp/tmp_2azl5e5.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2azl5e5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-1-i]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp8cr4p1_m.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cr4p1_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp3tenug2h.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tenug2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxbk1cz8g.d(18): Error: no property `length` for type `string`\n/tmp/tmpxbk1cz8g.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbk1cz8g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len == 0) return true;\n    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len-i-1]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdztychtz.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdztychtz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp2lw23hvx.d(18): Error: no property `length` for type `string`\n/tmp/tmp2lw23hvx.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lw23hvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp39isb5ju.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39isb5ju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpmotd5k9o.d(18): Error: no property `length` for type `string`\n/tmp/tmpmotd5k9o.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmotd5k9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxbk1cz8g.d(18): Error: no property `length` for type `string`\n/tmp/tmpxbk1cz8g.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbk1cz8g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxx_5lrxl.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx_5lrxl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len-i-1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmprv1t4h6z.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv1t4h6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpvrdarkh9.d(18): Error: no property `length` for type `string`\n/tmp/tmpvrdarkh9.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrdarkh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp7l7evuqu.d(18): Error: no property `length` for type `string`\n/tmp/tmp7l7evuqu.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l7evuqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp9ke_639j.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ke_639j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int i = 0, j = text.length() - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp2p8xohan.d(18): Error: no property `length` for type `string`\n/tmp/tmp2p8xohan.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p8xohan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp9ke_639j.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ke_639j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpkxc6mpj2.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxc6mpj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    for(int i = 0; i < l/2; i++)\n    {\n        if(text[i] != text[l-1-i])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp9c8ezcq9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c8ezcq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() <= 1)\n        return true;\n    \n    int start = 0, end = text.length() - 1;\n    while(start < end)\n    {\n        if(text[start] != text[end])\n            return false;\n        start++;\n        end--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp3sr_9t0a.d(18): Error: no property `length` for type `string`\n/tmp/tmp3sr_9t0a.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sr_9t0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmph2x4u_p9.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2x4u_p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int l = 0, r = text.length() - 1;\n    while(l < r)\n    {\n        if(text[l] != text[r])\n            return false;\n        l++;\n        r--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpft_bnb_7.d(18): Error: no property `length` for type `string`\n/tmp/tmpft_bnb_7.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft_bnb_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp3tenug2h.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tenug2h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = 0, r = text.length() - 1;\n    while (l < r) {\n        if (text[l] != text[r])\n            return false;\n        l++;\n        r--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpe8h2pzby.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8h2pzby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if (len < 2) return true;\n    \n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp343yqyz0.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp343yqyz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp2lw23hvx.d(18): Error: no property `length` for type `string`\n/tmp/tmp2lw23hvx.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lw23hvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmptbkp52ta.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbkp52ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpd6yva4km.d(18): Error: no property `length` for type `string`\n/tmp/tmpd6yva4km.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6yva4km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    \n    int mid = len / 2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpamrrwgba.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamrrwgba.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpazs_tbbs.d(18): Error: no property `length` for type `string`\n/tmp/tmpazs_tbbs.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazs_tbbs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp2lw23hvx.d(18): Error: no property `length` for type `string`\n/tmp/tmp2lw23hvx.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lw23hvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpxx_5lrxl.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx_5lrxl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpmug2sphk.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmug2sphk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpgjrihk50.d(18): Error: no property `length` for type `string`\n/tmp/tmpgjrihk50.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjrihk50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmplbiacjcp.d(18): Error: no property `length` for type `string`\n/tmp/tmplbiacjcp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbiacjcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmp47b9utir.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47b9utir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() <= 1)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpvrdarkh9.d(18): Error: no property `length` for type `string`\n/tmp/tmpvrdarkh9.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrdarkh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    if(len < 2)\n        return true;\n    \n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpbx0yhz3b.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx0yhz3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpng31zoxd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng31zoxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpdbbk3fhp.d(18): Error: no property `length` for type `string`\n/tmp/tmpdbbk3fhp.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbbk3fhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpdrxc_tx6.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrxc_tx6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "/tmp/tmpx_gc_ffs.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gc_ffs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length() == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n            return false;\n        \n        left++;\n        right--;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmpd6yva4km.d(18): Error: no property `length` for type `string`\n/tmp/tmpd6yva4km.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6yva4km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i < j && !isalnum(text[i])) {\n            i++;\n        }\n        while (i < j && !isalnum(text[j])) {\n            j--;\n        }\n        if (toupper(text[i]) != toupper(text[j])) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "/tmp/tmp2yp_ezhl.d(18): Error: no property `length` for type `string`\n/tmp/tmp2yp_ezhl.d(22): Error: undefined identifier `isalnum`\n/tmp/tmp2yp_ezhl.d(25): Error: undefined identifier `isalnum`\n/tmp/tmp2yp_ezhl.d(28): Error: undefined identifier `toupper`\n/tmp/tmp2yp_ezhl.d(28): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yp_ezhl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}