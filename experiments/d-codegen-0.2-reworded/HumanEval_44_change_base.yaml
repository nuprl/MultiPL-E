name: HumanEval_44_change_base
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nChange numerical base of input\
  \ number x to base.\n    return string representation after the conversion.\n  \
  \  base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n   \
  \ >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\
  \n    \n*/\nstring change_base(long x, long base) \n"
tests: "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
  \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
  \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
  \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
  \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
  \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
  \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    while(x > 0)\n    {\n        result\
    \ = char(x % base + '0') + result;\n        x /= base;\n    }\n    return result;\n\
    }", "{\n    string result;\n    long n = x;\n    while (n > 0) {\n        result\
    \ = char(n % base) + result;\n        n /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n\
    \        result = char(temp % base) + result;\n        temp = temp / base;\n \
    \   }\n    return result;\n}", "{\n    if (base < 2)\n        return \"\";\n \
    \   string result = \"\";\n    while (x > 0) {\n        result = char(x % base\
    \ + '0') + result;\n        x /= base;\n    }\n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long temp = x;\n    while (temp != 0) {\n      \
    \  result = char(temp % base + '0') + result;\n        temp /= base;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    while(x > 0)\n   \
    \ {\n        result = char(x % base) + result;\n        x /= base;\n    }\n  \
    \  return result;\n}", "{\n    if (base < 2) {\n        throw new std.exception(\"\
    Base must be greater than 1\");\n    }\n    string result = \"\";\n    while (x\
    \ > 0) {\n        result = char(x % base) + result;\n        x /= base;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n \
    \   while (temp > 0) {\n        result = char(temp % base) + result;\n       \
    \ temp /= base;\n    }\n    return result;\n}", "{\n    if (base < 2) \n     \
    \   throw new std.exception(\"Base must be greater than 1\");\n    if (x < 0)\
    \ \n        throw new std.exception(\"Negative numbers are not supported\");\n\
    \    if (x == 0) \n        return \"0\";\n    string result = \"\";\n    while\
    \ (x > 0) {\n        result = char(x % base) + result;\n        x /= base;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    while (x > 0)\
    \ {\n        result = char(x % base) + result;\n        x /= base;\n    }\n  \
    \  return result;\n}", "{\n    string result;\n    while (x != 0) {\n        int\
    \ digit = x % base;\n        result = digit + result;\n        x /= base;\n  \
    \  }\n    return result;\n}", "{\n    if (base < 2) \n    {\n        throw new\
    \ Exception(\"Base must be greater than 1\");\n    }\n    if (base > 10) \n  \
    \  {\n        throw new Exception(\"Base must be less than 10\");\n    }\n   \
    \ if (x < 0) \n    {\n        throw new Exception(\"Negative numbers are not supported\"\
    );\n    }\n    if (x == 0) \n    {\n        return \"0\";\n    }\n    string result\
    \ = \"\";\n    while (x > 0) \n    {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    while(x > 0) {\n        result = char(x % base) + result;\n        x\
    \ /= base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long digit = 1;\n    while (x > 0) {\n        result = char(digit % base + '0')\
    \ + result;\n        digit = digit / base;\n        x = x / base;\n    }\n   \
    \ return result;\n}", "{\n    if (base < 2)\n        throw new std.exception(\"\
    Base must be greater than 1\");\n    if (x < 0)\n        throw new std.exception(\"\
    Negative number is not supported\");\n    string result = \"\";\n    while (x\
    \ > 0) {\n        result = char(x % base) + result;\n        x /= base;\n    }\n\
    \    return result;\n}", "{\n    string s = \"\";\n    while(x != 0) {\n     \
    \   s = char(x % base) + s;\n        x /= base;\n    }\n    return s;\n}", "{\n\
    \    if (base < 2)\n        throw \"Base must be greater than 1\";\n    if (x\
    \ < 0)\n        throw \"Negative numbers are not supported\";\n    string result\
    \ = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        x /= base;\n\
    \        result = digit + result;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    while(x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    while (x > 0) {\n        result = char(x % base) + result;\n        x\
    \ /= base;\n    }\n    return result;\n}", "{\n    string result;\n    long digit;\n\
    \    while (x > 0) {\n        digit = x % base;\n        result = digit + result;\n\
    \        x = x / base;\n    }\n    return result;\n}", "{\n    string s = \"\"\
    ;\n    while (x != 0) {\n        s = char(x % base) + s;\n        x /= base;\n\
    \    }\n    return s;\n}", "{\n    if (base < 2 || base > 10)\n        throw new\
    \ std.exception(\"Base must be between 2 and 10\");\n    string result = \"\"\
    ;\n    while (x > 0) {\n        int digit = x % base;\n        result = digit\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp = x;\n    while (temp > 0) {\n        result =\
    \ char(temp % base + '0') + result;\n        temp /= base;\n    }\n    return\
    \ result;\n}", "{\n    if (base < 2 || base > 10)\n        throw new std.exception(\"\
    Base must be between 2 and 10\");\n    string result = \"\";\n    while (x > 0)\
    \ {\n        result = char(x % base) + result;\n        x /= base;\n    }\n  \
    \  return result;\n}", "{\n    string result;\n    long digit;\n    while (x !=\
    \ 0) {\n        digit = x % base;\n        result = digit + result;\n        x\
    \ = x / base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    while (x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    while(x\
    \ > 0)\n    {\n        result = char(x % base) + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while(x > 0)\
    \ {\n        result = char(x % base) + result;\n        x /= base;\n    }\n  \
    \  return result;\n}", "{\n    if (base < 2)\n        throw new std.exception(\"\
    base must be greater than 1\");\n    string result = \"\";\n    while (x > 0)\
    \ {\n        result = char(x % base) + result;\n        x /= base;\n    }\n  \
    \  return result;\n}", "{\n    string s = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        s = char(n % base) + s;\n        n /= base;\n    }\n    return\
    \ s;\n}", "{\n    if (base < 2)\n        throw \"Base must be greater than 1.\"\
    ;\n    if (base > 10)\n        throw \"Base must be less than 10.\";\n    if (x\
    \ < 0)\n        throw \"Negative number cannot be converted.\";\n    if (x ==\
    \ 0)\n        return \"0\";\n    string result = \"\";\n    while (x > 0) {\n\
    \        result = char(x % base) + result;\n        x /= base;\n    }\n    return\
    \ result;\n}", "{\n    string s = \"\";\n    long n = x;\n    while (n > 0) {\n\
    \        s = char(n % base + '0') + s;\n        n /= base;\n    }\n    return\
    \ s;\n}", "{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n   \
    \     s = char(n % base) + s;\n        n /= base;\n    }\n    return s;\n}", "{\n\
    \    long i, j, k, m;\n    string s = \"\";\n    if (x < 0) {\n        s = \"\
    -\";\n        x = -x;\n    }\n    if (base < 2 || base > 10) {\n        return\
    \ \"\";\n    }\n    if (x == 0) {\n        return \"0\";\n    }\n    if (x ==\
    \ 1) {\n        return \"1\";\n    }\n    if (x == 2) {\n        return \"10\"\
    ;\n    }\n    if (x == 3) {\n        return \"11\";\n    }\n    if (x == 4) {\n\
    \        return \"100\";\n    }\n    if (x == 5) {\n        return \"101\";\n\
    \    }\n    if (x == 6) {\n        return \"110\";\n    }\n    if (x == 7) {\n\
    \        return \"111\";\n    }\n    if (x == 8) {\n        return \"1000\";\n\
    \    }\n    if (x == 9) {\n        return \"1001\";\n    }\n    if (x == 10) {\n\
    \        return \"1010\";\n    }\n    if (x == 11) {\n        return \"1011\"\
    ;\n    }\n    if (x == 12) {\n        return \"1100\";\n    }\n    if (x == 13)\
    \ {\n        return \"1101\";\n    }\n    if (x == 14) {\n        return \"1110\"\
    ;\n    }\n    if (x == 15) {\n        return \"1111\";\n    }\n    if (x == 16)\
    \ {\n        return \"10000\";\n    }\n    if (x == 17) {\n        return \"10001\"\
    ;\n    }\n    if (x == 18) {\n        return \"10010\";\n    }\n    if (x == 19)\
    \ {\n        return \"10011\";\n    }\n    if (x == 20) {\n        return \"10100\"\
    ;\n    }\n    if (x == 21) {\n        return \"10101\";\n    }\n    if (x == 22)\
    \ {\n        return \"10110\";\n    }\n    if (x == 23) {\n        return \"10111\"\
    ;\n    }\n    if (", "{\n    if (base < 2)\n        throw new Exception(\"Base\
    \ must be greater than 1\");\n    if (x < 0)\n        throw new Exception(\"Negative\
    \ number is not supported\");\n    if (base == 10)\n        return to_string(x);\n\
    \    string result = \"\";\n    while (x > 0) {\n        result = to_string(x\
    \ % base) + result;\n        x /= base;\n    }\n    return result;\n}", "{\n \
    \   string s = \"\";\n    long n = x;\n    while (n > 0) {\n        s = char(n\
    \ % base) + s;\n        n /= base;\n    }\n    return s;\n}", "{\n    string result\
    \ = \"\";\n    long digit = x;\n    while (digit > 0) {\n        result = char(digit\
    \ % base) + result;\n        digit /= base;\n    }\n    return result;\n}", "{\n\
    \    if (base < 2 || base > 10)\n        throw new std.exception(\"Base must be\
    \ between 2 and 10\");\n    string result = \"\";\n    while (x > 0) {\n     \
    \   result = char(x % base) + result;\n        x /= base;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while(x > 0)\n    {\n        result = char(x\
    \ % base + '0') + result;\n        x /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    while(x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ s = \"\";\n    while (x > 0) {\n        s = char(x % base) + s;\n        x /=\
    \ base;\n    }\n    return s;\n}", "{\n    string result = \"\";\n    while(x\
    \ != 0) {\n        result = char(x % base) + result;\n        x /= base;\n   \
    \ }\n    return result;\n}", "{\n    if (base < 2 || base > 36)\n        throw\
    \ new Error(\"Base should be in 2..36\");\n    string result = \"\";\n    while\
    \ (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 10)\n        throw new Exception(\"Invalid base\");\n    string result = \"\
    \";\n    while (x > 0) {\n        result = char(x % base) + result;\n        x\
    \ /= base;\n    }\n    return result;\n}", "{\n    string result;\n    while (x\
    \ > 0) {\n        result = char(x % base + '0') + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long digit;\n\
    \    while (x != 0) {\n        digit = x % base;\n        result = digit + result;\n\
    \        x = x / base;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        result = char(temp\
    \ % base + '0') + result;\n        temp /= base;\n    }\n    return result;\n}",
  "{\n    if (base < 2 || base > 10)\n        throw new std.exception(\"base must\
    \ be 2 to 10\");\n    string result = \"\";\n    while (x > 0) {\n        result\
    \ = char(x % base) + result;\n        x /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    while (x != 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n \
    \       result = digit + result;\n        x /= base;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long tmp = x;\n    while (tmp != 0) {\n\
    \        result = char(tmp % base + '0') + result;\n        tmp /= base;\n   \
    \ }\n    return result;\n}", "{\n    string result;\n    long temp = x;\n    while\
    \ (temp > 0) {\n        result = char(temp % base + '0') + result;\n        temp\
    \ /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n    while\
    \ (x > 0) {\n        s = char(x % base) + s;\n        x /= base;\n    }\n    return\
    \ s;\n}", "{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n   \
    \     s = char(n % base) + s;\n        n /= base;\n    }\n    return s;\n}", "{\n\
    \    string result;\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    long i = 0;\n    while (x != 0) {\n        result = char(x % base + '0')\
    \ + result;\n        x = x / base;\n        i++;\n    }\n    return result;\n}",
  "{\n    string s = \"\";\n    while (x > 0) {\n        s = char(x % base) + s;\n\
    \        x /= base;\n    }\n    return s;\n}", "{\n    string result;\n    long\
    \ digit;\n    while (x > 0) {\n        digit = x % base;\n        result = digit\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    while (x != 0) {\n        int digit = x % base;\n        result\
    \ = digit + result;\n        x /= base;\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result\
    \ = char(n % base) + result;\n        n /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    while(n > 0) {\n        result\
    \ = char(n % base) + result;\n        n /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long tmp = x;\n    while(tmp != 0)\n    {\n        result\
    \ = char(tmp % base + 48) + result;\n        tmp = tmp / base;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    while(temp\
    \ > 0)\n    {\n        result = char(temp%base + '0') + result;\n        temp\
    \ = temp/base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    while(x > 0)\n    {\n        result = char(x % base) + result;\n        x\
    \ /= base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long digit;\n    while (x != 0) {\n        digit = x % base;\n        result\
    \ = digit + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    while(x > 0) \n    {\n        result = char(x\
    \ % base) + result;\n        x /= base;\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n      \
    \  result = char(temp % base) + result;\n        temp /= base;\n    }\n    return\
    \ result;\n}", "{\n    long long_base = base;\n    long long_x = x;\n    string\
    \ result = \"\";\n    while(long_x > 0)\n    {\n        result = char(long_x %\
    \ long_base) + result;\n        long_x = long_x / long_base;\n    }\n    return\
    \ result;\n}", "{\n    if (base < 2 || base > 10)\n        throw new std.exception(\"\
    base must be between 2 and 10\");\n    if (x < 0)\n        throw new std.exception(\"\
    x must be non-negative\");\n    if (x == 0)\n        return \"0\";\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n       \
    \ result = digit + result;\n        x /= base;\n    }\n    return result;\n}",
  "{\n    if (base < 2)\n        throw new Exception(\"Base must be greater than 1\"\
    );\n    if (x < 0)\n        throw new Exception(\"Negative numbers are not supported\"\
    );\n    if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while\
    \ (x > 0) {\n        result = char(x % base) + result;\n        x /= base;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    long digit;\n\
    \    while (x != 0) {\n        digit = x % base;\n        x /= base;\n       \
    \ result = digit + result;\n    }\n    return result;\n}", "{\n    if (base <\
    \ 2 || base > 10)\n        throw new std.exception(\"base must be 2 <= base <=\
    \ 10\");\n    string result = \"\";\n    while (x > 0) {\n        int digit =\
    \ x % base;\n        result = digit + result;\n        x /= base;\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    while(x > 0)\n    {\n\
    \        result = char(x % base) + result;\n        x /= base;\n    }\n    return\
    \ result;\n}", "{\n    string s = \"\";\n    long i = 1;\n    while (x > 0) {\n\
    \        s = s + to_string(x % base) + \" \";\n        x = x / base;\n       \
    \ i++;\n    }\n    if (i > 1)\n        s = s.substr(0, s.length() - 1);\n    return\
    \ s;\n}", "{\n    if (base < 2)\n        return \"\";\n    string result = \"\"\
    ;\n    while (x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    if (base < 2) {\n        throw\
    \ \"Base must be greater than 1\";\n    }\n    string result = \"\";\n    while\
    \ (x > 0) {\n        result = char(x % base) + result;\n        x /= base;\n \
    \   }\n    return result;\n}", "{\n    if (base < 2 || base > 10)\n        throw\
    \ new std.exception(\"base should be 2 to 10\");\n    if (x < 0)\n        throw\
    \ new std.exception(\"input number should be positive\");\n    if (x == 0)\n \
    \       return \"0\";\n    string result = \"\";\n    while (x > 0) {\n      \
    \  result = char(x % base + 48) + result;\n        x /= base;\n    }\n    return\
    \ result;\n}", "{\n    string s = \"\";\n    while(x > 0) {\n        s = char(x\
    \ % base + '0') + s;\n        x /= base;\n    }\n    return s;\n}", "{\n    string\
    \ s = \"\";\n    while(x > 0) {\n        s = char(x % base) + s;\n        x /=\
    \ base;\n    }\n    return s;\n}", "{\n    if (base < 2)\n        throw \"Base\
    \ must be greater than 1\";\n    if (x < 0)\n        throw \"Input number must\
    \ be non-negative\";\n    if (x == 0)\n        return \"0\";\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n  \
    \      x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while(x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n    long n =\
    \ x;\n    while(n > 0) {\n        s = char(n % base) + s;\n        n /= base;\n\
    \    }\n    return s;\n}", "{\n    string result = \"\";\n    long i = x;\n  \
    \  while(i > 0)\n    {\n        result = char(i % base + '0') + result;\n    \
    \    i /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base >\
    \ 10)\n        throw new Exception(\"Base should be 2 to 10\");\n    if (x < 0)\n\
    \        throw new Exception(\"Negative numbers are not supported\");\n    if\
    \ (x == 0)\n        return \"0\";\n    string result = \"\";\n    while (x > 0)\
    \ {\n        int digit = x % base;\n        x /= base;\n        result = digit\
    \ + result;\n    }\n    return result;\n}", "{\n    string s = \"\";\n    long\
    \ n = x;\n    while (n > 0) {\n        s = char(n % base) + s;\n        n /= base;\n\
    \    }\n    return s;\n}", "{\n    string result;\n    long digit;\n    while\
    \ (x > 0) {\n        digit = x % base;\n        result = digit + result;\n   \
    \     x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n        result\
    \ = digit + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n\
    \    string result;\n    long digit;\n    while (x > 0) {\n        digit = x %\
    \ base;\n        result = digit + result;\n        x = x / base;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long power = 1;\n    while(x\
    \ > 0) {\n        result = char(x % base + '0') + result;\n        x = x / base;\n\
    \        power *= base;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n  \
    \      x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long n = x;\n    while (n > 0) {\n        result = char(n % base) + result;\n\
    \        n /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    while (x > 0) \n    {\n        result = char(x % base) + result;\n  \
    \      x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n        result\
    \ = digit + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    while (x > 0) \n    {\n        result = char(x\
    \ % base) + result;\n        x /= base;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    long digit;\n    while (x > 0) {\n        digit = x %\
    \ base;\n        result = digit + result;\n        x = x / base;\n    }\n    return\
    \ result;\n}", "{\n    string s = \"\";\n    long n = x;\n    while(n > 0)\n \
    \   {\n        s = char(n % base) + s;\n        n /= base;\n    }\n    return\
    \ s;\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n\
    \        result = char(n % base) + result;\n        n /= base;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n >\
    \ 0) {\n        result = char(n % base) + result;\n        n /= base;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = char(n % base) + result;\n        n = n / base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long digit;\n\
    \    while (x > 0) {\n        digit = x % base;\n        result = digit + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 10)\n        throw new std.exception(\"base must be 2 to 10\");\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 10)\n        throw new Error(\"Base must be between 2 and 10\");\n    if (x\
    \ < 0)\n        throw new Error(\"Negative numbers are not supported\");\n   \
    \ if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while (x\
    \ > 0) {\n        int digit = x % base;\n        result = digit + result;\n  \
    \      x = x / base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    while (x > 0) {\n        result = char(x % base) + result;\n        x\
    \ /= base;\n    }\n    return result;\n}", "{\n    if (base < 2)\n        throw\
    \ new std.exception(\"Base must be greater than 1\");\n    string result = \"\"\
    ;\n    while (x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digit = x;\n    while (digit > 0) {\n        result = char(digit % base + '0')\
    \ + result;\n        digit /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    long i, j;\n    for (i = 0; i < base; i++) {\n        j = x % base;\n\
    \        x = x / base;\n        result = char(j + '0') + result;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit;\n    while (x >\
    \ 0) {\n        digit = x % base;\n        result = digit + result;\n        x\
    \ = x / base;\n    }\n    return result;\n}", "{\n    string result;\n    long\
    \ digit;\n    while (x > 0) {\n        digit = x % base;\n        result = digit\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 36)\n        throw new std.exception(\"base must be between 2 and 36\");\n\
    \    if (x < 0)\n        throw new std.exception(\"x must be non-negative\");\n\
    \    if (base == 2)\n        return to_string(x);\n    if (base == 10)\n     \
    \   return to_string(x);\n    if (base == 16)\n        return to_hex(x);\n   \
    \ if (base == 8)\n        return to_octal(x);\n    if (base == 3)\n        return\
    \ to_binary(x);\n    \n    long n = x;\n    string result = \"\";\n    while (n\
    \ > 0) {\n        result = to_string(n % base) + result;\n        n /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while(x > 0)\
    \ {\n        result = char(x % base + '0') + result;\n        x /= base;\n   \
    \ }\n    return result;\n}", "{\n    string s = \"\";\n    while(x != 0) {\n \
    \       s = char(x % base) + s;\n        x /= base;\n    }\n    return s;\n}",
  "{\n    string s = \"\";\n    long n = x;\n    while (n > 0) {\n        s = char(n\
    \ % base) + s;\n        n /= base;\n    }\n    return s;\n}", "{\n    string result\
    \ = \"\";\n    long digit = x;\n    while (digit > 0) {\n        result = char(digit\
    \ % base) + result;\n        digit /= base;\n    }\n    return result;\n}", "{\n\
    \    string s = \"\";\n    while (x > 0) {\n        s = char(x % base) + s;\n\
    \        x /= base;\n    }\n    return s;\n}", "{\n    string result = \"\";\n\
    \    long digit;\n    while (x > 0) {\n        digit = x % base;\n        result\
    \ = digit + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n\
    \    if (base < 2 || base > 36)\n        throw \"Base must be between 2 and 36\"\
    ;\n    string s = \"\";\n    while (x > 0) {\n        s = char(x % base) + s;\n\
    \        x /= base;\n    }\n    return s;\n}", "{\n    if (base < 2)\n       \
    \ throw new std.exception(\"base must be greater than 1\");\n    if (x < 0)\n\
    \        throw new std.exception(\"negative number\");\n    if (x == 0)\n    \
    \    return \"0\";\n    string result = \"\";\n    while (x > 0) {\n        result\
    \ = char(x % base) + result;\n        x /= base;\n    }\n    return result;\n}",
  "{\n    if (base < 2 || base > 10)\n        throw new Exception(\"Base must be between\
    \ 2 and 10\");\n    string result = \"\";\n    while (x > 0) {\n        int digit\
    \ = x % base;\n        result = digit + result;\n        x = x / base;\n    }\n\
    \    return result;\n}", "{\n    string result;\n    long digit;\n    while (x\
    \ > 0) {\n        digit = x % base;\n        result = char(digit + '0') + result;\n\
    \        x = x / base;\n    }\n    return result;\n}", "{\n    if (base < 2)\n\
    \        throw new std.exception(\"base must be greater than 1\");\n    if (x\
    \ < 0)\n        throw new std.exception(\"negative number\");\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n  \
    \      x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while(x != 0) {\n        result = char(x % base + '0') + result;\n    \
    \    x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    while (x > 0) {\n        int digit = x % base;\n        result = digit +\
    \ result;\n        x /= base;\n    }\n    return result;\n}", "{\n    long n =\
    \ x;\n    string s = \"\";\n    while(n > 0) {\n        s = char(n % base) + s;\n\
    \        n = n / base;\n    }\n    return s;\n}", "{\n    string s = \"\";\n \
    \   while (x > 0) {\n        s = char(x % base) + s;\n        x /= base;\n   \
    \ }\n    return s;\n}", "{\n    string result = \"\";\n    long n = x;\n    while(n\
    \ > 0) {\n        result = char(n % base) + result;\n        n /= base;\n    }\n\
    \    return result;\n}", "{\n    string s = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        s = char(n % base) + s;\n        n /= base;\n    }\n    return\
    \ s;\n}", "{\n    if (base < 2)\n        throw \"Base must be greater than 1\"\
    ;\n    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    if (base\
    \ < 2)\n        throw \"Base must be greater than 1.\";\n    if (x < 0)\n    \
    \    throw \"Negative number cannot be converted.\";\n    string result = \"\"\
    ;\n    while (x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    while\
    \ (x != 0) {\n        result = char(x % base + '0') + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    long digit;\n    while\
    \ (x > 0) {\n        digit = x % base;\n        result = digit + result;\n   \
    \     x /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n  \
    \  while (x > 0) {\n        s = char(x % base) + s;\n        x /= base;\n    }\n\
    \    return s;\n}", "{\n    string result = \"\";\n    long digit;\n    while\
    \ (x != 0) {\n        digit = x % base;\n        result = digit + result;\n  \
    \      x = x / base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 10)\n        throw new Exception(\"Base must be between 2 and 10\");\n   \
    \ string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n\
    \        result = digit + result;\n        x = x / base;\n    }\n    return result;\n\
    }", "{\n    if (base < 2)\n        throw new std.exception(\"Base must be greater\
    \ than 1\");\n    if (x < 0)\n        throw new std.exception(\"Negative numbers\
    \ are not supported\");\n    if (x == 0)\n        return \"0\";\n    string result\
    \ = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n  \
    \      x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while(x > 0)\n    {\n        result = char(x % base + '0') + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    if (base < 2 || base\
    \ > 10)\n        throw new std.exception(\"Base must be between 2 and 10\");\n\
    \    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n\
    \    long n = x;\n    while (n > 0) {\n        s = char(n % base) + s;\n     \
    \   n /= base;\n    }\n    return s;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp > 0)\n    {\n        result = char(temp % base + '0')\
    \ + result;\n        temp = temp / base;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digit;\n    while (x > 0) {\n        digit\
    \ = x % base;\n        result = digit + result;\n        x = x / base;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long digit;\n    while\
    \ (x > 0) {\n        digit = x % base;\n        result = digit + result;\n   \
    \     x /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n  \
    \  while (x > 0) {\n        s = char(x % base) + s;\n        x /= base;\n    }\n\
    \    return s;\n}", "{\n    if (x == 0) return \"0\";\n    if (base < 2 || base\
    \ > 36) return \"\";\n    string result = \"\";\n    while (x > 0) {\n       \
    \ int digit = x % base;\n        result = digit + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    if (base < 2)\n        throw new std.exception(\"\
    Base must be greater than 1\");\n    if (x < 0)\n        throw new std.exception(\"\
    Negative number cannot be converted\");\n    if (x == 0)\n        return \"0\"\
    ;\n    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    long digit;\n    while (x != 0) {\n        digit = x % base;\n\
    \        result = digit + result;\n        x = x / base;\n    }\n    return result;\n\
    }", "{\n    string s = \"\";\n    while(x > 0) {\n        s = char(x % base) +\
    \ s;\n        x /= base;\n    }\n    return s;\n}", "{\n    string result = \"\
    \";\n    while(x != 0) {\n        int digit = x % base;\n        result = digit\
    \ + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n    string\
    \ s = \"\";\n    long i, j, k;\n    i = x;\n    while(i > 0)\n    {\n        j\
    \ = i % base;\n        k = j;\n        if(j < 10)\n            s = char(j + 48)\
    \ + s;\n        else\n            s = char(j + 87) + s;\n        i = i / base;\n\
    \    }\n    return s;\n}", "{\n    string result = \"\";\n    long temp = x;\n\
    \    while (temp > 0) {\n        result = char(temp % base + '0') + result;\n\
    \        temp /= base;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    while (x > 0) \n    {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n\
    \    while (x != 0) {\n        s = char(x % base) + s;\n        x /= base;\n \
    \   }\n    return s;\n}", "{\n    string result = \"\";\n    while (x > 0) {\n\
    \        result = char(x % base) + result;\n        x /= base;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit;\n    while (x >\
    \ 0) {\n        digit = x % base;\n        result = digit + result;\n        x\
    \ = x / base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digit;\n    while (x != 0) {\n        digit = x % base;\n        result\
    \ = digit + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    if (base\
    \ < 2) {\n        throw new std.exception(\"Base must be greater than 1\");\n\
    \    }\n    if (x < 0) {\n        throw new std.exception(\"Negative number\"\
    );\n    }\n    if (base == 10) {\n        return to_string(x);\n    }\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = to_string(x % base) +\
    \ result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n \
    \       x /= base;\n        result = digit + result;\n    }\n    return result;\n\
    }", "{\n    if (base < 2 || base > 36)\n        throw new Exception(\"Invalid\
    \ base\");\n    string result = \"\";\n    while (x > 0) {\n        int digit\
    \ = x % base;\n        result = digit + result;\n        x = x / base;\n    }\n\
    \    return result;\n}", "{\n    string result;\n    long temp = x;\n    while\
    \ (temp > 0) {\n        result = char(temp % base + '0') + result;\n        temp\
    \ /= base;\n    }\n    return result;\n}", "{\n    string s = \"\";\n    while(x\
    \ > 0)\n    {\n        s = char(x % base + '0') + s;\n        x /= base;\n   \
    \ }\n    return s;\n}", "{\n    if (base < 2 || base > 10)\n        throw new\
    \ std.exception(\"base must be 2 to 10\");\n    if (x < 0)\n        throw new\
    \ std.exception(\"x must be non-negative\");\n    if (x == 0)\n        return\
    \ \"0\";\n    string result = \"\";\n    while (x > 0) {\n        int digit =\
    \ x % base;\n        result = digit + result;\n        x /= base;\n    }\n   \
    \ return result;\n}", "{\n    if (base < 2)\n        throw \"Base must be greater\
    \ than 1\";\n    if (x < 0)\n        throw \"Negative number is not supported\"\
    ;\n    if (base == 1)\n        return to_string(x);\n    string result = \"\"\
    ;\n    while (x > 0) {\n        result = to_string(x % base) + result;\n     \
    \   x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    while (x > 0) {\n        result = char(x % base) + result;\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string result;\n    long n = x;\n\
    \    while (n > 0) {\n        long digit = n % base;\n        result = digit +\
    \ result;\n        n = n / base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    while(x > 0)\n    {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result;\n \
    \   long digit;\n    while (x > 0) {\n        digit = x % base;\n        x /=\
    \ base;\n        result = digit + result;\n    }\n    return result;\n}", "{\n\
    \    string s = \"\";\n    while (x > 0) {\n        s = char(x % base) + s;\n\
    \        x /= base;\n    }\n    return s;\n}", "{\n    string result = \"\";\n\
    \    while(x > 0) {\n        result = char(x % base) + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string s = \"\";\n    while (x != 0) {\n\
    \        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return\
    \ s;\n}", "{\n    if (base < 2)\n        throw \"Base must be greater than 1\"\
    ;\n    if (base > 10)\n        throw \"Base must be less than 10\";\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base + '0') +\
    \ result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string s\
    \ = \"\";\n    while (x != 0) {\n        s = s + to_string(x % base);\n      \
    \  x /= base;\n    }\n    return s;\n}", "{\n    if (base < 2)\n        throw\
    \ new std.exception(\"Base must be greater than 1\");\n    if (x < 0)\n      \
    \  throw new std.exception(\"Negative numbers are not supported\");\n    \n  \
    \  string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n\
    \        x /= base;\n        result = digit + result;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit;\n    while (x > 0) {\n    \
    \    digit = x % base;\n        result = digit + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string s = \"\";\n    long i = 1;\n  \
    \  while (x > 0) {\n        s = s + to_string(x % base);\n        x /= base;\n\
    \        i *= base;\n    }\n    return s;\n}", "{\n    string result = \"\";\n\
    \    long i = 0;\n    while (x > 0) {\n        result = char(x % base + '0') +\
    \ result;\n        x /= base;\n        i++;\n    }\n    return result;\n}", "{\n\
    \    string result;\n    long digit;\n    while (x > 0) {\n        digit = x %\
    \ base;\n        result = digit + result;\n        x = x / base;\n    }\n    return\
    \ result;\n}", "{\n    string s = \"\";\n    long n = x;\n    while (n > 0) {\n\
    \        s = char(n % base) + s;\n        n /= base;\n    }\n    return s;\n}",
  "{\n    string s = \"\";\n    long i = x;\n    while (i > 0) {\n        s = char(i\
    \ % base) + s;\n        i /= base;\n    }\n    return s;\n}", "{\n    string result;\n\
    \    long i, j, k;\n    for (i = 0; i < base; i++) {\n        result += \"0\"\
    ;\n    }\n    for (i = 0; i < base; i++) {\n        j = x % base;\n        k =\
    \ j / base;\n        result[i] = \"0123456789abcdefghijklmnopqrstuvwxyz\"[k];\n\
    \        x = x / base;\n    }\n    return result;\n}", "{\n    if (base < 2 ||\
    \ base > 10)\n        throw \"Base must be between 2 and 10\";\n    string result\
    \ = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        x /= base;\n\
    \        result = digit + result;\n    }\n    return result;\n}", "{\n    if (base\
    \ < 2 || base > 10)\n        throw new std.exception(\"base must be 2 to 10\"\
    );\n    if (x < 0)\n        throw new std.exception(\"negative number\");\n  \
    \  if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while (x\
    \ > 0) {\n        result = char(x % base) + result;\n        x /= base;\n    }\n\
    \    return result;\n}", "{\n    if (base < 2)\n        throw new Exception(\"\
    Base must be greater than 1\");\n    if (x < 0)\n        throw new Exception(\"\
    Negative numbers are not supported\");\n    if (x == 0)\n        return \"0\"\
    ;\n    string result = \"\";\n    while (x > 0) {\n        result = char(x % base)\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long digit;\n    while (x > 0) {\n        digit = x % base;\n\
    \        result = digit + result;\n        x = x / base;\n    }\n    return result;\n\
    }", "{\n    string s = \"\";\n    while (x > 0) {\n        s = char(x % base)\
    \ + s;\n        x /= base;\n    }\n    return s;\n}", "{\n    if (base < 2 ||\
    \ base > 36)\n        throw new Error(\"Base must be between 2 and 36\");\n  \
    \  if (x < 0)\n        throw new Error(\"Input number must be non-negative\");\n\
    \    if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while\
    \ (x > 0) {\n        int digit = x % base;\n        x /= base;\n        result\
    \ = digit + result;\n    }\n    return result;\n}", "{\n    long long_x = x;\n\
    \    string result = \"\";\n    while (long_x > 0)\n    {\n        result = char(long_x\
    \ % base) + result;\n        long_x = long_x / base;\n    }\n    return result;\n\
    }", "{\n    string s = \"\";\n    long n = x;\n    while(n > 0) {\n        s =\
    \ char(n % base) + s;\n        n /= base;\n    }\n    return s;\n}", "{\n    string\
    \ result = \"\";\n    while (x > 0) {\n        result = char(x % base) + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit\
    \ + result;\n        x /= base;\n    }\n    return result;\n}", "{\n    if (x\
    \ == 0) return \"0\";\n    string result = \"\";\n    while (x != 0) {\n     \
    \   int digit = x % base;\n        result = digit + result;\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    long digit;\n    while\
    \ (x > 0) {\n        digit = x % base;\n        result = char(digit + '0') + result;\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    string result;\n \
    \   long n = x;\n    while(n > 0)\n    {\n        result = char(n % base) + result;\n\
    \        n /= base;\n    }\n    return result;\n}", "{\n    if (x == 0) return\
    \ \"0\";\n    if (base < 2 || base > 36) return \"\";\n    string result = \"\"\
    ;\n    while (x > 0) {\n        int digit = x % base;\n        result = digit\
    \ + result;\n        x = x / base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long num = x;\n    while(num > 0) {\n        result = char(num\
    \ % base) + result;\n        num /= base;\n    }\n    return result;\n}", "{\n\
    \    string s = \"\";\n    while(x > 0) {\n        s = char(x % base) + s;\n \
    \       x /= base;\n    }\n    return s;\n}", "{\n    if (base < 2)\n        throw\
    \ new std.exception(\"Base must be greater than 1\");\n    if (base > 10)\n  \
    \      throw new std.exception(\"Base must be less than 10\");\n    if (x < 0)\n\
    \        throw new std.exception(\"Input number must be non-negative\");\n   \
    \ \n    string result = \"\";\n    while (x > 0)\n    {\n        result = char(x\
    \ % base) + result;\n        x /= base;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
