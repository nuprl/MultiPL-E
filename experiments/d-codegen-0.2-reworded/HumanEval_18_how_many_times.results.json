{
  "name": "HumanEval_18_how_many_times",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n",
  "tests": "unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(string.substr(j, len)) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpx90crxgd.d(16): Error: no property `length` for type `string`\n/tmp/tmpx90crxgd.d(18): Error: no property `length` for type `string`\n/tmp/tmpx90crxgd.d(20): Error: no property `length` for type `string`\n/tmp/tmpx90crxgd.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx90crxgd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp0pknwsmu.d(16): Error: no property `length` for type `string`\n/tmp/tmp0pknwsmu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pknwsmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    if (sublen > len)\n        return 0L;\n    \n    for (long i = 0; i < len - sublen + 1; i++)\n    {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmptui0u6gy.d(16): Error: no property `length` for type `string`\n/tmp/tmptui0u6gy.d(17): Error: no property `length` for type `string`\n/tmp/tmptui0u6gy.d(24): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptui0u6gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1)\n    {\n        int j = 0;\n        while (j < len && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == len)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp151ll2iw.d(16): Error: no property `length` for type `string`\n/tmp/tmp151ll2iw.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp151ll2iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += substring_length;\n        }\n        else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmphogfp2bw.d(16): Error: no property `length` for type `string`\n/tmp/tmphogfp2bw.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphogfp2bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < len_substring) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                break;\n            }\n        }\n        if (j == len_substring) {\n            count++;\n            i += len_substring;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpi856cs7n.d(16): Error: no property `length` for type `string`\n/tmp/tmpi856cs7n.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi856cs7n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpnxb73ssg.d(16): Error: no property `length` for type `string`\n/tmp/tmpnxb73ssg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxb73ssg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpu3_6u5aa.d(18): Error: no property `length` for type `string`\n/tmp/tmpu3_6u5aa.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3_6u5aa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\n/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9feuystd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp_rl9h7pz.d(16): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(18): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(20): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rl9h7pz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        while (j < string_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n                if (j == substring_length) {\n                    j = 0;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpumk_h8vm.d(16): Error: no property `length` for type `string`\n/tmp/tmpumk_h8vm.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumk_h8vm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpnxb73ssg.d(16): Error: no property `length` for type `string`\n/tmp/tmpnxb73ssg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxb73ssg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpimer_cmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpimer_cmp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimer_cmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = substring.length();\n    long len_string = string.length();\n    \n    for (long i = 0; i < len_string - len + 1; i++)\n    {\n        if (string.substr(i, len) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpea2pdc3d.d(16): Error: no property `length` for type `string`\n/tmp/tmpea2pdc3d.d(17): Error: no property `length` for type `string`\n/tmp/tmpea2pdc3d.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpea2pdc3d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpro2kkl5f.d(16): Error: no property `length` for type `string`\n/tmp/tmpro2kkl5f.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro2kkl5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_len) {\n        while (j < substring_len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpc6i_7_rh.d(16): Error: no property `length` for type `string`\n/tmp/tmpc6i_7_rh.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6i_7_rh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpznj1xme8.d(16): Error: no property `length` for type `string`\n/tmp/tmpznj1xme8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznj1xme8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp8ix1vegb.d(16): Error: no property `length` for type `string`\n/tmp/tmp8ix1vegb.d(18): Error: no property `length` for type `string`\n/tmp/tmp8ix1vegb.d(20): Error: no property `length` for type `string`\n/tmp/tmp8ix1vegb.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ix1vegb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpf8uo9okw.d(16): Error: no property `length` for type `string`\n/tmp/tmpf8uo9okw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8uo9okw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n            i++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpb0mf28_s.d(16): Error: no property `length` for type `string`\n/tmp/tmpb0mf28_s.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0mf28_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_substring_max = len_substring;\n    long len_string_max = len_string;\n    long len_substring_min = len_substring;\n    long len_string_min = len_string;\n    \n    if (len_substring > len_string)\n    {\n        len_substring_max = len_string;\n        len_string_max = len_substring;\n    }\n    if (len_substring < len_string)\n    {\n        len_substring_min = len_string;\n        len_string_min = len_substring;\n    }\n    \n    for (long i = len_string_min; i <= len_string_max; i++)\n    {\n        for (long j = len_substring_min; j <= len_substring_max; j++)\n        {\n            if (string.substr(i - len_substring, len_substring) == substring)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp2gwlduz4.d(16): Error: no property `length` for type `string`\n/tmp/tmp2gwlduz4.d(17): Error: no property `length` for type `string`\n/tmp/tmp2gwlduz4.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gwlduz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i == len)\n            {\n                count++;\n                i = j;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp0l5d73y3.d(16): Error: no property `length` for type `string`\n/tmp/tmp0l5d73y3.d(18): Error: no property `length` for type `string`\n/tmp/tmp0l5d73y3.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l5d73y3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcncfwlt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpznj1xme8.d(16): Error: no property `length` for type `string`\n/tmp/tmpznj1xme8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznj1xme8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpnxb73ssg.d(16): Error: no property `length` for type `string`\n/tmp/tmpnxb73ssg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxb73ssg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j > 0)\n        {\n            j = 0;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpyjukm7o_.d(16): Error: no property `length` for type `string`\n/tmp/tmpyjukm7o_.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjukm7o_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1) {\n        int j = 0;\n        while (j < len) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == len) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcfn_tq9w.d(16): Error: no property `length` for type `string`\n/tmp/tmpcfn_tq9w.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfn_tq9w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n        }\n        if (j == sublen) {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp81tncb1g.d(16): Error: no property `length` for type `string`\n/tmp/tmp81tncb1g.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81tncb1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpqnnbfzoc.d(16): Error: no property `length` for type `string`\n/tmp/tmpqnnbfzoc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnnbfzoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        while(j < sublen && i < len)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                i++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp519xoj52.d(16): Error: no property `length` for type `string`\n/tmp/tmp519xoj52.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp519xoj52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp8fswibj8.d(16): Error: no property `length` for type `string`\n/tmp/tmp8fswibj8.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fswibj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp1nfza2ad.d(16): Error: no property `length` for type `string`\n/tmp/tmp1nfza2ad.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nfza2ad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpsbzebea9.d(16): Error: no property `length` for type `string`\n/tmp/tmpsbzebea9.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbzebea9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    \n    for (long i = 0; i < len_string_substring; i++)\n    {\n        if (string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpz9gujmfi.d(16): Error: no property `length` for type `string`\n/tmp/tmpz9gujmfi.d(17): Error: no property `length` for type `string`\n/tmp/tmpz9gujmfi.d(22): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9gujmfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring.compare(string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpqh7csy5e.d(16): Error: no property `length` for type `string`\n/tmp/tmpqh7csy5e.d(18): Error: no property `length` for type `string`\n/tmp/tmpqh7csy5e.d(21): Error: no property `length` for type `string`\n/tmp/tmpqh7csy5e.d(21): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh7csy5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0, j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpvyjynqq6.d(17): Error: no property `length` for type `string`\n/tmp/tmpvyjynqq6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyjynqq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp714vk6ss.d(16): Error: no property `length` for type `string`\n/tmp/tmp714vk6ss.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp714vk6ss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length())\n    {\n        if (string[start] == substring[0])\n        {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[0])\n            {\n                count++;\n                start++;\n                end++;\n            }\n        }\n        else\n        {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp_9bxf04c.d(18): Error: no property `length` for type `string`\n/tmp/tmp_9bxf04c.d(18): Error: no property `length` for type `string`\n/tmp/tmp_9bxf04c.d(25): Error: no property `length` for type `string`\n/tmp/tmp_9bxf04c.d(25): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_9bxf04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpkqq0aupz.d(16): Error: no property `length` for type `string`\n/tmp/tmpkqq0aupz.d(18): Error: no property `length` for type `string`\n/tmp/tmpkqq0aupz.d(20): Error: no property `length` for type `string`\n/tmp/tmpkqq0aupz.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqq0aupz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpmj6pb6v1.d(16): Error: no property `length` for type `string`\n/tmp/tmpmj6pb6v1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj6pb6v1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < len_substring && string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpsm95ccyf.d(16): Error: no property `length` for type `string`\n/tmp/tmpsm95ccyf.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsm95ccyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpku4f8cs8.d(16): Error: no property `length` for type `string`\n/tmp/tmpku4f8cs8.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku4f8cs8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length && string[i + j] == substring[j]) {\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += j;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp7k03zfyc.d(16): Error: no property `length` for type `string`\n/tmp/tmp7k03zfyc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k03zfyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    for(long i = 0; i < len - sublen + 1; i++)\n    {\n        if(string.substr(i, sublen) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpn7ounapf.d(16): Error: no property `length` for type `string`\n/tmp/tmpn7ounapf.d(17): Error: no property `length` for type `string`\n/tmp/tmpn7ounapf.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7ounapf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpu_j1n2g5.d(16): Error: no property `length` for type `string`\n/tmp/tmpu_j1n2g5.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_j1n2g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp8gxomvzg.d(16): Error: no property `length` for type `string`\n/tmp/tmp8gxomvzg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxomvzg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\n/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9feuystd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp1lcd_f5e.d(16): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(18): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(20): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lcd_f5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpgaw6n5ol.d(16): Error: no property `length` for type `string`\n/tmp/tmpgaw6n5ol.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgaw6n5ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length && j < substring_length)\n    {\n        if (string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmptf2q3353.d(16): Error: no property `length` for type `string`\n/tmp/tmptf2q3353.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf2q3353.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpn906ohqq.d(16): Error: no property `length` for type `string`\n/tmp/tmpn906ohqq.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn906ohqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1)\n    {\n        int j = 0;\n        while (j < len && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == len)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp151ll2iw.d(16): Error: no property `length` for type `string`\n/tmp/tmp151ll2iw.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp151ll2iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    while(i < string_length)\n    {\n        long j = 0;\n        while(j < substring_length)\n        {\n            if(string[i+j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                break;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp8ej4b_xf.d(16): Error: no property `length` for type `string`\n/tmp/tmp8ej4b_xf.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ej4b_xf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    if (sublen == 0)\n        return 0;\n    for (long i = 0; i < len - sublen + 1; i++) {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp42ebsoli.d(16): Error: no property `length` for type `string`\n/tmp/tmp42ebsoli.d(17): Error: no property `length` for type `string`\n/tmp/tmp42ebsoli.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42ebsoli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp714vk6ss.d(16): Error: no property `length` for type `string`\n/tmp/tmp714vk6ss.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp714vk6ss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpimer_cmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpimer_cmp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimer_cmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpgaw6n5ol.d(16): Error: no property `length` for type `string`\n/tmp/tmpgaw6n5ol.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgaw6n5ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string_substring - len_substring;\n    \n    for (long i = 0; i < len_string_substring_overlap; i++) {\n        if (string.substr(i, len_substring) == substring) {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp_baf_z4v.d(16): Error: no property `length` for type `string`\n/tmp/tmp_baf_z4v.d(17): Error: no property `length` for type `string`\n/tmp/tmp_baf_z4v.d(22): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_baf_z4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if (j - i == len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpis7w70k3.d(16): Error: no property `length` for type `string`\n/tmp/tmpis7w70k3.d(18): Error: no property `length` for type `string`\n/tmp/tmpis7w70k3.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpis7w70k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    int substring_length = substring.length();\n    while (i < string.length() && j < substring_length) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp86tvm36q.d(18): Error: no property `length` for type `string`\n/tmp/tmp86tvm36q.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86tvm36q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if (j - i == len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpis7w70k3.d(16): Error: no property `length` for type `string`\n/tmp/tmpis7w70k3.d(18): Error: no property `length` for type `string`\n/tmp/tmpis7w70k3.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpis7w70k3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string) {\n        while (j < len_substring && string[i] == substring[j]) {\n            j++;\n            i++;\n        }\n        if (j == len_substring) {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpdz7y83z7.d(16): Error: no property `length` for type `string`\n/tmp/tmpdz7y83z7.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz7y83z7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpet9t9rqa.d(16): Error: no property `length` for type `string`\n/tmp/tmpet9t9rqa.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet9t9rqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpsbzebea9.d(16): Error: no property `length` for type `string`\n/tmp/tmpsbzebea9.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbzebea9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                break;\n            }\n        }\n        if (j == sublen) {\n            count++;\n            i += sublen;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp08dj0x8d.d(16): Error: no property `length` for type `string`\n/tmp/tmp08dj0x8d.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08dj0x8d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_len)\n    {\n        while(j < substring_len)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp_s6ha6j7.d(16): Error: no property `length` for type `string`\n/tmp/tmp_s6ha6j7.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s6ha6j7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len && i + j < string_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpu6ycwtix.d(16): Error: no property `length` for type `string`\n/tmp/tmpu6ycwtix.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6ycwtix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpuescji1_.d(16): Error: no property `length` for type `string`\n/tmp/tmpuescji1_.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuescji1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp5nrlqjrs.d(16): Error: no property `length` for type `string`\n/tmp/tmp5nrlqjrs.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nrlqjrs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len - sublen + 1)\n    {\n        if (string.substr(i, sublen) == substring)\n        {\n            count++;\n            i += sublen;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm7915hp5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm7915hp5.d(17): Error: no property `length` for type `string`\n/tmp/tmpm7915hp5.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7915hp5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    \n    for (long i = 0; i < string_length - substring_length + 1; i++)\n    {\n        if (string.substr(i, substring_length) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpjsi8l3ue.d(16): Error: no property `length` for type `string`\n/tmp/tmpjsi8l3ue.d(17): Error: no property `length` for type `string`\n/tmp/tmpjsi8l3ue.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsi8l3ue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpimer_cmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpimer_cmp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimer_cmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpmnqlly4n.d(16): Error: no property `length` for type `string`\n/tmp/tmpmnqlly4n.d(16): Error: no property `length` for type `string`\n/tmp/tmpmnqlly4n.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnqlly4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcslxkj_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_length)\n    {\n        if(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j < substring_length)\n        {\n            j++;\n        }\n        else if(i < string_length)\n        {\n            i++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpe18fdigp.d(16): Error: no property `length` for type `string`\n/tmp/tmpe18fdigp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe18fdigp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string_substring - len_substring;\n    for (long i = 0; i < len_string_substring_overlap; i++) {\n        if (string.substr(i, len_substring) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpgjdpgfiv.d(16): Error: no property `length` for type `string`\n/tmp/tmpgjdpgfiv.d(17): Error: no property `length` for type `string`\n/tmp/tmpgjdpgfiv.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjdpgfiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpqnnbfzoc.d(16): Error: no property `length` for type `string`\n/tmp/tmpqnnbfzoc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnnbfzoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_length) {\n                count++;\n                break;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpq5weaey5.d(16): Error: no property `length` for type `string`\n/tmp/tmpq5weaey5.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5weaey5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    \n    for (long i = 0; i < string_length - substring_length + 1; i++)\n    {\n        if (string.substr(i, substring_length) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpjsi8l3ue.d(16): Error: no property `length` for type `string`\n/tmp/tmpjsi8l3ue.d(17): Error: no property `length` for type `string`\n/tmp/tmpjsi8l3ue.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsi8l3ue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    int substring_length = substring.length();\n    while (i < string.length() && j < substring_length) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp69xos_n2.d(18): Error: no property `length` for type `string`\n/tmp/tmp69xos_n2.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69xos_n2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp444wla_c.d(16): Error: no property `length` for type `string`\n/tmp/tmp444wla_c.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp444wla_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpwfd0nbjz.d(16): Error: no property `length` for type `string`\n/tmp/tmpwfd0nbjz.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfd0nbjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i += j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpnrlts5sh.d(16): Error: no property `length` for type `string`\n/tmp/tmpnrlts5sh.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrlts5sh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpnxb73ssg.d(16): Error: no property `length` for type `string`\n/tmp/tmpnxb73ssg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxb73ssg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpmnqlly4n.d(16): Error: no property `length` for type `string`\n/tmp/tmpmnqlly4n.d(16): Error: no property `length` for type `string`\n/tmp/tmpmnqlly4n.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnqlly4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpqnnbfzoc.d(16): Error: no property `length` for type `string`\n/tmp/tmpqnnbfzoc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnnbfzoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpqneqhu4j.d(16): Error: no property `length` for type `string`\n/tmp/tmpqneqhu4j.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqneqhu4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpmocowyp6.d(16): Error: no property `length` for type `string`\n/tmp/tmpmocowyp6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmocowyp6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpu3_6u5aa.d(18): Error: no property `length` for type `string`\n/tmp/tmpu3_6u5aa.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3_6u5aa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcslxkj_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        while (j < string_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n                if (j == substring_length) {\n                    j = 0;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp2r0k8xyu.d(16): Error: no property `length` for type `string`\n/tmp/tmp2r0k8xyu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2r0k8xyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpgflddjwm.d(16): Error: no property `length` for type `string`\n/tmp/tmpgflddjwm.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgflddjwm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_len)\n    {\n        j = 0;\n        while(j < substring_len)\n        {\n            if(string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp_0nee5c6.d(16): Error: no property `length` for type `string`\n/tmp/tmp_0nee5c6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0nee5c6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpqnnbfzoc.d(16): Error: no property `length` for type `string`\n/tmp/tmpqnnbfzoc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnnbfzoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(string[i] == substring[j]) {\n                count++;\n                if(i + j == substring.length()) {\n                    return count;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpukn89509.d(16): Error: no property `length` for type `string`\n/tmp/tmpukn89509.d(17): Error: no property `length` for type `string`\n/tmp/tmpukn89509.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukn89509.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcslxkj_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpdvllmvsa.d(16): Error: no property `length` for type `string`\n/tmp/tmpdvllmvsa.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvllmvsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpet9t9rqa.d(16): Error: no property `length` for type `string`\n/tmp/tmpet9t9rqa.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet9t9rqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpe1ctf9aa.d(16): Error: no property `length` for type `string`\n/tmp/tmpe1ctf9aa.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1ctf9aa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpnwp8kctt.d(16): Error: no property `length` for type `string`\n/tmp/tmpnwp8kctt.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnwp8kctt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    \n    for(long i = 0; i < len - len_substring + 1; i++)\n    {\n        if(string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpioy1cxgj.d(16): Error: no property `length` for type `string`\n/tmp/tmpioy1cxgj.d(17): Error: no property `length` for type `string`\n/tmp/tmpioy1cxgj.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpioy1cxgj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpd0heakty.d(16): Error: no property `length` for type `string`\n/tmp/tmpd0heakty.d(18): Error: no property `length` for type `string`\n/tmp/tmpd0heakty.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0heakty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpgaw6n5ol.d(16): Error: no property `length` for type `string`\n/tmp/tmpgaw6n5ol.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgaw6n5ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) \n    {\n        if (j < substring_length && string[i] == substring[j]) \n        {\n            i++;\n            j++;\n        }\n        else \n        {\n            j = 0;\n        }\n        if (j == substring_length) \n        {\n            count++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpic9gl5fe.d(16): Error: no property `length` for type `string`\n/tmp/tmpic9gl5fe.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic9gl5fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcncfwlt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp0_d4_a66.d(16): Error: no property `length` for type `string`\n/tmp/tmp0_d4_a66.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_d4_a66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length && string[i + j] == substring[j]) {\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += j;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp7k03zfyc.d(16): Error: no property `length` for type `string`\n/tmp/tmp7k03zfyc.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k03zfyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpgaw6n5ol.d(16): Error: no property `length` for type `string`\n/tmp/tmpgaw6n5ol.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgaw6n5ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\n    {\n        j = 0;\n        while (j < len_substring)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpm41fni2p.d(16): Error: no property `length` for type `string`\n/tmp/tmpm41fni2p.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm41fni2p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        while(j < sublen && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpaxixmw6s.d(16): Error: no property `length` for type `string`\n/tmp/tmpaxixmw6s.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxixmw6s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp4vci3bsf.d(16): Error: no property `length` for type `string`\n/tmp/tmp4vci3bsf.d(16): Error: no property `length` for type `string`\n/tmp/tmp4vci3bsf.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vci3bsf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while(i < string.length() && j < substring.length())\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpsdu51akk.d(18): Error: no property `length` for type `string`\n/tmp/tmpsdu51akk.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdu51akk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length && j < substring_length)\n    {\n        if (string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpa6b75h44.d(16): Error: no property `length` for type `string`\n/tmp/tmpa6b75h44.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6b75h44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j > 0)\n        {\n            j = 0;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmplkid63ix.d(16): Error: no property `length` for type `string`\n/tmp/tmplkid63ix.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkid63ix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            i++;\n            j++;\n        }\n        if (j == len_substring)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp554s0uhu.d(16): Error: no property `length` for type `string`\n/tmp/tmp554s0uhu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp554s0uhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp4vci3bsf.d(16): Error: no property `length` for type `string`\n/tmp/tmp4vci3bsf.d(16): Error: no property `length` for type `string`\n/tmp/tmp4vci3bsf.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vci3bsf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_length)\n    {\n        if(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        else\n        {\n            break;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpht2nsk02.d(16): Error: no property `length` for type `string`\n/tmp/tmpht2nsk02.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht2nsk02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length)\n    {\n        while (j < string_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpvwah732w.d(16): Error: no property `length` for type `string`\n/tmp/tmpvwah732w.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwah732w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            i++;\n            j++;\n        }\n        if (j == len_substring)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp554s0uhu.d(16): Error: no property `length` for type `string`\n/tmp/tmp554s0uhu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp554s0uhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpimer_cmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpimer_cmp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimer_cmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpmj6pb6v1.d(16): Error: no property `length` for type `string`\n/tmp/tmpmj6pb6v1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj6pb6v1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len - sublen + 1)\n    {\n        long j = 0;\n        while (j < sublen && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == sublen)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp8r9_s1wq.d(16): Error: no property `length` for type `string`\n/tmp/tmp8r9_s1wq.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r9_s1wq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    for (long i = 0; i < len_string_substring; i++) {\n        long j = i;\n        while (j < len_string_substring && string[j] == substring[i]) {\n            count++;\n            j++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmphjy1q_81.d(16): Error: no property `length` for type `string`\n/tmp/tmphjy1q_81.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjy1q_81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpq1jtbx2b.d(16): Error: no property `length` for type `string`\n/tmp/tmpq1jtbx2b.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1jtbx2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_length) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpticm89uy.d(16): Error: no property `length` for type `string`\n/tmp/tmpticm89uy.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpticm89uy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int sub_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_len) {\n        while (j < string_len && string[j] == substring[j]) {\n            j += 1;\n            if (j == sub_len) {\n                count += 1;\n                j = 0;\n            }\n        }\n        i += 1;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp3wd_grz0.d(16): Error: no property `length` for type `string`\n/tmp/tmp3wd_grz0.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wd_grz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < len_substring && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpffy2q173.d(16): Error: no property `length` for type `string`\n/tmp/tmpffy2q173.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffy2q173.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    while(i < len)\n    {\n        long j = 0;\n        while(j < substring_len && i + j < len)\n        {\n            if(string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                break;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpww0q7r5w.d(16): Error: no property `length` for type `string`\n/tmp/tmpww0q7r5w.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww0q7r5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpmocowyp6.d(16): Error: no property `length` for type `string`\n/tmp/tmpmocowyp6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmocowyp6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\n/tmp/tmp9feuystd.d(18): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9feuystd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpuescji1_.d(16): Error: no property `length` for type `string`\n/tmp/tmpuescji1_.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuescji1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpe1ctf9aa.d(16): Error: no property `length` for type `string`\n/tmp/tmpe1ctf9aa.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1ctf9aa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpa9xbaqak.d(16): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(18): Error: no property `length` for type `string`\n/tmp/tmpa9xbaqak.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xbaqak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcslxkj_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(16): Error: no property `length` for type `string`\n/tmp/tmpcslxkj_o.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcslxkj_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < len_substring) {\n            if (string[i+j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp552oxrp1.d(16): Error: no property `length` for type `string`\n/tmp/tmp552oxrp1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp552oxrp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp18c2hwb0.d(16): Error: no property `length` for type `string`\n/tmp/tmp18c2hwb0.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18c2hwb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmps0ekngdo.d(16): Error: no property `length` for type `string`\n/tmp/tmps0ekngdo.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0ekngdo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n            {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpcjn549rd.d(16): Error: no property `length` for type `string`\n/tmp/tmpcjn549rd.d(18): Error: no property `length` for type `string`\n/tmp/tmpcjn549rd.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjn549rd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    while (i < string_len - substring_len + 1)\n    {\n        if (string.substr(i, substring_len) == substring)\n        {\n            count++;\n            i += substring_len;\n        }\n        else\n            i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpsb3esiih.d(16): Error: no property `length` for type `string`\n/tmp/tmpsb3esiih.d(17): Error: no property `length` for type `string`\n/tmp/tmpsb3esiih.d(21): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsb3esiih.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp0_d4_a66.d(16): Error: no property `length` for type `string`\n/tmp/tmp0_d4_a66.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_d4_a66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpimer_cmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpimer_cmp.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimer_cmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n            i++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpb0mf28_s.d(16): Error: no property `length` for type `string`\n/tmp/tmpb0mf28_s.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0mf28_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_len && j < substring_len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            j = 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp9q4van6d.d(16): Error: no property `length` for type `string`\n/tmp/tmp9q4van6d.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q4van6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpwfd0nbjz.d(16): Error: no property `length` for type `string`\n/tmp/tmpwfd0nbjz.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfd0nbjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            }\n            else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp4jo1wkw3.d(16): Error: no property `length` for type `string`\n/tmp/tmp4jo1wkw3.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jo1wkw3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(18): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\n/tmp/tmpxcncfwlt.d(23): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcncfwlt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string - len_substring;\n    for(long i = 0; i < len_string_substring_overlap; i++)\n    {\n        if(string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp0ofcx_sz.d(16): Error: no property `length` for type `string`\n/tmp/tmp0ofcx_sz.d(17): Error: no property `length` for type `string`\n/tmp/tmp0ofcx_sz.d(22): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ofcx_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    while (i < string_length) {\n        long j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i += substring_length;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp06utzebl.d(16): Error: no property `length` for type `string`\n/tmp/tmp06utzebl.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06utzebl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring.compare(string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpu3qxdl3z.d(16): Error: no property `length` for type `string`\n/tmp/tmpu3qxdl3z.d(18): Error: no property `length` for type `string`\n/tmp/tmpu3qxdl3z.d(21): Error: no property `length` for type `string`\n/tmp/tmpu3qxdl3z.d(21): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3qxdl3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpuescji1_.d(16): Error: no property `length` for type `string`\n/tmp/tmpuescji1_.d(17): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuescji1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += substring_length;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp_h93vm4n.d(16): Error: no property `length` for type `string`\n/tmp/tmp_h93vm4n.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_h93vm4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpm_tqe0j5.d(16): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(18): Error: no property `length` for type `string`\n/tmp/tmpm_tqe0j5.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_tqe0j5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp6denqjkn.d(16): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(18): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `length` for type `string`\n/tmp/tmp6denqjkn.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6denqjkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp8sfp53bb.d(16): Error: no property `length` for type `string`\n/tmp/tmp8sfp53bb.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sfp53bb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpsbzebea9.d(16): Error: no property `length` for type `string`\n/tmp/tmpsbzebea9.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbzebea9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < len_substring && string[i] == substring[j]) {\n            j++;\n            i++;\n            count++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpyy3bkwzn.d(16): Error: no property `length` for type `string`\n/tmp/tmpyy3bkwzn.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyy3bkwzn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    if (sublen > len) return 0;\n    for (int i = 0; i < len - sublen + 1; i++) {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpvfb8khv3.d(16): Error: no property `length` for type `string`\n/tmp/tmpvfb8khv3.d(17): Error: no property `length` for type `string`\n/tmp/tmpvfb8khv3.d(20): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfb8khv3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpznj1xme8.d(16): Error: no property `length` for type `string`\n/tmp/tmpznj1xme8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznj1xme8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_len) {\n            count++;\n            i += substring_len;\n        }\n        else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpt7vhit_6.d(16): Error: no property `length` for type `string`\n/tmp/tmpt7vhit_6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7vhit_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        if (j == substring_length) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpgns9ufa9.d(16): Error: no property `length` for type `string`\n/tmp/tmpgns9ufa9.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgns9ufa9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring.compare(j, len, string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpvh251zpz.d(16): Error: no property `length` for type `string`\n/tmp/tmpvh251zpz.d(18): Error: no property `length` for type `string`\n/tmp/tmpvh251zpz.d(21): Error: no property `length` for type `string`\n/tmp/tmpvh251zpz.d(21): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvh251zpz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpn906ohqq.d(16): Error: no property `length` for type `string`\n/tmp/tmpn906ohqq.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn906ohqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        while (j < substring_length && string[i] == substring[j])\n        {\n            j++;\n            i++;\n        }\n        if (j == substring_length)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmp1y4j6kfm.d(16): Error: no property `length` for type `string`\n/tmp/tmp1y4j6kfm.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y4j6kfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n            {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpcjn549rd.d(16): Error: no property `length` for type `string`\n/tmp/tmpcjn549rd.d(18): Error: no property `length` for type `string`\n/tmp/tmpcjn549rd.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjn549rd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp1lcd_f5e.d(16): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(18): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(20): Error: no property `length` for type `string`\n/tmp/tmp1lcd_f5e.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lcd_f5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length)\n    {\n        while (j < string_length && i + j < string_length && string[i+j] == substring[j])\n        {\n            j++;\n        }\n        if (j == substring_length)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmpae9xapvg.d(16): Error: no property `length` for type `string`\n/tmp/tmpae9xapvg.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae9xapvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmp_rl9h7pz.d(16): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(18): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(20): Error: no property `length` for type `string`\n/tmp/tmp_rl9h7pz.d(20): Error: no property `compare` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rl9h7pz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "/tmp/tmpznj1xme8.d(16): Error: no property `length` for type `string`\n/tmp/tmpznj1xme8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznj1xme8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    if (sublen == 0)\n        return len;\n    \n    for (long i = 0; i < len - sublen + 1; i++)\n    {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "/tmp/tmplhz6mwkl.d(16): Error: no property `length` for type `string`\n/tmp/tmplhz6mwkl.d(17): Error: no property `length` for type `string`\n/tmp/tmplhz6mwkl.d(24): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhz6mwkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}