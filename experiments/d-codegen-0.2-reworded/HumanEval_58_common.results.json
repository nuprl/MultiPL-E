{
  "name": "HumanEval_58_common",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n",
  "tests": "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k, len1, len2;\n    long[] common = new long[0];\n    len1 = l1.length;\n    len2 = l2.length;\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp3pc8gzn1.d(16): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp3pc8gzn1.d(17): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmp3pc8gzn1.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pc8gzn1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] l3 = new long[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] r = new int[n + m];\n    int[] s = new int[n + m];\n    int[] t = new int[n + m];\n    int[] u = new int[n + m];\n    int[] v = new int[n + m];\n    int[] w = new int[n + m];\n    int[] x = new int[n + m];\n    int[] y = new int[n + m];\n    int[] z = new int[n + m];\n    int[] a = new int[n + m];\n    int[] b = new int[n + m];\n    int[] c = new int[n + m];\n    int[] d = new int[n + m];\n    int[] e = new int[n + m];\n    int[] f = new int[n + m];\n    int[] g = new int[n + m];\n    int[] h = new int[n + m];\n    int[] i = new int[n + m];\n    int[] j = new int[n + m];\n    int[] k = new int[n + m];\n    int[] l = new int[n + m];\n    int[] m = new int[n + m];\n    int[] n = new int[n + m];\n    int[] o = new int[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] r = new int[n + m];\n    int[] s = new int[n + m];\n    int[] t = new int[n + m];\n    int[] u = new int[n + m];\n    int[] v = new int[n + m];\n    int[] w = new int[n + m];\n    int[] x = new int[n + m];\n    int[] y = new int[n + m];\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpstnknifm.d(54): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstnknifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    \n    long[] l1_sorted = l1.clone();\n    long[] l2_sorted = l2.clone();\n    \n    Arrays.sort(l1_sorted);\n    Arrays.sort(l2_sorted);\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\n    {\n        if (l1_sorted[i] == l2_sorted[j])\n        {\n            ret = Arrays.append(ret, l1_sorted[i]);\n            i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpka12teoe.d(17): Error: no property `clone` for type `long[]`\n/tmp/tmpka12teoe.d(18): Error: no property `clone` for type `long[]`\n/tmp/tmpka12teoe.d(20): Error: undefined identifier `Arrays`\n/tmp/tmpka12teoe.d(21): Error: undefined identifier `Arrays`\n/tmp/tmpka12teoe.d(29): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpka12teoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[]) java.util.Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpp293md7q.d(22): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(res, res.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp293md7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                result = (long[]) std.concat(result, new long[]{l1_copy[i]});\n                l1_copy = (long[]) std.remove(l1_copy, i);\n                l2_copy = (long[]) std.remove(l2_copy, j);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp81lymcy0.d(24): Error: found `{` when expecting `,`\n/tmp/tmp81lymcy0.d(24): Error: found `}` when expecting `,`\n/tmp/tmp81lymcy0.d(24): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1_copy[i])`\n/tmp/tmp81lymcy0.d(25): Error: C style cast illegal, use `cast(long[])std.remove(l1_copy, i)`\n/tmp/tmp81lymcy0.d(26): Error: C style cast illegal, use `cast(long[])std.remove(l2_copy, j)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81lymcy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] l3 = new long[n + m];\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                l3[count++] = l1[i];\n                break;\n            }\n        }\n    }\n    if (count == 0)\n        return new long[0];\n    long[] l4 = new long[count];\n    for (k = 0; k < count; k++)\n        l4[k] = l3[k];\n    return l4;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpk81ucw5r.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpk81ucw5r.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk81ucw5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp9owhayx7.d(25): Error: C style cast illegal, use `cast(long[])java.lang.reflect.Array.set(result, k, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9owhayx7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpp9sdzs6k.d(33): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9sdzs6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpetfgvksf.d(21): Error: found `{` when expecting `,`\n/tmp/tmpetfgvksf.d(21): Error: found `}` when expecting `,`\n/tmp/tmpetfgvksf.d(21): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetfgvksf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] result = new long[n + m];\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                result[count++] = l1[i];\n                break;\n            }\n        }\n    }\n    if (count == 0) {\n        return result;\n    }\n    for (k = 0; k < count; k++) {\n        result[k] = result[k];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpg2gtnmhr.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpg2gtnmhr.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gtnmhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpoouzpp9e.d(22): Error: found `{` when expecting `,`\n/tmp/tmpoouzpp9e.d(22): Error: found `}` when expecting `,`\n/tmp/tmpoouzpp9e.d(22): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoouzpp9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpoyvsgi45.d(23): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyvsgi45.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuk_k2mgn.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk_k2mgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps75jt014.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps75jt014.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp9i631ez7.d(32): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i631ez7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = (long[]) std.concat(ret, new long[] {l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyh5kkbjv.d(18): Error: found `{` when expecting `,`\n/tmp/tmpyh5kkbjv.d(18): Error: found `}` when expecting `,`\n/tmp/tmpyh5kkbjv.d(18): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyh5kkbjv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpa_1amuya.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_1amuya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        if(!std.in(l1[i], temp))\n        {\n            temp = std.append(temp, l1[i]);\n        }\n    }\n    for(int i = 0; i < l2.length; i++)\n    {\n        if(!std.in(l2[i], temp))\n        {\n            temp = std.append(temp, l2[i]);\n        }\n    }\n    for(int i = 0; i < temp.length; i++)\n    {\n        if(std.in(temp[i], result))\n        {\n            result = std.remove(result, temp[i]);\n        }\n        else\n        {\n            result = std.append(result, temp[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpbwju07ir.d(18): Error: identifier expected following `.`, not `in`\n/tmp/tmpbwju07ir.d(25): Error: identifier expected following `.`, not `in`\n/tmp/tmpbwju07ir.d(32): Error: identifier expected following `.`, not `in`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwju07ir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[])res.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp9gwmpidl.d(22): Error: found `{` when expecting `,`\n/tmp/tmp9gwmpidl.d(22): Error: found `}` when expecting `,`\n/tmp/tmp9gwmpidl.d(22): Error: C style cast illegal, use `cast(long[])res.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gwmpidl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpr9u7an2x.d(33): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9u7an2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpl0rujxci.d(20): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0rujxci.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] common = new long[0];\n    int len1 = l1.length;\n    int len2 = l2.length;\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpo9va6q7d.d(16): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpo9va6q7d.d(17): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmpo9va6q7d.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9va6q7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmptldbh5qs.d(23): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptldbh5qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpadlr8d30.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadlr8d30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpjgu_a2th.d(19): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgu_a2th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpi4k_4rvv.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4k_4rvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmppxjt7cot.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxjt7cot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp_ac15nkl.d(21): Error: found `{` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: found `}` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: C style cast illegal, use `cast(long[])res.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ac15nkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpn0ujju10.d(27): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0ujju10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmptldbh5qs.d(23): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptldbh5qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        l1_copy[i] = l1_copy[i] - 1;\n    }\n    \n    for(int i = 0; i < l2_copy.length; i++)\n    {\n        l2_copy[i] = l2_copy[i] - 1;\n    }\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                ret = (long[])std.concat(ret, new long[]{l1_copy[i]});\n                l1_copy[i] = l1_copy[i] - 1;\n                l2_copy[j] = l2_copy[j] - 1;\n            }\n        }\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1rmyo3be.d(34): Error: found `{` when expecting `,`\n/tmp/tmp1rmyo3be.d(34): Error: found `}` when expecting `,`\n/tmp/tmp1rmyo3be.d(34): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1_copy[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rmyo3be.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpm8793hqn.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8793hqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp81c4y9h_.d(26): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81c4y9h_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    \n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5aq4tdmo.d(26): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aq4tdmo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuk_k2mgn.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk_k2mgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpv5rlsk4q.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5rlsk4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        l1_[i] = l1_[i] - 1;\n    }\n    for(int i = 0; i < l2_.length; i++)\n    {\n        l2_[i] = l2_[i] - 1;\n    }\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        for(int j = 0; j < l2_.length; j++)\n        {\n            if(l1_[i] == l2_[j])\n            {\n                ret = (long[]) std.concat(ret, new long[]{l1_[i]});\n                l1_[i] = -1;\n                l2_[j] = -1;\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpus_m8_1o.d(33): Error: found `{` when expecting `,`\n/tmp/tmpus_m8_1o.d(33): Error: found `}` when expecting `,`\n/tmp/tmpus_m8_1o.d(33): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1_[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus_m8_1o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                result[i] = l1[i];\n                break;\n            }\n        }\n    }\n    for (i = 0; i < len; i++) {\n        if (result[i] == 0) {\n            break;\n        }\n    }\n    if (i == len) {\n        return result;\n    }\n    for (k = i; k < len; k++) {\n        result[k] = 0;\n    }\n    for (i = 0; i < len; i++) {\n        if (result[i] == 0) {\n            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpwgjv3umr.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpwgjv3umr.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgjv3umr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = l1.length;\n    int m = l2.length;\n    while (i < n && j < m) {\n        if (l1[i] == l2[j]) {\n            l3 = (long[]) (java.lang.reflect.Array.set(l3, k, l1[i]));\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpeak2ao6p.d(22): Error: C style cast illegal, use `cast(long[])java.lang.reflect.Array.set(l3, k, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeak2ao6p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = (long[]) Array.add(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp2mf624p3.d(22): Error: C style cast illegal, use `cast(long[])Array.add(ret, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mf624p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps75jt014.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps75jt014.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp8h1mevmw.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8h1mevmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, n;\n    long[] l3 = new long[0];\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < l3.length; j++) {\n            if (l1[i] == l3[j] && l2[i] == l3[j])\n                break;\n        }\n        if (j == l3.length) {\n            l3 = (long[]) std.vector.resize(l3, l3.length + 1);\n            l3[l3.length - 1] = l1[i];\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpulgypyn7.d(25): Error: C style cast illegal, use `cast(long[])std.vector.resize(l3, l3.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulgypyn7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    Arrays.sort(l1_);\n    Arrays.sort(l2_);\n    int i = 0, j = 0;\n    while (i < l1_.length && j < l2_.length) {\n        if (l1_[i] == l2_[j]) {\n            ret = Arrays.copyOf(ret, ret.length + 1);\n            ret[ret.length - 1] = l1_[i];\n            i++;\n            j++;\n        } else if (l1_[i] < l2_[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpsyt3gt1m.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpsyt3gt1m.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmpsyt3gt1m.d(17): Error: undefined identifier `Arrays`\n/tmp/tmpsyt3gt1m.d(18): Error: undefined identifier `Arrays`\n/tmp/tmpsyt3gt1m.d(22): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyt3gt1m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps75jt014.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps75jt014.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpp9sdzs6k.d(33): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9sdzs6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k, n;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) add(l3, new long[] {l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpqnor2o4q.d(19): Error: found `{` when expecting `,`\n/tmp/tmpqnor2o4q.d(19): Error: found `}` when expecting `,`\n/tmp/tmpqnor2o4q.d(19): Error: C style cast illegal, use `cast(long[])add(l3, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnor2o4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpp8is8x6z.d(23): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8is8x6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmplhrvmkqw.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhrvmkqw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) std.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpupx6esi8.d(27): Error: found `{` when expecting `,`\n/tmp/tmpupx6esi8.d(27): Error: found `}` when expecting `,`\n/tmp/tmpupx6esi8.d(27): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupx6esi8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpsu4v6klf.d(19): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu4v6klf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    //sort the arrays\n    sort(l1_copy);\n    sort(l2_copy);\n    \n    //find the common elements\n    int i = 0;\n    int j = 0;\n    while(i < l1_copy.length && j < l2_copy.length)\n    {\n        if(l1_copy[i] == l2_copy[j])\n        {\n            result = append(result, l1_copy[i]);\n            i++;\n            j++;\n        }\n        else if(l1_copy[i] < l2_copy[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp2ghyft4u.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmp2ghyft4u.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmp2ghyft4u.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp2ghyft4u.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp2ghyft4u.d(29): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ghyft4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] common = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpwzumvcnd.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzumvcnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    long[] result = new long[0];\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp2b0d8zaz.d(21): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b0d8zaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j;\n    int n = l1.length;\n    int m = l2.length;\n    int[] c = new int[n + m];\n    int[] l = new int[n + m];\n    int[] r = new int[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] temp = new int[n + m];\n    int[] temp2 = new int[n + m];\n    int[] temp3 = new int[n + m];\n    int[] temp4 = new int[n + m];\n    int[] temp5 = new int[n + m];\n    int[] temp6 = new int[n + m];\n    int[] temp7 = new int[n + m];\n    int[] temp8 = new int[n + m];\n    int[] temp9 = new int[n + m];\n    int[] temp10 = new int[n + m];\n    int[] temp11 = new int[n + m];\n    int[] temp12 = new int[n + m];\n    int[] temp13 = new int[n + m];\n    int[] temp14 = new int[n + m];\n    int[] temp15 = new int[n + m];\n    int[] temp16 = new int[n + m];\n    int[] temp17 = new int[n + m];\n    int[] temp18 = new int[n + m];\n    int[] temp19 = new int[n + m];\n    int[] temp20 = new int[n + m];\n    int[] temp21 = new int[n + m];\n    int[] temp22 = new int[n + m];\n    int[] temp23 = new int[n + m];\n    int[] temp24 = new int[n + m];\n    int[] temp25 = new int[n + m];\n    int[] temp26 = new int[n + m];\n    int[] temp27 = new int[n + m];\n    int[] temp28 = new int[n + m];\n    int[] temp29 = new int[n + m];\n    int[] temp30 = new int[n + m];\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1x2qgh8y.d(52): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1x2qgh8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps75jt014.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps75jt014.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyea2lwp4.d(27): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyea2lwp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuk_k2mgn.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk_k2mgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps75jt014.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps75jt014.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpe80cux8q.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe80cux8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpkxocmv00.d(26): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxocmv00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5bgcpp87.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bgcpp87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpkxocmv00.d(26): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxocmv00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp9i631ez7.d(32): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i631ez7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpp0tvc0ae.d(19): Error: found `{` when expecting `,`\n/tmp/tmpp0tvc0ae.d(19): Error: found `}` when expecting `,`\n/tmp/tmpp0tvc0ae.d(19): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0tvc0ae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l3 = (long[])l3.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpbdx8yib9.d(18): Error: found `{` when expecting `,`\n/tmp/tmpbdx8yib9.d(18): Error: found `}` when expecting `,`\n/tmp/tmpbdx8yib9.d(18): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdx8yib9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1jmqqvkg.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jmqqvkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpe80cux8q.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe80cux8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1jmqqvkg.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jmqqvkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                temp = new long[result.length + 1];\n                for(int k = 0; k < result.length; k++)\n                {\n                    temp[k] = result[k];\n                }\n                temp[result.length] = l1[i];\n                result = temp;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw3qkskxm.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmpw3qkskxm.__unittest_L34_C1() [0x4280f6]\n??:? void tmpw3qkskxm.__modtest() [0x4283f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c727]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430845]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b591]\n??:? runModuleUnitTests [0x42c4fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l = (long[]) std.vector.append(l, l1[i]);\n                break;\n            }\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp16na0uxi.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(l, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16na0uxi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] common = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp49ml2f9u.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49ml2f9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpjgu_a2th.d(19): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgu_a2th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpjgu_a2th.d(19): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgu_a2th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n1 = l1.length;\n    int n2 = l2.length;\n    int m = n1 < n2 ? n1 : n2;\n    int[] index = new int[m];\n    int[] count = new int[m];\n    long[] result = new long[m];\n    for (i = 0; i < m; i++) {\n        index[i] = i;\n        count[i] = 1;\n    }\n    for (i = 0; i < n1; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                index[j] = i;\n                count[j]++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        if (count[i] == 1) {\n            result[i] = l1[index[i]];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp7ybo_oil.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp7ybo_oil.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ybo_oil.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l3 = append(l3, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp7lil6v0n.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lil6v0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1.length; i++)\n    {\n        int index = binarySearch(l2_copy, l1[i]);\n        if(index >= 0)\n        {\n            result = concat(result, l1[i]);\n            l2_copy = remove(l2_copy, index);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpo7f2akso.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpo7f2akso.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmpo7f2akso.d(20): Error: undefined identifier `binarySearch`\n/tmp/tmpo7f2akso.d(23): Error: undefined identifier `concat`\n/tmp/tmpo7f2akso.d(24): Error: undefined identifier `remove`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7f2akso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpl9oc0ip0.d(22): Error: found `{` when expecting `,`\n/tmp/tmpl9oc0ip0.d(22): Error: found `}` when expecting `,`\n/tmp/tmpl9oc0ip0.d(22): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9oc0ip0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0, j = 0, k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l3 = (long[]) l3.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpt_9ddae5.d(22): Error: found `{` when expecting `,`\n/tmp/tmpt_9ddae5.d(22): Error: found `}` when expecting `,`\n/tmp/tmpt_9ddae5.d(22): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_9ddae5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] common = new long[0];\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1t76f7xb.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp1t76f7xb.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmp1t76f7xb.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t76f7xb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyea2lwp4.d(27): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyea2lwp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpro0kazap.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro0kazap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpm7bymtpm.d(20): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7bymtpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpsu4v6klf.d(19): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu4v6klf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpoouzpp9e.d(22): Error: found `{` when expecting `,`\n/tmp/tmpoouzpp9e.d(22): Error: found `}` when expecting `,`\n/tmp/tmpoouzpp9e.d(22): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoouzpp9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyea2lwp4.d(27): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyea2lwp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = Arrays.copyOf(ret, ret.length + 1);\n            ret[ret.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpih0afug2.d(25): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpih0afug2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                ret = (long[])append(ret, l1[i]);\n                break;\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpb8hlvvqi.d(21): Error: C style cast illegal, use `cast(long[])append(ret, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8hlvvqi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5bgcpp87.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bgcpp87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                ret = (long[]) std.vector.append(ret, l1_copy[i]);\n                l1_copy[i] = l2_copy[j] = 0;\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuucu6f2o.d(24): Error: C style cast illegal, use `cast(long[])std.vector.append(ret, l1_copy[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuucu6f2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6r56w57w.d(23): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6r56w57w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6zqkndo3.d(28): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zqkndo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp8h1mevmw.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8h1mevmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpub51er43.d(23): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpub51er43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 < len2 ? len1 : len2;\n    long[] common = new long[len];\n    for (i = 0; i < len; i++) {\n        common[i] = l1[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (common[i] == l2[j]) {\n                common[j] = l2[j];\n                for (k = j + 1; k < len; k++) {\n                    if (common[j] == l2[k]) {\n                        common[k] = l2[k];\n                    }\n                }\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpaqtlwydk.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpaqtlwydk.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqtlwydk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyf89sy_a.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf89sy_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpbjlk89of.d(19): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjlk89of.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5cprsbv4.d(30): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cprsbv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpve6rldy1.d(24): Error: C style cast illegal, use `cast(long[])java.lang.reflect.Array.set(result, k, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpve6rldy1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyf89sy_a.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf89sy_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmprtg8r_1t.d(20): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtg8r_1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp56mfx7is.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56mfx7is.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpp0tvc0ae.d(19): Error: found `{` when expecting `,`\n/tmp/tmpp0tvc0ae.d(19): Error: found `}` when expecting `,`\n/tmp/tmpp0tvc0ae.d(19): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0tvc0ae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l2[j] < l1[i]) {\n            j++;\n        } else {\n            res = Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp78cve3rb.d(22): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78cve3rb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpa_1amuya.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_1amuya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpmsy873tg.d(29): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsy873tg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyf89sy_a.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf89sy_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) std.vector.append(l3, l1[i]);\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpq5l98rfc.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(l3, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5l98rfc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n                result[result.length - 1] = l1[i];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpfwy0ijbh.d(21): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwy0ijbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l3 = append(l3, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpb4bt7voz.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4bt7voz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpvezx0j78.d(21): Error: found `{` when expecting `,`\n/tmp/tmpvezx0j78.d(21): Error: found `}` when expecting `,`\n/tmp/tmpvezx0j78.d(21): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvezx0j78.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6j5iowxr.d(22): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6j5iowxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpsf8g8gm1.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsf8g8gm1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n    int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 = 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n    int w1 = 0;\n    int x1 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n    int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i2 = 0;\n    int j2 = 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n    int o2 = 0;\n    int p2 = 0;\n    int q2 = 0;\n    int r2 = 0;\n    int s2 = 0;\n    int t2 = 0;\n    int u2 = 0;\n    int v2\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp0swebdwq.d(81): Error: semicolon expected, not `unittest`\n/tmp/tmp0swebdwq.d(81): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0swebdwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp9owhayx7.d(25): Error: C style cast illegal, use `cast(long[])java.lang.reflect.Array.set(result, k, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9owhayx7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = (long[]) std.vector.append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp674lw42p.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(ret, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp674lw42p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpr9u7an2x.d(33): Error: C style cast illegal, use `cast(long[])Array.add(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9u7an2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[] {l1[i]});\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpgj68luwu.d(18): Error: found `{` when expecting `,`\n/tmp/tmpgj68luwu.d(18): Error: found `}` when expecting `,`\n/tmp/tmpgj68luwu.d(18): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgj68luwu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyf89sy_a.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf89sy_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmplm4_0095.d(27): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm4_0095.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    int i = 0, j = 0;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    if (len1 < len2) {\n        temp = l1;\n        l1 = l2;\n        l2 = temp;\n        len1 = len2;\n        len2 = l1.length;\n    }\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                temp = new long[result.length + 1];\n                System.arraycopy(result, 0, temp, 0, result.length);\n                temp[result.length] = l1[i];\n                result = temp;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpzhfcsze2.d(17): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpzhfcsze2.d(18): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmpzhfcsze2.d(24): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpzhfcsze2.d(30): Error: undefined identifier `System`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhfcsze2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            res = (long[]) java.util.Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp3w7r6q1t.d(18): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(res, res.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3w7r6q1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] common = new long[0];\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp1t76f7xb.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp1t76f7xb.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmp1t76f7xb.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t76f7xb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    int l1_len = l1.length, l2_len = l2.length;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpche4ecnj.d(18): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpche4ecnj.d(18): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmpche4ecnj.d(25): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpche4ecnj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l = append(l, l1[i]);\n                break;\n            }\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpboa8wxm5.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboa8wxm5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n    int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 = 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n    int w1 = 0;\n    int x1 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n    int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i2 = 0;\n    int j2 = 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n    int o2 = 0;\n    int p2 = 0;\n    int q2 = 0;\n    int r2 = 0;\n    int s2 = 0;\n    int t2 = 0;\n    int\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyk8ibmve.d(81): Error: no identifier for declarator `int`\n/tmp/tmpyk8ibmve.d(81): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk8ibmve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpyf89sy_a.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf89sy_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    int count = 0;\n    for (i = 0; i < len; i++) {\n        if (l1[i] == l2[i]) {\n            result[count++] = l1[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpo2v6ivs8.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpo2v6ivs8.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2v6ivs8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpad4438yp.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad4438yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpruc4pdpb.d(31): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpruc4pdpb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpeklmlt6w.d(20): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeklmlt6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0) return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = append(res, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6960z_dv.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6960z_dv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1.length; i++) {\n        l1_copy[i] = l1[i];\n    }\n    for (int i = 0; i < l2.length; i++) {\n        l2_copy[i] = l2[i];\n    }\n    \n    Arrays.sort(l1_copy);\n    Arrays.sort(l2_copy);\n    \n    int l1_index = 0;\n    int l2_index = 0;\n    \n    while (l1_index < l1_copy.length && l2_index < l2_copy.length) {\n        if (l1_copy[l1_index] == l2_copy[l2_index]) {\n            result = (long[]) ArrayUtils.add(result, l1_copy[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1_copy[l1_index] < l2_copy[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6xew77w5.d(33): Error: C style cast illegal, use `cast(long[])ArrayUtils.add(result, l1_copy[l1_index])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xew77w5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    int[] index = new int[n + 1];\n    int[] count = new int[n + 1];\n    int[] result = new int[m];\n    int[] temp = new int[n + 1];\n    \n    for (i = 0; i <= n; i++) {\n        index[i] = 0;\n        count[i] = 0;\n    }\n    for (i = 0; i < m; i++) {\n        for (j = 0; j <= n; j++) {\n            if (l1[j] == l2[i]) {\n                index[j] = i;\n                count[j]++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i <= n; i++) {\n        if (count[i] > 0) {\n            temp[i] = index[i];\n        }\n    }\n    for (i = 0; i < m; i++) {\n        result[i] = l2[temp[i]];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpgylr8rmd.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpgylr8rmd.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\n/tmp/tmpgylr8rmd.d(41): Error: cannot implicitly convert expression `l2[cast(ulong)temp[cast(ulong)i]]` of type `long` to `int`\n/tmp/tmpgylr8rmd.d(43): Error: cannot implicitly convert expression `result` of type `int[]` to `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgylr8rmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpnvw28_la.d(23): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvw28_la.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp7xou4yqx.d(20): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xou4yqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5cprsbv4.d(30): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cprsbv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpl9xs69o6.d(25): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9xs69o6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) \n    {\n        for (int j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                result = append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpztc3o_04.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztc3o_04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp_ac15nkl.d(21): Error: found `{` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: found `}` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: C style cast illegal, use `cast(long[])res.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ac15nkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0cd1kqnh.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cd1kqnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = new long[l1.length];\n    long[] l2_copy = new long[l2.length];\n    \n    for (int i = 0; i < l1.length; i++)\n    {\n        l1_copy[i] = l1[i];\n    }\n    for (int i = 0; i < l2.length; i++)\n    {\n        l2_copy[i] = l2[i];\n    }\n    \n    Arrays.sort(l1_copy);\n    Arrays.sort(l2_copy);\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1_copy.length && j < l2_copy.length)\n    {\n        if (l1_copy[i] == l2_copy[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1_copy[i];\n            i++;\n            j++;\n        }\n        else if (l1_copy[i] < l2_copy[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpi9rf3k0l.d(36): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9rf3k0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[])res.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp74pq_ib6.d(23): Error: found `{` when expecting `,`\n/tmp/tmp74pq_ib6.d(23): Error: found `}` when expecting `,`\n/tmp/tmp74pq_ib6.d(23): Error: C style cast illegal, use `cast(long[])res.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74pq_ib6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) (std.concat(result, new long[]{l1[i]}));\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpi1w0nc3k.d(19): Error: found `{` when expecting `,`\n/tmp/tmpi1w0nc3k.d(19): Error: found `}` when expecting `,`\n/tmp/tmpi1w0nc3k.d(19): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1w0nc3k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    if (l1.length < l2.length)\n    {\n        long[] temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    for (int i = 0; i < l1.length; i++)\n    {\n        if (l1[i] == l2[i])\n        {\n            result = append(result, l1[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpxomkepcu.d(27): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxomkepcu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpvezx0j78.d(21): Error: found `{` when expecting `,`\n/tmp/tmpvezx0j78.d(21): Error: found `}` when expecting `,`\n/tmp/tmpvezx0j78.d(21): Error: C style cast illegal, use `cast(long[])l3.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvezx0j78.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1_copy.length; i++) {\n        for (int j = 0; j < l2_copy.length; j++) {\n            if (l1_copy[i] == l2_copy[j]) {\n                result = (long[]) std.concat(result, new long[]{l1_copy[i]});\n                l1_copy[i] = 0;\n                l2_copy[j] = 0;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp4jk03l9v.d(21): Error: found `{` when expecting `,`\n/tmp/tmp4jk03l9v.d(21): Error: found `}` when expecting `,`\n/tmp/tmp4jk03l9v.d(21): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1_copy[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jk03l9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuk_k2mgn.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk_k2mgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpbhmoohzf.d(23): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhmoohzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpqeitpkuz.d(20): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqeitpkuz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        for(int j = 0; j < l2_.length; j++)\n        {\n            if(l1_[i] == l2_[j])\n            {\n                l1_[i] = 0;\n                l2_[j] = 0;\n                ret = (long[])std.concat(ret, new long[]{l1_[i]});\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp8b5nhvx7.d(26): Error: found `{` when expecting `,`\n/tmp/tmp8b5nhvx7.d(26): Error: found `}` when expecting `,`\n/tmp/tmp8b5nhvx7.d(26): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1_[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8b5nhvx7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = l1.length;\n    int len2 = l2.length;\n    long[] result = new long[0];\n    while (i < len && j < len2) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            k++;\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpwkrutqex.d(26): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkrutqex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpad4438yp.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad4438yp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp_ac15nkl.d(21): Error: found `{` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: found `}` when expecting `,`\n/tmp/tmp_ac15nkl.d(21): Error: C style cast illegal, use `cast(long[])res.concat(new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ac15nkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[] { l1[i] });\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpxw0ccrf5.d(18): Error: found `{` when expecting `,`\n/tmp/tmpxw0ccrf5.d(18): Error: found `}` when expecting `,`\n/tmp/tmpxw0ccrf5.d(18): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxw0ccrf5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpg8zodre8.d(22): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8zodre8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    if (l1.length < l2.length)\n    {\n        long[] temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmphxnriimk.d(29): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxnriimk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                ret = (long[])std.concat(ret, new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpzjlo1x6x.d(21): Error: found `{` when expecting `,`\n/tmp/tmpzjlo1x6x.d(21): Error: found `}` when expecting `,`\n/tmp/tmpzjlo1x6x.d(21): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjlo1x6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                ret = (long[]) std.concat(ret, new long[]{l1[i]});\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmprgvvo91k.d(18): Error: found `{` when expecting `,`\n/tmp/tmprgvvo91k.d(18): Error: found `}` when expecting `,`\n/tmp/tmprgvvo91k.d(18): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgvvo91k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k, n;\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    n = l1.length < l2.length ? l1.length : l2.length;\n    for (i = 0; i < n; i++) {\n        if (l1[i] == l2[i]) {\n            result = (long[]) std.vector.append(result, l1[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpdi1xcnln.d(21): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi1xcnln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpg8m58_if.d(24): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8m58_if.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]) i++;\n        else j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp090sp6kl.d(21): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp090sp6kl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else {\n            ret = (long[]) std.vector.append(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpip0yg_l0.d(24): Error: C style cast illegal, use `cast(long[])std.vector.append(ret, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpip0yg_l0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_unique = new long[l1.length];\n    long[] l2_unique = new long[l2.length];\n    int l1_unique_count = 0;\n    int l2_unique_count = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n        if(l1_unique_count == 0)\n        {\n            l1_unique[l1_unique_count] = l1[i];\n            l1_unique_count++;\n        }\n        else\n        {\n            if(l1[i] == l1_unique[l1_unique_count - 1])\n            {\n                l1_unique[l1_unique_count - 1] = l1[i];\n            }\n            else\n            {\n                l1_unique[l1_unique_count] = l1[i];\n                l1_unique_count++;\n            }\n        }\n    }\n    for(int i = 0; i < l2.length; i++)\n    {\n        if(l2_unique_count == 0)\n        {\n            l2_unique[l2_unique_count] = l2[i];\n            l2_unique_count++;\n        }\n        else\n        {\n            if(l2[i] == l2_unique[l2_unique_count - 1])\n            {\n                l2_unique[l2_unique_count - 1] = l2[i];\n            }\n            else\n            {\n                l2_unique[l2_unique_count] = l2[i];\n                l2_unique_count++;\n            }\n        }\n    }\n    for(int i = 0; i < l1_unique_count; i++)\n    {\n        for(int j = 0; j < l2_unique_count; j++)\n        {\n            if(l1_unique[i] == l2_unique[j])\n            {\n                result = (long[])std.concat(result, new long[]{l1_unique[i]});\n            }\n        \nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp7bs5hrg5.d(65): Error: found `{` when expecting `,`\n/tmp/tmp7bs5hrg5.d(65): Error: found `}` when expecting `,`\n/tmp/tmp7bs5hrg5.d(65): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1_unique[i])`\n/tmp/tmp7bs5hrg5.d(68): Error: found `unittest` instead of statement\n/tmp/tmp7bs5hrg5.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7bs5hrg5.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bs5hrg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpvs5n0vg6.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs5n0vg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpk2dd47tm.d(18): Error: C style cast illegal, use `cast(long[])std.vector.append(result, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2dd47tm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpq8qwjviv.d(24): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8qwjviv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 < len2 ? len1 : len2;\n    long[] res = new long[len];\n    for (i = 0; i < len; i++) {\n        res[i] = l1[i] < l2[i] ? l1[i] : l2[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 0; j < len; j++) {\n            if (res[i] == l2[j]) {\n                res[i] = l1[j];\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpujv_l8ca.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpujv_l8ca.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujv_l8ca.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) std.vector.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpqwo6g_te.d(18): Error: found `{` when expecting `,`\n/tmp/tmpqwo6g_te.d(18): Error: found `}` when expecting `,`\n/tmp/tmpqwo6g_te.d(18): Error: C style cast illegal, use `cast(long[])std.vector.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwo6g_te.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = l1[i] < l2[i] ? l1[i] : l2[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (result[i] == result[j]) {\n                for (k = 0; k < len; k++) {\n                    if (l1[k] == result[i] || l2[k] == result[i]) {\n                        result[j] = -1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpr0w3tfkg.d(15): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmpr0w3tfkg.d(16): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0w3tfkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmppxjt7cot.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxjt7cot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmps3w6xtjp.d(21): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3w6xtjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                res = (long[])res.clone();\n                res[res.length - 1] = l1_copy[i];\n                break;\n            }\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpm0te8pxc.d(24): Error: C style cast illegal, use `cast(long[])res.clone()`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0te8pxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.clone();\n    long[] l2_sorted = l2.clone();\n    sort(l1_sorted);\n    sort(l2_sorted);\n    int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length) {\n        if (l1_sorted[i] == l2_sorted[j]) {\n            result = append(result, l1_sorted[i]);\n            i++;\n            j++;\n        } else if (l1_sorted[i] < l2_sorted[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpb4cv8kkt.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpb4cv8kkt.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmpb4cv8kkt.d(17): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpb4cv8kkt.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpb4cv8kkt.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4cv8kkt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l = append(l, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp49papckw.d(19): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49papckw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpuk_k2mgn.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk_k2mgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k, n;\n    long[] l3;\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    l3 = new long[n];\n    i = j = 0;\n    while (i < n && j < n) {\n        if (l1[i] == l2[j]) {\n            l3[k++] = l1[i];\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5zeo802x.d(16): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp5zeo802x.d(18): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zeo802x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            ret = (long[]) Array.add(ret, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]) i++;\n        else j++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpboi1s3r5.d(21): Error: C style cast illegal, use `cast(long[])Array.add(ret, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboi1s3r5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp6cu7k60b.d(31): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cu7k60b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k, n;\n    long[] res;\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    res = new long[n];\n    for (i = 0; i < n; i++) {\n        res[i] = l1[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (l1[i] == l2[j]) {\n                res[i] = l1[i];\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp_eglaus4.d(16): Error: cannot implicitly convert expression `l1.length` of type `ulong` to `int`\n/tmp/tmp_eglaus4.d(18): Error: cannot implicitly convert expression `l2.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eglaus4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) add(l3, new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpn2a6q8jw.d(18): Error: found `{` when expecting `,`\n/tmp/tmpn2a6q8jw.d(18): Error: found `}` when expecting `,`\n/tmp/tmpn2a6q8jw.d(18): Error: C style cast illegal, use `cast(long[])add(l3, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2a6q8jw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpvs5n0vg6.d(22): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs5n0vg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp7r76d7dy.d(25): Error: C style cast illegal, use `cast(long[])java.lang.reflect.Array.set(result, k, l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r76d7dy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) \n    {\n        for (int j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                result = (long[]) std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp24w38_o6.d(21): Error: found `{` when expecting `,`\n/tmp/tmp24w38_o6.d(21): Error: found `}` when expecting `,`\n/tmp/tmp24w38_o6.d(21): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24w38_o6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            ret = (long[]) std.concat(ret, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpprtlof20.d(28): Error: found `{` when expecting `,`\n/tmp/tmpprtlof20.d(28): Error: found `}` when expecting `,`\n/tmp/tmpprtlof20.d(28): Error: C style cast illegal, use `cast(long[])std.concat(ret, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprtlof20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp8h1mevmw.d(23): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8h1mevmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l1_copy[i] = l2[j];\n                l2_copy[j] = l1[i];\n            }\n        }\n    }\n    \n    for (int i = 0; i < l1_copy.length; i++) {\n        if (l1_copy[i] != l2_copy[i]) {\n            result = concat(result, new long[] {l1_copy[i]});\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpzykq3und.d(29): Error: found `{` when expecting `,`\n/tmp/tmpzykq3und.d(29): Error: found `}` when expecting `,`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzykq3und.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    int i, j, k;\n    long[] common = new long[0];\n    for (i = 0; i < l1.length; i++) \n    {\n        for (j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                for (k = 0; k < common.length; k++) \n                {\n                    if (l1[i] == common[k]) \n                    {\n                        break;\n                    }\n                }\n                if (k == common.length) \n                {\n                    common = (long[]) common.clone();\n                    common[common.length] = l1[i];\n                }\n            }\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpdhcxg6dx.d(31): Error: C style cast illegal, use `cast(long[])common.clone()`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhcxg6dx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpp8is8x6z.d(23): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8is8x6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] l = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l[k] = l1[i];\n            k++;\n            i++;\n            j++;\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5w6d850b.d(24): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmp5w6d850b.common(long[], long[]) [0x427f16]\n??:? void tmp5w6d850b.__unittest_L32_C1() [0x42803f]\n??:? void tmp5w6d850b.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430779]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmppthy95ow.d(18): Error: found `{` when expecting `,`\n/tmp/tmppthy95ow.d(18): Error: found `}` when expecting `,`\n/tmp/tmppthy95ow.d(18): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppthy95ow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp2a07quif.d(32): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2a07quif.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpeklmlt6w.d(20): Error: C style cast illegal, use `cast(long[])java.util.Arrays.copyOf(result, result.length + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeklmlt6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                res = (long[]) std.concat(res, new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp4rgon7t5.d(18): Error: found `{` when expecting `,`\n/tmp/tmp4rgon7t5.d(18): Error: found `}` when expecting `,`\n/tmp/tmp4rgon7t5.d(18): Error: C style cast illegal, use `cast(long[])std.concat(res, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rgon7t5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                result = (long[])std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpi6gij9ay.d(21): Error: found `{` when expecting `,`\n/tmp/tmpi6gij9ay.d(21): Error: found `}` when expecting `,`\n/tmp/tmpi6gij9ay.d(21): Error: C style cast illegal, use `cast(long[])std.concat(result, new long[], l1[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6gij9ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}