{
  "name": "HumanEval_56_correct_bracketing",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n",
  "tests": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left_bracket = 0;\n    int right_bracket = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left_bracket++;\n        }\n        if (brackets[i] == '>') {\n            right_bracket++;\n        }\n    }\n    return left_bracket == right_bracket;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp1liu68kc.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1liu68kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpg4x1aer4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4x1aer4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmr2uau8l.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmr2uau8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpu2fgrm5s.d(22): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(32): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(35): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fgrm5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            i = j;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwiwxt9oo.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiwxt9oo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr27kg_xq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27kg_xq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps8v338i7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8v338i7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                i = j + 1;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxl871r09.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxl871r09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            if (j - i != 2) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_mvzaa1q.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_mvzaa1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n    } else {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmliwas8k.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmliwas8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwbi620ly.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbi620ly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    if (open == close) {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpqw4uepcm.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw4uepcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    if (count != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxzdgkvkh.d(22): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(32): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(35): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzdgkvkh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening = 0;\n    int closing = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            opening++;\n        }\n        else if (brackets[i] == '>') {\n            closing++;\n        }\n        i++;\n    }\n    if (opening != closing) {\n        return false;\n    }\n    i = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (j - i != closing) {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7igu9ljl.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7igu9ljl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j] != '>') {\n            j--;\n            continue;\n        }\n        if (i == j) return true;\n        if (brackets[i+1] == '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j-1] == '>') {\n            j--;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmh6yeb30.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmh6yeb30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptbvhyxin.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbvhyxin.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(brackets[i] == '<')\n            open++;\n        else if(brackets[i] == '>')\n        {\n            if(open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp6xddva16.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xddva16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppw9odei8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw9odei8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptpiendfi.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpiendfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppfg25otg.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfg25otg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpkle_o5ot.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkle_o5ot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptz0z3a0s.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptz0z3a0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpgs9dvclb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs9dvclb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppfg25otg.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfg25otg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n        }\n        if (brackets[i] == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n    if (opening_brackets != closing_brackets) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j++;\n        }\n        i++;\n    }\n    if (j != opening_brackets) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp66fidhki.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66fidhki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            open--;\n        }\n        if (open < 0) {\n            return false;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp9npxo_f0.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9npxo_f0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '<' && brackets[j] == '>') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '<' || brackets[i] == '>') return false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpw5u6jw8u.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5u6jw8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\n            open_brackets++;\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0)\n                return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpzknrrvt3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzknrrvt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpgs9dvclb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs9dvclb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return (open == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpvnydq7zt.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnydq7zt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpg4x1aer4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4x1aer4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp0skdid25.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0skdid25.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) return false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpt47ec1nu.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt47ec1nu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp03590ni7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03590ni7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmt3xmmxy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt3xmmxy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (brackets[i] != '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j] != '>') {\n            j--;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpikdgoez1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikdgoez1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp99z1w9_c.d(21): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(24): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99z1w9_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp03590ni7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03590ni7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpygun6tya.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygun6tya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = len-1;\n    while (i < len && j >= 0) {\n        if (brackets[i] == '<' && brackets[j] == '>') {\n            i++;\n            j--;\n        } else if (brackets[i] == '<') {\n            return false;\n        } else if (brackets[j] == '>') {\n            return false;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpyuvpedth.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyuvpedth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    if (open != close) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == '>') {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp0a6d559c.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a6d559c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp9uhg8abf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uhg8abf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwbi620ly.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbi620ly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmebgrohj.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmebgrohj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp3dpafevk.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dpafevk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpg4x1aer4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4x1aer4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') left++;\n        if (brackets[i] == '>') right++;\n    }\n    if (left == right) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppmztdf3m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmztdf3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp0skdid25.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0skdid25.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpygun6tya.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygun6tya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppfg25otg.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfg25otg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpu2fgrm5s.d(22): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(32): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(35): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fgrm5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    if (open != 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp2b8wg4b4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b8wg4b4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7dir4ji4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dir4ji4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp9uhg8abf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uhg8abf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j] != '>') {\n            j--;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp2p47a6_8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p47a6_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left != right) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            if (i + 1 < len && brackets[i+1] == '>') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpbmtl3xks.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmtl3xks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmt3xmmxy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt3xmmxy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpkle_o5ot.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkle_o5ot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp2lqt6_0n.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lqt6_0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j++;\n        }\n        if (brackets[i] == '>') {\n            j--;\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr2b7wc3j.d(22): Error: no property `length` for type `string`\n/tmp/tmpr2b7wc3j.d(33): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2b7wc3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    if (left == right) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpjpohxald.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpohxald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = len-1;\n    while(i < j) {\n        if(brackets[i] == '<' && brackets[j] == '>') {\n            j--;\n        } else if(brackets[i] == '<' && brackets[j] != '>') {\n            return false;\n        } else if(brackets[i] != '<' && brackets[j] == '>') {\n            return false;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpi85n4n82.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi85n4n82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpgs9dvclb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs9dvclb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    if (open != close) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            if (i + 1 < len && brackets[i + 1] != '>') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpas2k9mh9.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpas2k9mh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return (open == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmprqxqrq71.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqxqrq71.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j++;\n        }\n        if (brackets[i] == '>') {\n            j--;\n        }\n        i++;\n    }\n    if (j != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpbqu7kfeg.d(22): Error: no property `length` for type `string`\n/tmp/tmpbqu7kfeg.d(33): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqu7kfeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_dnzucg7.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dnzucg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpy21oufd7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy21oufd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7dir4ji4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dir4ji4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxmd2di8q.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmd2di8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpgs9dvclb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs9dvclb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp9uhg8abf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uhg8abf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>')\n                j++;\n            if (j == n)\n                return false;\n            if (brackets[j] == '<')\n                j++;\n            if (j < n && brackets[j] == '>')\n                j++;\n            if (j < n && brackets[j] != '>')\n                return false;\n            i = j;\n        }\n        else\n            i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpevg2hlpk.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevg2hlpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp54ybdfo9.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54ybdfo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptpiendfi.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpiendfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != count) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpaet8t38g.d(22): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(32): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(35): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaet8t38g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left == right) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_m86nfql.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_m86nfql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7dir4ji4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dir4ji4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwhhq6lnl.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhhq6lnl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>')\n            close++;\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp8cneq_0o.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cneq_0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpyxhp2v0s.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxhp2v0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptz0z3a0s.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptz0z3a0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>')\n            close++;\n        else if (brackets[i] == '<' && open > close)\n            return false;\n        else if (brackets[i] == '>' && open < close)\n            return false;\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpbgdbq9to.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgdbq9to.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int open_brackets = 0;\n    int close_brackets = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        if (brackets[i] == '>') {\n            close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpqoo2iw8b.d(23): Error: no property `length` for type `string`\n/tmp/tmpqoo2iw8b.d(37): Error: no property `length` for type `string`\n/tmp/tmpqoo2iw8b.d(40): Error: no property `length` for type `string`\n/tmp/tmpqoo2iw8b.d(43): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqoo2iw8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return (open == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp8v9udpei.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8v9udpei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left != right) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            if (i + 1 < len && brackets[i+1] == '>') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpbmtl3xks.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmtl3xks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpnhiqqk9d.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhiqqk9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp2dev2jxe.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dev2jxe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                i = j + 1;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpcqochpef.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqochpef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j - 1] != '>') {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpo_qs3w0w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_qs3w0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left != right) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpehaykrry.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehaykrry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len-1;\n    while (i < j) {\n        if (brackets[i] == '<' && brackets[j] == '>') {\n            j--;\n        } else if (brackets[i] == '<' && brackets[j] != '>') {\n            return false;\n        } else if (brackets[i] != '<' && brackets[j] == '>') {\n            return false;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpiraltf62.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiraltf62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppr0mphj0.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppr0mphj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpg4x1aer4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4x1aer4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpvge3v32k.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvge3v32k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr27kg_xq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27kg_xq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (brackets[j - 1] != '>') {\n                return false;\n            }\n            i = j;\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp80n48l23.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80n48l23.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    if (count != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxzdgkvkh.d(22): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(32): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(35): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzdgkvkh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 == 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp_8tzuoye.d(22): Error: no property `length` for type `string`\n/tmp/tmp_8tzuoye.d(32): Error: no property `length` for type `string`\n/tmp/tmp_8tzuoye.d(35): Error: no property `length` for type `string`\n/tmp/tmp_8tzuoye.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8tzuoye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp99z1w9_c.d(21): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(24): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99z1w9_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppw9odei8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw9odei8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpu2fgrm5s.d(22): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(32): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(35): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fgrm5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int open_bracket = 0;\n    int close_bracket = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            open_bracket++;\n        }\n        if (brackets[i] == '>') {\n            close_bracket++;\n        }\n        i++;\n    }\n    if (open_bracket != close_bracket) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i;\n        }\n        if (brackets[i] == '>') {\n            if (j == i) {\n                return false;\n            }\n            if (brackets[j] != '<') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp5xclmdlb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xclmdlb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpygun6tya.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygun6tya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp03590ni7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03590ni7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr27kg_xq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27kg_xq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp35t0auzq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35t0auzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpo1bs7s5w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1bs7s5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpyqayczub.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqayczub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwbi620ly.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbi620ly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening = 0;\n    int closing = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            opening++;\n        }\n        else if (brackets[i] == '>') {\n            closing++;\n        }\n        i++;\n    }\n    if (opening != closing) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmplith31uy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplith31uy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp0yzin3dr.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yzin3dr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmppfg25otg.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfg25otg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            open_brackets--;\n        }\n        if (open_brackets < 0) {\n            return false;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpekdwjprf.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekdwjprf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7dir4ji4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dir4ji4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp7dir4ji4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dir4ji4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmptz0z3a0s.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptz0z3a0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmr2uau8l.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmr2uau8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j] == '<') {\n                i = j + 1;\n            } else {\n                i = j;\n            }\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpba53h2qr.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba53h2qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpu2fgrm5s.d(22): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(32): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(35): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fgrm5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n        }\n        if (brackets[i] == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n    if (opening_brackets != closing_brackets) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpqpnyp2af.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpnyp2af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwbi620ly.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbi620ly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j - 1] != '>') {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpo04wk7lb.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo04wk7lb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp6cpoxq3k.d(21): Error: no property `length` for type `string`\n/tmp/tmp6cpoxq3k.d(24): Error: no property `length` for type `string`\n/tmp/tmp6cpoxq3k.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cpoxq3k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp99z1w9_c.d(21): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(24): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99z1w9_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>')\n                j++;\n            if (j == len)\n                return false;\n            i = j + 1;\n        }\n        else\n            i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp6qtio0_e.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qtio0_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        }\n        if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    if (open == close) {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpqw4uepcm.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw4uepcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            if (brackets[j] == '<') {\n                i = j + 1;\n            } else {\n                i = j;\n            }\n        } else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpfe4a79ah.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe4a79ah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp2lqt6_0n.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lqt6_0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n    if (opening_brackets != closing_brackets) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp00sydnvs.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00sydnvs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        }\n        else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmps3okp4ta.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3okp4ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            } else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmptxlb4yf_.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxlb4yf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmponhgbswa.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponhgbswa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                i = j + 1;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpj8bboa8k.d(21): Error: no property `length` for type `string`\n/tmp/tmpj8bboa8k.d(24): Error: no property `length` for type `string`\n/tmp/tmpj8bboa8k.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8bboa8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpvge3v32k.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvge3v32k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpm12npk6b.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm12npk6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpvge3v32k.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvge3v32k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != count) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpaet8t38g.d(22): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(32): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(35): Error: no property `length` for type `string`\n/tmp/tmpaet8t38g.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaet8t38g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr27kg_xq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27kg_xq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') open++;\n        if (brackets[i] == '>') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp9_iolp4a.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_iolp4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpwhhq6lnl.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhhq6lnl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening_bracket_count = 0;\n    int closing_bracket_count = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            opening_bracket_count++;\n        }\n        if (brackets[i] == '>') {\n            closing_bracket_count++;\n        }\n        i++;\n    }\n    if (opening_bracket_count != closing_bracket_count) {\n        return false;\n    }\n    i = 0;\n    j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                i = j + 1;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpr0t9giac.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0t9giac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] != '>') {\n                return false;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpu2fgrm5s.d(22): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(32): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(35): Error: no property `length` for type `string`\n/tmp/tmpu2fgrm5s.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fgrm5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpoh_fllwg.d(22): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(32): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(35): Error: no property `length` for type `string`\n/tmp/tmpoh_fllwg.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh_fllwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = len-1;\n    while(i<j)\n    {\n        if(brackets[i]=='<' && brackets[j]=='>')\n            return true;\n        else if(brackets[i]=='>' && brackets[j]=='<')\n            return false;\n        else\n        {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpjnw3cw3u.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnw3cw3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j] != '>') {\n            j--;\n            continue;\n        }\n        if (i == j) return true;\n        if (brackets[i+1] == '<') {\n            i++;\n            continue;\n        }\n        if (brackets[j-1] == '>') {\n            j--;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpmh6yeb30.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmh6yeb30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') {\n                j++;\n            }\n            if (j == n) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp54ybdfo9.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54ybdfo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp03590ni7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03590ni7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpygun6tya.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygun6tya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = len-1;\n    while(i<len && j>=0)\n    {\n        if(brackets[i]=='<' && brackets[j]=='>')\n        {\n            j--;\n        }\n        else if(brackets[i]=='>' && brackets[j]=='<')\n        {\n            i++;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpujr87bxw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujr87bxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int left = 0;\n    int right = 0;\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n            left++;\n        }\n        else if(brackets[i] == '>') {\n            right++;\n        }\n    }\n    return left == right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpbyeghsbr.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyeghsbr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpornj1df_.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpornj1df_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<') left++;\n        else if (brackets[i] == '>') right++;\n    }\n    if (left != right) return false;\n    return correct_bracketing(brackets.substr(1)) && correct_bracketing(brackets.substr(0, n-1));\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpsc82a258.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc82a258.d(28): Error: no property `substr` for type `string`\n/tmp/tmpsc82a258.d(28): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc82a258.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int left = 0;\n    int right = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n            left++;\n        } else if (brackets[i] == '>') {\n            right++;\n        }\n    }\n    if (left == right) {\n        return true;\n    } else {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpi7aa_hv2.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7aa_hv2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n        else if (brackets[i] == '>') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp_1hhmtd3.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1hhmtd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpr27kg_xq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27kg_xq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                i = j + 1;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxl871r09.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxl871r09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<')\n            open++;\n        else if (brackets[i] == '>') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpornj1df_.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpornj1df_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != 2) {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmp99z1w9_c.d(21): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(24): Error: no property `length` for type `string`\n/tmp/tmp99z1w9_c.d(27): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99z1w9_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open++;\n        } else if (brackets[i] == '>') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp1yc0ipms.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yc0ipms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_bracket = 0;\n    int close_bracket = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_bracket++;\n        }\n        if (brackets[i] == '>') {\n            close_bracket++;\n        }\n    }\n    return open_bracket == close_bracket;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp3_vm3pet.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_vm3pet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            count++;\n        }\n        i++;\n    }\n    if (count % 2 != 0) {\n        return false;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != '>') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (brackets[j] == '>') {\n                count--;\n            }\n            i = j + 1;\n        }\n        i++;\n    }\n    if (count != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpxzdgkvkh.d(22): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(32): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(35): Error: no property `length` for type `string`\n/tmp/tmpxzdgkvkh.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzdgkvkh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n            open++;\n        else if(brackets[i] == '>')\n        {\n            if(open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmpqqaivv3u.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqaivv3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmphuldm2_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuldm2_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < n && brackets[j] != '>')\n                j++;\n            if (j == n)\n                return false;\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "/tmp/tmp8li3urt7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8li3urt7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '<') {\n            j = i + 1;\n            while (j < len && brackets[j] != '>') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (brackets[j - 1] != '>') {\n                return false;\n            }\n            i = j;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "/tmp/tmpo_qs3w0w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_qs3w0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}