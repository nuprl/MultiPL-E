{
  "name": "HumanEval_61_correct_bracketing",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n",
  "tests": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '(') return false;\n        if (brackets[j] != ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuixo_gg8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuixo_gg8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpqp63j_lf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp63j_lf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpjgcf_exn.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgcf_exn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n        if (open > close) {\n            return false;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp1y2jf7n6.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y2jf7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '(' || brackets[j] != ')') {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpg8qygaux.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8qygaux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n    }\n    if (open == close) {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp8rz3shmw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rz3shmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            } else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe1r11egz.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1r11egz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j++;\n        }\n        else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            }\n            else {\n                j--;\n            }\n        }\n        i++;\n    }\n    return j == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp7jaszle1.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jaszle1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpv06iwrx4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv06iwrx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '(') return false;\n        if (brackets[j] != ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuixo_gg8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuixo_gg8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpjmjwnsyv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmjwnsyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp4snr6jbz.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4snr6jbz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n        } else if (brackets[i] == '(') {\n            return false;\n        } else if (brackets[j] == ')') {\n            return false;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpi3y4n_w8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3y4n_w8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j;\n        }\n        else if (brackets[i] == ')') {\n            j = i - 1;\n            while (j >= 0 && brackets[j] != '(') j--;\n            if (j == -1) return false;\n            if (i - j != 1) return false;\n            i = j;\n        }\n        else return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpajf01lcq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajf01lcq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(')\n            open++;\n        else if (brackets[i] == ')')\n            close++;\n    }\n    if (open != close)\n        return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (j - i < 2)\n                        return false;\n                    for (int k = i + 1; k < j; k++) {\n                        if (brackets[k] == '(')\n                            return false;\n                    }\n                    return true;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp5t0ufyo_.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5t0ufyo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (j - i != 1) return false;\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmphh_bfusl.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh_bfusl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (j - i != 1) return false;\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmphh_bfusl.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh_bfusl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpad6xetev.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6xetev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp_s10m76r.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s10m76r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            count++;\n        } else if (brackets[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp58untd_7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58untd_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        if (brackets[j] == ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp2dua6y85.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dua6y85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i] == ')') open_brackets--;\n        if (open_brackets < 0) return false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpotguwbek.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotguwbek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(')\n            open++;\n        else if (brackets[i] == ')') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpu0mt4g9g.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0mt4g9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpn7ibrmhy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7ibrmhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpn3pxmoyy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3pxmoyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpwmpmv9rv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmpmv9rv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if(brackets[i] == ')') {\n            if(open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpd_iwqcqy.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd_iwqcqy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpad6xetev.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6xetev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n        if (open > close) {\n            return false;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp1y2jf7n6.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y2jf7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '(') {\n            j++;\n        } else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            } else {\n                j--;\n            }\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpigfwxj41.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigfwxj41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            if (i + 1 < len && brackets[i+1] == ')') return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpk5xdj7c4.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5xdj7c4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    int opening = 0;\n    int closing = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            opening++;\n        }\n        if (brackets[i] == ')') {\n            closing++;\n        }\n        i++;\n    }\n    if (opening != closing) {\n        return false;\n    }\n    i = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != closing) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpgj3qb2fc.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgj3qb2fc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpva9urt0x.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva9urt0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            count++;\n        }\n        else if (brackets[i] == ')') {\n            count--;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpdnqurtqh.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnqurtqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n    }\n    if (open != close) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp4x0p0lco.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4x0p0lco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j++;\n        } else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            } else {\n                j--;\n            }\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmplwhghza2.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplwhghza2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            count++;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < brackets.length() && brackets[j] != ')') {\n                j++;\n            }\n            if (j == brackets.length()) {\n                return false;\n            }\n            if (j - i != count) {\n                return false;\n            }\n            count = 0;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp2a8uf4nx.d(22): Error: no property `length` for type `string`\n/tmp/tmp2a8uf4nx.d(32): Error: no property `length` for type `string`\n/tmp/tmp2a8uf4nx.d(35): Error: no property `length` for type `string`\n/tmp/tmp2a8uf4nx.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2a8uf4nx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            if (i+1 < len && brackets[i+1] == ')') return false;\n            if (i-1 >= 0 && brackets[i-1] == '(') return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpat2kzp5n.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat2kzp5n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '(') return false;\n        if (brackets[j] != ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuixo_gg8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuixo_gg8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(')\n            open++;\n        else if (brackets[i] == ')')\n            close++;\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe97qic4p.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe97qic4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(')\n            open_brackets++;\n        else if (brackets[i] == ')')\n            open_brackets--;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpenng_zqj.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenng_zqj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i > 1) return false;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpcvzj5i_m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvzj5i_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (brackets[j+1] != ')') return false;\n            i = j+2;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp1fmzinbj.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fmzinbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    if (open != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpoxj7rmxn.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj7rmxn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j;\n        } else {\n            j = i + 1;\n            while (j < len && brackets[j] != '(') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpu_7qpub8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_7qpub8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpva9urt0x.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva9urt0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    if (open != 0) {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpoxj7rmxn.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj7rmxn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i+1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (j-i > 1) return false;\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptes7coz8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptes7coz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 1) {\n                return false;\n            }\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpdilyudir.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdilyudir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpad6xetev.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6xetev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i != 1) {\n                return false;\n            }\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpdilyudir.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdilyudir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (brackets[j] != ')') return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmplaw0tjiq.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaw0tjiq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpghujkc4e.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghujkc4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n        if (open > close) {\n            return false;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp1y2jf7n6.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y2jf7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j;\n        } else {\n            j = i;\n            while (j < len && brackets[j] != '(') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpsrercuy3.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrercuy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            count++;\n        }\n        if (brackets[i] == ')') {\n            count--;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp6550l2qs.d(22): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6550l2qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            } else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp_pto19dt.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pto19dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            count++;\n        }\n        else if (brackets[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmphpye61fx.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpye61fx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp01azchr1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01azchr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else if (brackets[i] == ')') return false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpig_2l_v0.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpig_2l_v0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpbu41ou2n.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu41ou2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j++;\n        } else if (brackets[i] == ')') {\n            j--;\n        }\n        if (j < 0) {\n            return false;\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzkty503b.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkty503b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n    }\n    if (open != close) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp4x0p0lco.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4x0p0lco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i == 1) return true;\n            i = j + 1;\n        }\n        else if (brackets[i] == ')') {\n            j = i;\n            while (j < len && brackets[j] != '(') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i == 1) return true;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp__39z30m.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__39z30m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        if (brackets[j] == ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp2dua6y85.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dua6y85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 2) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe8qcxs46.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8qcxs46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpdhwa1qyx.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhwa1qyx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpad6xetev.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6xetev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpad6xetev.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6xetev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(')\n            open++;\n        else if (brackets[i] == ')')\n            close++;\n    }\n    if (open != close)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp285a2dz8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp285a2dz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpy9rk26z8.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9rk26z8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpghujkc4e.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghujkc4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            if (i + 1 < len && brackets[i+1] == ')') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp9gu8pnao.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gu8pnao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp8ufipb2b.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ufipb2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i == 1) return true;\n            i = j + 1;\n        }\n        else if (brackets[i] == ')') {\n            return false;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmponod3lyc.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponod3lyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < n && brackets[j] != ')') j++;\n            if (j == n) return false;\n            if (brackets[j] != ')') return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptyods1z7.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyods1z7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpva9urt0x.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva9urt0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        if (brackets[i] == ')') {\n            close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpoe8phip9.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe8phip9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i > 1) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpo5as43te.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5as43te.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            } else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp_pto19dt.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pto19dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp4fomb15t.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fomb15t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 2) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe8qcxs46.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8qcxs46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpm6tt3o5g.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6tt3o5g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n        } else if (brackets[i] == '(') {\n            return false;\n        } else if (brackets[j] == ')') {\n            return false;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpi3y4n_w8.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3y4n_w8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int open = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n        i++;\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpm8nvz3c6.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8nvz3c6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 2) return false;\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpczw7rgzr.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczw7rgzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpghujkc4e.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghujkc4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i != 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprikvblrf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprikvblrf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j++;\n        }\n        else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            }\n            else {\n                j--;\n            }\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp39931er6.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39931er6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 2) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe8qcxs46.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8qcxs46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpm6tt3o5g.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6tt3o5g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            } else {\n                open_brackets--;\n            }\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe1r11egz.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1r11egz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open_brackets++;\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) return false;\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpghujkc4e.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghujkc4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < n && brackets[j] != ')') j++;\n            if (j == n) return false;\n            i = j + 1;\n        }\n        else i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpdktccnj1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdktccnj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            i = j + 1;\n        }\n        else if (brackets[i] == ')') {\n            return false;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpt7ysa09h.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7ysa09h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpv06iwrx4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv06iwrx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] != '(' || brackets[j] != ')') {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpg8qygaux.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8qygaux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j - i > 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpak7enlj_.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7enlj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 2) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpe8qcxs46.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8qcxs46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        if (brackets[j] == ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp2dua6y85.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dua6y85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        if (brackets[i] == ')') {\n            close++;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp4hn44vdn.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hn44vdn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            close++;\n        }\n        if (open > close) {\n            return false;\n        }\n    }\n    return open == close;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpi6q8b5pw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6q8b5pw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmplvrychh4.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvrychh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') count++;\n        else if (brackets[i] == ')') {\n            if (count == 0) return false;\n            count--;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpxayd3lfz.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxayd3lfz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            else {\n                i = j + 1;\n                continue;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpgl4ly1ly.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl4ly1ly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(')\n            open++;\n        else if (brackets[i] == ')') {\n            if (open == 0)\n                return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpu0mt4g9g.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0mt4g9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            count++;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    }\n    i = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j = i + 1;\n            while (j < brackets.length()) {\n                if (brackets[j] == ')') {\n                    count--;\n                    if (count == 0) {\n                        return true;\n                    }\n                }\n                j++;\n            }\n        }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpnmsa1du0.d(22): Error: no property `length` for type `string`\n/tmp/tmpnmsa1du0.d(32): Error: no property `length` for type `string`\n/tmp/tmpnmsa1du0.d(35): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmsa1du0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open_brackets = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmptiy3n69w.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiy3n69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp7h9krh4a.d(20): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h9krh4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (brackets[i] == '(' && brackets[j] == ')') {\n            j--;\n            continue;\n        }\n        if (brackets[i] == '(') return false;\n        if (brackets[j] == ')') return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp2dua6y85.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dua6y85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j++;\n        } else if (brackets[i] == ')') {\n            if (j == 0) return false;\n            j--;\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpny983n3t.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpny983n3t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j++;\n        }\n        else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            }\n            j--;\n        }\n        i++;\n    }\n    return j == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpsz_r7wor.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz_r7wor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int i = 0;\n    int j = 0;\n    while (i < brackets.length()) {\n        if (brackets[i] == '(') {\n            j++;\n        }\n        else if (brackets[i] == ')') {\n            if (j == 0) {\n                return false;\n            }\n            else {\n                j--;\n            }\n        }\n        i++;\n    }\n    return (j == 0);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp39931er6.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39931er6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpn3pxmoyy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3pxmoyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (i - j < 2) return false;\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpa3fnzbvx.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3fnzbvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        }\n        else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmprug8nzuv.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprug8nzuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            for (int j = i + 1; j < len; j++) {\n                if (brackets[j] == ')') {\n                    if (i - j > 1) return false;\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpsywu1yor.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsywu1yor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if(brackets[i] == ')') {\n            if(open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp1hw2v_zl.d(20): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hw2v_zl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') {\n                j++;\n            }\n            if (j == len) {\n                return false;\n            }\n            if (j - i > 1) {\n                return false;\n            }\n            i = j + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpc95slpxf.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc95slpxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    int open = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            open++;\n        } else if (brackets[i] == ')') {\n            if (open == 0) {\n                return false;\n            } else {\n                open--;\n            }\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpm4z0iv47.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4z0iv47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            if (j == i + 1) return false;\n            if (j - i > 1) return false;\n            i = j + 1;\n        }\n        else if (brackets[i] == ')') {\n            return false;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpn3eivtbs.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3eivtbs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int n = brackets.length();\n    if (n == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < n && brackets[j] != ')') j++;\n            if (j == n) return false;\n            if (j - i > 1) {\n                if (correct_bracketing(brackets.substr(i+1, j-i-1))) return true;\n            }\n            i = j+1;\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpwoqb17er.d(19): Error: no property `length` for type `string`\n/tmp/tmpwoqb17er.d(29): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwoqb17er.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (brackets[i] == '(') {\n            j = i;\n            while (j < len && brackets[j] != ')') j++;\n            if (j == len) return false;\n            else {\n                i = j + 1;\n                j = i;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp6k_tkdw0.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k_tkdw0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        if (brackets[i] == ')') close++;\n    }\n    if (open != close) return false;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') {\n            if (i + 1 < len && brackets[i+1] == ')') {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmp9gu8pnao.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gu8pnao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int len = brackets.length();\n    if (len == 0) return true;\n    int open = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '(') open++;\n        else if (brackets[i] == ')') {\n            if (open == 0) return false;\n            open--;\n        }\n    }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpuq3tf8bw.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq3tf8bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\" and \")\".\n    return true if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n    int open_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n        }\n        else if (brackets[i] == ')') {\n            if (open_brackets == 0) {\n                return false;\n            }\n            open_brackets--;\n        }\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "/tmp/tmpzbewj958.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbewj958.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}