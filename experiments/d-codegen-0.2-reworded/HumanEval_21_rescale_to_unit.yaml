name: HumanEval_21_rescale_to_unit
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of at\
  \ least two elements), apply a linear transform to that array,\n    such that the\
  \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
  \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
  \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  }\nvoid main(){}"
completions: ["{\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f/(max-min);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i]-min)*scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++)\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++)\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length; i++)\n     \
    \   numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length; i++)\n     \
    \   numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length; i++)\n \
    \       numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length; i++)\n     \
    \   numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++)\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n    \
    \    if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f/(max-min);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i]-min)*scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n\
    \    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) *\
    \ scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n \
    \       if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length; i++)\n \
    \       numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\t\
    min = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\t\
    float scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}",
  "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\
    \t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f\
    \ / (max - min);\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i]\
    \ = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\t\
    min = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\t\
    float scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    float scale = 1.0f/(max - min);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++) {\n        if(numbers[i] < min)\n            min = numbers[i];\n      \
    \  if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length; i++) {\n     \
    \   numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++)\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\t\
    min = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\t\
    float scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor\
    \ (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\t\
    min = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tfloat scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length;\
    \ i++) {\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++)\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor\
    \ (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin\
    \ = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat\
    \ scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\n\t\t\
    numbers[i] = (numbers[i] - min) * scale;\n\treturn numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++)\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    \n    float scale = 1.0f /\
    \ (max - min);\n    for(int i = 0; i < numbers.length; i++)\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    \n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n\
    \    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f/(max-min);\n    for(int i = 0;\
    \ i < numbers.length; i++)\n        numbers[i] = (numbers[i]-min)*scale;\n   \
    \ return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (int i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\t\
    min = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\t\
    float scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int\
    \ i = 1; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] < min)\n\t\t\tmin =\
    \ numbers[i];\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat\
    \ scale = 1.0f / (max - min);\n\tfor(int i = 0; i < numbers.length; i++)\n\t\t\
    numbers[i] = (numbers[i] - min) * scale;\n\treturn numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\t\
    float max = numbers[0];\n\tfor (int i = 1; i < numbers.length; i++) {\n\t\tif\
    \ (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max)\
    \ {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tfloat scale = 1.0f / (max - min);\n\
    \tfor (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++)\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i <\
    \ numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min =\
    \ numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n \
    \   }\n    float scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n         \
    \   min = numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\t\
    float max = numbers[0];\n\tfor (int i = 1; i < numbers.length; i++) {\n\t\tif\
    \ (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\
    \tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\tfor (int i =\
    \ 0; i < numbers.length; i++)\n\t\tnumbers[i] = (numbers[i] - min) * scale;\n\t\
    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    \n    float scale = 1.0f/(max-min);\n    \n    for(int\
    \ i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i]-min)*scale;\n\
    \    \n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i <\
    \ numbers.length; i++)\n\t{\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\
    \t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f\
    \ / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\n\t\tnumbers[i] =\
    \ (numbers[i] - min) * scale;\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\tfor(int i = 1; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i]\
    \ < min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\
    \t}\n\tfloat scale = 1.0f/(max-min);\n\tfor(int i = 0; i < numbers.length; i++)\n\
    \t\tnumbers[i] = (numbers[i]-min)*scale;\n\treturn numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length; i++)\n     \
    \   numbers[i] = (numbers[i]-min)*scale;\n    return numbers;\n}", "{\n\tfloat\
    \ min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length; i++)\n \
    \       numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f/(max-min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = numbers[i]*scale;\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n \
    \   }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor\
    \ (int i = 1; i < numbers.length; i++)\n\t{\n\t\tif (numbers[i] < min)\n\t\t\t\
    min = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\t\
    float scale = 1.0f / (max - min);\n\tfor (int i = 0; i < numbers.length; i++)\n\
    \t\tnumbers[i] = (numbers[i] - min) * scale;\n\treturn numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n         \
    \   min = numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n\
    \    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n\
    }", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int i = 1;\
    \ i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\
    \t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f/(max-min);\n\
    \tfor(int i = 0; i < numbers.length; i++)\n\t\tnumbers[i] = (numbers[i]-min)*scale;\n\
    \treturn numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float scale =\
    \ 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int i = 1; i < numbers.length;\
    \ i++)\n\t{\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i]\
    \ > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f / (max - min);\n\t\
    for(int i = 0; i < numbers.length; i++)\n\t\tnumbers[i] = (numbers[i] - min) *\
    \ scale;\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\
    \ {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}",
  "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i <\
    \ numbers.length; i++) {\n\t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\
    \t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0f\
    \ / (max - min);\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i]\
    \ = (numbers[i] - min) * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n     \
    \   if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++)\n      \
    \  numbers[i] = (numbers[i] - min) * scale;\n    return numbers;\n}", "{\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return numbers;\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    \n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n        if (numbers[i] > max)\n     \
    \       max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ * scale;\n    }\n    return numbers;\n}", "{\n\tfloat min = numbers[0];\n\t\
    float max = numbers[0];\n\tfor (int i = 1; i < numbers.length; i++) {\n\t\tif\
    \ (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max)\
    \ {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tfloat scale = 1.0f / (max - min);\n\
    \tfor (int i = 0; i < numbers.length; i++) {\n\t\tnumbers[i] = (numbers[i] - min)\
    \ * scale;\n\t}\n\treturn numbers;\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max -\
    \ min);\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min) * scale;\n    }\n    return numbers;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
