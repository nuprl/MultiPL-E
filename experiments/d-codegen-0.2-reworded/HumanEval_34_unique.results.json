{
  "name": "HumanEval_34_unique",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5u64r28t.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmp5u64r28t.__unittest_L23_C1() [0x42800c]\n??:? void tmp5u64r28t.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l)\n        if (i == 0 || x != result[i - 1])\n            result[i++] = x;\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpte2tjhwa.d(13): Error: semicolon expected, not `:`\n/tmp/tmpte2tjhwa.d(13): Error: expression expected, not `:`\n/tmp/tmpte2tjhwa.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpte2tjhwa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i - 1])\n        {\n            ret[i] = x;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkvtwy34j.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkvtwy34j.d(13): Error: expression expected, not `:`\n/tmp/tmpkvtwy34j.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvtwy34j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp75rwk9ya.d(13): Error: semicolon expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: expression expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75rwk9ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphd_5a5_9.d(13): Error: semicolon expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: expression expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd_5a5_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i++] = l1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp1vccxam4.d(13): Error: semicolon expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: expression expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vccxam4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i-1] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiivxkme6.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpiivxkme6.__unittest_L23_C1() [0x428014]\n??:? void tmpiivxkme6.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe51n863g.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: expression expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe51n863g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i-1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpipn90v3o.d(13): Error: semicolon expected, not `:`\n/tmp/tmpipn90v3o.d(13): Error: expression expected, not `:`\n/tmp/tmpipn90v3o.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipn90v3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp78rzwgjr.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp78rzwgjr.__unittest_L21_C1() [0x428014]\n??:? void tmp78rzwgjr.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l)\n        if (i == 0 || e != result[i - 1])\n            result[i++] = e;\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmplg1kxzra.d(13): Error: semicolon expected, not `:`\n/tmp/tmplg1kxzra.d(13): Error: expression expected, not `:`\n/tmp/tmplg1kxzra.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg1kxzra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp627za2x3.d(13): Error: semicolon expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: expression expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp627za2x3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            r[i++] = l[j];\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xwrl_4v.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp5xwrl_4v.__unittest_L20_C1() [0x428014]\n??:? void tmp5xwrl_4v.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpoykznyvx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: expression expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoykznyvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp627za2x3.d(13): Error: semicolon expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: expression expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp627za2x3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i-1] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiivxkme6.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpiivxkme6.__unittest_L23_C1() [0x428014]\n??:? void tmpiivxkme6.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkhbyg6n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpzkhbyg6n.__unittest_L23_C1() [0x42800c]\n??:? void tmpzkhbyg6n.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe51n863g.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: expression expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe51n863g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpoykznyvx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: expression expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoykznyvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l)\n    {\n        if (i == 0 || e != result[i - 1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpgmu0m2xa.d(13): Error: semicolon expected, not `:`\n/tmp/tmpgmu0m2xa.d(13): Error: expression expected, not `:`\n/tmp/tmpgmu0m2xa.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmu0m2xa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            ret[i] = l[j];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg7wbu_eq.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpg7wbu_eq.__unittest_L21_C1() [0x428014]\n??:? void tmpg7wbu_eq.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i - 1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpdp84mtun.d(13): Error: semicolon expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: expression expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp84mtun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm2ncjt9_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm2ncjt9_.d(13): Error: expression expected, not `:`\n/tmp/tmpm2ncjt9_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2ncjt9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp1hbhmgxv.d(13): Error: semicolon expected, not `:`\n/tmp/tmp1hbhmgxv.d(13): Error: expression expected, not `:`\n/tmp/tmp1hbhmgxv.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hbhmgxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkln50g8q.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: expression expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkln50g8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i - 1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpdp84mtun.d(13): Error: semicolon expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: expression expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp84mtun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            r[i++] = l[j];\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xwrl_4v.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp5xwrl_4v.__unittest_L20_C1() [0x428014]\n??:? void tmp5xwrl_4v.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l)\n    {\n        if (i == 0 || e != result[i - 1])\n        {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpqrxcm8gg.d(13): Error: semicolon expected, not `:`\n/tmp/tmpqrxcm8gg.d(13): Error: expression expected, not `:`\n/tmp/tmpqrxcm8gg.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrxcm8gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i - 1] != l[j]) {\n            ret[i++] = l[j];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphk8thn5u.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmphk8thn5u.__unittest_L20_C1() [0x428014]\n??:? void tmphk8thn5u.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i-1] != l[j])\n        {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppqeo216r.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmppqeo216r.__unittest_L23_C1() [0x428014]\n??:? void tmppqeo216r.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l)\n    {\n        boolean found = false;\n        for (int j = 0; j < i; j++)\n        {\n            if (result[j] == l1)\n            {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpmmwl8ulz.d(13): Error: semicolon expected, not `:`\n/tmp/tmpmmwl8ulz.d(13): Error: expression expected, not `:`\n/tmp/tmpmmwl8ulz.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmwl8ulz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n\tlong[] ret = new long[l.length];\n\tint i = 0;\n\tfor(long x : l)\n\t{\n\t\tif(i == 0 || x != ret[i-1])\n\t\t\tret[i++] = x;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpk8ki5g69.d(13): Error: semicolon expected, not `:`\n/tmp/tmpk8ki5g69.d(13): Error: expression expected, not `:`\n/tmp/tmpk8ki5g69.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8ki5g69.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++) {\n        if (j == 0 || l[i] != result[j - 1]) {\n            result[j++] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmporq9_vm0.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmporq9_vm0.__unittest_L20_C1() [0x42801c]\n??:? void tmporq9_vm0.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c42b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430549]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b295]\n??:? runModuleUnitTests [0x42c201]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) \n    {\n        if (i == 0 || l1 != result[i - 1]) \n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmppqvrsjst.d(13): Error: semicolon expected, not `:`\n/tmp/tmppqvrsjst.d(13): Error: expression expected, not `:`\n/tmp/tmppqvrsjst.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqvrsjst.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            r[i++] = l[j];\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xwrl_4v.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp5xwrl_4v.__unittest_L20_C1() [0x428014]\n??:? void tmp5xwrl_4v.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp78rzwgjr.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp78rzwgjr.__unittest_L21_C1() [0x428014]\n??:? void tmp78rzwgjr.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp75rwk9ya.d(13): Error: semicolon expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: expression expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75rwk9ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i - 1])\n        {\n            ret[i] = x;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkvtwy34j.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkvtwy34j.d(13): Error: expression expected, not `:`\n/tmp/tmpkvtwy34j.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvtwy34j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpzd6n29dt.d(13): Error: semicolon expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: expression expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd6n29dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n        {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphfczvvng.d(13): Error: semicolon expected, not `:`\n/tmp/tmphfczvvng.d(13): Error: expression expected, not `:`\n/tmp/tmphfczvvng.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfczvvng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            ret[i++] = l[j];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoizlxvcp.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpoizlxvcp.__unittest_L20_C1() [0x428014]\n??:? void tmpoizlxvcp.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkln50g8q.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: expression expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkln50g8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i-1] != l[j])\n        {\n            ret[i] = l[j];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptl4j0gy2.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmptl4j0gy2.__unittest_L23_C1() [0x428014]\n??:? void tmptl4j0gy2.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp7bb8bwzo.d(13): Error: semicolon expected, not `:`\n/tmp/tmp7bb8bwzo.d(13): Error: expression expected, not `:`\n/tmp/tmp7bb8bwzo.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bb8bwzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpoykznyvx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: expression expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoykznyvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp75rwk9ya.d(13): Error: semicolon expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: expression expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75rwk9ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x: l)\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwnsovo89.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwnsovo89.d(13): Error: expression expected, not `:`\n/tmp/tmpwnsovo89.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnsovo89.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkln50g8q.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: expression expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkln50g8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i - 1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp6gn9mr22.d(13): Error: semicolon expected, not `:`\n/tmp/tmp6gn9mr22.d(13): Error: expression expected, not `:`\n/tmp/tmp6gn9mr22.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gn9mr22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpoykznyvx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: expression expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoykznyvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp78rzwgjr.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmp78rzwgjr.__unittest_L21_C1() [0x428014]\n??:? void tmp78rzwgjr.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            ret[i++] = l[j];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoizlxvcp.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpoizlxvcp.__unittest_L20_C1() [0x428014]\n??:? void tmpoizlxvcp.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (i == 0 || x != result[i - 1]) \n        {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp96pmu4_o.d(13): Error: semicolon expected, not `:`\n/tmp/tmp96pmu4_o.d(13): Error: expression expected, not `:`\n/tmp/tmp96pmu4_o.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96pmu4_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] u = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != u[i - 1])\n            u[i++] = x;\n    }\n    return u;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp5mq1d8y1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp5mq1d8y1.d(13): Error: expression expected, not `:`\n/tmp/tmp5mq1d8y1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mq1d8y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (i == 0 || x != result[i - 1]) \n        {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpw9pbap76.d(13): Error: semicolon expected, not `:`\n/tmp/tmpw9pbap76.d(13): Error: expression expected, not `:`\n/tmp/tmpw9pbap76.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9pbap76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkhbyg6n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpzkhbyg6n.__unittest_L23_C1() [0x42800c]\n??:? void tmpzkhbyg6n.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            ret[i] = l[j];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa2g98nom.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpa2g98nom.__unittest_L23_C1() [0x42800c]\n??:? void tmpa2g98nom.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) \n    {\n        if (i == 0 || e != result[i - 1]) \n        {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpcqvq24t9.d(13): Error: semicolon expected, not `:`\n/tmp/tmpcqvq24t9.d(13): Error: expression expected, not `:`\n/tmp/tmpcqvq24t9.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqvq24t9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i - 1] != l[j]) {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbuf9ysna.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpbuf9ysna.__unittest_L21_C1() [0x428014]\n??:? void tmpbuf9ysna.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphd_5a5_9.d(13): Error: semicolon expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: expression expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd_5a5_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tint i = 0;\n\tfor(long e : l)\n\t{\n\t\tif(i == 0 || e != result[i-1])\n\t\t{\n\t\t\tresult[i] = e;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpx66lhxns.d(13): Error: semicolon expected, not `:`\n/tmp/tmpx66lhxns.d(13): Error: expression expected, not `:`\n/tmp/tmpx66lhxns.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx66lhxns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpzd6n29dt.d(13): Error: semicolon expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: expression expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd6n29dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l)\n        if (i == 0 || e != ret[i - 1])\n            ret[i++] = e;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3m3criup.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3m3criup.d(13): Error: expression expected, not `:`\n/tmp/tmp3m3criup.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m3criup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n        if (i == 0 || x != ret[i - 1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp28nx1eap.d(13): Error: semicolon expected, not `:`\n/tmp/tmp28nx1eap.d(13): Error: expression expected, not `:`\n/tmp/tmp28nx1eap.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28nx1eap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkln50g8q.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: expression expected, not `:`\n/tmp/tmpkln50g8q.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkln50g8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i - 1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpdp84mtun.d(13): Error: semicolon expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: expression expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp84mtun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l) {\n        if(i == 0 || x != result[i-1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpu2pv6kx5.d(13): Error: semicolon expected, not `:`\n/tmp/tmpu2pv6kx5.d(13): Error: expression expected, not `:`\n/tmp/tmpu2pv6kx5.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2pv6kx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphd_5a5_9.d(13): Error: semicolon expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: expression expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd_5a5_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l)\n    {\n        if (i == 0 || e != ret[i - 1])\n        {\n            ret[i] = e;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpccpl_8lo.d(13): Error: semicolon expected, not `:`\n/tmp/tmpccpl_8lo.d(13): Error: expression expected, not `:`\n/tmp/tmpccpl_8lo.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpccpl_8lo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != r[i - 1]) {\n            r[i++] = e;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpkqd8j2sv.d(13): Error: semicolon expected, not `:`\n/tmp/tmpkqd8j2sv.d(13): Error: expression expected, not `:`\n/tmp/tmpkqd8j2sv.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqd8j2sv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n        {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpfnjnd18u.d(13): Error: semicolon expected, not `:`\n/tmp/tmpfnjnd18u.d(13): Error: expression expected, not `:`\n/tmp/tmpfnjnd18u.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnjnd18u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkhbyg6n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpzkhbyg6n.__unittest_L23_C1() [0x42800c]\n??:? void tmpzkhbyg6n.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp7bb8bwzo.d(13): Error: semicolon expected, not `:`\n/tmp/tmp7bb8bwzo.d(13): Error: expression expected, not `:`\n/tmp/tmp7bb8bwzo.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bb8bwzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i - 1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmptn1rv07k.d(13): Error: semicolon expected, not `:`\n/tmp/tmptn1rv07k.d(13): Error: expression expected, not `:`\n/tmp/tmptn1rv07k.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptn1rv07k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i-1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpipn90v3o.d(13): Error: semicolon expected, not `:`\n/tmp/tmpipn90v3o.d(13): Error: expression expected, not `:`\n/tmp/tmpipn90v3o.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipn90v3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5u64r28t.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmp5u64r28t.__unittest_L23_C1() [0x42800c]\n??:? void tmp5u64r28t.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] u = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        boolean found = false;\n        for (int j = 0; j < i; j++) {\n            if (u[j] == l1) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            u[i] = l1;\n            i++;\n        }\n    }\n    return Arrays.copyOf(u, i);\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpf69mxtq6.d(13): Error: semicolon expected, not `:`\n/tmp/tmpf69mxtq6.d(13): Error: expression expected, not `:`\n/tmp/tmpf69mxtq6.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf69mxtq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i++] = l1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp1vccxam4.d(13): Error: semicolon expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: expression expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vccxam4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp75rwk9ya.d(13): Error: semicolon expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: expression expected, not `:`\n/tmp/tmp75rwk9ya.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75rwk9ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long e : l)\n        if (i == 0 || e != r[i - 1])\n            r[i++] = e;\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp9qs9sm0x.d(13): Error: semicolon expected, not `:`\n/tmp/tmp9qs9sm0x.d(13): Error: expression expected, not `:`\n/tmp/tmp9qs9sm0x.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qs9sm0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n        {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp_c9jidqj.d(13): Error: semicolon expected, not `:`\n/tmp/tmp_c9jidqj.d(13): Error: expression expected, not `:`\n/tmp/tmp_c9jidqj.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c9jidqj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] u = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != u[i - 1]) {\n            u[i++] = x;\n        }\n    }\n    return u;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprgw3u5fh.d(13): Error: semicolon expected, not `:`\n/tmp/tmprgw3u5fh.d(13): Error: expression expected, not `:`\n/tmp/tmprgw3u5fh.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgw3u5fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i - 1])\n        {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpgby90jpt.d(13): Error: semicolon expected, not `:`\n/tmp/tmpgby90jpt.d(13): Error: expression expected, not `:`\n/tmp/tmpgby90jpt.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgby90jpt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwn3k33w7.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwn3k33w7.d(13): Error: expression expected, not `:`\n/tmp/tmpwn3k33w7.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwn3k33w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n        if (i == 0 || x != ret[i - 1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp28nx1eap.d(13): Error: semicolon expected, not `:`\n/tmp/tmp28nx1eap.d(13): Error: expression expected, not `:`\n/tmp/tmp28nx1eap.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28nx1eap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i++] = l1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp1vccxam4.d(13): Error: semicolon expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: expression expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vccxam4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != ret[i - 1]) {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpdp84mtun.d(13): Error: semicolon expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: expression expected, not `:`\n/tmp/tmpdp84mtun.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp84mtun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            result[i] = l[j];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5u64r28t.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmp5u64r28t.__unittest_L23_C1() [0x42800c]\n??:? void tmp5u64r28t.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] u = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != u[i-1])\n            u[i++] = x;\n    }\n    return u;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpve_u1xbi.d(13): Error: semicolon expected, not `:`\n/tmp/tmpve_u1xbi.d(13): Error: expression expected, not `:`\n/tmp/tmpve_u1xbi.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpve_u1xbi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l)\n    {\n        if (i == 0 || e != result[i - 1])\n        {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpqrxcm8gg.d(13): Error: semicolon expected, not `:`\n/tmp/tmpqrxcm8gg.d(13): Error: expression expected, not `:`\n/tmp/tmpqrxcm8gg.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrxcm8gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i == 0 || x != ret[i - 1])\n        {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpod6hx6kw.d(13): Error: semicolon expected, not `:`\n/tmp/tmpod6hx6kw.d(13): Error: expression expected, not `:`\n/tmp/tmpod6hx6kw.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod6hx6kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkhbyg6n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpzkhbyg6n.__unittest_L23_C1() [0x42800c]\n??:? void tmpzkhbyg6n.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (i == 0 || x != ret[i - 1]) \n        {\n            ret[i++] = x;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpzyn2z6qx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpzyn2z6qx.d(13): Error: expression expected, not `:`\n/tmp/tmpzyn2z6qx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyn2z6qx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i - 1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpzgek9_er.d(13): Error: semicolon expected, not `:`\n/tmp/tmpzgek9_er.d(13): Error: expression expected, not `:`\n/tmp/tmpzgek9_er.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgek9_er.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i - 1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp5peflmps.d(13): Error: semicolon expected, not `:`\n/tmp/tmp5peflmps.d(13): Error: expression expected, not `:`\n/tmp/tmp5peflmps.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5peflmps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe51n863g.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: expression expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe51n863g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe51n863g.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: expression expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe51n863g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n            result[i++] = l1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpismro5yv.d(13): Error: semicolon expected, not `:`\n/tmp/tmpismro5yv.d(13): Error: expression expected, not `:`\n/tmp/tmpismro5yv.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpismro5yv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n            result[i++] = l1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpismro5yv.d(13): Error: semicolon expected, not `:`\n/tmp/tmpismro5yv.d(13): Error: expression expected, not `:`\n/tmp/tmpismro5yv.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpismro5yv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (i == 0 || x != r[i - 1]) \n        {\n            r[i++] = x;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4zgwwwr0.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4zgwwwr0.d(13): Error: expression expected, not `:`\n/tmp/tmp4zgwwwr0.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zgwwwr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            ret[i] = l[j];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa2g98nom.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpa2g98nom.__unittest_L23_C1() [0x42800c]\n??:? void tmpa2g98nom.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i++] = l1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp1vccxam4.d(13): Error: semicolon expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: expression expected, not `:`\n/tmp/tmp1vccxam4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vccxam4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n        {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphfczvvng.d(13): Error: semicolon expected, not `:`\n/tmp/tmphfczvvng.d(13): Error: expression expected, not `:`\n/tmp/tmphfczvvng.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfczvvng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != result[i-1])\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpm9xuh2ay.d(13): Error: semicolon expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: expression expected, not `:`\n/tmp/tmpm9xuh2ay.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9xuh2ay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i] != l[j]) {\n            result[i++] = l[j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7_q7c9m7.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmp7_q7c9m7.__unittest_L20_C1() [0x428010]\n??:? void tmp7_q7c9m7.__modtest() [0x4280c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpebnouhny.d(13): Error: semicolon expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: expression expected, not `:`\n/tmp/tmpebnouhny.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnouhny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n        {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpa7u8j1j4.d(13): Error: semicolon expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: expression expected, not `:`\n/tmp/tmpa7u8j1j4.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7u8j1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(i == 0 || l[i] != l[j])\n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkhbyg6n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42833d]\n??:? void tmpzkhbyg6n.__unittest_L23_C1() [0x42800c]\n??:? void tmpzkhbyg6n.__modtest() [0x4280bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430539]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428800]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n        if(i == 0 || e != ret[i - 1])\n            ret[i++] = e;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpil7tx69w.d(13): Error: semicolon expected, not `:`\n/tmp/tmpil7tx69w.d(13): Error: expression expected, not `:`\n/tmp/tmpil7tx69w.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpil7tx69w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i-1]) {\n            ret[i] = l1;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp6ux2q319.d(13): Error: semicolon expected, not `:`\n/tmp/tmp6ux2q319.d(13): Error: expression expected, not `:`\n/tmp/tmp6ux2q319.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ux2q319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long x : l)\n        if(i == 0 || x != ret[i-1])\n            ret[i++] = x;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp627za2x3.d(13): Error: semicolon expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: expression expected, not `:`\n/tmp/tmp627za2x3.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp627za2x3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpzd6n29dt.d(13): Error: semicolon expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: expression expected, not `:`\n/tmp/tmpzd6n29dt.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd6n29dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != result[i - 1]) {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe51n863g.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: expression expected, not `:`\n/tmp/tmpe51n863g.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe51n863g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (i == 0 || x != result[i - 1]) \n        {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpw9pbap76.d(13): Error: semicolon expected, not `:`\n/tmp/tmpw9pbap76.d(13): Error: expression expected, not `:`\n/tmp/tmpw9pbap76.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9pbap76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    int n = l.length;\n    long[] u = new long[n];\n    int i = 0;\n    for(int j = 0; j < n; j++)\n    {\n        if(i == 0 || l[i-1] != l[j])\n        {\n            u[i] = l[j];\n            i++;\n        }\n    }\n    return u;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpxgslgn_1.d(11): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgslgn_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp4w02ewq1.d(13): Error: semicolon expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: expression expected, not `:`\n/tmp/tmp4w02ewq1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02ewq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long e: l)\n        if(i == 0 || e != ret[i-1])\n            ret[i++] = e;\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp_u_0kuuf.d(13): Error: semicolon expected, not `:`\n/tmp/tmp_u_0kuuf.d(13): Error: expression expected, not `:`\n/tmp/tmp_u_0kuuf.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_u_0kuuf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) {\n        if (i == 0 || l[i-1] != l[j]) {\n            ret[i++] = l[j];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoizlxvcp.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpoizlxvcp.__unittest_L20_C1() [0x428014]\n??:? void tmpoizlxvcp.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != ret[i-1])\n            ret[i++] = l1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpizu7qvj1.d(13): Error: semicolon expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: expression expected, not `:`\n/tmp/tmpizu7qvj1.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizu7qvj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l)\n    {\n        if (i == 0 || e != ret[i - 1])\n            ret[i++] = e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpi7ntqrla.d(13): Error: semicolon expected, not `:`\n/tmp/tmpi7ntqrla.d(13): Error: expression expected, not `:`\n/tmp/tmpi7ntqrla.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7ntqrla.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e : l)\n    {\n        if(i == 0 || e != result[i-1])\n            result[i++] = e;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmp3_yr2yzc.d(13): Error: semicolon expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: expression expected, not `:`\n/tmp/tmp3_yr2yzc.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_yr2yzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(i == 0 || l1 != result[i-1])\n        {\n            result[i] = l1;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmphd_5a5_9.d(13): Error: semicolon expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: expression expected, not `:`\n/tmp/tmphd_5a5_9.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd_5a5_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(long e: l)\n    {\n        if(i == 0 || e != result[i-1])\n        {\n            result[i] = e;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpiib_ocwl.d(13): Error: semicolon expected, not `:`\n/tmp/tmpiib_ocwl.d(13): Error: expression expected, not `:`\n/tmp/tmpiib_ocwl.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiib_ocwl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (i == 0 || l1 != ret[i - 1]) {\n            ret[i++] = l1;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpoykznyvx.d(13): Error: semicolon expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: expression expected, not `:`\n/tmp/tmpoykznyvx.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoykznyvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != result[i - 1]) {\n            result[i++] = e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmprck1e296.d(13): Error: semicolon expected, not `:`\n/tmp/tmprck1e296.d(13): Error: expression expected, not `:`\n/tmp/tmprck1e296.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck1e296.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] ret = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (i == 0 || e != ret[i - 1]) {\n            ret[i++] = e;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpwkq_gng_.d(13): Error: semicolon expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: expression expected, not `:`\n/tmp/tmpwkq_gng_.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkq_gng_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (i == 0 || x != result[i - 1]) {\n            result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "/tmp/tmpe8fceycm.d(13): Error: semicolon expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: expression expected, not `:`\n/tmp/tmpe8fceycm.d(13): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8fceycm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}