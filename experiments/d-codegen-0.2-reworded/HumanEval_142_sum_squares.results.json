{
  "name": "HumanEval_142_sum_squares",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n",
  "tests": "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n        {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0)\n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvut7_wv.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmptvut7_wv.__unittest_L34_C1() [0x427e90]\n??:? void tmptvut7_wv.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_rglpj8_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmp_rglpj8_.__unittest_L31_C1() [0x427eac]\n??:? void tmp_rglpj8_.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7t64dfd6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmp7t64dfd6.__unittest_L28_C1() [0x427dfc]\n??:? void tmp7t64dfd6.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n        {\n            sum += lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0)\n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyba3hhu4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpyba3hhu4.__unittest_L34_C1() [0x427eac]\n??:? void tmpyba3hhu4.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) \n    {\n        if(i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxec5ztq1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpxec5ztq1.__unittest_L34_C1() [0x427e90]\n??:? void tmpxec5ztq1.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps7lcsnkr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmps7lcsnkr.__unittest_L30_C1() [0x427e90]\n??:? void tmps7lcsnkr.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if (i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpndtzlp4p.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpndtzlp4p.__unittest_L30_C1() [0x427e90]\n??:? void tmpndtzlp4p.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoyek7b_n.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmpoyek7b_n.__unittest_L31_C1() [0x427e8c]\n??:? void tmpoyek7b_n.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps7lcsnkr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmps7lcsnkr.__unittest_L30_C1() [0x427e90]\n??:? void tmps7lcsnkr.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_8dok_j1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp_8dok_j1.__unittest_L34_C1() [0x427e90]\n??:? void tmp_8dok_j1.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_8dok_j1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp_8dok_j1.__unittest_L34_C1() [0x427e90]\n??:? void tmp_8dok_j1.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprv8w_tl5.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmprv8w_tl5.__unittest_L31_C1() [0x427eac]\n??:? void tmprv8w_tl5.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5ctfe81.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpl5ctfe81.__unittest_L30_C1() [0x427dfc]\n??:? void tmpl5ctfe81.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_8dok_j1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp_8dok_j1.__unittest_L34_C1() [0x427e90]\n??:? void tmp_8dok_j1.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp605wbn25.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp605wbn25.__unittest_L34_C1() [0x427e8c]\n??:? void tmp605wbn25.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4eth6wt3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp4eth6wt3.__unittest_L31_C1() [0x427e90]\n??:? void tmp4eth6wt3.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if ((i % 3) == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if ((i % 4) != 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqse_t6ud.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpqse_t6ud.__unittest_L34_C1() [0x427e90]\n??:? void tmpqse_t6ud.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps7lcsnkr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmps7lcsnkr.__unittest_L30_C1() [0x427e90]\n??:? void tmps7lcsnkr.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphdkwphha.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmphdkwphha.__unittest_L34_C1() [0x427eac]\n??:? void tmphdkwphha.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4eth6wt3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp4eth6wt3.__unittest_L31_C1() [0x427e90]\n??:? void tmp4eth6wt3.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7t64dfd6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmp7t64dfd6.__unittest_L28_C1() [0x427dfc]\n??:? void tmp7t64dfd6.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7t64dfd6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmp7t64dfd6.__unittest_L28_C1() [0x427dfc]\n??:? void tmp7t64dfd6.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_rglpj8_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmp_rglpj8_.__unittest_L31_C1() [0x427eac]\n??:? void tmp_rglpj8_.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5ctfe81.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpl5ctfe81.__unittest_L30_C1() [0x427dfc]\n??:? void tmpl5ctfe81.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5ctfe81.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpl5ctfe81.__unittest_L30_C1() [0x427dfc]\n??:? void tmpl5ctfe81.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprynoab3j.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmprynoab3j.__unittest_L31_C1() [0x427e90]\n??:? void tmprynoab3j.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoyek7b_n.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmpoyek7b_n.__unittest_L31_C1() [0x427e8c]\n??:? void tmpoyek7b_n.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0 && i % 3 != 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpltlo1v4d.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpltlo1v4d.__unittest_L30_C1() [0x427eac]\n??:? void tmpltlo1v4d.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps7lcsnkr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmps7lcsnkr.__unittest_L30_C1() [0x427e90]\n??:? void tmps7lcsnkr.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if ((i % 3) == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if ((i % 4) != 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqse_t6ud.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpqse_t6ud.__unittest_L34_C1() [0x427e90]\n??:? void tmpqse_t6ud.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5ctfe81.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpl5ctfe81.__unittest_L30_C1() [0x427dfc]\n??:? void tmpl5ctfe81.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7t64dfd6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmp7t64dfd6.__unittest_L28_C1() [0x427dfc]\n??:? void tmp7t64dfd6.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uq3tlts.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmp_uq3tlts.__unittest_L31_C1() [0x427e8c]\n??:? void tmp_uq3tlts.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4eth6wt3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp4eth6wt3.__unittest_L31_C1() [0x427e90]\n??:? void tmp4eth6wt3.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd9mpaley.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmpd9mpaley.__unittest_L34_C1() [0x427eb4]\n??:? void tmpd9mpaley.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2lw7ia4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpr2lw7ia4.__unittest_L34_C1() [0x427e90]\n??:? void tmpr2lw7ia4.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1392ajep.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp1392ajep.__unittest_L30_C1() [0x427e90]\n??:? void tmp1392ajep.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8ykke2y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpd8ykke2y.__unittest_L28_C1() [0x427dfc]\n??:? void tmpd8ykke2y.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) \n        {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_8dok_j1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp_8dok_j1.__unittest_L34_C1() [0x427e90]\n??:? void tmp_8dok_j1.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk2kwdcp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpqk2kwdcp.__unittest_L31_C1() [0x427eac]\n??:? void tmpqk2kwdcp.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}