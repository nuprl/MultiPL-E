{
  "name": "HumanEval_87_get_row",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a 2 dimensional data, as a nested arrays,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the array,\n    and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\n    [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]\n    >>> get_row([], 1L)\n    []\n    >>> get_row([[], [1L], [1L, 2L, 3L]], 3L)\n    [tuple(2L, 2L)]\n    \n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n",
  "tests": "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L, 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L, 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L, 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L), tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]], 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L, 2L)]);\n}\nvoid main(){}",
  "completions": [
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            res[i] = tuple(0L, 0L);\n        } else {\n            long min = lst[i][0];\n            long max = lst[i][0];\n            for (int j = 1; j < lst[i].length; j++) {\n                if (lst[i][j] < min) {\n                    min = lst[i][j];\n                }\n                if (lst[i][j] > max) {\n                    max = lst[i][j];\n                }\n            }\n            res[i] = tuple(i, max - min + 1);\n        }\n    }\n    \n    for (int i = 0; i < res.length; i++) {\n        for (int j = 0; j < res[i].length; j++) {\n            res[i] = tuple(res[i]._1, res[i]._2 - res[i]._1 + 1);\n        }\n    }\n    \n    for (int i = 0; i < res.length; i++) {\n        for (int j = 0; j < res[i].length; j++) {\n            res[i] = tuple(res[i]._1, res[i]._2 - res[i]._1 + 1);\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (int j = 0; j < row.length; j++) {\n            if (row[j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            continue;\n        }\n        \n        long row = lst[i][0];\n        long col = lst[i][1];\n        \n        if (row == x) {\n            res[i] = tuple(row, col);\n        }\n        \n        if (lst[i].length > 2) {\n            long[] sorted_lst = lst[i].clone();\n            \n            Arrays.sort(sorted_lst, (a, b) -> b - a);\n            \n            for (int j = 0; j < sorted_lst.length - 1; j++) {\n                if (sorted_lst[j] == x) {\n                    res[i] = tuple(row, sorted_lst[j + 1]);\n                    break;\n                }\n            }\n        }\n    }\n    \n    Arrays.sort(res, (a, b) -> b[0] - a[0]);\n    \n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    long[] rows = new long[lst.length];\n    long[] columns = new long[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        rows[i] = i;\n        for (int j = 0; j < lst[i].length; j++)\n            columns[j] = j;\n    }\n    \n    sort(rows, rows.length, columns, columns.length);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long row = rows[i];\n        long column = columns[0];\n        \n        for (int j = 1; j < lst[i].length; j++)\n        {\n            if (lst[row][column] > x)\n                break;\n            \n            column = columns[j];\n        }\n        \n        result[i] = tuple(row, column);\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (long col : row) {\n            if (col == x) {\n                ret[i] = tuple(row[0], col);\n                i++;\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        sort(lst[i], (a, b) -> b[1] - a[1]);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        Tuple!(long, long)[] row = get_row(lst[i], x);\n        \n        for (int j = 0; j < row.length; j++)\n        {\n            result[i] = row[j];\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column > b.column));\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                return result;\n            }\n        }\n    }\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long[] sorted_row = new long[row.length];\n        \n        for (int j = 0; j < row.length; j++) {\n            sorted_row[j] = row[j];\n        }\n        \n        sorted_row = sort(sorted_row, false);\n        \n        for (int j = 0; j < sorted_row.length; j++) {\n            if (sorted_row[j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                result[j] = tuple(i, j);\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.a - b.a);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = row[0];\n        long max_col = row[0];\n        \n        for (int j = 1; j < row.length; j++) {\n            if (row[j] < min_col) {\n                min_col = row[j];\n            }\n            \n            if (row[j] > max_col) {\n                max_col = row[j];\n            }\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    sort(result, (a, b) -> a.first - b.first);\n    sort(result, (a, b) -> a.second - b.second);\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long min_col = row[0];\n        long max_col = row[0];\n        \n        for (int j = 1; j < row.length; j++)\n        {\n            if (row[j] < min_col)\n                min_col = row[j];\n            \n            if (row[j] > max_col)\n                max_col = row[j];\n        }\n        \n        result[i] = tuple(i, min_col);\n        \n        for (int j = 0; j < row.length; j++)\n        {\n            if (row[j] == max_col)\n                result[i] = tuple(i, j);\n        }\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = tuple(result[i].row, result[i].col);\n    }\n    \n    sort(result, (a, b) -> b.col - a.col);\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                ret[i] = new Tuple!(i, j);\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.a - b.a);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> b - a);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                return result;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            long min = row[0];\n            long max = row[0];\n            \n            for (int j = 1; j < row.length; j++) {\n                if (row[j] < min) {\n                    min = row[j];\n                }\n                \n                if (row[j] > max) {\n                    max = row[j];\n                }\n            }\n            \n            result[i] = tuple(i, max - min + 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            continue;\n        }\n        \n        long min = row[0];\n        long max = row[0];\n        \n        for (int j = 1; j < row.length; j++) {\n            if (row[j] < min) {\n                min = row[j];\n            }\n            \n            if (row[j] > max) {\n                max = row[j];\n            }\n        }\n        \n        result[i] = tuple(i, max - min + 1);\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    long[] rows = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        rows[i] = i;\n    \n    long[] columns = new long[lst[0].length];\n    for (int i = 0; i < lst[0].length; i++)\n        columns[i] = i;\n    \n    sort(rows, columns, lst);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = new Tuple!(rows[i], columns[j]);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.y - b.y);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        ret[i] = tuple(lst[i].length, i);\n    \n    sort(ret, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < lst.length; i++)\n        sort(lst[i], (a, b) -> b[1] - a[1]);\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                return ret;\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n    {\n        ret[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(ret, (a, b) -> a.a - b.a);\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        if (ret[i].a == x)\n        {\n            sort(ret, (a, b) -> b.a - a.a);\n            return ret;\n        }\n    }\n    \n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                result[j] = tuple(i, j);\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    long[] rows = new long[lst.length];\n    long[] cols = new long[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        rows[i] = i;\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            cols[j] = j;\n        }\n    }\n    \n    sort(rows, rows.length, cols, cols.length, false);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[i] = new Tuple!(rows[i], cols[j]);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        Tuple!(long, long)[] sorted_by_columns = new Tuple!(long, long)[lst[i].length];\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            sorted_by_columns[j] = tuple(lst[i][j], j);\n        }\n        \n        sorted_by_columns = sort(sorted_by_columns, (a, b) -> a[0] > b[0] ? 1 : -1);\n        \n        Tuple!(long, long)[] sorted_by_rows = new Tuple!(long, long)[lst[i].length];\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            sorted_by_rows[j] = tuple(i, sorted_by_columns[j][1]);\n        }\n        \n        sorted_by_rows = sort(sorted_by_rows, (a, b) -> a[0] > b[0] ? 1 : -1);\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            result[i] = tuple(sorted_by_rows[j][0], sorted_by_columns[j][1]);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                res[i] = new Tuple!(i, j);\n            }\n        }\n    }\n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(lst.length - 1, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            ret[i] = tuple(0L, 0L);\n        } else {\n            ret[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                ret[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            res[i] = tuple(0L, 0L);\n        } else {\n            long[] row = lst[i];\n            long[] sorted_row = new long[row.length];\n            for (int j = 0; j < row.length; j++) {\n                sorted_row[j] = row[j];\n            }\n            sorted_row = sort(sorted_row, false);\n            for (int j = 0; j < sorted_row.length; j++) {\n                if (sorted_row[j] == x) {\n                    res[i] = tuple(i, j);\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    long[] row = new long[lst[0].length];\n    long[] col = new long[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            row[j] = lst[i][j];\n            col[j] = j;\n        }\n        \n        sort(row, col, lst[i].length);\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            ret[i] = tuple(row[j], col[j]);\n        }\n    }\n    \n    sort(ret, tuple(0L, 0L));\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                res[i] = new Tuple!(i, j);\n            }\n        }\n    }\n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            result[i] = tuple(lst[i][0], lst[i][0] + lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            for (int j = 0; j < lst[i].length; j++) {\n                if (lst[i][j] == x) {\n                    result[i] = tuple(i, j);\n                }\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x]);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x = x / lst[i].length;\n    }\n    \n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        ret[i] = tuple(lst[i].length - 1, lst[i][0] - 1);\n        \n        for (int j = 1; j < lst[i].length; j++)\n        {\n            ret[i] = tuple(ret[i].x, ret[i].y + lst[i][j] - 1);\n        }\n    }\n    \n    ret.sort((a, b) -> a.y - b.y);\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = tuple(ret[i].x, ret[i].y);\n    }\n    \n    ret.sort((a, b) -> b.x - a.x);\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (long col : row) {\n            if (col == x) {\n                res[i++] = tuple(row, col);\n            }\n        }\n    }\n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long row_x = row[0];\n        \n        if (row_x == x)\n        {\n            result[i] = tuple(row_x, i);\n            continue;\n        }\n        \n        long row_y = row[0];\n        \n        for (int j = 1; j < row.length; j++)\n        {\n            long row_x_j = row[j];\n            \n            if (row_x_j == x)\n            {\n                result[i] = tuple(row_x_j, i);\n                break;\n            }\n            \n            long row_y_j = row[j];\n            \n            if (row_y_j > row_y)\n            {\n                result[i] = tuple(row_x_j, i);\n                row_y = row_y_j;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (t1, t2) -> t1[0] - t2[0]);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (t1, t2) -> t2[1] - t1[1]);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                return result;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    int i = 0;\n    for (long[] row : lst)\n    {\n        if (row.length == 0)\n            continue;\n        \n        long min_col = row[0];\n        long max_col = row[0];\n        for (long col : row)\n        {\n            if (col < min_col)\n                min_col = col;\n            if (col > max_col)\n                max_col = col;\n        }\n        \n        if (min_col <= x && x <= max_col)\n        {\n            res[i++] = tuple(x, min_col);\n        }\n    }\n    \n    if (i == 0)\n        return [];\n    \n    sort(res, (a, b) -> a[0] - b[0]);\n    sort(res, (a, b) -> a[1] - b[1]);\n    \n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    int i = 0;\n    for (long[] row : lst)\n    {\n        if (row.length == 0)\n            continue;\n        \n        int j = 0;\n        for (long col : row)\n        {\n            if (col == x)\n                result[i++] = tuple(row[j], col);\n            \n            j++;\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0]);\n    }\n    \n    sort(result, (a, b) -> a.row > b.row || (a.row == b.row && a.column > b.column));\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(lst[i].length, lst[i][j]);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n            {\n                res[i] = new Tuple!(i, j);\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = lst[i][0];\n        long max_col = lst[i][0];\n        \n        for (int j = 1; j < lst[i].length; j++) {\n            if (lst[i][j] < min_col) {\n                min_col = lst[i][j];\n            }\n            \n            if (lst[i][j] > max_col) {\n                max_col = lst[i][j];\n            }\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        for (int j = 0; j < result[i].length; j++) {\n            result[i][j] = result[i][j] - min(result[i][j]._1, result[i][j]._2);\n        }\n    }\n    \n    sort(result, tuple(0L, 0L));\n    \n    for (int i = 0; i < result.length; i++) {\n        for (int j = 0; j < result[i].length; j++) {\n            result[i][j] = result[i][j] + min(result[i][j]._1, result[i][j]._2);\n        }\n    }\n    \n    sort(result, tuple(1L, result[0].length - 1));\n    \n    for (int i = 0; i < result.length; i++) {\n        for (int j = 0; j < result[i].length; j++) {\n            result[i][j] = result[i][j] + min(result[i][j]._1, result[i][j]._2);",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(ret, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < ret.length; i++) {\n        ret[i] = tuple(ret[i][0], ret[i][1]);\n    }\n    \n    sort(ret, (a, b) -> b[0] - a[0]);\n    \n    for (int i = 0; i < ret.length; i++) {\n        ret[i] = tuple(ret[i][0], ret[i][1]);\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length == 0)\n            continue;\n        \n        long[] row = lst[i];\n        \n        for(int j = 0; j < row.length; j++)\n        {\n            if(row[j] == x)\n            {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            continue;\n        }\n        \n        long min_col = lst[i][0];\n        long max_col = lst[i][lst[i].length - 1];\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n            \n            if (lst[i][j] < x) {\n                min_col = j;\n            }\n            \n            if (lst[i][j] > x) {\n                max_col = j;\n            }\n        }\n        \n        if (result[i] == null) {\n            result[i] = tuple(i, min_col);\n        }\n        \n        if (result[i] == null) {\n            result[i] = tuple(i, max_col);\n        }\n        \n        if (result[i] == null) {\n            result[i] = tuple(i, 0L);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0]);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n            {\n                result[i] = tuple(lst[i].length, lst[i][0]);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            ret[i] = tuple(0L, 0L);\n        } else {\n            ret[i] = tuple(lst[i].length - 1, lst[i][lst[i].length - 1]);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                ret[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret;\n    if (lst.length == 0)\n        return ret;\n    \n    long[][] sorted_lst = lst;\n    \n    // sort by rows\n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] lst_i = lst[i];\n        long[] sorted_lst_i = lst_i;\n        \n        // sort by columns\n        for (int j = 0; j < lst_i.length; j++)\n        {\n            long lst_i_j = lst_i[j];\n            long sorted_lst_i_j = lst_i_j;\n            \n            // sort\n            sorted_lst_i[j] = sorted_lst_i_j;\n        }\n        \n        // swap\n        lst[i] = sorted_lst_i;\n    }\n    \n    // find coordinates\n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] lst_i = lst[i];\n        \n        for (int j = 0; j < lst_i.length; j++)\n        {\n            long lst_i_j = lst_i[j];\n            \n            if (lst_i_j == x)\n            {\n                ret = new Tuple!(long, long)[lst_i.length];\n                \n                for (int k = 0; k < lst_i.length; k++)\n                {\n                    ret[k] = new Tuple!(lst_i[k], j);\n                }\n                \n                return ret;\n            }\n        }\n    }\n    \n    return ret;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i].length, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        sort(lst[i], (a, b) -> b - a);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    sort(result, (a, b) -> a.column - b.column);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i][j], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long[] sorted_row = new long[row.length];\n        \n        for (int j = 0; j < row.length; j++)\n            sorted_row[j] = row[j];\n        \n        sorted_row = sort(sorted_row, 0, sorted_row.length - 1, 1);\n        \n        for (int j = 0; j < sorted_row.length; j++)\n        {\n            if (sorted_row[j] == x)\n            {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0]);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> a[0] - b[0]);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (long col : row) {\n            if (col == x) {\n                ret[i++] = tuple(row[0], col);\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                result[j] = tuple(i, j);\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        long min = lst[0][i];\n        long max = lst[0][i];\n        for (int j = 1; j < lst.length; j++)\n        {\n            if (lst[j][i] < min)\n                min = lst[j][i];\n            if (lst[j][i] > max)\n                max = lst[j][i];\n        }\n        \n        for (int j = min; j <= max; j++)\n        {\n            res[i] = tuple(j, i);\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (long column : row) {\n            if (column == x) {\n                result[i++] = tuple(row, column);\n            }\n        }\n    }\n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        ret[i] = tuple(lst[i].length, lst[i][0] - 1);\n        for (int j = 1; j < lst[i].length; j++)\n        {\n            ret[i] = tuple(ret[i]._1, ret[i]._2 + 1);\n            ret[i] = tuple(ret[i]._1 + 1, ret[i]._2);\n        }\n    }\n    \n    ret = sort(ret, (a, b) -> a._1 < b._1 || (a._1 == b._1 && a._2 < b._2));\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = tuple(ret[i]._1 + 1, ret[i]._2);\n    }\n    \n    ret = sort(ret, (a, b) -> a._1 > b._1 || (a._1 == b._1 && a._2 > b._2));\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = tuple(ret[i]._1, ret[i]._2 - 1);\n    }\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        if (ret[i]._1 == x)\n            return ret;\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long[] sorted_row = new long[row.length];\n        \n        for (int j = 0; j < row.length; j++) {\n            sorted_row[j] = row[j];\n        }\n        \n        sorted_row = sort(sorted_row, false);\n        \n        for (int j = 0; j < sorted_row.length; j++) {\n            if (sorted_row[j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            long[] row = lst[i];\n            long row_x = row[0];\n            long row_y = row[1];\n            \n            if (row_x == x) {\n                result[i] = tuple(row_x, row_y);\n            } else if (row_x > x) {\n                result[i] = tuple(row_x, row_y);\n            } else {\n                result[i] = tuple(row_x, row_y);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret;\n    if (lst.length == 0)\n        return ret;\n    \n    long[] rows = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        rows[i] = lst[i].length;\n    \n    long[] cols = new long[lst[0].length];\n    for (int i = 0; i < lst[0].length; i++)\n        cols[i] = lst[0][i];\n    \n    ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                ret[i] = new Tuple!(long, long)(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> a[0] - b[0]);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i][j], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i].length - 1, lst[i][lst[i].length - 1]);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            long min = lst[i][0];\n            long max = lst[i][0];\n            for (int j = 1; j < lst[i].length; j++) {\n                if (lst[i][j] < min) {\n                    min = lst[i][j];\n                }\n                if (lst[i][j] > max) {\n                    max = lst[i][j];\n                }\n            }\n            result[i] = tuple(i, max - min + 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            result[i] = tuple(result[i]._1, result[i]._2 - lst[i][j]);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    int i = 0;\n    for (long[] row : lst)\n    {\n        int j = 0;\n        for (long col : row)\n        {\n            if (col == x)\n            {\n                result[i] = tuple(j, i);\n                return result;\n            }\n            j++;\n        }\n        i++;\n    }\n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        long min_row = lst[i][0];\n        long max_row = lst[i][0];\n        long min_col = lst[i][0];\n        long max_col = lst[i][0];\n        \n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] > max_row)\n                max_row = lst[i][j];\n            if (lst[i][j] < min_row)\n                min_row = lst[i][j];\n            if (lst[i][j] > max_col)\n                max_col = lst[i][j];\n            if (lst[i][j] < min_col)\n                min_col = lst[i][j];\n        }\n        \n        result[i] = tuple(min_row, max_col);\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long y = 0L;\n        \n        for (int j = 0; j < row.length; j++) {\n            if (row[j] == x) {\n                result[i] = tuple(i, j);\n                y = j;\n                break;\n            }\n        }\n        \n        if (y == 0L) {\n            result[i] = tuple(i, row.length - 1);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n        {\n            res[i] = tuple(0L, 0L);\n        }\n        else\n        {\n            long min_col = row[0];\n            long max_col = row[0];\n            \n            for (int j = 1; j < row.length; j++)\n            {\n                if (row[j] < min_col)\n                {\n                    min_col = row[j];\n                }\n                else if (row[j] > max_col)\n                {\n                    max_col = row[j];\n                }\n            }\n            \n            res[i] = tuple(i, max_col - min_col + 1);\n        }\n    }\n    \n    sort(res, tuple(0L, 0L));\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n        {\n            continue;\n        }\n        \n        long min_col = row[0];\n        long max_col = row[0];\n        \n        for (int j = 1; j < row.length; j++)\n        {\n            if (row[j] < min_col)\n            {\n                min_col = row[j];\n            }\n            else if (row[j] > max_col)\n            {\n                max_col = row[j];\n            }\n        }\n        \n        sort(res[i], tuple(i, max_col - min_col + 1));\n    }\n    \n    return res;\n}\n",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(i, lst[i].length - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row ? -1 : a.row > b.row ? 1 : 0);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    sort(result, (a, b) -> b[0] - a[0]);\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    long[][] sorted_lst = new long[lst.length][];\n    for (int i = 0; i < lst.length; i++)\n        sorted_lst[i] = lst[i];\n    \n    for (int i = 0; i < sorted_lst.length; i++)\n        sort(sorted_lst[i]);\n    \n    for (int i = 0; i < sorted_lst.length; i++)\n        for (int j = 0; j < sorted_lst[i].length; j++)\n            if (sorted_lst[i][j] == x)\n                result[i] = tuple(i, j);\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            continue;\n        }\n        \n        long row = lst[i][0];\n        long column = lst[i][lst[i].length - 1];\n        \n        if (row == x) {\n            result[i] = tuple(row, column);\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[j] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        res[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(res, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < res.length; i++) {\n        for (int j = 0; j < res[i][0]; j++) {\n            if (lst[i][j] == x) {\n                return res;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(i, lst[i].length);\n    }\n    \n    sort(result, (t1, t2) -> t1[0] - t2[0]);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (t1, t2) -> t2[1] - t1[1]);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret;\n    if (lst.length == 0)\n        return ret;\n    \n    long[] rows = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        rows[i] = lst[i].length;\n    \n    long[] sorted_rows = sort(rows);\n    \n    for (int i = 0; i < sorted_rows.length; i++)\n    {\n        long row = sorted_rows[i];\n        long[] sorted_cols = sort(lst[row]);\n        \n        for (int j = 0; j < sorted_cols.length; j++)\n        {\n            long col = sorted_cols[j];\n            if (lst[row][col] == x)\n            {\n                ret = new Tuple!(long, long)[lst[row].length];\n                for (int k = 0; k < lst[row].length; k++)\n                {\n                    ret[k] = tuple(lst[row][k], col);\n                }\n                return ret;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = lst[i][0];\n        long max_col = lst[i][0];\n        \n        for (int j = 1; j < lst[i].length; j++) {\n            if (lst[i][j] < min_col) {\n                min_col = lst[i][j];\n            }\n            \n            if (lst[i][j] > max_col) {\n                max_col = lst[i][j];\n            }\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    sort(result, (a, b) -> a.column - b.column);\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = tuple(result[i].row, result[i].column - result[i].column + 1);\n    }\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                result[i] = new Tuple!(i, j);\n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length == 0)\n            continue;\n        \n        long min = lst[i][0];\n        long max = lst[i][0];\n        for(int j = 1; j < lst[i].length; j++)\n        {\n            if(lst[i][j] < min)\n                min = lst[i][j];\n            if(lst[i][j] > max)\n                max = lst[i][j];\n        }\n        \n        if(min == x && max == x)\n        {\n            res[i] = tuple(i, 0L);\n            continue;\n        }\n        \n        if(min < x && max > x)\n        {\n            res[i] = tuple(i, max - x);\n            continue;\n        }\n        \n        if(min > x && max < x)\n        {\n            res[i] = tuple(i, x - min);\n            continue;\n        }\n        \n        if(min > x && max < x)\n        {\n            res[i] = tuple(i, x - min);\n            continue;\n        }\n        \n        if(min < x && max > x)\n        {\n            res[i] = tuple(i, max - x);\n            continue;\n        }\n        \n        if(min < x && max > x)\n        {\n            res[i] = tuple(i, x - min);\n            continue;\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            long[] sorted_row = new long[row.length];\n            \n            for (int j = 0; j < row.length; j++) {\n                sorted_row[j] = row[j];\n            }\n            \n            sorted_row = sort(sorted_row);\n            \n            for (int j = 0; j < sorted_row.length; j++) {\n                if (sorted_row[j] == x) {\n                    result[i] = tuple(i, j);\n                    break;\n                }\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(i, lst[i].length - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row ? -1 : (a.row == b.row ? a.column - b.column : 1));\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    sort(result, (a, b) -> a.first - b.first);\n    \n    for (int i = 0; i < result.length; i++) {\n        sort(result[i].second, (a, b) -> b - a);\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        for (int j = 0; j < row.length; j++) {\n            if (row[j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret;\n    if (lst.length == 0)\n        return ret;\n    \n    long[] rows = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        rows[i] = lst[i].length;\n    \n    long[] sorted_rows = new long[rows.length];\n    for (int i = 0; i < rows.length; i++)\n        sorted_rows[i] = rows[i];\n    \n    std.sort(sorted_rows);\n    \n    long[] sorted_cols = new long[lst[0].length];\n    for (int i = 0; i < lst[0].length; i++)\n        sorted_cols[i] = lst[0][i];\n    \n    std.sort(sorted_cols, std.descendingOrder);\n    \n    ret = new Tuple!(long, long)[lst[0].length];\n    for (int i = 0; i < lst[0].length; i++)\n        ret[i] = tuple(sorted_rows[0], sorted_cols[i]);\n    \n    for (int i = 1; i < lst.length; i++)\n    {\n        long[] sorted_cols = new long[lst[i].length];\n        for (int j = 0; j < lst[i].length; j++)\n            sorted_cols[j] = lst[i][j];\n        \n        std.sort(sorted_cols, std.descendingOrder);\n        \n        for (int j = 0; j < lst[i].length; j++)\n            ret[j] = tuple(sorted_rows[i], sorted_cols[j]);\n    }\n    \n    return ret;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        long[] row = lst[i];\n        \n        if (row.length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = row[0];\n        long max_col = row[0];\n        \n        for (int j = 1; j < row.length; j++) {\n            if (row[j] < min_col) {\n                min_col = row[j];\n            }\n            \n            if (row[j] > max_col) {\n                max_col = row[j];\n            }\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    sort(result, (a, b) -> a.first - b.first);\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = tuple(result[i].first, result[i].second - result[i].second + 1);\n    }\n    \n    sort(result, (a, b) -> b.first - a.first);\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        long[] sorted_row = new long[row.length];\n        \n        for(int j = 0; j < row.length; j++)\n            sorted_row[j] = row[j];\n        \n        sorted_row = sort(sorted_row, 1);\n        \n        for(int j = 0; j < sorted_row.length; j++)\n        {\n            if(sorted_row[j] == x)\n            {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long min = row[0];\n        long max = row[0];\n        \n        for (int j = 1; j < row.length; j++)\n        {\n            if (row[j] < min)\n                min = row[j];\n            \n            if (row[j] > max)\n                max = row[j];\n        }\n        \n        if (min == x)\n        {\n            res[i] = tuple(min, max);\n            break;\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = lst[i][0];\n        long max_col = lst[i][0];\n        \n        for (int j = 1; j < lst[i].length; j++) {\n            if (lst[i][j] < min_col) {\n                min_col = lst[i][j];\n            }\n            \n            if (lst[i][j] > max_col) {\n                max_col = lst[i][j];\n            }\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    sort(result, (a, b) -> a.first - b.first);\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = tuple(result[i].first, result[i].second - result[i].second + 1);\n    }\n    \n    sort(result, (a, b) -> b.first - a.first);\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(lst[i].length, lst[i][0]);\n    }\n    \n    sort(ret, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < ret.length; i++) {\n        ret[i] = tuple(ret[i].row, ret[i].column);\n    }\n    \n    sort(ret, (a, b) -> a.column - b.column);\n    \n    for (int i = 0; i < ret.length; i++) {\n        ret[i] = tuple(ret[i].row, ret[i].column);\n    }\n    \n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        Tuple!(long, long)[] sorted_by_columns = new Tuple!(long, long)[lst[i].length];\n        \n        for (int j = 0; j < lst[i].length; j++)\n        {\n            sorted_by_columns[j] = tuple(lst[i][j], j);\n        }\n        \n        sorted_by_columns = sort(sorted_by_columns, (a, b) -> a.first - b.first);\n        \n        for (int j = 0; j < sorted_by_columns.length; j++)\n        {\n            result[i] = tuple(sorted_by_columns[j].first, lst[i][sorted_by_columns[j].second]);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        ret[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(ret, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for(int i = 0; i < ret.length; i++)\n    {\n        if(ret[i].row == x)\n        {\n            return ret;\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                res[i] = new Tuple!(i, j);\n    \n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        sort(lst[i], (a, b) -> a - b);\n        \n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(lst[i][j], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(lst.length - 1, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, lst[i].length - 1 - j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = new Tuple!(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(lst.length - 1 - i, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, lst[i].length - 1 - j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i].length - 1, lst[i][lst[i].length - 1]);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.a - b.a);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i].length - 1 - j, i);\n                break;\n            }\n        }\n    }\n    \n    sort(result, (a, b) -> b.a - a.a);\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        res[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(res, (a, b) -> a.row < b.row ? -1 : a.row > b.row ? 1 : 0);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                res[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0)\n            continue;\n        \n        long row = lst[i][0];\n        long col = lst[i][lst[i].length - 1];\n        \n        if (row == x) {\n            res[i] = tuple(row, col);\n        }\n        else if (row > x) {\n            break;\n        }\n        else {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                if (lst[i][j] == x) {\n                    res[i] = tuple(row, j);\n                    break;\n                }\n                else if (lst[i][j] > x) {\n                    break;\n                }\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        for (int j = 0; j < row.length; j++)\n        {\n            if (row[j] == x)\n            {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(lst.length - 1 - i, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, lst[i].length - 1 - j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(ret, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < ret.length; i++) {\n        for (int j = 0; j < ret[i].column; j++) {\n            ret[i].column = j;\n        }\n    }\n    \n    sort(ret, (a, b) -> b.column - a.column);\n    \n    for (int i = 0; i < ret.length; i++) {\n        ret[i] = tuple(ret[i].row + 1, ret[i].column + 1);\n    }\n    \n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(lst.length - 1, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        Tuple!(long, long)[] sorted = new Tuple!(long, long)[lst[i].length];\n        \n        for (int j = 0; j < lst[i].length; j++)\n        {\n            sorted[j] = tuple(i, lst[i][j]);\n        }\n        \n        sorted = sort(sorted, tuple(i, lst[i].length - 1));\n        \n        for (int j = 0; j < sorted.length; j++)\n        {\n            result[sorted[j]._1] = sorted[j]._2;\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            continue;\n        }\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i][0], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length == 0)\n            continue;\n        \n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n            {\n                ret[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] == x ? 0 : lst[i].length - 1);\n    }\n    \n    sort(result, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < result.length; i++) {\n        sort(result[i], (a, b) -> a[1] - b[1]);\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(i, lst[i].length);\n        \n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n                return result;\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                res[j] = tuple(i, j);\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row ? -1 : a.row > b.row ? 1 : 0);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(lst[i].length, lst[i][j] - 1);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        ret[i] = tuple(lst[i].length, lst[i][0]);\n    \n    sort(ret, (a, b) -> a.row < b.row || (a.row == b.row && a.col < b.col));\n    \n    for (int i = 0; i < ret.length; i++)\n        if (ret[i].row == x)\n            return ret;\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i].length - 1, lst[i][lst[i].length - 1]);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i].length, lst[i][j] - 1);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(lst[i].length, lst[i][0] == x ? 0L : lst[i].length - 1L);\n    }\n    \n    for (int i = 0; i < ret.length; i++) {\n        for (int j = 0; j < ret[i].length; j++) {\n            ret[i] = tuple(ret[i].first, ret[i].second + j);\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] < x ? 0 : lst[i].length - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0)\n            continue;\n        \n        long row = 0;\n        long col = 0;\n        \n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                ret[i] = tuple(row, col);\n                break;\n            }\n            \n            if (lst[i][j] > x) {\n                row++;\n            }\n            \n            if (lst[i][j] < x) {\n                col++;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(x, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(i, lst[i].length - 1);\n    }\n    \n    sort(ret, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                ret[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, new Comparator<Tuple!(long, long)>() {\n        public int compare(Tuple!(long, long) t1, Tuple!(long, long) t2) {\n            return t1.x - t2.x;\n        }\n    });\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        sort(lst[i], new Comparator<Long>() {\n            public int compare(Long t1, Long t2) {\n                return t2 - t1;\n            }\n        });\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i][0], lst[i].length - 1);\n        }\n    }\n    \n    sort(result, (t1, t2) -> {\n        if (t1.row < t2.row) return -1;\n        if (t1.row > t2.row) return 1;\n        if (t1.column < t2.column) return -1;\n        if (t1.column > t2.column) return 1;\n        return 0;\n    });\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i][0], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            result[i] = tuple(lst[i].length - 1, lst[i][lst[i].length - 1]);\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    long[] rows = new long[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        rows[i] = i;\n    \n    long[] columns = new long[lst[0].length];\n    for (int i = 0; i < lst[0].length; i++)\n        columns[i] = i;\n    \n    sort(rows, columns, lst);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = new Tuple!(rows[i], columns[j]);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row ? -1 : a.row > b.row ? 1 : 0);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> a[0] - 1 < b[0] - 1 ? -1 : a[0] - 1 > b[0] - 1 ? 1 : 0);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long min = row[0];\n        long max = row[0];\n        \n        for (int j = 1; j < row.length; j++)\n        {\n            if (row[j] < min)\n                min = row[j];\n            \n            if (row[j] > max)\n                max = row[j];\n        }\n        \n        if (min < x && x < max)\n        {\n            result[i] = tuple(i, x);\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        ret[i] = tuple(i, lst[i].length);\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                ret[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        res[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    int i = 0;\n    for (long[] row : lst)\n    {\n        result[i++] = tuple(x, row.length - 1);\n        for (long column : row)\n        {\n            if (column == x)\n                result[i++] = tuple(x, row.length - 1 - column);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        ret[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(ret, (a, b) -> a.a - b.a);\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        for (int j = 0; j < ret[i].a; j++)\n        {\n            ret[i].b = j;\n        }\n    }\n    \n    sort(ret, (a, b) -> b.a - a.a);\n    \n    for (int i = 0; i < ret.length; i++)\n    {\n        for (int j = 0; j < ret[i].a; j++)\n        {\n            ret[i].b = j;\n        }\n    }\n    \n    return ret;\n}\n",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length == 0)\n            continue;\n        \n        long min = lst[i][0];\n        long max = lst[i][0];\n        \n        for(int j = 1; j < lst[i].length; j++)\n        {\n            if(lst[i][j] < min)\n                min = lst[i][j];\n            \n            if(lst[i][j] > max)\n                max = lst[i][j];\n        }\n        \n        if(min == x)\n        {\n            res[i] = tuple(i, 0L);\n            continue;\n        }\n        \n        if(max == x)\n        {\n            res[i] = tuple(i, lst[i].length - 1L);\n            continue;\n        }\n        \n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n            {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long[] sorted_by_columns = new long[lst[i].length];\n        for (int j = 0; j < lst[i].length; j++) {\n            sorted_by_columns[j] = lst[i][j];\n        }\n        \n        Arrays.sort(sorted_by_columns);\n        \n        for (int j = 0; j < sorted_by_columns.length; j++) {\n            if (sorted_by_columns[j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            result[i] = tuple(lst[i][0], i);\n        }\n    }\n    \n    sort(result, tuple(0, 0L));\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            sort(result[i], tuple(lst[i].length - 1, 0L));\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            for (int j = 0; j < lst[i].length; j++) {\n                if (lst[i][j] == x) {\n                    result[i] = tuple(j, i);\n                    break;\n                }\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            continue;\n        }\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            result[i] = tuple(0L, 0L);\n        } else {\n            long[] row = lst[i];\n            long row_x = row[0];\n            long row_y = row[1];\n            \n            if (row_x == x) {\n                result[i] = tuple(row_x, row_y);\n            } else if (row_x > x) {\n                result[i] = tuple(row_x, row_y);\n            } else {\n                result[i] = tuple(row_x, row_y);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    long[] rows = new long[lst.length];\n    long[] columns = new long[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        rows[i] = i;\n        for (int j = 0; j < lst[i].length; j++)\n            columns[j] = j;\n    }\n    \n    sort(rows, columns, lst);\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(rows[i], columns[j]);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i].length == 0) {\n            res[i] = tuple(0L, 0L);\n        } else {\n            long[] row = lst[i];\n            long[] sorted_row = new long[row.length];\n            for (int j = 0; j < row.length; j++) {\n                sorted_row[j] = row[j];\n            }\n            sorted_row = sort(sorted_row, 1L);\n            for (int j = 0; j < sorted_row.length; j++) {\n                if (sorted_row[j] == x) {\n                    res[i] = tuple(i, j);\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\n",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n        {\n            result[i] = tuple(0L, 0L);\n            continue;\n        }\n        \n        long min_col = lst[i][0];\n        long max_col = lst[i][0];\n        \n        for (int j = 1; j < lst[i].length; j++)\n        {\n            if (lst[i][j] < min_col)\n                min_col = lst[i][j];\n            \n            if (lst[i][j] > max_col)\n                max_col = lst[i][j];\n        }\n        \n        result[i] = tuple(i, max_col - min_col + 1);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        for (int j = 0; j < result[i].length; j++)\n        {\n            result[i] = tuple(result[i].x, result[i].y - j);\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        ret[i] = tuple(lst.length - 1, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                ret[j] = tuple(i, lst[i].length - 1 - j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length == 0)\n            continue;\n        \n        long[] row = lst[i];\n        \n        // sort coordinates by rows in ascending order\n        sort(row, 0, row.length - 1, 0);\n        \n        // sort coordinates of the row by columns in descending order\n        sort(row, 0, row.length - 1, 1);\n        \n        // find the coordinate of the given x\n        int index = binarySearch(row, 0, row.length - 1, x);\n        \n        if(index == -1)\n            continue;\n        \n        result[i] = tuple(index, row[index]);\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(lst[i][j], j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++)\n        for (int j = 0; j < lst[i].length; j++)\n            if (lst[i][j] == x)\n                res[i] = new Tuple!(i, j);\n    \n    if (res.length == 0)\n        return res;\n    \n    Tuple!(long, long)[] sorted_res = new Tuple!(long, long)[res.length];\n    for (int i = 0; i < res.length; i++)\n        sorted_res[i] = res[i];\n    \n    sort(sorted_res, (a, b) -> a.row - b.row);\n    sort(sorted_res, (a, b) -> a.column - b.column);\n    \n    return sorted_res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a[0] - b[0]);\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst[0].length; i++)\n    {\n        result[i] = tuple(x, i);\n    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        long row = lst[i][0];\n        long column = lst[i][lst[i].length - 1];\n        \n        if (row == x)\n        {\n            result[i] = tuple(row, column);\n            continue;\n        }\n        \n        for (int j = 0; j < lst[i].length - 1; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[i] = tuple(row, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][0] - 1);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> b - a);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        long[] row = lst[i];\n        \n        if (row.length == 0)\n            continue;\n        \n        long row_x = row[0];\n        long row_y = row[1];\n        \n        if (row_x == x)\n        {\n            result[i] = tuple(row_x, row_y);\n            continue;\n        }\n        \n        if (row_x > x)\n            continue;\n        \n        long row_x_min = row_x;\n        long row_y_min = row_y;\n        \n        for (int j = 2; j < row.length; j++)\n        {\n            long row_x_j = row[j];\n            long row_y_j = row[j + 1];\n            \n            if (row_x_j > x)\n                continue;\n            \n            if (row_x_j < row_x_min)\n                row_x_min = row_x_j;\n            \n            if (row_y_j > row_y_min)\n                row_y_min = row_y_j;\n        }\n        \n        result[i] = tuple(row_x_min, row_y_min);\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                result[j] = tuple(i, j);\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, lst[i][x % lst[i].length]);\n        x /= lst[i].length;\n    }\n    \n    return result;\n}",
    "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        ret[i] = tuple(i, lst[i].length);\n    }\n    \n    sort(ret, (t1, t2) -> t1.row < t2.row || (t1.row == t2.row && t1.column < t2.column));\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                ret[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(lst[i].length, i);\n    }\n    \n    sort(result, (a, b) -> a.row - b.row);\n    \n    for (int i = 0; i < lst.length; i++) {\n        sort(lst[i], (a, b) -> b - a);\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst[0].length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[j] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    if (lst.length == 0)\n        return [];\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i].length == 0)\n            continue;\n        \n        long y = lst[i][0];\n        \n        for (int j = 1; j < lst[i].length; j++)\n        {\n            if (lst[i][j] == x)\n            {\n                res[i] = tuple(y, j);\n                break;\n            }\n            \n            y = lst[i][j];\n        }\n    }\n    \n    return res;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    int i = 0;\n    for (long[] row : lst) {\n        for (long j = 0; j < row.length; j++) {\n            if (row[j] == x) {\n                result[i] = tuple(j, i);\n                break;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
    "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = tuple(i, lst[i].length);\n    }\n    \n    sort(result, (a, b) -> a.row < b.row || (a.row == b.row && a.column < b.column));\n    \n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result[i] = tuple(i, j);\n                break;\n            }\n        }\n    }\n    \n    return result;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}