{
  "name": "HumanEval_77_iscube",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n",
  "tests": "unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 3 == 1) return false;\n    if (a % 3 == 2) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd0zim6kj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpd0zim6kj.__unittest_L32_C1() [0x427a78]\n??:? void tmpd0zim6kj.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjl092_yb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpjl092_yb.__unittest_L27_C1() [0x427ac4]\n??:? void tmpjl092_yb.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a <= 9 && (a * a * a) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp02yey4n6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp02yey4n6.__unittest_L27_C1() [0x427a88]\n??:? void tmp02yey4n6.__modtest() [0x427b34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) return true;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xq8ndjg.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp7xq8ndjg.__unittest_L33_C1() [0x427adb]\n??:? void tmp7xq8ndjg.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 5 == 0) return true;\n    if (a % 6 == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo2tpzvvq.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpo2tpzvvq.__unittest_L33_C1() [0x427ac0]\n??:? void tmpo2tpzvvq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a,3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeeiiuqqs.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpeeiiuqqs.__unittest_L27_C1() [0x427ac4]\n??:? void tmpeeiiuqqs.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0) && (a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0sdega0c.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp0sdega0c.__unittest_L27_C1() [0x427a3c]\n??:? void tmp0sdega0c.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1kczfe9w.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp1kczfe9w.__unittest_L30_C1() [0x427a54]\n??:? void tmp1kczfe9w.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 5 == 0) return true;\n    if (a % 6 == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo2tpzvvq.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpo2tpzvvq.__unittest_L33_C1() [0x427ac0]\n??:? void tmpo2tpzvvq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a,3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4khbgnmi.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4khbgnmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjl092_yb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpjl092_yb.__unittest_L27_C1() [0x427ac4]\n??:? void tmpjl092_yb.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) return true;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 2 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpax7w8vgh.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpax7w8vgh.__unittest_L31_C1() [0x427acb]\n??:? void tmpax7w8vgh.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph04f3qh0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph04f3qh0.__unittest_L33_C1() [0x427a60]\n??:? void tmph04f3qh0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a == 1) return true;\n    if(a == 2) return true;\n    if(a == 3) return true;\n    if(a == 4) return true;\n    if(a == 5) return true;\n    if(a == 6) return true;\n    if(a == 7) return true;\n    if(a == 8) return true;\n    if(a == 9) return true;\n    if(a == 10) return true;\n    if(a == 11) return true;\n    if(a == 12) return true;\n    if(a == 13) return true;\n    if(a == 14) return true;\n    if(a == 15) return true;\n    if(a == 16) return true;\n    if(a == 17) return true;\n    if(a == 18) return true;\n    if(a == 19) return true;\n    if(a == 20) return true;\n    if(a == 21) return true;\n    if(a == 22) return true;\n    if(a == 23) return true;\n    if(a == 24) return true;\n    if(a == 25) return true;\n    if(a == 26) return true;\n    if(a == 27) return true;\n    if(a == 28) return true;\n    if(a == 29) return true;\n    if(a == 30) return true;\n    if(a == 31) return true;\n    if(a == 32) return true;\n    if(a == 33) return true;\n    if(a == 34) return true;\n    if(a == 35) return true;\n    if(a == 36) return true;\n    if(a == 37) return true;\n    if(a == 38) return true;\n    if(a == 39) return true;\n    if(a == 40) return true;\n    if(a == 41) return true;\n    if(a == 42) return true;\n    if(a == 43) return true;\n    if(a == 44) return true;\n    if(a\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmprrrutxpr.d(72): Error: found `unittest` when expecting `)`\n/tmp/tmprrrutxpr.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrrutxpr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a == 1) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    if(a % 7 == 0) return false;\n    if(a % 8 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 10 == 0) return false;\n    if(a % 11 == 0) return false;\n    if(a % 12 == 0) return false;\n    if(a % 13 == 0) return false;\n    if(a % 14 == 0) return false;\n    if(a % 15 == 0) return false;\n    if(a % 16 == 0) return false;\n    if(a % 17 == 0) return false;\n    if(a % 18 == 0) return false;\n    if(a % 19 == 0) return false;\n    if(a % 20 == 0) return false;\n    if(a % 21 == 0) return false;\n    if(a % 22 == 0) return false;\n    if(a % 23 == 0) return false;\n    if(a % 24 == 0) return false;\n    if(a % 25 == 0) return false;\n    if(a % 26 == 0) return false;\n    if(a % 27 == 0) return false;\n    if(a % 28 == 0) return false;\n    if(a % 29 == 0) return false;\n    if(a % 30 == 0) return false;\n    if(a % 31 == 0) return false;\n    if(a % 32 == 0) return false;\n    if(a % 33 == 0) return false;\n    if(a % 34 == 0) return false;\n    if(a % 35 == 0) return false;\n    if(a % 36 == 0) return false;\n    if(a % 37 == 0) return false;\n    if(a % 38 == 0) return false;\n    if(a % 39 == 0)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmphopfb7xh.d(65): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphopfb7xh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 4 == 0)\n        return false;\n    if (a % 5 == 0)\n        return false;\n    if (a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hkvj4ze.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp6hkvj4ze.__unittest_L39_C1() [0x427adb]\n??:? void tmp6hkvj4ze.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    else\n        return iscube(a / 3) || iscube(a / 3 * 2);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa7e780vb.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpa7e780vb.__unittest_L34_C1() [0x427aab]\n??:? void tmpa7e780vb.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0) || (a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_qwj8bq.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpc_qwj8bq.__unittest_L27_C1() [0x427a4c]\n??:? void tmpc_qwj8bq.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph04f3qh0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph04f3qh0.__unittest_L33_C1() [0x427a60]\n??:? void tmph04f3qh0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a,3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpyajko7ho.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpyajko7ho.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyajko7ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a == 1) return true;\n    if(a == 2) return true;\n    if(a == 3) return true;\n    if(a == 4) return true;\n    if(a == 5) return true;\n    if(a == 6) return true;\n    if(a == 7) return true;\n    if(a == 8) return true;\n    if(a == 9) return true;\n    if(a == 10) return true;\n    if(a == 11) return true;\n    if(a == 12) return true;\n    if(a == 13) return true;\n    if(a == 14) return true;\n    if(a == 15) return true;\n    if(a == 16) return true;\n    if(a == 17) return true;\n    if(a == 18) return true;\n    if(a == 19) return true;\n    if(a == 20) return true;\n    if(a == 21) return true;\n    if(a == 22) return true;\n    if(a == 23) return true;\n    if(a == 24) return true;\n    if(a == 25) return true;\n    if(a == 26) return true;\n    if(a == 27) return true;\n    if(a == 28) return true;\n    if(a == 29) return true;\n    if(a == 30) return true;\n    if(a == 31) return true;\n    if(a == 32) return true;\n    if(a == 33) return true;\n    if(a == 34) return true;\n    if(a == 35) return true;\n    if(a == 36) return true;\n    if(a == 37) return true;\n    if(a == 38) return true;\n    if(a == 39) return true;\n    if(a == 40) return true;\n    if(a == 41) return true;\n    if(a == 42) return true;\n    if(a == 43) return true;\n    if(a == 44) return true;\n    if(a\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmprrrutxpr.d(72): Error: found `unittest` when expecting `)`\n/tmp/tmprrrutxpr.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrrutxpr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a, 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpu3wb55eo.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3wb55eo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a <= 9) || (a >= 100 && a <= 999) || (a >= 1000 && a <= 9999) || (a >= 10000 && a <= 99999) || (a >= 100000 && a <= 999999) || (a >= 1000000 && a <= 9999999) || (a >= 10000000 && a <= 99999999) || (a >= 100000000 && a <= 999999999) || (a >= 1000000000 && a <= 9999999999) || (a >= 10000000000 && a <= 999999999999) || (a >= 100000000000 && a <= 9999999999999) || (a >= 1000000000000 && a <= 99999999999999) || (a >= 10000000000000 && a <= 999999999999999) || (a >= 100000000000000 && a <= 9999999999999999) || (a >= 1000000000000000 && a <= 99999999999999999) || (a >= 10000000000000000 && a <= 999999999999999999) || (a >= 100000000000000000 && a <= 9999999999999999999) || (a >= 10000000000000000000 && a <= 99999999999999999999) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (a >= 100000000000000000) || (a >= 10000000000000000000) || (\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(25): Error: signed integer overflow\n/tmp/tmpvm0cxu5w.d(26): Error: expression",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 4 == 0)\n        return false;\n    if (a % 5 == 0)\n        return false;\n    if (a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hkvj4ze.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp6hkvj4ze.__unittest_L39_C1() [0x427adb]\n??:? void tmp6hkvj4ze.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a == 3)\n        return true;\n    if(a == 4)\n        return true;\n    if(a == 5)\n        return true;\n    if(a == 6)\n        return true;\n    if(a == 7)\n        return true;\n    if(a == 8)\n        return true;\n    if(a == 9)\n        return true;\n    if(a == 10)\n        return true;\n    if(a == 11)\n        return true;\n    if(a == 12)\n        return true;\n    if(a == 13)\n        return true;\n    if(a == 14)\n        return true;\n    if(a == 15)\n        return true;\n    if(a == 16)\n        return true;\n    if(a == 17)\n        return true;\n    if(a == 18)\n        return true;\n    if(a == 19)\n        return true;\n    if(a == 20)\n        return true;\n    if(a == 21)\n        return true;\n    if(a == 22)\n        return true;\n    if(a == 23)\n        return true;\n    if(a == 24)\n        return true;\n    if(a == 25)\n        return true;\n    if(a == 26)\n        return true;\n    if(a == 27)\n        return true;\n    if(a == 28)\n        return true;\n    if(a == 29)\n        return true;\n    if(a == 30)\n        return true;\n    if(a == 31)\n        return true;\n    if(a == 32)\n        return true;\n    if(a == 33)\n        return true;\n    if(a == 34)\n        return true;\n    if(a == 35)\n        return true;\n    if(a == 36)\n        return true;\n    if(a == 37)\n        return true;\n    if(\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmprs_h1bue.d(104): Error: expression expected, not `unittest`\n/tmp/tmprs_h1bue.d(105): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs_h1bue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 3 == 1) return false;\n    if (a % 3 == 2) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd0zim6kj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpd0zim6kj.__unittest_L32_C1() [0x427a78]\n??:? void tmpd0zim6kj.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a % 3 == 0)\n        return true;\n    if(a % 3 == 1)\n        return false;\n    if(a % 3 == 2)\n        return true;\n    if(a % 4 == 0)\n        return true;\n    if(a % 4 == 1)\n        return false;\n    if(a % 4 == 2)\n        return true;\n    if(a % 4 == 3)\n        return false;\n    if(a % 5 == 0)\n        return true;\n    if(a % 5 == 1)\n        return false;\n    if(a % 5 == 2)\n        return true;\n    if(a % 5 == 3)\n        return false;\n    if(a % 5 == 4)\n        return true;\n    if(a % 6 == 0)\n        return true;\n    if(a % 6 == 1)\n        return false;\n    if(a % 6 == 2)\n        return true;\n    if(a % 6 == 3)\n        return false;\n    if(a % 6 == 4)\n        return true;\n    if(a % 6 == 5)\n        return false;\n    if(a % 7 == 0)\n        return true;\n    if(a % 7 == 1)\n        return false;\n    if(a % 7 == 2)\n        return true;\n    if(a % 7 == 3)\n        return false;\n    if(a % 7 == 4)\n        return true;\n    if(a % 7 == 5)\n        return false;\n    if(a % 7 == 6)\n        return true;\n    if(a % 7 == 7)\n        return false;\n    if(a % 8 == 0)\n        return true;\n    if(a % 8 == 1)\n        return false;\n    if(a % 8 == 2)\n        return true;\n    if(a % 8 == 3)\n        return false;\n    if(a % 8 == 4\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpssagcbla.d(94): Error: found `unittest` when expecting `)`\n/tmp/tmpssagcbla.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssagcbla.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz024kk9y.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpz024kk9y.__unittest_L33_C1() [0x427adf]\n??:? void tmpz024kk9y.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a,3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpyajko7ho.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpyajko7ho.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyajko7ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) return true;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xq8ndjg.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp7xq8ndjg.__unittest_L33_C1() [0x427adb]\n??:? void tmp7xq8ndjg.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return false;\n    if (a % 2 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplmni_xcm.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmplmni_xcm.__unittest_L35_C1() [0x427aac]\n??:? void tmplmni_xcm.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 5 == 0) return true;\n    if(a % 6 == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpacdzsv3q.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpacdzsv3q.__unittest_L33_C1() [0x427ac0]\n??:? void tmpacdzsv3q.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph04f3qh0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph04f3qh0.__unittest_L33_C1() [0x427a60]\n??:? void tmph04f3qh0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && a % 3 == 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcur53wwj.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpcur53wwj.__unittest_L27_C1() [0x427a3c]\n??:? void tmpcur53wwj.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 4 == 0)\n        return false;\n    if (a % 5 == 0)\n        return false;\n    if (a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hkvj4ze.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp6hkvj4ze.__unittest_L39_C1() [0x427adb]\n??:? void tmp6hkvj4ze.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && (a % 3 == 0 || a % 5 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw1o4v61w.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw1o4v61w.__unittest_L27_C1() [0x427a50]\n??:? void tmpw1o4v61w.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a == 1) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    if(a % 7 == 0) return false;\n    if(a % 8 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 10 == 0) return false;\n    if(a % 11 == 0) return false;\n    if(a % 12 == 0) return false;\n    if(a % 13 == 0) return false;\n    if(a % 14 == 0) return false;\n    if(a % 15 == 0) return false;\n    if(a % 16 == 0) return false;\n    if(a % 17 == 0) return false;\n    if(a % 18 == 0) return false;\n    if(a % 19 == 0) return false;\n    if(a % 20 == 0) return false;\n    if(a % 21 == 0) return false;\n    if(a % 22 == 0) return false;\n    if(a % 23 == 0) return false;\n    if(a % 24 == 0) return false;\n    if(a % 25 == 0) return false;\n    if(a % 26 == 0) return false;\n    if(a % 27 == 0) return false;\n    if(a % 28 == 0) return false;\n    if(a % 29 == 0) return false;\n    if(a % 30 == 0) return false;\n    if(a % 31 == 0) return false;\n    if(a % 32 == 0) return false;\n    if(a % 33 == 0) return false;\n    if(a % 34 == 0) return false;\n    if(a % 35 == 0) return false;\n    if(a % 36 == 0) return false;\n    if(a % 37 == 0) return false;\n    if(a % 38 == 0) return false;\n    if(a % 39 == 0)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmphopfb7xh.d(65): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphopfb7xh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a,3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4khbgnmi.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4khbgnmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozq6d8bh.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427f0d]\n??:? void tmpozq6d8bh.__unittest_L42_C1() [0x427bc3]\n??:? void tmpozq6d8bh.__modtest() [0x427c90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aac6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]\n??:? runModuleUnitTests [0x42ba09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42835c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a < 0)\n        return true;\n    if(a == 0)\n        return true;\n    if(a % 3 == 0)\n        return false;\n    if(a % 4 == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n    if(a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vbirfhb.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp8vbirfhb.__unittest_L39_C1() [0x427adb]\n??:? void tmp8vbirfhb.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a == 1) return true;\n    if(a % 3 == 0) return false;\n    if(a % 2 == 0) return false;\n    return iscube(a / 3) && iscube(a / 2);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4guyhwur.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp4guyhwur.__unittest_L32_C1() [0x427ae8]\n??:? void tmp4guyhwur.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 3 == 1) return false;\n    if (a % 3 == 2) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd0zim6kj.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpd0zim6kj.__unittest_L32_C1() [0x427a78]\n??:? void tmpd0zim6kj.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a < 0)\n        return true;\n    if(a == 0)\n        return true;\n    if(a % 3 == 0)\n        return false;\n    if(a % 4 == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n    if(a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vbirfhb.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp8vbirfhb.__unittest_L39_C1() [0x427adb]\n??:? void tmp8vbirfhb.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 5 == 0) return true;\n    if(a % 6 == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpacdzsv3q.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpacdzsv3q.__unittest_L33_C1() [0x427ac0]\n??:? void tmpacdzsv3q.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 2 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1uy0hn7f.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp1uy0hn7f.__unittest_L35_C1() [0x427acb]\n??:? void tmp1uy0hn7f.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0) || (a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_qwj8bq.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpc_qwj8bq.__unittest_L27_C1() [0x427a4c]\n??:? void tmpc_qwj8bq.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 3 == 1) return false;\n    if (a % 3 == 2) return false;\n    return iscube(a / 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpygvf74m_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpygvf74m_.__unittest_L32_C1() [0x427a88]\n??:? void tmpygvf74m_.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a < 0)\n        return true;\n    if(a == 0)\n        return true;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a == 3)\n        return true;\n    if(a == 4)\n        return true;\n    if(a == 5)\n        return true;\n    if(a == 6)\n        return true;\n    if(a == 7)\n        return true;\n    if(a == 8)\n        return true;\n    if(a == 9)\n        return true;\n    if(a == 10)\n        return true;\n    if(a == 11)\n        return true;\n    if(a == 12)\n        return true;\n    if(a == 13)\n        return true;\n    if(a == 14)\n        return true;\n    if(a == 15)\n        return true;\n    if(a == 16)\n        return true;\n    if(a == 17)\n        return true;\n    if(a == 18)\n        return true;\n    if(a == 19)\n        return true;\n    if(a == 20)\n        return true;\n    if(a == 21)\n        return true;\n    if(a == 22)\n        return true;\n    if(a == 23)\n        return true;\n    if(a == 24)\n        return true;\n    if(a == 25)\n        return true;\n    if(a == 26)\n        return true;\n    if(a == 27)\n        return true;\n    if(a == 28)\n        return true;\n    if(a == 29)\n        return true;\n    if(a == 30)\n        return true;\n    if(a == 31)\n        return true;\n    if(a == 32)\n        return true;\n    if(a == 33)\n        return true;\n    if(a == 34)\n        return true;\n    if(a == 35)\n        return true;\n    if(a == 36)\n        return true;\n    if(a == 37)\n        return true;\n    if(\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpt6iv96kq.d(104): Error: expression expected, not `unittest`\n/tmp/tmpt6iv96kq.d(105): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6iv96kq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std.math.pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc9u06pt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpkc9u06pt.__unittest_L27_C1() [0x427adb]\n??:? void tmpkc9u06pt.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a,3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4khbgnmi.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4khbgnmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a < 0)\n        return true;\n    if(a == 0)\n        return true;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a == 3)\n        return true;\n    if(a == 4)\n        return true;\n    if(a == 5)\n        return true;\n    if(a == 6)\n        return true;\n    if(a == 7)\n        return true;\n    if(a == 8)\n        return true;\n    if(a == 9)\n        return true;\n    if(a == 10)\n        return true;\n    if(a == 11)\n        return true;\n    if(a == 12)\n        return true;\n    if(a == 13)\n        return true;\n    if(a == 14)\n        return true;\n    if(a == 15)\n        return true;\n    if(a == 16)\n        return true;\n    if(a == 17)\n        return true;\n    if(a == 18)\n        return true;\n    if(a == 19)\n        return true;\n    if(a == 20)\n        return true;\n    if(a == 21)\n        return true;\n    if(a == 22)\n        return true;\n    if(a == 23)\n        return true;\n    if(a == 24)\n        return true;\n    if(a == 25)\n        return true;\n    if(a == 26)\n        return true;\n    if(a == 27)\n        return true;\n    if(a == 28)\n        return true;\n    if(a == 29)\n        return true;\n    if(a == 30)\n        return true;\n    if(a == 31)\n        return true;\n    if(a == 32)\n        return true;\n    if(a == 33)\n        return true;\n    if(a == 34)\n        return true;\n    if(a == 35)\n        return true;\n    if(a == 36)\n        return true;\n    if(a == 37)\n        return true;\n    if(\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpt6iv96kq.d(104): Error: expression expected, not `unittest`\n/tmp/tmpt6iv96kq.d(105): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6iv96kq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyxv861dl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpyxv861dl.__unittest_L30_C1() [0x427a60]\n??:? void tmpyxv861dl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 81 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp716071ay.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp716071ay.__unittest_L33_C1() [0x427acf]\n??:? void tmp716071ay.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a, 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpu3wb55eo.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3wb55eo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (long)math.pow(a,3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4khbgnmi.d(25): Error: C style cast illegal, use `cast(long)math.pow(a, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4khbgnmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a <= 9) || (a >= 100 && a <= 999) || (a >= 1000 && a <= 9999) || (a >= 10000 && a <= 99999) || (a >= 100000 && a <= 999999) || (a >= 1000000 && a <= 9999999) || (a >= 10000000 && a <= 99999999) || (a >= 100000000 && a <= 999999999) || (a >= 1000000000 && a <= 9999999999) || (a >= 10000000000 && a <= 999999999999) || (a >= 100000000000 && a <= 9999999999999) || (a >= 1000000000000 && a <= 99999999999999) || (a >= 10000000000000 && a <= 999999999999999) || (a >= 100000000000000 && a <= 9999999999999999) || (a >= 1000000000000000 && a <= 99999999999999999) || (a >= 10000000000000000 && a <= 999999999999999999) || (a >= 100000000000000000 && a <= 9999999999999999999) || (a >= 10000000000000000000 && a <= 99999999999999999999) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) || (a >= 100000000000000000) ||\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpgka73y36.d(25): Error: signed integer overflow\n/tmp/tmpgka73y36.d(25): Error: signed integer overflow\n/tmp/tmpgka73y36.d(25): Error: integer overflow\n/tmp/tmpgka73y36.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgka73y36.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgka73y36.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a == 3)\n        return true;\n    if(a == 4)\n        return true;\n    if(a == 5)\n        return true;\n    if(a == 6)\n        return true;\n    if(a == 7)\n        return true;\n    if(a == 8)\n        return true;\n    if(a == 9)\n        return true;\n    if(a == 10)\n        return true;\n    if(a == 11)\n        return true;\n    if(a == 12)\n        return true;\n    if(a == 13)\n        return true;\n    if(a == 14)\n        return true;\n    if(a == 15)\n        return true;\n    if(a == 16)\n        return true;\n    if(a == 17)\n        return true;\n    if(a == 18)\n        return true;\n    if(a == 19)\n        return true;\n    if(a == 20)\n        return true;\n    if(a == 21)\n        return true;\n    if(a == 22)\n        return true;\n    if(a == 23)\n        return true;\n    if(a == 24)\n        return true;\n    if(a == 25)\n        return true;\n    if(a == 26)\n        return true;\n    if(a == 27)\n        return true;\n    if(a == 28)\n        return true;\n    if(a == 29)\n        return true;\n    if(a == 30)\n        return true;\n    if(a == 31)\n        return true;\n    if(a == 32)\n        return true;\n    if(a == 33)\n        return true;\n    if(a == 34)\n        return true;\n    if(a == 35)\n        return true;\n    if(a == 36)\n        return true;\n    if(a == 37)\n        return true;\n    if(\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmprs_h1bue.d(104): Error: expression expected, not `unittest`\n/tmp/tmprs_h1bue.d(105): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs_h1bue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a > 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpraf8pakw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpraf8pakw.__unittest_L27_C1() [0x427a3c]\n??:? void tmpraf8pakw.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7cxz9agc.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp7cxz9agc.__unittest_L33_C1() [0x427adb]\n??:? void tmp7cxz9agc.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozq6d8bh.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427f0d]\n??:? void tmpozq6d8bh.__unittest_L42_C1() [0x427bc3]\n??:? void tmpozq6d8bh.__modtest() [0x427c90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aac6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]\n??:? runModuleUnitTests [0x42ba09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42835c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a,3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpyajko7ho.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpyajko7ho.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyajko7ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 4 == 0)\n        return false;\n    if (a % 5 == 0)\n        return false;\n    if (a % 6 == 0)\n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hkvj4ze.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp6hkvj4ze.__unittest_L39_C1() [0x427adb]\n??:? void tmp6hkvj4ze.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfuqwt7zq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpfuqwt7zq.__unittest_L33_C1() [0x427adf]\n??:? void tmpfuqwt7zq.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && (a % 3 == 0 || a % 5 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw1o4v61w.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw1o4v61w.__unittest_L27_C1() [0x427a50]\n??:? void tmpw1o4v61w.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprucq88x0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmprucq88x0.__unittest_L33_C1() [0x427a60]\n??:? void tmprucq88x0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a <= 9 && (a * a * a) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp02yey4n6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp02yey4n6.__unittest_L27_C1() [0x427a88]\n??:? void tmp02yey4n6.__modtest() [0x427b34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a == 1)\n        return true;\n    if(a == 2)\n        return true;\n    if(a == 3)\n        return true;\n    if(a == 4)\n        return true;\n    if(a == 5)\n        return true;\n    if(a == 6)\n        return true;\n    if(a == 7)\n        return true;\n    if(a == 8)\n        return true;\n    if(a == 9)\n        return true;\n    if(a == 10)\n        return true;\n    if(a == 11)\n        return true;\n    if(a == 12)\n        return true;\n    if(a == 13)\n        return true;\n    if(a == 14)\n        return true;\n    if(a == 15)\n        return true;\n    if(a == 16)\n        return true;\n    if(a == 17)\n        return true;\n    if(a == 18)\n        return true;\n    if(a == 19)\n        return true;\n    if(a == 20)\n        return true;\n    if(a == 21)\n        return true;\n    if(a == 22)\n        return true;\n    if(a == 23)\n        return true;\n    if(a == 24)\n        return true;\n    if(a == 25)\n        return true;\n    if(a == 26)\n        return true;\n    if(a == 27)\n        return true;\n    if(a == 28)\n        return true;\n    if(a == 29)\n        return true;\n    if(a == 30)\n        return true;\n    if(a == 31)\n        return true;\n    if(a == 32)\n        return true;\n    if(a == 33)\n        return true;\n    if(a == 34)\n        return true;\n    if(a == 35)\n        return true;\n    if(a == 36)\n        return true;\n    if(a == 37)\n        return true;\n    if(\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmprs_h1bue.d(104): Error: expression expected, not `unittest`\n/tmp/tmprs_h1bue.d(105): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs_h1bue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == (a * a * a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmiarzdod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpmiarzdod.__unittest_L27_C1() [0x427a93]\n??:? void tmpmiarzdod.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0) || (a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_qwj8bq.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpc_qwj8bq.__unittest_L27_C1() [0x427a4c]\n??:? void tmpc_qwj8bq.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm120j9bz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpm120j9bz.__unittest_L30_C1() [0x427a60]\n??:? void tmpm120j9bz.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0 && std.math.pow(a,3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6yc9j7fj.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmp6yc9j7fj.__unittest_L27_C1() [0x427ac4]\n??:? void tmp6yc9j7fj.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) return true;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xq8ndjg.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp7xq8ndjg.__unittest_L33_C1() [0x427adb]\n??:? void tmp7xq8ndjg.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 3 == 1) return false;\n    if(a % 3 == 2) return false;\n    return iscube(a / 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqg4ctjc1.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpqg4ctjc1.__unittest_L32_C1() [0x427a88]\n??:? void tmpqg4ctjc1.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a >= 0 && std.math.pow(a, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_i3pdu8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpm_i3pdu8.__unittest_L27_C1() [0x427ac4]\n??:? void tmpm_i3pdu8.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return true;\n    if(a % 3 == 1)\n        return false;\n    if(a % 3 == 2)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc3e0jdgv.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpc3e0jdgv.__unittest_L37_C1() [0x427a78]\n??:? void tmpc3e0jdgv.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a >= 0 && a % 3 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4lz9k1f4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmp4lz9k1f4.__unittest_L27_C1() [0x427a3c]\n??:? void tmp4lz9k1f4.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 == 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a % 39 == 0) return false;\n    if (a % 40 ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpugcpqsrc.d(65): Error: expression expected, not `unittest`\n/tmp/tmpugcpqsrc.d(66): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugcpqsrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a % 9 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp50h6o1ne.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp50h6o1ne.__unittest_L27_C1() [0x427a30]\n??:? void tmp50h6o1ne.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph04f3qh0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph04f3qh0.__unittest_L33_C1() [0x427a60]\n??:? void tmph04f3qh0.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == std::pow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpcpjsk179.d(25): Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpcpjsk179.d(25): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpjsk179.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns true \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == (a * a * a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppvhqm1gr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmppvhqm1gr.__unittest_L27_C1() [0x427a93]\n??:? void tmppvhqm1gr.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}