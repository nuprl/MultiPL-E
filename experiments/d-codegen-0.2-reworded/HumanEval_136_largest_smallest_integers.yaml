name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in an array.\n    If there is no\
  \ negative or positive integers, return them as null.\n\n    Examples:\n    >>>\
  \ largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n   \
  \ >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
  \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    \n    long a = lst[0];\n    long\
    \ b = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ > a)\n            a = lst[i];\n        if (lst[i] < b)\n            b = lst[i];\n\
    \    }\n    return Tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long max = lst[0];\n    long min = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] > max)\n       \
    \     max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n  \
    \  }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n     \
    \   return tuple(null, null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst)\n    {\n        if (i < min)\n            min = i;\n \
    \       if (i > max)\n            max = i;\n    }\n    return tuple(null, min);\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n        b = Nullable!(long);\n\
    \    }\n    else\n    {\n        for (long i = 0; i < lst.length; i++)\n     \
    \   {\n            if (lst[i] < 0)\n            {\n                if (a == Nullable!(long))\n\
    \                {\n                    a = lst[i];\n                }\n     \
    \           else if (lst[i] > a)\n                {\n                    a = lst[i];\n\
    \                }\n            }\n            else if (lst[i] > 0)\n        \
    \    {\n                if (b == Nullable!(long))\n                {\n       \
    \             b = lst[i];\n                }\n                else if (lst[i]\
    \ < b)\n                {\n                    b = lst[i];\n                }\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Nullable.Null, Nullable.Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Nullable.Null, Nullable.Null);\n}\n", "{\n    if (lst.length ==\
    \ 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Null, max);\n}\n", "{\n    Nullable!(long)\
    \ a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    for (long\
    \ i : lst)\n    {\n        if (i < 0)\n        {\n            a = i;\n       \
    \ }\n        else if (i > 0)\n        {\n            b = i;\n        }\n    }\n\
    \    return tuple(a, b);\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    if (lst.length == 0)\n    {\n \
    \       a = Nullable!(long);\n        b = Nullable!(long);\n    }\n    else\n\
    \    {\n        a = lst[0];\n        b = lst[0];\n        for (int i = 1; i <\
    \ lst.length; i++)\n        {\n            if (lst[i] > a)\n            {\n  \
    \              a = lst[i];\n            }\n            if (lst[i] < b)\n     \
    \       {\n                b = lst[i];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long)\
    \ b = Nullable!(long);\n    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n\
    \        b = Nullable!(long);\n    }\n    else\n    {\n        a = lst[0];\n \
    \       b = lst[0];\n        for (int i = 1; i < lst.length; i++)\n        {\n\
    \            if (lst[i] > a)\n            {\n                a = lst[i];\n   \
    \         }\n            if (lst[i] < b)\n            {\n                b = lst[i];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Nullable(long), Nullable(long));\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return tuple(max, min);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n           \
    \ min = i;\n        if (i > max)\n            max = i;\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return Tuple(Null, Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    \n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Null, Null);\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n           \
    \ min = i;\n        if (i > max)\n            max = i;\n    }\n    \n    return\
    \ Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Nullable(long), Nullable(long));\n    \n    long\
    \ max = Long.MIN_VALUE;\n    long min = Long.MAX_VALUE;\n    \n    for (long i\
    \ : lst)\n    {\n        if (i < 0)\n        {\n            if (i > max)\n   \
    \             max = i;\n        }\n        else if (i > 0)\n        {\n      \
    \      if (i < min)\n                min = i;\n        }\n    }\n    \n    return\
    \ Tuple(Nullable(max), Nullable(min));\n}\n", "{\n    if (lst.length == 0)\n \
    \       return tuple(null, null);\n    long a = -lst[0];\n    long b = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < a)\n       \
    \     a = lst[i];\n        if (lst[i] > b)\n            b = lst[i];\n    }\n \
    \   return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long max_negative = Long.MIN_VALUE;\n\
    \    long min_positive = Long.MAX_VALUE;\n    \n    for (long i : lst)\n    {\n\
    \        if (i < 0)\n            max_negative = Math.max(max_negative, i);\n \
    \       else\n            min_positive = Math.min(min_positive, i);\n    }\n \
    \   \n    if (max_negative == Long.MIN_VALUE && min_positive == Long.MAX_VALUE)\n\
    \        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    return tuple(Nullable.nonnull(long.class), Nullable.nonnull(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return Tuple(Nullable(min), Nullable(max));\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable(min),\
    \ Nullable(max));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n    for (int i\
    \ = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n   \
    \ return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n\
    \    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long max = lst[0];\n\
    \    long min = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n \
    \   for (long i : lst)\n    {\n        if (i < min)\n            min = i;\n  \
    \      if (i > max)\n            max = i;\n    }\n    return Tuple(Null, min);\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        return tuple(a, b);\n    }\n    else\n\
    \    {\n        long max = lst[0];\n        long min = lst[0];\n        for (long\
    \ i = 1; i < lst.length; i++)\n        {\n            if (lst[i] > max)\n    \
    \        {\n                max = lst[i];\n            }\n            if (lst[i]\
    \ < min)\n            {\n                min = lst[i];\n            }\n      \
    \  }\n        a = max;\n        b = min;\n        return tuple(a, b);\n    }\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullValue(),\
    \ Nullable.nullValue());\n    long max = lst[0];\n    long min = lst[0];\n   \
    \ for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] > max)\n   \
    \         max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n}\n", "{\n    if\
    \ (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n \
    \   \n    long max = lst[0];\n    long min = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] > max)\n            max = lst[i];\n \
    \       if (lst[i] < min)\n            min = lst[i];\n    }\n    return Tuple(Nullable(max),\
    \ Nullable(min));\n}\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullValue(),\
    \ Nullable.nullValue());\n    long min = lst[0];\n    long max = lst[0];\n   \
    \ for (long i : lst) {\n        if (i < min)\n            min = i;\n        if\
    \ (i > max)\n            max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n\
    }\n", "{\n    Nullable!(long) a = null;\n    Nullable!(long) b = null;\n    \n\
    \    for (long i : lst)\n    {\n        if (i < 0)\n        {\n            if\
    \ (a == null)\n            {\n                a = i;\n            }\n        \
    \    else if (i > a)\n            {\n                a = i;\n            }\n \
    \       }\n        else if (i > 0)\n        {\n            if (b == null)\n  \
    \          {\n                b = i;\n            }\n            else if (i <\
    \ b)\n            {\n                b = i;\n            }\n        }\n    }\n\
    \    \n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0) {\n       \
    \ return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    }\n    long max = Long.MIN_VALUE;\n    long min = Long.MAX_VALUE;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            if (i > max) {\n       \
    \         max = i;\n            }\n        } else if (i > 0) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n        }\n    }\n   \
    \ return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n\
    \    long max = lst[0];\n    long min = lst[0];\n    for (long i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] > max)\n            max = lst[i];\n        if\
    \ (lst[i] < min)\n            min = lst[i];\n    }\n    \n    if (max < 0)\n \
    \       return Tuple(Null, min);\n    if (min > 0)\n        return Tuple(max,\
    \ Null);\n    return Tuple(Null, Null);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return tuple(null, null);\n    \n    long max_negative = 0;\n    long\
    \ min_positive = 0;\n    \n    for (long i : lst)\n    {\n        if (i < 0)\n\
    \        {\n            if (i > max_negative)\n                max_negative =\
    \ i;\n        }\n        else\n        {\n            if (i < min_positive)\n\
    \                min_positive = i;\n        }\n    }\n    \n    return tuple(max_negative,\
    \ min_positive);\n}\n", "{\n    if (lst.length == 0)\n        return tuple(null,\
    \ null);\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long max = -lst[0];\n    long\
    \ min = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n    }\n    return Tuple(max, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0) {\n        return Tuple(Null, Null);\n    }\n\
    \    long max = Long.MIN_VALUE;\n    long min = Long.MAX_VALUE;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        } else {\n            if (i < min) {\n  \
    \              min = i;\n            }\n        }\n    }\n    if (max == Long.MIN_VALUE)\
    \ {\n        return Tuple(Null, Null);\n    } else if (min == Long.MAX_VALUE)\
    \ {\n        return Tuple(Null, Null);\n    } else {\n        return Tuple(max,\
    \ min);\n    }\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst)\n    {\n        if (i < min)\n            min = i;\n        if (i >\
    \ max)\n            max = i;\n    }\n    \n    return Tuple(Null, max);\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n       \
    \ b = Nullable!(long);\n    }\n    else\n    {\n        for (long i : lst)\n \
    \       {\n            if (i < 0)\n            {\n                if (a == Nullable!(long))\n\
    \                {\n                    a = i;\n                }\n          \
    \      else if (i > a)\n                {\n                    a = i;\n      \
    \          }\n            }\n            else if (i > 0)\n            {\n    \
    \            if (b == Nullable!(long))\n                {\n                  \
    \  b = i;\n                }\n                else if (i < b)\n              \
    \  {\n                    b = i;\n                }\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n   \
    \ return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(null, null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst)\n    {\n        if (i < min)\n            min = i;\n        if\
    \ (i > max)\n            max = i;\n    }\n    return tuple(Nullable(max), Nullable(min));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i\
    \ < min)\n            min = i;\n        if (i > max)\n            max = i;\n \
    \   }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0) {\n  \
    \      return tuple(null, null);\n    }\n    long a = Long.MIN_VALUE;\n    long\
    \ b = Long.MAX_VALUE;\n    for (long i : lst) {\n        if (i < 0) {\n      \
    \      if (i > a) {\n                a = i;\n            }\n        } else {\n\
    \            if (i < b) {\n                b = i;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Nullable(long), Nullable(long));\n    long a = -lst[0];\n    long b =\
    \ lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < a)\n\
    \            a = lst[i];\n        if (lst[i] > b)\n            b = lst[i];\n \
    \   }\n    return Tuple(Nullable(a), Nullable(b));\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long max = lst[0];\n    long min\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n    Nullable!(long)\
    \ a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    if (lst.length\
    \ == 0) {\n        return tuple(a, b);\n    }\n    long max = lst[0];\n    long\
    \ min = lst[0];\n    for (long i : lst) {\n        if (i > max) {\n          \
    \  max = i;\n        }\n        if (i < min) {\n            min = i;\n       \
    \ }\n    }\n    if (max < 0) {\n        a = max;\n    }\n    if (min > 0) {\n\
    \        b = min;\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    \n    long max = lst[0];\n   \
    \ long min = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n    Nullable!(long)\
    \ a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            a = i;\n        }\n        if\
    \ (i > 0) {\n            b = i;\n        }\n    }\n    return tuple(a, b);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n    long\
    \ max = Long.MIN_VALUE;\n    long min = Long.MAX_VALUE;\n    for (long i : lst)\n\
    \    {\n        if (i < 0)\n            min = Math.min(i, min);\n        else\n\
    \            max = Math.max(i, max);\n    }\n    return Tuple(Null, min);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Nullable.Null, Nullable.Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable.Null, Nullable.Null);\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < min)\n            min =\
    \ i;\n        if (i > max)\n            max = i;\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n   \
    \ long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n      \
    \  if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n \
    \           max = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long max = lst[0];\n    long min\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i > max)\n           \
    \ max = i;\n        if (i < min)\n            min = i;\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return tuple(null, null);\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (long i : lst)\n    {\n        if (i > max)\n            max = i;\n \
    \       if (i < min)\n            min = i;\n    }\n    return tuple(max, min);\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Null, min);\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n    \n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    \n    long min = lst[0];\n   \
    \ long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n  \
    \          min = i;\n        if (i > max)\n            max = i;\n    }\n    return\
    \ tuple(null, min);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long),\
    \ Nullable(long));\n    \n    long min = lst[0];\n    long max = lst[0];\n   \
    \ for (long i : lst) {\n        if (i < min)\n            min = i;\n        if\
    \ (i > max)\n            max = i;\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n    \n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullValue(), Nullable.nullValue());\n \
    \   long max = -lst[0];\n    long min = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] > max)\n            max = lst[i];\n        if\
    \ (lst[i] < min)\n            min = lst[i];\n    }\n    return tuple(Nullable.of(max),\
    \ Nullable.of(min));\n}\n", "{\n    if (lst.length == 0)\n        return tuple(null,\
    \ null);\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullValue(), Nullable.nullValue());\n \
    \   \n    long max = lst[0];\n    long min = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++)\n    {\n        if (lst[i] > max)\n            max = lst[i];\n\
    \        if (lst[i] < min)\n            min = lst[i];\n    }\n    return tuple(Nullable.of(max),\
    \ Nullable.of(min));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1;\
    \ i < lst.length; i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Null,\
    \ max);\n}\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    return tuple(Nullable.of(min), Nullable.of(max));\n}\n", "{\n    if\
    \ (lst.length == 0)\n        return tuple(null, null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return tuple(null, min);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n       \
    \     min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n  \
    \  }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n     \
    \   return Tuple(Nullable(long), Nullable(long));\n    long max = -lst[0];\n \
    \   long min = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n    \
    \    if (lst[i] > max)\n            max = lst[i];\n        if (lst[i] < min)\n\
    \            min = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0) {\n        return tuple(a, b);\n    }\n    long max\
    \ = lst[0];\n    long min = lst[0];\n    for (long i : lst) {\n        if (i >\
    \ max) {\n            max = i;\n        }\n        if (i < min) {\n          \
    \  min = i;\n        }\n    }\n    if (max < 0) {\n        a = max;\n    }\n \
    \   if (min > 0) {\n        b = min;\n    }\n    return tuple(a, b);\n}\n", "{\n\
    \    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n", "{\n  \
    \  if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long a = -lst[0];\n    long b = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] > a)\n            a = lst[i];\n        if (lst[i]\
    \ < b)\n            b = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return Tuple(Null, Null);\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\n     \
    \       max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    if (max < 0)\n        return Tuple(Null, min);\n    if (min > 0)\n\
    \        return Tuple(max, Null);\n    return Tuple(Null, Null);\n}\n", "{\n \
    \   if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n \
    \   for (long i : lst)\n    {\n        if (i < min)\n            min = i;\n  \
    \      if (i > max)\n            max = i;\n    }\n    return Tuple(Null, max);\n\
    }\n", "{\n    if (lst.length == 0) {\n        return Tuple(Null, Null);\n    }\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return Tuple(Null, min);\n}\n", "{\n\
    \    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n     \
    \       max = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    \n    long max = lst[0];\n    long min = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] > max)\n            max = lst[i];\n \
    \       if (lst[i] < min)\n            min = lst[i];\n    }\n    return Tuple(Nullable(max),\
    \ Nullable(min));\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long)\
    \ b = Nullable!(long);\n    if (lst.length == 0)\n    {\n        return tuple(a,\
    \ b);\n    }\n    else\n    {\n        a = lst[0];\n        b = lst[0];\n    \
    \    for (long i = 1; i < lst.length; i++)\n        {\n            if (lst[i]\
    \ > a)\n            {\n                a = lst[i];\n            }\n          \
    \  if (lst[i] < b)\n            {\n                b = lst[i];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst)\n    {\n        if (i < min)\n            min = i;\n \
    \       if (i > max)\n            max = i;\n    }\n    return Tuple(Null, max);\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ a = -lst[0];\n    long b = lst[0];\n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < a)\n            a = lst[i];\n        if (lst[i] > b)\n\
    \            b = lst[i];\n    }\n    return Tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Null, max);\n}\n", "{\n    Nullable!(long)\
    \ a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    if (lst.length\
    \ == 0) {\n        return tuple(a, b);\n    }\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    if (min < 0) {\n        a = min;\n    }\n    if (max > 0) {\n\
    \        b = max;\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long max = lst[0];\n    long min = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++)\n    {\n        if (lst[i] > max)\n            max = lst[i];\n\
    \        if (lst[i] < min)\n            min = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n    \
    \        min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n   \
    \     return Tuple(Null, Null);\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] > max)\n\
    \            max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    return Tuple(max, min);\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    if (lst.length == 0) {\n      \
    \  return tuple(a, b);\n    }\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (long i : lst) {\n        if (i > max) {\n            max = i;\n    \
    \    }\n        if (i < min) {\n            min = i;\n        }\n    }\n    if\
    \ (max < 0) {\n        a = max;\n    }\n    if (min > 0) {\n        b = min;\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n\
    \    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n        \
    \    if (a == Nullable!(long))\n            {\n                a = i;\n      \
    \      }\n            else if (i > a)\n            {\n                a = i;\n\
    \            }\n        }\n        else if (i > 0)\n        {\n            if\
    \ (b == Nullable!(long))\n            {\n                b = i;\n            }\n\
    \            else if (i < b)\n            {\n                b = i;\n        \
    \    }\n        }\n    }\n    \n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    \n    long max = Long.MIN_VALUE;\n\
    \    long min = Long.MAX_VALUE;\n    for (long i : lst)\n    {\n        if (i\
    \ < 0)\n            min = Math.min(min, i);\n        else\n            max = Math.max(max,\
    \ i);\n    }\n    return tuple(max, min);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Nullable(long), Nullable(long));\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n     \
    \       max = lst[i];\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n       \
    \ b = Nullable!(long);\n        return tuple(a, b);\n    }\n    \n    long min\
    \ = lst[0];\n    long max = lst[0];\n    \n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n        {\n            min = lst[i];\n\
    \        }\n        if (lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    \n    if (min < 0)\n    {\n        a = min;\n    }\n  \
    \  if (max > 0)\n    {\n        b = max;\n    }\n    \n    return tuple(a, b);\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    \n    long max = lst[0];\n    long min = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n        b = Nullable!(long);\n\
    \    }\n    else\n    {\n        for (long i : lst)\n        {\n            if\
    \ (i < 0)\n            {\n                a = i;\n            }\n            else\
    \ if (i > 0)\n            {\n                b = i;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n    \n\
    \    long a = -lst[0];\n    long b = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < a)\n            a = lst[i];\n        if (lst[i]\
    \ > b)\n            b = lst[i];\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    long max = -lst[0];\n    long min = lst[0];\n    for (long i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] > max)\n            max = lst[i];\n        if\
    \ (lst[i] < min)\n            min = lst[i];\n    }\n    return Tuple(Nullable(max),\
    \ Nullable(min));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    long max = lst[0];\n    long min = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i > max)\n            max = i;\n        if (i < min)\n   \
    \         min = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long max_negative = Long.MIN_VALUE;\n    long min_positive = Long.MAX_VALUE;\n\
    \    \n    for (long i : lst)\n    {\n        if (i < 0)\n            max_negative\
    \ = Math.max(max_negative, i);\n        else\n            min_positive = Math.min(min_positive,\
    \ i);\n    }\n    \n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return tuple(max, min);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    return Tuple(Null, min);\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    \n    if (lst.length == 0)\n  \
    \  {\n        a = Nullable!(long);\n        b = Nullable!(long);\n    }\n    else\n\
    \    {\n        for (long i = 0; i < lst.length; i++)\n        {\n           \
    \ if (lst[i] > 0)\n            {\n                if (b == Nullable!(long))\n\
    \                {\n                    b = lst[i];\n                }\n     \
    \           else if (lst[i] < b)\n                {\n                    b = lst[i];\n\
    \                }\n            }\n            else if (lst[i] < 0)\n        \
    \    {\n                if (a == Nullable!(long))\n                {\n       \
    \             a = lst[i];\n                }\n                else if (lst[i]\
    \ > a)\n                {\n                    a = lst[i];\n                }\n\
    \            }\n        }\n    }\n    \n    return tuple(a, b);\n}\n", "{\n  \
    \  if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = i;\n        }\n\
    \        if (i > 0) {\n            b = i;\n        }\n    }\n    return tuple(a,\
    \ b);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable(min),\
    \ Nullable(max));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable.Null,\
    \ Nullable.Null);\n    long min = lst[0];\n    long max = lst[0];\n    for (int\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min =\
    \ lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n    return\
    \ Tuple(Nullable.of(max), Nullable.of(min));\n}\n", "{\n    if (lst.length ==\
    \ 0)\n        return tuple(null, null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n           \
    \ min = i;\n        if (i > max)\n            max = i;\n    }\n    return tuple(max,\
    \ min);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst)\n    {\n        if (i < min)\n            min = i;\n \
    \       if (i > max)\n            max = i;\n    }\n    return Tuple(Null, max);\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] > max)\n\
    \            max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    return tuple(Nullable.nonNullable(long.class), Nullable.nonNullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.null, Nullable.null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n", "{\n  \
    \  if (lst.length == 0)\n        return Tuple(Null, Null);\n    long max = lst[0];\n\
    \    long min = lst[0];\n    for (long i : lst)\n    {\n        if (i > max)\n\
    \            max = i;\n        if (i < min)\n            min = i;\n    }\n   \
    \ return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Nullable(long), Nullable(long));\n    \n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n\
    \    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n   \
    \ return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(null, null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n       \
    \     min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n  \
    \  }\n    return tuple(min, max);\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return Tuple(Nullable(long), Nullable(long));\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n    if (lst.length ==\
    \ 0)\n        return Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    Nullable!(long) a =\
    \ Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    \n    if (lst.length\
    \ == 0)\n    {\n        a = Nullable!(long);\n        b = Nullable!(long);\n \
    \   }\n    else\n    {\n        for (long i : lst)\n        {\n            if\
    \ (i < 0)\n            {\n                a = i;\n            }\n            else\
    \ if (i > 0)\n            {\n                b = i;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst)\n    {\n        if (i < min)\n            min = i;\n        if\
    \ (i > max)\n            max = i;\n    }\n    return Tuple(Null, min);\n}\n",
  "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\n     \
    \       max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    return Tuple(Nullable(min), Nullable(max));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n    long\
    \ a = -lst[0];\n    long b = lst[0];\n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < a)\n            a = lst[i];\n        if (lst[i] > b)\n\
    \            b = lst[i];\n    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    \n    long max = lst[0];\n   \
    \ long min = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n  \
    \          min = i;\n        if (i > max)\n            max = i;\n    }\n    return\
    \ Tuple(Null, min);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return Tuple(Null, Null);\n    \n    long max = lst[0];\n   \
    \ long min = lst[0];\n    for (long i = 1; i < lst.length; i++)\n    {\n     \
    \   if (lst[i] > max)\n            max = lst[i];\n        if (lst[i] < min)\n\
    \            min = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n  \
    \  Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n        \
    \    if (a == Nullable!(long))\n            {\n                a = i;\n      \
    \      }\n            else if (i > a)\n            {\n                a = i;\n\
    \            }\n        }\n        else if (i > 0)\n        {\n            if\
    \ (b == Nullable!(long))\n            {\n                b = i;\n            }\n\
    \            else if (i < b)\n            {\n                b = i;\n        \
    \    }\n        }\n    }\n    \n    return Tuple!(a, b);\n}\n", "{\n    Nullable!(long)\
    \ a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    if (lst.length\
    \ == 0)\n        return tuple(a, b);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    if (min < 0)\n        a = min;\n    if (max > 0)\n        b = max;\n\
    \    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0) {\n        return\
    \ Tuple(Null, Null);\n    }\n    long max = lst[0];\n    long min = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n        }\n        if (lst[i] < min) {\n            min\
    \ = lst[i];\n        }\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if\
    \ (lst.length == 0)\n        return tuple(null, null);\n    \n    long max = Long.MIN_VALUE;\n\
    \    long min = Long.MAX_VALUE;\n    \n    for (long i : lst)\n    {\n       \
    \ if (i < 0)\n            min = Math.min(i, min);\n        else\n            max\
    \ = Math.max(i, max);\n    }\n    \n    if (min == Long.MAX_VALUE)\n        return\
    \ tuple(null, null);\n    \n    if (max == Long.MIN_VALUE)\n        return tuple(null,\
    \ null);\n    \n    return tuple(max, min);\n}\n", "{\n    if (lst.length == 0)\n\
    \        return tuple(Nullable.nullValue(), Nullable.nullValue());\n    \n   \
    \ long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n}\n",
  "{\n    if (lst.length == 0)\n        return tuple(Nullable.null, Nullable.null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n       \
    \ b = Nullable!(long);\n        return tuple(a, b);\n    }\n    \n    long min\
    \ = lst[0];\n    long max = lst[0];\n    \n    for (long i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    \n    if (min < 0)\n \
    \   {\n        a = min;\n        b = max;\n    }\n    else if (max > 0)\n    {\n\
    \        a = max;\n        b = min;\n    }\n    else\n    {\n        a = Nullable!(long);\n\
    \        b = Nullable!(long);\n    }\n    \n    return tuple(a, b);\n}\n", "{\n\
    \    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long max_negative = Long.MIN_VALUE;\n\
    \    long min_positive = Long.MAX_VALUE;\n    \n    for (long l : lst)\n    {\n\
    \        if (l < 0)\n            max_negative = Math.max(l, max_negative);\n \
    \       else\n            min_positive = Math.min(l, min_positive);\n    }\n \
    \   \n    if (max_negative == Long.MIN_VALUE && min_positive == Long.MAX_VALUE)\n\
    \        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    return tuple(Nullable.nonnull(long.class), Nullable.nonnull(long.class));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n        b = Nullable!(long);\n\
    \    }\n    else\n    {\n        for (long i : lst)\n        {\n            if\
    \ (i < 0)\n            {\n                a = i;\n            }\n            else\
    \ if (i > 0)\n            {\n                b = i;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(null, null);\n    \n    long a = -lst[0];\n    long b = lst[0];\n    \n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < b)\n  \
    \          b = lst[i];\n        else if (lst[i] > a)\n            a = lst[i];\n\
    \    }\n    \n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n  \
    \      return Tuple(Nullable(long), Nullable(long));\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Nullable(min), Nullable(max));\n}\n", "{\n    if (lst.length ==\
    \ 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n           \
    \ min = i;\n        if (i > max)\n            max = i;\n    }\n    return Tuple(Null,\
    \ min);\n}\n", "{\n    if (lst.length == 0)\n        return tuple(null, null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(null, max);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullValue(), Nullable.nullValue());\n \
    \   \n    long a = lst[0];\n    long b = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < 0)\n        {\n            if (lst[i] > a)\n\
    \                a = lst[i];\n        }\n        else\n        {\n           \
    \ if (lst[i] < b)\n                b = lst[i];\n        }\n    }\n    return tuple(Nullable.of(a),\
    \ Nullable.of(b));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n    for (int i\
    \ = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Null,\
    \ max);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    return tuple(max, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    \n    long max = -1;\n    long\
    \ min = 1;\n    for (long i : lst)\n    {\n        if (i < min)\n            min\
    \ = i;\n        if (i > max)\n            max = i;\n    }\n    return tuple(max,\
    \ min);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        if\
    \ (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long), Nullable(long));\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    return Tuple(Nullable(min),\
    \ Nullable(max));\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    \n    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst)\n    {\n        if (i < min)\n            min = i;\n        if (i >\
    \ max)\n            max = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n\
    \    if (lst.length == 0)\n        return tuple(Nullable.nullValue(), Nullable.nullValue());\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i\
    \ < min)\n            min = i;\n        if (i > max)\n            max = i;\n \
    \   }\n    return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n    \
    \    return Tuple(Null, Null);\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        return tuple(a, b);\n    }\n    else\n\
    \    {\n        long max = lst[0];\n        long min = lst[0];\n        for (long\
    \ i : lst)\n        {\n            if (i > max)\n            {\n             \
    \   max = i;\n            }\n            if (i < min)\n            {\n       \
    \         min = i;\n            }\n        }\n        a = max;\n        b = min;\n\
    \        return tuple(a, b);\n    }\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    \n    if (lst.length == 0)\n  \
    \  {\n        return tuple(a, b);\n    }\n    \n    for (long i : lst)\n    {\n\
    \        if (i < 0)\n        {\n            a = i;\n        }\n        else if\
    \ (i > 0)\n        {\n            b = i;\n        }\n    }\n    \n    return tuple(a,\
    \ b);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    return Tuple(Null, max);\n}\n",
  "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long max_negative = -1L;\n    long\
    \ min_positive = 1L;\n    \n    for (long l : lst)\n    {\n        if (l < 0)\n\
    \        {\n            if (l > max_negative)\n                max_negative =\
    \ l;\n        }\n        else if (l > 0)\n        {\n            if (l < min_positive)\n\
    \                min_positive = l;\n        }\n    }\n    \n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    \n    long max_negative = -lst[0];\n    long min_positive = lst[0];\n   \
    \ \n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min_positive)\n\
    \            min_positive = lst[i];\n        if (lst[i] > max_negative)\n    \
    \        max_negative = lst[i];\n    }\n    \n    return tuple(Nullable.of(max_negative),\
    \ Nullable.of(min_positive));\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    \n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = i;\n        }\n        if (i > 0) {\n   \
    \         b = i;\n        }\n    }\n    \n    return tuple(a, b);\n}\n", "{\n\
    \    if (lst.length == 0)\n        return tuple(Nullable.nullValue(), Nullable.nullValue());\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(Nullable.of(max), Nullable.of(min));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    Nullable!(long) a =\
    \ Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n    \n    for (long\
    \ i : lst)\n    {\n        if (i < 0)\n        {\n            if (a == Nullable!(long))\n\
    \            {\n                a = i;\n            }\n            else if (i\
    \ > a)\n            {\n                a = i;\n            }\n        }\n    \
    \    else if (i > 0)\n        {\n            if (b == Nullable!(long))\n     \
    \       {\n                b = i;\n            }\n            else if (i < b)\n\
    \            {\n                b = i;\n            }\n        }\n    }\n    \n\
    \    return tuple(a, b);\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    if (lst.length == 0)\n        return\
    \ tuple(a, b);\n    long max = lst[0];\n    long min = lst[0];\n    for (long\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\n            max =\
    \ lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n    }\n    if\
    \ (max < 0)\n        a = max;\n    if (min > 0)\n        b = min;\n    return\
    \ tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Null,\
    \ Null);\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return Tuple(Null, min);\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n           \
    \ min = i;\n        if (i > max)\n            max = i;\n    }\n    return tuple(null,\
    \ max);\n}\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long a = -lst[0];\n    long b = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < a)\n       \
    \     a = lst[i];\n        if (lst[i] > b)\n            b = lst[i];\n    }\n \
    \   return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        return tuple(a, b);\n    }\n    else\n\
    \    {\n        long max = lst[0];\n        long min = lst[0];\n        for (long\
    \ i : lst)\n        {\n            if (i > max)\n            {\n             \
    \   max = i;\n            }\n            if (i < min)\n            {\n       \
    \         min = i;\n            }\n        }\n        a = max;\n        b = min;\n\
    \        return tuple(a, b);\n    }\n}\n", "{\n    Nullable!(long) a = Nullable!(long);\n\
    \    Nullable!(long) b = Nullable!(long);\n    if (lst.length == 0) {\n      \
    \  a = Nullable!(long);\n        b = Nullable!(long);\n    } else {\n        for\
    \ (int i = 0; i < lst.length; i++) {\n            if (lst[i] < 0) {\n        \
    \        a = Nullable!(long);\n                b = lst[i];\n                break;\n\
    \            } else if (lst[i] > 0) {\n                a = lst[i];\n         \
    \       b = Nullable!(long);\n                break;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n\
    \    long max_negative = -lst[0];\n    long min_positive = lst[0];\n    for (int\
    \ i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < 0)\n        {\n   \
    \         if (lst[i] > max_negative)\n                max_negative = lst[i];\n\
    \        }\n        else\n        {\n            if (lst[i] < min_positive)\n\
    \                min_positive = lst[i];\n        }\n    }\n    return Tuple(Nullable(max_negative),\
    \ Nullable(min_positive));\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Nullable.Null, Nullable.Null);\n    \n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n       \
    \     min = i;\n        if (i > max)\n            max = i;\n    }\n    return\
    \ Tuple(Nullable.of(max), Nullable.of(min));\n}\n", "{\n    if (lst.length ==\
    \ 0)\n        return tuple(null, null);\n    long max = lst[0];\n    long min\
    \ = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n    }\n    return tuple(max, min);\n}\n", "{\n    if (lst.length\
    \ == 0) {\n        return tuple(null, null);\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min = lst[i];\n        }\n        if (lst[i] >\
    \ max) {\n            max = lst[i];\n        }\n    }\n    return tuple(max, min);\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n    \n    long a = lst[0];\n    long b = lst[0];\n\
    \    for (long i : lst)\n    {\n        if (i > a)\n            a = i;\n     \
    \   if (i < b)\n            b = i;\n    }\n    return tuple(Nullable.nullable(long.class),\
    \ Nullable.nullable(long.class));\n}\n", "{\n    if (lst.length == 0)\n      \
    \  return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n\
    \        if (i < min)\n            min = i;\n        if (i > max)\n          \
    \  max = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n        b = Nullable!(long);\n\
    \    }\n    else\n    {\n        for (long i : lst)\n        {\n            if\
    \ (i < 0)\n            {\n                a = i;\n            }\n            else\
    \ if (i > 0)\n            {\n                b = i;\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n    {\n     \
    \   if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    return tuple(Nullable.nullable(long.class), Nullable.nullable(long.class));\n\
    }\n", "{\n    if (lst.length == 0)\n        return tuple(Nullable.Null, Nullable.Null);\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\n\
    \    {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    return tuple(Nullable.Null, Nullable.Null);\n}\n",
  "{\n    Nullable!(long) a = Nullable!(long);\n    Nullable!(long) b = Nullable!(long);\n\
    \    \n    if (lst.length == 0)\n    {\n        a = Nullable!(long);\n       \
    \ b = Nullable!(long);\n        return tuple(a, b);\n    }\n    \n    long max\
    \ = -lst[0];\n    long min = lst[0];\n    \n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n        else\
    \ if (lst[i] > max)\n            max = lst[i];\n    }\n    \n    if (min < 0)\n\
    \        a = Nullable!(long);\n    else\n        a = max;\n    \n    if (max >\
    \ 0)\n        b = Nullable!(long);\n    else\n        b = min;\n    \n    return\
    \ tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return Tuple(Nullable(long),\
    \ Nullable(long));\n    \n    long max = -lst[0];\n    long min = lst[0];\n  \
    \  for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] > max)\n  \
    \          max = lst[i];\n        if (lst[i] < min)\n            min = lst[i];\n\
    \    }\n    return Tuple(Nullable(max), Nullable(min));\n}\n", "{\n    if (lst.length\
    \ == 0)\n        return tuple(null, null);\n    long a = lst[0];\n    long b =\
    \ lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] > a)\n\
    \            a = lst[i];\n        if (lst[i] < b)\n            b = lst[i];\n \
    \   }\n    return tuple(a, b);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ Tuple(Null, Null);\n    long max = lst[0];\n    long min = lst[0];\n    for\
    \ (long i : lst)\n    {\n        if (i > max)\n            max = i;\n        if\
    \ (i < min)\n            min = i;\n    }\n    return Tuple(Null, min);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n  \
    \  if (lst.length == 0)\n        return Tuple(Null, Null);\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n    {\n        if (i < min)\n\
    \            min = i;\n        if (i > max)\n            max = i;\n    }\n   \
    \ return Tuple(Null, max);\n}\n", "{\n    if (lst.length == 0)\n        return\
    \ tuple(null, null);\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst)\n    {\n        if (i < min)\n            min = i;\n        if\
    \ (i > max)\n            max = i;\n    }\n    return tuple(null, max);\n}\n",
  "{\n    if (lst.length == 0)\n        return Tuple(Null, Null);\n    long max =\
    \ lst[0];\n    long min = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] > max)\n            max = lst[i];\n        if (lst[i] < min)\n\
    \            min = lst[i];\n    }\n    return Tuple(Null, min);\n}\n", "{\n  \
    \  if (lst.length == 0)\n        return Tuple(Null, Null);\n    \n    long max\
    \ = -lst[0];\n    long min = lst[0];\n    for (int i = 1; i < lst.length; i++)\n\
    \    {\n        if (lst[i] > max)\n            max = lst[i];\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n    }\n    return Tuple(Nullable(max), Nullable(min));\n\
    }\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
