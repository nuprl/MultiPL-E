{
  "name": "HumanEval_14_all_prefixes",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n",
  "tests": "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjk7b97k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix += string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpiuksh4jn.d(11): Error: no property `length` for type `string`\n/tmp/tmpiuksh4jn.d(12): Error: `string` is used as a type\n/tmp/tmpiuksh4jn.d(13): Error: `string` is used as a type\n/tmp/tmpiuksh4jn.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuksh4jn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix = prefix + string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpfqw5i12v.d(11): Error: no property `length` for type `string`\n/tmp/tmpfqw5i12v.d(12): Error: `string` is used as a type\n/tmp/tmpfqw5i12v.d(13): Error: `string` is used as a type\n/tmp/tmpfqw5i12v.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqw5i12v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprze9gey2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjk7b97k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix = prefix + string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpps2g5bgp.d(11): Error: no property `length` for type `string`\n/tmp/tmpps2g5bgp.d(12): Error: `string` is used as a type\n/tmp/tmpps2g5bgp.d(13): Error: `string` is used as a type\n/tmp/tmpps2g5bgp.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps2g5bgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiqlsvy9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiqlsvy9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    int i = 0;\n    for (int j = 0; j < string.length(); j++) {\n        result[i] = string.substr(0, j+1);\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpd9g88sv3.d(11): Error: `string` is used as a type\n/tmp/tmpd9g88sv3.d(11): Error: `string` is used as a type\n/tmp/tmpd9g88sv3.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9g88sv3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_sltly4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    int i = 0;\n    for (int j = 0; j < string.length(); j++) {\n        prefixes[i] = string.substr(0, j+1);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpo2v8gb79.d(11): Error: `string` is used as a type\n/tmp/tmpo2v8gb79.d(11): Error: `string` is used as a type\n/tmp/tmpo2v8gb79.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2v8gb79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpbry205p7.d(11): Error: no property `length` for type `string`\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbry205p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(11): Error: `string` is used as a type\n/tmp/tmpmjk7b97k.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjk7b97k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix;\n    string[] result = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix = string.substr(0, i+1);\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp9nn6vhkk.d(11): Error: no property `length` for type `string`\n/tmp/tmp9nn6vhkk.d(12): Error: `string` is used as a type\n/tmp/tmp9nn6vhkk.d(13): Error: `string` is used as a type\n/tmp/tmp9nn6vhkk.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nn6vhkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0d26xldi.d(11): Error: no property `length` for type `string`\n/tmp/tmp0d26xldi.d(12): Error: `string` is used as a type\n/tmp/tmp0d26xldi.d(13): Error: `string` is used as a type\n/tmp/tmp0d26xldi.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0d26xldi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix += string.substr(0, i+1);\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp968eee1y.d(11): Error: no property `length` for type `string`\n/tmp/tmp968eee1y.d(12): Error: `string` is used as a type\n/tmp/tmp968eee1y.d(13): Error: `string` is used as a type\n/tmp/tmp968eee1y.d(13): Error: `string` is used as a type\n/tmp/tmp968eee1y.d(15): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp968eee1y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_sltly4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] all_prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix += string[i];\n        all_prefixes[i] = prefix;\n    }\n    return all_prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp6voin_2o.d(11): Error: no property `length` for type `string`\n/tmp/tmp6voin_2o.d(12): Error: `string` is used as a type\n/tmp/tmp6voin_2o.d(13): Error: `string` is used as a type\n/tmp/tmp6voin_2o.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6voin_2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix = prefix + string[i];\n        prefixes[i] = prefix;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0l6mfw91.d(11): Error: no property `length` for type `string`\n/tmp/tmp0l6mfw91.d(12): Error: `string` is used as a type\n/tmp/tmp0l6mfw91.d(13): Error: `string` is used as a type\n/tmp/tmp0l6mfw91.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l6mfw91.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprze9gey2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprze9gey2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix += string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpiuksh4jn.d(11): Error: no property `length` for type `string`\n/tmp/tmpiuksh4jn.d(12): Error: `string` is used as a type\n/tmp/tmpiuksh4jn.d(13): Error: `string` is used as a type\n/tmp/tmpiuksh4jn.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuksh4jn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix = prefix + string[i];\n        prefixes[i] = prefix;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpc9g2e7oi.d(11): Error: no property `length` for type `string`\n/tmp/tmpc9g2e7oi.d(12): Error: `string` is used as a type\n/tmp/tmpc9g2e7oi.d(13): Error: `string` is used as a type\n/tmp/tmpc9g2e7oi.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9g2e7oi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0wm_zu8m.d(11): Error: no property `length` for type `string`\n/tmp/tmp0wm_zu8m.d(12): Error: `string` is used as a type\n/tmp/tmp0wm_zu8m.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wm_zu8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix += string.substr(0, i+1);\n        prefixes[i] = prefix;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpez9knyah.d(11): Error: no property `length` for type `string`\n/tmp/tmpez9knyah.d(12): Error: `string` is used as a type\n/tmp/tmpez9knyah.d(13): Error: `string` is used as a type\n/tmp/tmpez9knyah.d(13): Error: `string` is used as a type\n/tmp/tmpez9knyah.d(16): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpez9knyah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpbry205p7.d(11): Error: no property `length` for type `string`\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbry205p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    int i = 0;\n    for (int j = 0; j < string.length(); j++) {\n        prefixes[i] = string.substr(0, j+1);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpo2v8gb79.d(11): Error: `string` is used as a type\n/tmp/tmpo2v8gb79.d(11): Error: `string` is used as a type\n/tmp/tmpo2v8gb79.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2v8gb79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpbry205p7.d(11): Error: no property `length` for type `string`\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbry205p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpbry205p7.d(11): Error: no property `length` for type `string`\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\n/tmp/tmpbry205p7.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbry205p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    int i = 0;\n    while (i < string.length())\n    {\n        prefixes[i] = string.substr(0, i + 1);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpuwvn5h9k.d(11): Error: `string` is used as a type\n/tmp/tmpuwvn5h9k.d(11): Error: `string` is used as a type\n/tmp/tmpuwvn5h9k.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwvn5h9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiqlsvy9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_sltly4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(11): Error: `string` is used as a type\n/tmp/tmp3_sltly4.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_sltly4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefix = prefix + string.substr(0, i+1);\n        prefixes[i] = prefix;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpt02x2568.d(11): Error: no property `length` for type `string`\n/tmp/tmpt02x2568.d(12): Error: `string` is used as a type\n/tmp/tmpt02x2568.d(13): Error: `string` is used as a type\n/tmp/tmpt02x2568.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt02x2568.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] result = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix = prefix + string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpps2g5bgp.d(11): Error: no property `length` for type `string`\n/tmp/tmpps2g5bgp.d(12): Error: `string` is used as a type\n/tmp/tmpps2g5bgp.d(13): Error: `string` is used as a type\n/tmp/tmpps2g5bgp.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps2g5bgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(11): Error: `string` is used as a type\n/tmp/tmp3hhdsj8r.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hhdsj8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(11): Error: `string` is used as a type\n/tmp/tmphiqlsvy9.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiqlsvy9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string prefix = \"\";\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefix += string[i];\n        prefixes[i] = prefix;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpm3p857oo.d(11): Error: no property `length` for type `string`\n/tmp/tmpm3p857oo.d(12): Error: `string` is used as a type\n/tmp/tmpm3p857oo.d(13): Error: `string` is used as a type\n/tmp/tmpm3p857oo.d(13): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3p857oo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpef1pero9.d(11): Error: no property `length` for type `string`\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\n/tmp/tmpef1pero9.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpef1pero9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp3xo2bkyv.d(11): Error: `string` is used as a type\n/tmp/tmp3xo2bkyv.d(11): Error: `string` is used as a type\n/tmp/tmp3xo2bkyv.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xo2bkyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(11): Error: `string` is used as a type\n/tmp/tmp7apz_g7v.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7apz_g7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    int len = string.length();\n    string[] prefixes = new string[len];\n    for (int i = 0; i < len; i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmp0e01bq28.d(11): Error: no property `length` for type `string`\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\n/tmp/tmp0e01bq28.d(12): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e01bq28.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(11): Error: `string` is used as a type\n/tmp/tmppu1vfke8.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu1vfke8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for(int i = 0; i < string.length(); i++)\n    {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(11): Error: `string` is used as a type\n/tmp/tmpwdha0j95.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdha0j95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result = new string[string.length()];\n    for(int i = 0; i < string.length(); i++) {\n        result[i] = string.substr(0, i+1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(11): Error: `string` is used as a type\n/tmp/tmprze9gey2.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprze9gey2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes = new string[string.length()];\n    for (int i = 0; i < string.length(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(11): Error: `string` is used as a type\n/tmp/tmppv722yd1.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv722yd1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}