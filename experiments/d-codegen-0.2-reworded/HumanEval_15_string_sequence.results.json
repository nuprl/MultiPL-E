{
  "name": "HumanEval_15_string_sequence",
  "language": "d",
  "prompt": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n",
  "tests": "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0; i<=n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpelsaywf4.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelsaywf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3_gl9q89.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_gl9q89.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpz3v22_wr.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3v22_wr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0) {\n        s = \"\";\n    } else {\n        s = \"0\";\n        while (n > 0) {\n            s += \" \" + to_string(n % 10);\n            n /= 10;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp856tvfkl.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp856tvfkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i=0; i<n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp1i19zniz.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i19zniz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpctzqw5m7.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctzqw5m7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpctzqw5m7.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctzqw5m7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n        s+=to_string(i)+\" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjuwhrbcm.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjuwhrbcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    long i;\n    for (i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpkjvaxif4.d(15): Error: undefined identifier `to_string`\n/tmp/tmpkjvaxif4.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjvaxif4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n == 0) return \"0\";\n    else if (n == 1) return \"1\";\n    else if (n == 2) return \"0 1\";\n    else if (n == 3) return \"0 1 2\";\n    else if (n == 4) return \"0 1 2 3\";\n    else if (n == 5) return \"0 1 2 3 4\";\n    else if (n == 6) return \"0 1 2 3 4 5\";\n    else if (n == 7) return \"0 1 2 3 4 5 6\";\n    else if (n == 8) return \"0 1 2 3 4 5 6 7\";\n    else if (n == 9) return \"0 1 2 3 4 5 6 7 8\";\n    else if (n == 10) return \"0 1 2 3 4 5 6 7 8 9\";\n    else if (n == 11) return \"0 1 2 3 4 5 6 7 8 9 10\";\n    else if (n == 12) return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n    else if (n == 13) return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n    else if (n == 14) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n    else if (n == 15) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n    else if (n == 16) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\";\n    else if (n == 17) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\";\n    else if (n == 18) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\";\n    else if (n == 19) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\";\n    else if (n == 20) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\";\n    else if (n == 21) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\";\n    else if (n == 22) return \"\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpcqeizket.d(40): Error: found `0` when expecting `;` following `return` statement\n/tmp/tmpcqeizket.d(41): Error: found `0` when expecting `;` following statement\n/tmp/tmpcqeizket.d(41): Error: found `2` when expecting `;` following statement\n/tmp/tmpcqeizket.d(41): Error: found `\");\\x0a    assert(candidate(10L) == \"` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `1` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `3` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `5` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `7` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `9` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: unterminated string constant starting at /tmp/tmpcqeizket.d(42)\n/tmp/tmpcqeizket.d(42): Error: found `\"\"` when expecting `;` following statement\n/tmp/tmpcqeizket.d(44): Error: found `End of File` when expecting `}` following com",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp4w4haed_.d(14): Error: undefined identifier `to_string`\n/tmp/tmp4w4haed_.d(16): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w4haed_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0) {\n        s = \"\";\n    } else {\n        s = \"0\";\n        while (n > 0) {\n            s += \" \" + to_string(n);\n            n--;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzc98llfm.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc98llfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if(n==0)\n        s = \"0\";\n    else\n    {\n        s = \"0\";\n        for(long i=1;i<=n;i++)\n            s += \" \" + to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpe5_sbvwk.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5_sbvwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++)\n        s += std::to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpudzl1j5i.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmpudzl1j5i.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudzl1j5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmplss96brc.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplss96brc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpyzts7bnt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzts7bnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<=n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmxhwlus1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxhwlus1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i = 0; i < n; i++) {\n        s += to_string(i);\n        if (i < n - 1) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzxtbkcb0.d(15): Error: undefined identifier `to_string`\n/tmp/tmpzxtbkcb0.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxtbkcb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n        s+=std::to_string(i)+\" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp1d_tp_gc.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp1d_tp_gc.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d_tp_gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0;i<n;i++)\n    {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp49j7uukb.d(16): Error: found `:` when expecting `;` following statement\n/tmp/tmp49j7uukb.d(16): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49j7uukb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i != n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpailncxg2.d(14): Error: undefined identifier `to_string`\n/tmp/tmpailncxg2.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpailncxg2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<=n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmxhwlus1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxhwlus1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i=0; i<n; i++) {\n        s += to_string(i);\n        if (i<n-1) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp6hctxqgq.d(14): Error: undefined identifier `to_string`\n/tmp/tmp6hctxqgq.d(15): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hctxqgq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i = 0L; i <= n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpok_fq6vr.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpok_fq6vr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i=0; i<=n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpuwy6zk3q.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwy6zk3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n    {\n        s+=to_string(i);\n        s+=\" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpst_7o9_4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpst_7o9_4.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst_7o9_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    if (n == 0) return \"0\";\n    for (i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjnmtutut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpjnmtutut.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnmtutut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i);\n        if (i < n) \n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpz8wcphuq.d(15): Error: undefined identifier `to_string`\n/tmp/tmpz8wcphuq.d(18): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8wcphuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    \n    for(i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpgndfnk53.d(16): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgndfnk53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<n; i++) \n        s += std::to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpcx3z2ac2.d(14): Error: found `:` when expecting `;` following statement\n/tmp/tmpcx3z2ac2.d(14): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcx3z2ac2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<=n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpo8ybdxe3.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8ybdxe3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpfar7kxnd.d(15): Error: undefined identifier `to_string`\n/tmp/tmpfar7kxnd.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfar7kxnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpsskadhz5.d(14): Error: undefined identifier `to_string`\n/tmp/tmpsskadhz5.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsskadhz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n == 0) return \"0\";\n    else if (n == 1) return \"1\";\n    else if (n == 2) return \"0 1\";\n    else if (n == 3) return \"0 1 2\";\n    else if (n == 4) return \"0 1 2 3\";\n    else if (n == 5) return \"0 1 2 3 4\";\n    else if (n == 6) return \"0 1 2 3 4 5\";\n    else if (n == 7) return \"0 1 2 3 4 5 6\";\n    else if (n == 8) return \"0 1 2 3 4 5 6 7\";\n    else if (n == 9) return \"0 1 2 3 4 5 6 7 8\";\n    else if (n == 10) return \"0 1 2 3 4 5 6 7 8 9\";\n    else if (n == 11) return \"0 1 2 3 4 5 6 7 8 9 10\";\n    else if (n == 12) return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n    else if (n == 13) return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n    else if (n == 14) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n    else if (n == 15) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n    else if (n == 16) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\";\n    else if (n == 17) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\";\n    else if (n == 18) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\";\n    else if (n == 19) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\";\n    else if (n == 20) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\";\n    else if (n == 21) return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\";\n    else if (n == 22) return \"\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpcqeizket.d(40): Error: found `0` when expecting `;` following `return` statement\n/tmp/tmpcqeizket.d(41): Error: found `0` when expecting `;` following statement\n/tmp/tmpcqeizket.d(41): Error: found `2` when expecting `;` following statement\n/tmp/tmpcqeizket.d(41): Error: found `\");\\x0a    assert(candidate(10L) == \"` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `1` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `3` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `5` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `7` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: found `9` when expecting `;` following statement\n/tmp/tmpcqeizket.d(42): Error: unterminated string constant starting at /tmp/tmpcqeizket.d(42)\n/tmp/tmpcqeizket.d(42): Error: found `\"\"` when expecting `;` following statement\n/tmp/tmpcqeizket.d(44): Error: found `End of File` when expecting `}` following com",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0;i<n;i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpx37ztrwt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx37ztrwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i != n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpailncxg2.d(14): Error: undefined identifier `to_string`\n/tmp/tmpailncxg2.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpailncxg2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i = 0; i <= n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp9oczneoi.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oczneoi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for(long i=0;i<n;i++)\n        s+=to_string(i)+\" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpwajmk2w7.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwajmk2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpdwhygnlv.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwhygnlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxo1k238.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxo1k238.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n        if (i != n) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5ypfbtti.d(14): Error: found `:` when expecting `;` following statement\n/tmp/tmp5ypfbtti.d(14): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ypfbtti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpni1luuij.d(14): Error: undefined identifier `to_string`\n/tmp/tmpni1luuij.d(15): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpni1luuij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    \n    if (n < 0) {\n        return \"\";\n    }\n    \n    for (i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp9bmf4voq.d(20): Error: undefined identifier `to_string`\n/tmp/tmp9bmf4voq.d(22): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bmf4voq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0; i<=n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3tmw0dpn.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tmw0dpn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n == 0) return \"0\";\n    s = \"0\";\n    while (n > 0) {\n        s = s + \" \" + to_string(n);\n        n--;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpkmmoaqxw.d(16): Error: invalid array operation `s + \" \"` (possible missing [])\n/tmp/tmpkmmoaqxw.d(16): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmmoaqxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpsskadhz5.d(14): Error: undefined identifier `to_string`\n/tmp/tmpsskadhz5.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsskadhz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0)\n        return \"\";\n    else if (n == 0)\n        return \"0\";\n    else if (n == 1)\n        return \"0 1\";\n    else if (n == 2)\n        return \"0 1 2\";\n    else if (n == 3)\n        return \"0 1 2 3\";\n    else if (n == 4)\n        return \"0 1 2 3 4\";\n    else if (n == 5)\n        return \"0 1 2 3 4 5\";\n    else if (n == 6)\n        return \"0 1 2 3 4 5 6\";\n    else if (n == 7)\n        return \"0 1 2 3 4 5 6 7\";\n    else if (n == 8)\n        return \"0 1 2 3 4 5 6 7 8\";\n    else if (n == 9)\n        return \"0 1 2 3 4 5 6 7 8 9\";\n    else if (n == 10)\n        return \"0 1 2 3 4 5 6 7 8 9 10\";\n    else if (n == 11)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n    else if (n == 12)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n    else if (n == 13)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n    else if (n == 14)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n    else if (n == 15)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\";\n    else if (n == 16)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\";\n    else if (n == 17)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\";\n    else if (n == 18)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\";\n    else if (n == 19)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\";\n    else\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpliam712i.d(56): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpliam712i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n == 0) return \"0\";\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp9vgumlri.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp9vgumlri.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vgumlri.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result;\n    long i;\n    for (i = 0; i <= n; i++) \n    {\n        result += to_string(i);\n        if (i < n) \n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmapcmlj1.d(16): Error: undefined identifier `to_string`\n/tmp/tmpmapcmlj1.d(19): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmapcmlj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n    {\n        s+=to_string(i);\n        s+=\" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpst_7o9_4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpst_7o9_4.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst_7o9_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpsskadhz5.d(14): Error: undefined identifier `to_string`\n/tmp/tmpsskadhz5.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsskadhz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpfar7kxnd.d(15): Error: undefined identifier `to_string`\n/tmp/tmpfar7kxnd.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfar7kxnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i);\n        if (i < n) \n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpz8wcphuq.d(15): Error: undefined identifier `to_string`\n/tmp/tmpz8wcphuq.d(18): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8wcphuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpyzts7bnt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzts7bnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result;\n    long i;\n    for(i=0; i<n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp1szjpjmo.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1szjpjmo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpdwhygnlv.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwhygnlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpbfyd45wb.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfyd45wb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result;\n    long i;\n    for (i = 0; i <= n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp0f8axqnp.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f8axqnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpyzts7bnt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzts7bnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0) {\n        s = \"\";\n    } else {\n        s = to_string(n);\n        while (s.length() < 10) {\n            s = \" \" + s;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpfwc7uaad.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfwc7uaad.d(17): Error: no property `length` for type `string`\n/tmp/tmpfwc7uaad.d(18): Error: invalid array operation `\" \" + s` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwc7uaad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i=0; i<n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpbfyd45wb.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfyd45wb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i);\n        if (i < n) \n            result += \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps2z5q31d.d(15): Error: undefined identifier `to_string`\n/tmp/tmps2z5q31d.d(17): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2z5q31d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0;i<n;i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpx37ztrwt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx37ztrwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    \n    for (i=0; i<n; i++) {\n        s += to_string(i);\n        s += \" \";\n    }\n    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpll847ha6.d(16): Error: undefined identifier `to_string`\n/tmp/tmpll847ha6.d(17): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpll847ha6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5m9e99hc.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m9e99hc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if(n==0)\n        s=\"0\";\n    else\n    {\n        s=string_sequence(n-1);\n        s+= \" \";\n        s+=to_string(n);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpyhg63c9a.d(18): Error: slice `s` is not mutable\n/tmp/tmpyhg63c9a.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhg63c9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n        s+=to_string(i)+\" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjuwhrbcm.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjuwhrbcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result;\n    if(n==0)\n        return \"0\";\n    else\n    {\n        result = string_sequence(n-1);\n        result += \" \";\n        result += to_string(n);\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp7n1wnpln.d(18): Error: slice `result` is not mutable\n/tmp/tmp7n1wnpln.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7n1wnpln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpyzts7bnt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzts7bnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i);\n        if (i < n) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpni1luuij.d(14): Error: undefined identifier `to_string`\n/tmp/tmpni1luuij.d(15): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpni1luuij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += std::to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5dua7a1f.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmp5dua7a1f.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dua7a1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxo1k238.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxo1k238.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++)\n        s += std::to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpudzl1j5i.d(15): Error: found `:` when expecting `;` following statement\n/tmp/tmpudzl1j5i.d(15): Error: found `:` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudzl1j5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i);\n        if (i < n) \n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpz8wcphuq.d(15): Error: undefined identifier `to_string`\n/tmp/tmpz8wcphuq.d(18): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8wcphuq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmc9_32r3.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmc9_32r3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0; i<n; i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp5s0wfazn.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5s0wfazn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    long i;\n    for(i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpbccysak4.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbccysak4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0;i<n;i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpx37ztrwt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx37ztrwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for(long i=0;i<n;i++)\n    {\n        s+=to_string(i);\n        s+=\" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp0jtm1a3w.d(15): Error: undefined identifier `to_string`\n/tmp/tmp0jtm1a3w.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jtm1a3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i = 0; i <= n; i++) \n    {\n        s += to_string(i);\n        if (i != n) \n        {\n            s += \" \";\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpj88ft7ub.d(15): Error: undefined identifier `to_string`\n/tmp/tmpj88ft7ub.d(18): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj88ft7ub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmps1a_59a1.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1a_59a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) {\n        s += to_string(i) + \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmp3l6zg8c8.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l6zg8c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0) return \"\";\n    if (n == 0) return \"0\";\n    s = \"0\";\n    while (n > 0) {\n        s = s + \" \" + to_string(n % 10);\n        n = n / 10;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpdpe73a6a.d(17): Error: invalid array operation `s + \" \"` (possible missing [])\n/tmp/tmpdpe73a6a.d(17): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpe73a6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0;i<n;i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjxm7vcns.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxm7vcns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i = 0; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpu8gdedqr.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8gdedqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++) \n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpmvtsf0ou.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtsf0ou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    \n    if (n < 0) {\n        s = \"\";\n    } else {\n        s = \"0\";\n        for (i = 1; i <= n; i++) {\n            s += \" \" + to_string(i);\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzsbggxyj.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsbggxyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for(i=0;i<n;i++)\n        s+=to_string(i)+\" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpjuwhrbcm.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjuwhrbcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0)\n        return \"\";\n    else if (n == 0)\n        return \"0\";\n    else if (n == 1)\n        return \"0 1\";\n    else if (n == 2)\n        return \"0 1 2\";\n    else if (n == 3)\n        return \"0 1 2 3\";\n    else if (n == 4)\n        return \"0 1 2 3 4\";\n    else if (n == 5)\n        return \"0 1 2 3 4 5\";\n    else if (n == 6)\n        return \"0 1 2 3 4 5 6\";\n    else if (n == 7)\n        return \"0 1 2 3 4 5 6 7\";\n    else if (n == 8)\n        return \"0 1 2 3 4 5 6 7 8\";\n    else if (n == 9)\n        return \"0 1 2 3 4 5 6 7 8 9\";\n    else if (n == 10)\n        return \"0 1 2 3 4 5 6 7 8 9 10\";\n    else if (n == 11)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n    else if (n == 12)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n    else if (n == 13)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n    else if (n == 14)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n    else if (n == 15)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\";\n    else if (n == 16)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\";\n    else if (n == 17)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\";\n    else if (n == 18)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\";\n    else if (n == 19)\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\";\n    else\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpliam712i.d(56): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpliam712i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0L; i <= n; i++) \n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpt27w4qp0.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt27w4qp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpdwhygnlv.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwhygnlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    for (long i=0; i<=n; i++) {\n        s += to_string(i);\n        if (i<n) s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpqzlxjhvs.d(14): Error: undefined identifier `to_string`\n/tmp/tmpqzlxjhvs.d(15): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzlxjhvs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpunawr4a5.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunawr4a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    \n    if (n < 0) {\n        s = \"\";\n    } else {\n        s = \"0\";\n        for (i = 1; i <= n; i++) {\n            s += \" \" + to_string(i);\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzsbggxyj.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsbggxyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    if (n < 0) {\n        return \"\";\n    }\n    if (n == 0) {\n        return \"0\";\n    }\n    if (n == 1) {\n        return \"0 1\";\n    }\n    if (n == 2) {\n        return \"0 1 2\";\n    }\n    if (n == 3) {\n        return \"0 1 2 3\";\n    }\n    if (n == 4) {\n        return \"0 1 2 3 4\";\n    }\n    if (n == 5) {\n        return \"0 1 2 3 4 5\";\n    }\n    if (n == 6) {\n        return \"0 1 2 3 4 5 6\";\n    }\n    if (n == 7) {\n        return \"0 1 2 3 4 5 6 7\";\n    }\n    if (n == 8) {\n        return \"0 1 2 3 4 5 6 7 8\";\n    }\n    if (n == 9) {\n        return \"0 1 2 3 4 5 6 7 8 9\";\n    }\n    if (n == 10) {\n        return \"0 1 2 3 4 5 6 7 8 9 10\";\n    }\n    if (n == 11) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n    }\n    if (n == 12) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n    }\n    if (n == 13) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n    }\n    if (n == 14) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n    }\n    if (n == 15) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\";\n    }\n    if (n == 16) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\";\n    }\n    if (n == 17) {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\";\n    }\n    if (n == 18) {\n        return\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpl_5ktpfk.d(72): Error: expression expected, not `unittest`\n/tmp/tmpl_5ktpfk.d(73): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpl_5ktpfk.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_5ktpfk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for(long i=0; i<=n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpzpj3smps.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpj3smps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for(long i=0;i<n;i++)\n        result += to_string(i) + \" \";\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpx37ztrwt.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx37ztrwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpfar7kxnd.d(15): Error: undefined identifier `to_string`\n/tmp/tmpfar7kxnd.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfar7kxnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpiaijjd95.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaijjd95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i) + \" \";\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpilgxyirk.d(14): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgxyirk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string s;\n    long i;\n    for (i=0; i<n; i++) {\n        s += to_string(i);\n        s += \" \";\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpfar7kxnd.d(15): Error: undefined identifier `to_string`\n/tmp/tmpfar7kxnd.d(16): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfar7kxnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "/tmp/tmpdwhygnlv.d(15): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwhygnlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}