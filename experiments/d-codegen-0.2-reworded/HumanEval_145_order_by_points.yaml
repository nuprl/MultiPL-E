name: HumanEval_145_order_by_points
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
  \ sorts the given array of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
  \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
  \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
  \ nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[nums.length];\n    for (int i = 0;\
    \ i < nums.length; i++) {\n        long sum = 0;\n        for (int j = 0; j <\
    \ nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum += Math.abs(nums[i]\
    \ % 10);\n        }\n        result[i] = sum;\n    }\n    \n    for (int i = 0;\
    \ i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n\
    \            if (result[i] == result[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    for (int i\
    \ = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int j = 0;\
    \ j < nums[i] != 0; j++) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum_digits = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n   \
    \     sum_digits[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n\
    \        for (int j = 0; j < sum_digits[i]; j++) {\n            result[j] = i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    \n    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n  \
    \      for (int j = 0; j < nums[i] != 0; j++) {\n            sum += nums[i] %\
    \ 10;\n            nums[i] /= 10;\n        }\n        \n        for (int j = 0;\
    \ j < nums.length; j++) {\n            if (nums[j] == sum) {\n               \
    \ result[i] = nums[j];\n                nums[j] = 0;\n                break;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    int len =\
    \ nums.length;\n    for (int i = 0; i < len; i++) {\n        long sum = 0;\n \
    \       for (int j = 0; j < len; j++) {\n            sum += nums[j];\n       \
    \ }\n        int index = i;\n        for (int j = i + 1; j < len; j++) {\n   \
    \         if (sum > sum_of_digits(nums[j])) {\n                index = j;\n  \
    \          }\n        }\n        if (index != i) {\n            long temp = nums[i];\n\
    \            nums[i] = nums[index];\n            nums[index] = temp;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n  \
    \  long[] sorted = new long[nums.length];\n    int[] index = new int[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    int i = 0;\n    for(long n : nums)\n\
    \    {\n        sum[i] = n % 10;\n        i++;\n    }\n    \n    for(i = 0; i\
    \ < nums.length; i++)\n    {\n        index[i] = i;\n    }\n    \n    for(i =\
    \ 0; i < nums.length; i++)\n    {\n        for(int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if(sum[i] == sum[j])\n            {\n         \
    \       if(index[i] < index[j])\n                {\n                    index[i]++;\n\
    \                }\n                else\n                {\n                \
    \    index[j]++;\n                }\n            }\n        }\n    }\n    \n \
    \   for(i = 0; i < nums.length; i++)\n    {\n        sorted[index[i]] = result[i];\n\
    \    }\n    \n    return sorted;\n}", "{\n    long[] result = nums.clone();\n\
    \    for (int i = 0; i < result.length; i++) {\n        for (int j = i + 1; j\
    \ < result.length; j++) {\n            if (result[i] + result[j] == 0) {\n   \
    \             long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[10];\n    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i]\
    \ % 10] += nums[i];\n    }\n    for (int i = 0; i < sums.length; i++) {\n    \
    \    for (int j = 0; j < nums.length; j++) {\n            if (sums[i] == nums[j])\
    \ {\n                result[j] = nums[i];\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] indexes = new int[nums.length];\n    int[] sums = new int[10];\n  \
    \  for (int i = 0; i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n  \
    \  }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i];\
    \ j++) {\n            result[indexes[i]++] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] sorted = nums.clone();\n    sort(sorted, (a, b)\
    \ -> {\n        int sum_a = 0, sum_b = 0;\n        for (int i = 0; i < a.length();\
    \ i++) {\n            sum_a += a.charAt(i) - '0';\n        }\n        for (int\
    \ i = 0; i < b.length(); i++) {\n            sum_b += b.charAt(i) - '0';\n   \
    \     }\n        return sum_a - sum_b;\n    });\n    return sorted;\n}", "{\n\
    \    long[] result = nums.clone();\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i]\
    \ * -1 : nums[i]; j++) {\n            sum += nums[i] % 10;\n        }\n      \
    \  result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n    \n \
    \   return result;\n}", "{\n    long[] result = nums.clone();\n    \n    for(int\
    \ i = 0; i < result.length; i++)\n    {\n        for(int j = i+1; j < result.length;\
    \ j++)\n        {\n            if(result[i] + result[j] == 0)\n            {\n\
    \                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sums = new int[10];\n    for(int i = 0; i < nums.length; i++)\n    {\n     \
    \   int sum = 0;\n        while(nums[i] != 0)\n        {\n            sum += nums[i]\
    \ % 10;\n            nums[i] /= 10;\n        }\n        sums[sum]++;\n    }\n\
    \    for(int i = 0; i < 10; i++)\n    {\n        for(int j = 0; j < sums[i]; j++)\n\
    \        {\n            result[j] = i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    \n    for\
    \ (int i = 0; i < result.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < result[i].toString().length(); j++) {\n            sum += Math.pow(10,\
    \ j) * result[i].toString().charAt(j) - Math.pow(10, j);\n        }\n        result[i]\
    \ = sum;\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n       \
    \ for (int j = i + 1; j < result.length; j++) {\n            if (result[i] > result[j])\
    \ {\n                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ indexes = new int[nums.length];\n    int[] sums = new int[10];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[nums[i] % 10]++;\n    }\n\
    \    for(int i = 0; i < 10; i++)\n    {\n        for(int j = 0; j < sums[i]; j++)\n\
    \        {\n            result[indexes[i]++] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] indexes\
    \ = new int[nums.length];\n    int[] sums = new int[10];\n    for (int i = 0;\
    \ i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n    }\n    for (int\
    \ i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i]; j++) {\n       \
    \     result[indexes[i]++] = i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[10];\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n      \
    \  while(nums[i] != 0)\n        {\n            sum += nums[i] % 10;\n        \
    \    nums[i] /= 10;\n        }\n        sums[sum]++;\n    }\n    for(int i = 0;\
    \ i < 10; i++)\n    {\n        for(int j = 0; j < sums[i]; j++)\n        {\n \
    \           result[j] = i * 10 + j;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[i];\n    }\n    \n    return result;\n}", "{\n\
    \    long[] sorted = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i].toString().length();\
    \ j++) {\n            sum += nums[i].toString().charAt(j) - '0';\n        }\n\
    \        sorted[i] = sum;\n    }\n    java.util.Arrays.sort(sorted);\n    return\
    \ sorted;\n}", "{\n    long[] result = nums.clone();\n    int n = nums.length;\n\
    \    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j =\
    \ 0; j < nums[i] != 0; j++) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (result[i]\
    \ == result[j]) {\n                long temp = result[i];\n                result[i]\
    \ = result[j];\n                result[j] = temp;\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    int n = nums.length;\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (nums[i] + nums[j] == nums[i] * 10\
    \ + nums[j]) {\n                long temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[10];\n    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i]\
    \ % 10] += nums[i];\n    }\n    for (int i = 0; i < sums.length; i++) {\n    \
    \    for (int j = 0; j < nums.length; j++) {\n            if (sums[i] == nums[j])\
    \ {\n                result[j] = nums[i];\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j =\
    \ i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i]\
    \ * 10 + nums[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] sorted_nums = nums.clone();\n    \n    // sort the array by sum of\
    \ digits\n    sort(sorted_nums, (a, b) -> \n        {\n            long sum_a\
    \ = 0;\n            long sum_b = 0;\n            for (int i = 0; i < a.length();\
    \ i++)\n            {\n                sum_a += a.charAt(i) - '0';\n         \
    \   }\n            for (int i = 0; i < b.length(); i++)\n            {\n     \
    \           sum_b += b.charAt(i) - '0';\n            }\n            return sum_a\
    \ - sum_b;\n        });\n    \n    return sorted_nums;\n}", "{\n    long[] result\
    \ = nums.clone();\n    for (int i = 0; i < nums.length; i++) {\n        for (int\
    \ j = i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i]\
    \ * 10 + nums[j]) {\n                long temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    for (int i\
    \ = 0; i < result.length; i++) {\n        for (int j = i + 1; j < result.length;\
    \ j++) {\n            if (result[i] + result[j] == 0) {\n                long\
    \ temp = result[i];\n                result[i] = result[j];\n                result[j]\
    \ = temp;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ sorted = nums.clone();\n    sort(sorted, (a, b) -> {\n        int a_sum = 0;\n\
    \        int b_sum = 0;\n        for (int i = 0; i < a.length(); i++) {\n    \
    \        a_sum += a.charAt(i) - '0';\n        }\n        for (int i = 0; i < b.length();\
    \ i++) {\n            b_sum += b.charAt(i) - '0';\n        }\n        return a_sum\
    \ - b_sum;\n    });\n    return sorted;\n}", "{\n    long[] result = nums.clone();\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum\
    \ += Math.abs(nums[i] % 10);\n        }\n        result[i] = sum;\n    }\n   \
    \ java.util.Arrays.sort(result);\n    return result;\n}\n", "{\n    long[] sorted\
    \ = new long[nums.length];\n    int i = 0;\n    for (long n : nums) {\n      \
    \  long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n      \
    \      n /= 10;\n        }\n        sorted[i++] = sum;\n    }\n    Arrays.sort(sorted);\n\
    \    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sorted = new int[nums.length];\n    int[] count = new int[10];\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    for(i = 0; i < nums.length; i++)\n \
    \   {\n        count[nums[i]%10]++;\n    }\n    for(i = 0; i < 10; i++)\n    {\n\
    \        for(j = 0; j < count[i]; j++)\n        {\n            result[k++] = i;\n\
    \        }\n    }\n    for(i = 0; i < nums.length; i++)\n    {\n        sorted[i]\
    \ = result[nums[i]];\n    }\n    return sorted;\n}", "{\n    long[] sorted = nums.clone();\n\
    \    sort(sorted, (a, b) -> {\n        long sum_a = 0;\n        long sum_b = 0;\n\
    \        for (int i = 0; i < Math.min(a.length(), b.length()); i++) {\n      \
    \      sum_a += Math.abs(a[i] - '0');\n            sum_b += Math.abs(b[i] - '0');\n\
    \        }\n        return sum_a - sum_b;\n    });\n    return sorted;\n}\n",
  "{\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i] != 0; j++)\
    \ {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n\
    \        result[i] = sum;\n    }\n    for (int i = 0; i < nums.length; i++) {\n\
    \        for (int j = i + 1; j < nums.length; j++) {\n            if (result[i]\
    \ == result[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[nums.length];\n    int[] sums = new int[10];\n   \
    \ for (int i = 0; i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n   \
    \ }\n    for (int i = 0; i < sums.length; i++) {\n        for (int j = 0; j <\
    \ sums[i]; j++) {\n            result[j + i * sums[i]] = nums[j + i * sums[i]];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] < 0 ? nums.length - 1 : nums.length; j++) {\n      \
    \      sum += nums[j];\n        }\n        result[i] = sum;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sums\
    \ = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i]\
    \ % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0;\
    \ j < sums[i]; j++) {\n            result[j] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] sorted = nums.clone();\n    \n    for(int i = 0;\
    \ i < sorted.length; i++)\n    {\n        long sum = 0;\n        for(int j = 0;\
    \ j < sorted[i].length(); j++)\n        {\n            sum += sorted[i].charAt(j)\
    \ - '0';\n        }\n        \n        for(int j = 0; j < sorted.length; j++)\n\
    \        {\n            if(sum == 0 && j != i)\n            {\n              \
    \  long temp = sorted[i];\n                sorted[i] = sorted[j];\n          \
    \      sorted[j] = temp;\n            }\n        }\n    }\n    \n    return sorted;\n\
    }", "{\n    long[] result = nums.clone();\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        for(int j = 0; j < nums[i] != 0;\
    \ j++)\n            sum += nums[i] % 10;\n        \n        for(int j = 0; j <\
    \ nums.length; j++)\n        {\n            if(nums[j] == 0)\n               \
    \ continue;\n            \n            if(sum == 0)\n            {\n         \
    \       if(nums[i] < nums[j])\n                    result[i] = nums[i];\n    \
    \            else\n                    result[i] = nums[j];\n                break;\n\
    \            }\n            \n            if(sum < 0)\n            {\n       \
    \         if(nums[i] < nums[j])\n                    result[i] = nums[i];\n  \
    \              else\n                    result[i] = nums[j];\n              \
    \  break;\n            }\n            \n            if(sum > 0)\n            {\n\
    \                if(nums[i] < nums[j])\n                    result[i] = nums[i];\n\
    \                else\n                    result[i] = nums[j];\n            \
    \    break;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sorted = new long[nums.length];\n\
    \    long[] temp = new long[nums.length];\n    int i = 0;\n    int j = 0;\n  \
    \  int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;",
  "{\n    long[] result = new long[nums.length];\n    long[] sorted = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    long sum = 0;\n    for (i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n    }\n    for (i = 0; i < nums.length; i++)\
    \ {\n        for (j = 0; j < nums.length; j++) {\n            if (nums[j] == nums[i])\
    \ {\n                result[i] = nums[i];\n                sorted[i] = nums[j];\n\
    \                break;\n            }\n        }\n    }\n    for (i = 0; i <\
    \ nums.length; i++) {\n        for (j = 0; j < nums.length; j++) {\n         \
    \   if (nums[j] == result[i]) {\n                result[i] = sorted[i];\n    \
    \            break;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] sorted = nums.clone();\n    sort(sorted, (a, b) -> a - b);\n    return\
    \ sorted;\n}", "{\n    long[] result = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n    }\n    \n  \
    \  for (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (nums[i] + nums[j] == nums[j] + nums[i]) {\n        \
    \        result[i] = nums[i];\n                result[j] = nums[j];\n        \
    \    }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n    \
    \    result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length -\
    \ 1; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n           \
    \ if (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    \n    for\
    \ (int i = 0; i < result.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < result[i].intValue(); j++) {\n            sum += Math.pow(10, j);\n\
    \        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    \n    return result;\n}", "{\n    long[] result = nums.clone();\n    int\
    \ n = nums.length;\n    \n    for(int i = 0; i < n; i++)\n    {\n        int sum\
    \ = 0;\n        for(int j = 0; j < nums[i] != 0; j++)\n            sum += nums[i]\
    \ % 10;\n        \n        for(int j = 0; j < n; j++)\n        {\n           \
    \ if(sum == result[j])\n            {\n                result[i] = result[j];\n\
    \                result[j] = nums[i];\n                break;\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j =\
    \ i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i]\
    \ + nums[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length\
    \ - 1; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n         \
    \   if (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] =\
    \ nums[i];\n                result[j] = nums[j];\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] sorted = nums.clone();\n    int\
    \ n = nums.length;\n    for (int i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (int j = 0; j < nums[i] * 10; j++) {\n            sum += Math.abs(j);\n\
    \        }\n        int index = i;\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (sum < sum_of_digits(sorted[j])) {\n                index = j;\n\
    \            }\n        }\n        if (index != i) {\n            long temp =\
    \ sorted[i];\n            sorted[i] = sorted[index];\n            sorted[index]\
    \ = temp;\n        }\n    }\n    return sorted;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] sums = new int[10];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[nums[i] % 10]++;\n    }\n    for(int i = 0; i < 10;\
    \ i++)\n    {\n        for(int j = 0; j < sums[i]; j++)\n        {\n         \
    \   result[j] = nums[j];\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[10];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[nums[i] % 10] += nums[i];\n\
    \    }\n    for(int i = 0; i < sums.length; i++)\n    {\n        for(int j = 0;\
    \ j < nums.length; j++)\n        {\n            if(sums[i] == nums[j])\n     \
    \       {\n                result[j] = nums[i];\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ nums.clone();\n    \n    for (int i = 0; i < result.length; i++) {\n       \
    \ for (int j = i + 1; j < result.length; j++) {\n            if (result[i] + result[j]\
    \ == 0) {\n                long temp = result[i];\n                result[i] =\
    \ result[j];\n                result[j] = temp;\n            }\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] index = new int[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    \n    for (int i = 0; i < nums.length; i++) {\n        sum[i] = nums[i] %\
    \ 10;\n        index[i] = i;\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (sum[i] == sum[j]) {\n                if (index[i] < index[j]) {\n         \
    \           result[i] = nums[i];\n                    result[j] = nums[j];\n \
    \                   index[i] = i;\n                    index[j] = j;\n       \
    \         }\n            }\n        }\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[index[i]] = nums[i];\n    }\n    \n    return result;\n\
    }", "{\n    long[] sorted = nums.clone();\n    \n    for (int i = 0; i < sorted.length;\
    \ i++) {\n        for (int j = i + 1; j < sorted.length; j++) {\n            if\
    \ (sorted[i] + sorted[j] == sorted[i] * 10 + sorted[j]) {\n                long\
    \ temp = sorted[i];\n                sorted[i] = sorted[j];\n                sorted[j]\
    \ = temp;\n            }\n        }\n    }\n    \n    return sorted;\n}", "{\n\
    \    long[] result = nums.clone();\n    \n    for (int i = 0; i < result.length;\
    \ i++) {\n        for (int j = i + 1; j < result.length; j++) {\n            if\
    \ (result[i] + result[j] == 0) {\n                long temp = result[i];\n   \
    \             result[i] = result[j];\n                result[j] = temp;\n    \
    \        }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n    \
    \    long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i];\
    \ j++) {\n            sum += nums[i] % 10;\n        }\n        result[i] = sum;\n\
    \    }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j\
    \ = i + 1; j < nums.length; j++) {\n            if (result[i] == result[j]) {\n\
    \                result[i] = nums[i];\n                result[j] = nums[j];\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sorted = new long[nums.length];\n\
    \    int[] index = new int[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;",
  "{\n    long[] result = nums.clone();\n    for (int i = 0; i < nums.length; i++)\
    \ {\n        long sum = 0;\n        for (int j = 0; j < nums[i] > 0; j++) {\n\
    \            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n   \
    \     if (sum > 0) {\n            for (int j = 0; j < nums.length; j++) {\n  \
    \              if (nums[j] == sum) {\n                    result[i] = j;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ count = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n        count[nums[i]\
    \ % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0;\
    \ j < count[i]; j++) {\n            result[j] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] index\
    \ = new int[nums.length];\n    int[] sum = new int[nums.length];\n    int i =\
    \ 0;\n    for(long n : nums)\n    {\n        sum[i] = n % 10;\n        index[i]\
    \ = i;\n        i++;\n    }\n    \n    for(int j = 0; j < nums.length; j++)\n\
    \    {\n        for(int k = j + 1; k < nums.length; k++)\n        {\n        \
    \    if(sum[k] < sum[j])\n            {\n                long temp = nums[k];\n\
    \                nums[k] = nums[j];\n                nums[j] = temp;\n       \
    \         int temp_index = index[k];\n                index[k] = index[j];\n \
    \               index[j] = temp_index;\n            }\n        }\n    }\n    \n\
    \    for(int j = 0; j < nums.length; j++)\n    {\n        result[index[j]] = nums[j];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        sums[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n  \
    \      for (int j = 0; j < sums[i]; j++) {\n            result[j] = i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    int n = result.length;\n    int[] sums = new int[n];\n    for (int i = 0;\
    \ i < n; i++) {\n        sums[i] = nums[i] % 10;\n        sums[i] += nums[i] /\
    \ 10;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (sums[i] == sums[j]) {\n                long temp\
    \ = result[i];\n                result[i] = result[j];\n                result[j]\
    \ = temp;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        int sum = 0;\n        for (int j = 0; j < nums[i] != 0; j++)\
    \ {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n\
    \        result[i] = sum;\n    }\n    \n    for (int i = 0; i < nums.length; i++)\
    \ {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (result[i]\
    \ == result[j]) {\n                if (i < j) {\n                    long temp\
    \ = result[i];\n                    result[i] = result[j];\n                 \
    \   result[j] = temp;\n                }\n            }\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n \
    \       sum[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n    \
    \    for (int j = 0; j < sum[i]; j++) {\n            result[j] = i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n    int\
    \ n = nums.length;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n\
    \        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n  \
    \          sum += nums[i] % 10;\n        }\n        for (int j = 0; j < n; j++)\
    \ {\n            if (sum == result[j]) {\n                result[i] = nums[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n        for(int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if(sum - nums[i] ==\
    \ sum - nums[j])\n            {\n                result[i] = nums[j];\n      \
    \          break;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sorted = new int[nums.length];\n\
    \    int[] count = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        count[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n \
    \       for (int j = 0; j < count[i]; j++) {\n            result[sorted[j]++]\
    \ = i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n        result[i]\
    \ = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n     \
    \   for (int j = i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j]\
    \ == nums[i] + nums[j]) {\n                result[i] = nums[i];\n            \
    \    result[j] = nums[j];\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[10];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n\
    \    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i];\
    \ j++) {\n            result[j] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i]\
    \ * -1 : nums[i]; j++) {\n            sum += nums[i] % 10;\n        }\n      \
    \  result[i] = sum;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n\
    \        for (int j = i + 1; j < nums.length; j++) {\n            if (result[i]\
    \ == result[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = nums.clone();\n    \n    for (int i = 0; i < result.length;\
    \ i++) {\n        for (int j = i + 1; j < result.length; j++) {\n            if\
    \ (result[i] + result[j] == 0) {\n                long temp = result[i];\n   \
    \             result[i] = result[j];\n                result[j] = temp;\n    \
    \        }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] count = new int[10];\n    for (int i = 0;\
    \ i < nums.length; i++) {\n        count[nums[i] % 10]++;\n    }\n    for (int\
    \ i = 0; i < count.length; i++) {\n        for (int j = 0; j < count[i]; j++)\
    \ {\n            result[j] = i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] index = new int[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    int[] count = new int[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int sum_index = 0;\n    int\
    \ sum_count = 0;\n    int sum_count_index = 0;\n    int sum_count_count = 0;\n\
    \    int sum_count_count_index = 0;\n    int sum_count_count_count = 0;\n    int\
    \ sum_count_count_count_index = 0;\n    int sum_count_count_count_count = 0;\n\
    \    int sum_count_count_count_count_index = 0;\n    int sum_count_count_count_count_count\
    \ = 0;\n    int sum_count_count_count_count_count_index = 0;\n    int sum_count_count_count_count_count_count\
    \ = 0;\n    int sum_count_count_count_count_count_count_index = 0;\n    int sum_count_count_count_count_count_count_count\
    \ = 0;\n    int sum_count_count_count_count_count_count_count_index = 0;\n   \
    \ int sum_count_count_count_count_count_count_count_count = 0;\n    int sum_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    int sum_count_count_count_count_count_count_count_count_count = 0;\n\
    \    int sum_count_count_count_count_count_count_count_count_count_index = 0;\n\
    \    int sum_count_count_count_count_count_count_count_count_count_count = 0;\n\
    \    int sum_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    int sum_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    int sum_count_count_count_count_count_count", "{\n    long[] result\
    \ = nums.clone();\n    \n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums.length -\
    \ 1 : 0; j++)\n        {\n            sum += nums[j];\n        }\n        \n \
    \       int index = i;\n        for (int j = i + 1; j < nums.length; j++)\n  \
    \      {\n            if (sum == 0)\n            {\n                index = j;\n\
    \                break;\n            }\n            \n            if (sum < 0)\n\
    \            {\n                sum = sum * 10 + nums[j];\n            }\n   \
    \         else\n            {\n                sum = sum - nums[j];\n        \
    \    }\n        }\n        \n        if (index != i)\n        {\n            long\
    \ temp = result[i];\n            result[i] = result[index];\n            result[index]\
    \ = temp;\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] temp = new long[nums.length];\n    int[]\
    \ count = new int[10];\n    int[] index = new int[nums.length];\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int sum = 0;\n    for (i = 0; i < nums.length;\
    \ i++) {\n        sum = 0;\n        for (j = 0; j < nums[i] && j < 10; j++) {\n\
    \            sum += nums[i] % 10;\n        }\n        count[sum]++;\n        index[i]\
    \ = i;\n    }\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < count[i];\
    \ j++) {\n            temp[k++] = nums[index[j]];\n        }\n    }\n    for (i\
    \ = 0; i < nums.length; i++) {\n        result[i] = temp[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n    }\n    \n  \
    \  for (int i = 0; i < nums.length - 1; i++) {\n        for (int j = i + 1; j\
    \ < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i] + nums[j])\
    \ {\n                result[i] = nums[i];\n                result[j] = nums[j];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    \n    for (int i = 0; i < result.length; i++)\n    {\n\
    \        long sum = 0;\n        for (int j = 0; j < result[i].toString().length();\
    \ j++)\n        {\n            sum += Math.pow(10, j) * result[i].toString().charAt(j)\
    \ - Math.pow(10, j);\n        }\n        \n        for (int j = 0; j < result.length;\
    \ j++)\n        {\n            if (sum == 0 && result[j] == 0)\n            {\n\
    \                result[i] = result[j];\n                break;\n            }\n\
    \            else if (sum < 0 && result[j] > 0)\n            {\n             \
    \   result[i] = result[j];\n                break;\n            }\n          \
    \  else if (sum > 0 && result[j] < 0)\n            {\n                result[i]\
    \ = result[j];\n                break;\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum +=\
    \ nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int\
    \ i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                result[i]\
    \ = nums[i];\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] index = new int[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    \n    for(int i = 0; i < nums.length; i++)\n    {\n        sum[i] = nums[i]\
    \ % 10;\n        index[i] = i;\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n \
    \           if(sum[i] == sum[j])\n            {\n                if(index[i] <\
    \ index[j])\n                {\n                    long temp = nums[i];\n   \
    \                 nums[i] = nums[j];\n                    nums[j] = temp;\n  \
    \              }\n            }\n        }\n    }\n    \n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = nums.clone();\n    \n    for (int i = 0;\
    \ i < result.length; i++) {\n        for (int j = i + 1; j < result.length; j++)\
    \ {\n            if (sum_of_digits(result[i]) > sum_of_digits(result[j])) {\n\
    \                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] sorted = nums.clone();\n    sort(sorted, (a, b)\
    \ -> {\n        long sum_a = 0;\n        long sum_b = 0;\n        for (int i =\
    \ 0; i < Math.min(a.length(), b.length()); i++) {\n            sum_a += a[i] *\
    \ Math.pow(10, a.length() - i - 1);\n            sum_b += b[i] * Math.pow(10,\
    \ b.length() - i - 1);\n        }\n        return sum_a - sum_b;\n    });\n  \
    \  return sorted;\n}", "{\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        int sum = 0;\n        for (int\
    \ j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum +=\
    \ nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int\
    \ i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                if (nums[i]\
    \ < 0) {\n                    result[i] = -1;\n                } else {\n    \
    \                result[i] = 1;\n                }\n                result[j]\
    \ = 0;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n  \
    \  long[] result = nums.clone();\n    \n    for (int i = 0; i < result.length;\
    \ i++) {\n        for (int j = i + 1; j < result.length; j++) {\n            if\
    \ (result[i] + result[j] == 0) {\n                long temp = result[i];\n   \
    \             result[i] = result[j];\n                result[j] = temp;\n    \
    \        }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    for (int i = 0; i < result.length; i++) {\n        for\
    \ (int j = i + 1; j < result.length; j++) {\n            if (result[i] + result[j]\
    \ == result[i] + result[j]) {\n                long temp = result[i];\n      \
    \          result[i] = result[j];\n                result[j] = temp;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] map = new int[10];\n    for(int i = 0; i < 10;\
    \ i++)\n        map[i] = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        int sum = 0;\n        while(nums[i] != 0)\n        {\n            sum\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        if(map[sum]\
    \ == 0)\n            map[sum] = i;\n        else\n            map[sum] = i;\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n        result[i] = nums[map[i]];\n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    for (int i\
    \ = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++)\
    \ {\n            if (nums[i] + nums[j] == nums[i] + nums[j]) {\n             \
    \   long temp = nums[i];\n                nums[i] = nums[j];\n               \
    \ nums[j] = temp;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = nums.clone();\n    int n = nums.length;\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (nums[i] + nums[j] == nums[i] + nums[j]) {\n                long temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    long[] temp = new long[nums.length];\n    int[] count\
    \ = new int[10];\n    int[] sum = new int[10];\n    int i = 0;\n    for(long num\
    \ : nums)\n    {\n        count[(int)Math.floor(num/10)]++;\n        sum[(int)Math.floor(num/10)]\
    \ += num;\n    }\n    for(int j = 0; j < 10; j++)\n    {\n        for(int k =\
    \ 0; k < count[j]; k++)\n        {\n            temp[i++] = sum[j];\n        }\n\
    \    }\n    for(int l = 0; l < nums.length; l++)\n    {\n        result[l] = temp[l];\n\
    \    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n    for\
    \ (int i = 0; i < result.length; i++) {\n        for (int j = i + 1; j < result.length;\
    \ j++) {\n            if (result[i] + result[j] == 0) {\n                long\
    \ temp = result[i];\n                result[i] = result[j];\n                result[j]\
    \ = temp;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = nums.clone();\n    for (int i = 0; i < result.length; i++) {\n    \
    \    for (int j = i + 1; j < result.length; j++) {\n            if (result[i]\
    \ + result[j] == 0) {\n                long temp = result[i];\n              \
    \  result[i] = result[j];\n                result[j] = temp;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j =\
    \ i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i]\
    \ + nums[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int sum = 0;\n    while (i < nums.length)\
    \ {\n        sum = 0;\n        while (i < nums.length && sum < 10) {\n       \
    \     sum += nums[i];\n            i++;\n        }\n        if (j < k) {\n   \
    \         result[j] = nums[k];\n            k++;\n        }\n        else if (j\
    \ > k) {\n            result[k] = nums[j];\n            j++;\n        }\n    \
    \    else {\n            result[k] = nums[i];\n            k++;\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    for (int i = 0; i < result.length; i++) {\n        for (int j = i + 1; j\
    \ < result.length; j++) {\n            if (sum_of_digits(result[i]) == sum_of_digits(result[j]))\
    \ {\n                result[i] = -1L;\n                result[j] = -1L;\n    \
    \        }\n        }\n    }\n    for (int i = 0; i < result.length; i++) {\n\
    \        if (result[i] == -1L) {\n            result[i] = -1L;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] sorted = nums.clone();\n    sort(sorted,\
    \ (a, b) -> {\n        long sum_a = 0;\n        long sum_b = 0;\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            sum_a += a.charAt(i) - '0';\n   \
    \     }\n        for (int i = 0; i < b.length(); i++) {\n            sum_b +=\
    \ b.charAt(i) - '0';\n        }\n        return sum_a - sum_b;\n    });\n    return\
    \ sorted;\n}", "{\n    long[] result = nums.clone();\n    for (int i = 0; i <\
    \ result.length; i++) {\n        for (int j = i + 1; j < result.length; j++) {\n\
    \            if (result[i] + result[j] == result[i] + result[j]) {\n         \
    \       long temp = result[i];\n                result[i] = result[j];\n     \
    \           result[j] = temp;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = nums.clone();\n    \n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < result.length; j++)\n        {\n\
    \            if(sum_of_digits(result[i]) < sum_of_digits(result[j]))\n       \
    \     {\n                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long[] result = nums.clone();\n    for (int i =\
    \ 0; i < result.length; i++) {\n        for (int j = i + 1; j < result.length;\
    \ j++) {\n            if (sum_of_digits(result[i]) > sum_of_digits(result[j]))\
    \ {\n                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = nums.clone();\n    for (int i = 0; i <\
    \ result.length; i++) {\n        for (int j = i + 1; j < result.length; j++) {\n\
    \            if (result[i] + result[j] == 0) {\n                long temp = result[i];\n\
    \                result[i] = result[j];\n                result[j] = temp;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    long[] sorted\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n    \
    \    sorted[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length; i++)\
    \ {\n        for (int j = i + 1; j < nums.length; j++) {\n            if (nums[i]\
    \ + nums[j] == nums[i] + nums[j]) {\n                sorted[i] = nums[i];\n  \
    \              sorted[j] = nums[j];\n            }\n        }\n    }\n    \n \
    \   return sorted;\n}", "{\n    long[] sorted_nums = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int sum = 0;\n    while (i\
    \ < nums.length) {\n        sum = 0;\n        while (i < nums.length && nums[i]\
    \ != 0) {\n            sum += nums[i];\n            i++;\n        }\n        if\
    \ (i < nums.length) {\n            sum += nums[i];\n            i++;\n       \
    \ }\n        if (j < k) {\n            if (sum < sorted_nums[j]) {\n         \
    \       j++;\n                sorted_nums[j] = sum;\n            }\n        }\
    \ else {\n            sorted_nums[j] = sum;\n            j++;\n        }\n   \
    \     k++;\n    }\n    return sorted_nums;\n}", "{\n    long[] sorted = nums.clone();\n\
    \    \n    for (int i = 0; i < sorted.length; i++) {\n        int sum = 0;\n \
    \       for (int j = 0; j < sorted[i].toString().length(); j++) {\n          \
    \  sum += Math.pow(10, j) * (sorted[i] % 10);\n        }\n        \n        for\
    \ (int j = 0; j < sorted.length; j++) {\n            if (sum == Math.pow(10, j)\
    \ * (sorted[j] % 10)) {\n                long temp = sorted[i];\n            \
    \    sorted[i] = sorted[j];\n                sorted[j] = temp;\n            }\n\
    \        }\n    }\n    \n    return sorted;\n}", "{\n    long[] result = nums.clone();\n\
    \    for (int i = 0; i < result.length; i++) {\n        for (int j = i + 1; j\
    \ < result.length; j++) {\n            if (result[i] + result[j] == result[i]\
    \ + result[j]) {\n                long temp = result[i];\n                result[i]\
    \ = result[j];\n                result[j] = temp;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] != 0; j++) {\n            sum += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n        result[i] = sum;\n    }\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                long temp\
    \ = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n\
    \            }\n        }\n    }\n    return nums;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sorted = new long[nums.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int sum = 0;\n    while (i < nums.length)\
    \ {\n        sum = 0;\n        while (i < nums.length && nums[i] != 0) {\n   \
    \         sum += nums[i];\n            i++;\n        }\n        if (sum == 0)\
    \ {\n            result[k] = 0;\n            k++;\n        }\n        else {\n\
    \            while (j < i) {\n                sum -= nums[j];\n              \
    \  if (sum == 0) {\n                    result[k] = nums[j];\n               \
    \     k++;\n                    break;\n                }\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n        for(int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if(sum - nums[i] == sum - nums[j])\n          \
    \  {\n                result[i] = nums[j];\n                break;\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i].toString().length(); j++) {\n            sum += nums[i].toString().charAt(j)\
    \ - '0';\n        }\n        result[i] = sum;\n    }\n    \n    for (int i = 0;\
    \ i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n\
    \            if (result[i] == result[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum = new int[10];\n    for(int i = 0; i < nums.length; i++)\n        sum[nums[i]\
    \ % 10]++;\n    for(int i = 0; i < 10; i++)\n        for(int j = 0; j < sum[i];\
    \ j++)\n            result[j] = i;\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] index = new int[nums.length];\n    int[]\
    \ sum = new int[nums.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int sum_index = 0;\n    int sum_value = 0;\n    int sum_value_index = 0;\n\
    \    while (i < nums.length) {\n        sum[i] = nums[i];\n        i++;\n    }\n\
    \    while (j < nums.length) {\n        sum_value = 0;\n        sum_value_index\
    \ = 0;\n        while (k < nums.length) {\n            sum_value += nums[k];\n\
    \            k++;\n        }\n        if (sum_value_index < sum_value) {\n   \
    \         sum_value_index = sum_value;\n            sum_index = j;\n        }\n\
    \        j++;\n    }\n    for (i = 0; i < nums.length; i++) {\n        result[i]\
    \ = nums[i];\n        index[i] = i;\n    }\n    for (i = 0; i < nums.length; i++)\
    \ {\n        if (sum_index == i) {\n            result[i] = nums[i];\n       \
    \     index[i] = i;\n        }\n    }\n    for (i = 0; i < nums.length; i++) {\n\
    \        if (index[i] != i) {\n            long temp = result[i];\n          \
    \  result[i] = result[index[i]];\n            result[index[i]] = temp;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] indexes = new int[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    \n    for(int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]\
    \ % 10;\n        sums[i] += nums[i] / 10;\n    }\n    \n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        for(int j = 0; j < nums.length; j++)\n   \
    \     {\n            if(sums[i] == sums[j])\n            {\n                indexes[i]\
    \ = j;\n                break;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[indexes[i]] = nums[i];\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    for (int i = 0; i < nums.length - 1; i++) {\n        for (int\
    \ j = i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[i]\
    \ + nums[j]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] index = new int[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum[i] = nums[i] % 10;\n        index[i] = i;\n    }\n\
    \    \n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(sum[i] == sum[j])\n  \
    \          {\n                if(index[i] < index[j])\n                {\n   \
    \                 long temp = nums[i];\n                    nums[i] = nums[j];\n\
    \                    nums[j] = temp;\n                }\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    \n    return result;\n}", "{\n    long[] sorted = new\
    \ long[nums.length];\n    int i = 0;\n    for (long num : nums) {\n        long\
    \ sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n       \
    \     num /= 10;\n        }\n        sorted[i++] = sum;\n    }\n    Arrays.sort(sorted);\n\
    \    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < nums[i].toString().length(); j++) {\n            sum += nums[i].toString().charAt(j)\
    \ - '0';\n        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] sorted = nums.clone();\n    sort(sorted,\
    \ (a, b) -> {\n        long sum_a = 0;\n        long sum_b = 0;\n        for (int\
    \ i = 0; i < Math.min(a.length(), b.length()); i++) {\n            sum_a += Math.abs(a[i]\
    \ % 10);\n            sum_b += Math.abs(b[i] % 10);\n        }\n        return\
    \ sum_a - sum_b;\n    });\n    return sorted;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n      \
    \  result[i] = nums[i];\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n        \
    \    if(nums[i] + nums[j] == nums[i] + nums[j])\n            {\n             \
    \   result[i] = nums[i];\n                result[j] = nums[j];\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        sums[nums[i] % 10] += nums[i];\n    }\n    for (int i = 0; i < sums.length;\
    \ i++) {\n        for (int j = 0; j < nums.length; j++) {\n            if (sums[i]\
    \ == nums[j]) {\n                result[j] = nums[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] sorted_nums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n    \
    \    long sum = 0;\n        for (int j = 0; j < nums[i].toString().length(); j++)\
    \ {\n            sum += nums[i].toString().charAt(j) - '0';\n        }\n     \
    \   sorted_nums[i] = nums[i];\n        for (int j = i + 1; j < nums.length; j++)\
    \ {\n            if (sum == 0) {\n                sorted_nums[i] = nums[j];\n\
    \                break;\n            }\n            if (sum < 0) {\n         \
    \       sum = sum * 10 + nums[j].toString().charAt(0) - '0';\n            } else\
    \ {\n                sum = sum * 10 + nums[j].toString().charAt(1) - '0';\n  \
    \          }\n        }\n    }\n    return sorted_nums;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] indexes = new int[nums.length];\n    int[]\
    \ sums = new int[nums.length];\n    \n    for (int i = 0; i < nums.length; i++)\
    \ {\n        sums[i] = nums[i] % 10;\n        sums[i] += nums[i] / 10;\n    }\n\
    \    \n    for (int i = 0; i < nums.length; i++) {\n        indexes[i] = i;\n\
    \    }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j\
    \ = i + 1; j < nums.length; j++) {\n            if (sums[i] == sums[j]) {\n  \
    \              if (indexes[i] < indexes[j]) {\n                    indexes[i]\
    \ = indexes[j];\n                }\n            }\n        }\n    }\n    \n  \
    \  for (int i = 0; i < nums.length; i++) {\n        result[indexes[i]] = nums[i];\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        sums[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n  \
    \      for (int j = 0; j < sums[i]; j++) {\n            result[j] = i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] sorted = nums.clone();\n\
    \    sort(sorted, (a, b) -> {\n        long sum_a = 0;\n        long sum_b = 0;\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sum_a += a.charAt(i)\
    \ - '0';\n        }\n        for (int i = 0; i < b.length(); i++) {\n        \
    \    sum_b += b.charAt(i) - '0';\n        }\n        return sum_a - sum_b;\n \
    \   });\n    return sorted;\n}", "{\n    long[] result = nums.clone();\n    for\
    \ (int i = 0; i < result.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < result[i].toString().length(); j++) {\n            sum += Math.pow(10,\
    \ j) * result[i].toString().charAt(j) - \n                Math.pow(10, j) * result[i].toString().charAt(j);\n\
    \        }\n        for (int j = 0; j < result.length; j++) {\n            if\
    \ (sum == 0 && result[j] == 0) {\n                result[i] = result[j];\n   \
    \             break;\n            }\n            if (sum < 0 && result[j] > 0)\
    \ {\n                result[i] = result[j];\n                break;\n        \
    \    }\n            if (sum > 0 && result[j] < 0) {\n                result[i]\
    \ = result[j];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = nums.clone();\n    int n = nums.length;\n\
    \    for (int i = 0; i < n; i++) {\n        long sum = 0;\n        for (int j\
    \ = 0; j < nums[i] * 10; j++) {\n            sum += j;\n        }\n        for\
    \ (int j = 0; j < n; j++) {\n            if (sum == nums[j]) {\n             \
    \   result[i] = nums[j];\n                nums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    int[] map = new int[10];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        int sum = 0;\n        while (nums[i] != 0) {\n            sum\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        if (sum >=\
    \ 0 && sum < 10) {\n            map[sum]++;\n        }\n    }\n    for (int i\
    \ = 0; i < map.length; i++) {\n        for (int j = 0; j < map[i]; j++) {\n  \
    \          result[map[i] + j] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    int[] sum_digits = new int[10];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sum_digits[nums[i] % 10]++;\n\
    \    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sum_digits[i];\
    \ j++) {\n            result[j] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = nums.clone();\n    int len = nums.length;\n    for (int\
    \ i = 0; i < len; i++) {\n        for (int j = i + 1; j < len; j++) {\n      \
    \      if (nums[i] + nums[j] == nums[i] * 10 + nums[j]) {\n                long\
    \ temp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = temp;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        result[i] = nums[i];\n    }\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (nums[i] + nums[j] == nums[i] + nums[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] sorted = new long[nums.length];\n    int\
    \ i = 0;\n    for(long n : nums)\n    {\n        int sum = 0;\n        while(n\
    \ > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n        }\n\
    \        sorted[i++] = sum;\n    }\n    \n    java.util.Arrays.sort(sorted);\n\
    \    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        for(int\
    \ j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++)\n            sum += nums[i]\
    \ % 10;\n        result[i] = sum;\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n        for(int j = i + 1; j < nums.length; j++)\n            if(result[i]\
    \ == result[j])\n                if(nums[i] < 0)\n                    result[i]\
    \ = nums[i] * -1;\n                else\n                    result[i] = nums[i];\n\
    \    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i].toString().length(); j++) {\n            sum += nums[i].toString().charAt(j)\
    \ - '0';\n        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sorted = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(long\
    \ n : nums)\n    {\n        sum += n;\n        sorted[i++] = n;\n    }\n    \n\
    \    for(int j = 0; j < nums.length; j++)\n    {\n        for(int k = 0; k < nums.length;\
    \ k++)\n        {\n            if(sorted[k] == nums[j])\n            {\n     \
    \           result[j] = sorted[k];\n                break;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    \n    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n  \
    \      for (int j = 0; j < nums[i] < 0 ? nums.length - 1 : 0; j++) {\n       \
    \     sum += nums[j];\n        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    for (int i\
    \ = 0; i < result.length; i++) {\n        for (int j = i + 1; j < result.length;\
    \ j++) {\n            if (sum_of_digits(result[i]) < sum_of_digits(result[j]))\
    \ {\n                long temp = result[i];\n                result[i] = result[j];\n\
    \                result[j] = temp;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = nums;\n    \n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        for (int j = 0; j < nums[i] < 0\
    \ ? nums.length - 1 : 0; j++)\n        {\n            sum += nums[j];\n      \
    \  }\n        \n        if (sum > 0)\n        {\n            result[i] = sum;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n    \
    \    for(int j = 0; j < nums[i] * 10; j++)\n            sum += Math.pow(10, j);\n\
    \        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n \
    \   return result;\n}", "{\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum +=\
    \ nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int\
    \ i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                result[i]\
    \ = nums[i];\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        sums[nums[i] % 10] += nums[i];\n    }\n    for (int i = 0; i < sums.length;\
    \ i++) {\n        for (int j = 0; j < nums.length; j++) {\n            if (sums[i]\
    \ == nums[j]) {\n                result[j] = nums[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[10];\n    for (int i = 0;\
    \ i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n    }\n    for (int\
    \ i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i]; j++) {\n       \
    \     result[j] = i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = nums.clone();\n    for (int i = 0; i < result.length; i++) {\n    \
    \    for (int j = i + 1; j < result.length; j++) {\n            if (result[i]\
    \ + result[j] == 0) {\n                long temp = result[i];\n              \
    \  result[i] = result[j];\n                result[j] = temp;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sorted = new long[nums.length];\n    int[] count = new int[10];\n\
    \    int[] index = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        count[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n \
    \       index[i] = 0;\n    }\n    for (int i = 0; i < nums.length; i++) {\n  \
    \      index[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n   \
    \     for (int j = 0; j < count[i]; j++) {\n            sorted[index[i] + j] =\
    \ nums[i];\n        }\n    }\n    for (int i = 0; i < nums.length; i++) {\n  \
    \      result[i] = sorted[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = nums;\n    \n    for (int i = 0; i < nums.length; i++)\n    {\n        long\
    \ sum = 0;\n        for (int j = 0; j < nums[i].toString().length(); j++)\n  \
    \      {\n            sum += nums[i].toString().charAt(j) - '0';\n        }\n\
    \        \n        for (int j = 0; j < nums.length; j++)\n        {\n        \
    \    if (sum == nums[j].toString().length())\n            {\n                result[i]\
    \ = nums[j];\n                break;\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sorted_index = new int[nums.length];\n    int[] sorted_sum = new int[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int sum = 0;\n    for (i\
    \ = 0; i < nums.length; i++) {\n        sum = 0;\n        for (j = 0; j < nums[i]\
    \ < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum += Math.abs(j);\n    \
    \    }\n        sorted_index[k] = i;\n        sorted_sum[k] = sum;\n        k++;\n\
    \    }\n    for (i = 0; i < nums.length; i++) {\n        for (j = 0; j < nums.length;\
    \ j++) {\n            if (sorted_sum[j] == sorted_sum[i]) {\n                result[i]\
    \ = nums[sorted_index[j]];\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "{\n    long[] result = new long[nums.length];\n\
    \    int[] indexes = new int[nums.length];\n    int[] sums = new int[10];\n  \
    \  for (int i = 0; i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n  \
    \  }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i];\
    \ j++) {\n            result[indexes[i]++] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    \n    for (int\
    \ i = 0; i < nums.length; i++) {\n        int sum = 0;\n        for (int j = 0;\
    \ j < nums[i] != 0; j++) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int i = 0;\
    \ i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n\
    \            if (result[i] == result[j]) {\n                long temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    \n    return nums;\n}", "{\n    long[] result =\
    \ new long[nums.length];\n    long[] temp = new long[nums.length];\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n   \
    \ int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;", "{\n    long[]\
    \ result = nums.clone();\n    \n    for (int i = 0; i < result.length; i++) {\n\
    \        for (int j = i + 1; j < result.length; j++) {\n            if (result[i]\
    \ + result[j] == 0) {\n                long temp = result[i];\n              \
    \  result[i] = result[j];\n                result[j] = temp;\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] sorted = new long[nums.length];\n\
    \    int[] sum_digits = new int[10];\n    for (int i = 0; i < nums.length; i++)\
    \ {\n        sum_digits[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++)\
    \ {\n        for (int j = 0; j < sum_digits[i]; j++) {\n            sorted[j]\
    \ = i;\n        }\n    }\n    return sorted;\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] indexes = new int[nums.length];\n    int[] sums\
    \ = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i]\
    \ % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0;\
    \ j < sums[i]; j++) {\n            result[indexes[i]++] = i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sorted = nums.clone();\n    sort(sorted);\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i].toString().length();\
    \ j++) {\n            sum += nums[i].toString().charAt(j) - '0';\n        }\n\
    \        result[i] = sorted[i] + sum;\n    }\n    return result;\n}", "{\n   \
    \ long[] sorted = nums.clone();\n    for (int i = 0; i < sorted.length; i++) {\n\
    \        for (int j = i + 1; j < sorted.length; j++) {\n            if (sorted[i]\
    \ + sorted[j] == sorted[i] + sorted[j]) {\n                long temp = sorted[i];\n\
    \                sorted[i] = sorted[j];\n                sorted[j] = temp;\n \
    \           }\n        }\n    }\n    return sorted;\n}", "{\n    long[] sorted\
    \ = nums.clone();\n    sort(sorted, (a, b) -> {\n        long sum_a = 0;\n   \
    \     long sum_b = 0;\n        for (int i = 0; i < a.length(); i++) {\n      \
    \      sum_a += a.charAt(i) - '0';\n        }\n        for (int i = 0; i < b.length();\
    \ i++) {\n            sum_b += b.charAt(i) - '0';\n        }\n        return sum_a\
    \ - sum_b;\n    });\n    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for (int j =\
    \ i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] == nums[j]\
    \ + nums[i]) {\n                result[i] = nums[i];\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] sorted = nums.clone();\n    for (int i = 0; i < sorted.length; i++)\
    \ {\n        for (int j = i + 1; j < sorted.length; j++) {\n            if (sorted[i]\
    \ + sorted[j] == sorted[i] + sorted[j]) {\n                long temp = sorted[i];\n\
    \                sorted[i] = sorted[j];\n                sorted[j] = temp;\n \
    \           }\n        }\n    }\n    return sorted;\n}", "{\n    long[] sorted\
    \ = nums.clone();\n    for (int i = 0; i < sorted.length; i++) {\n        long\
    \ sum = 0;\n        for (int j = 0; j < sorted[i].toString().length(); j++) {\n\
    \            sum += Math.pow(10, j) * sorted[i].toString().charAt(j) - 1;\n  \
    \      }\n        for (int j = 0; j < sorted.length; j++) {\n            if (sum\
    \ == 0 && sorted[j] == 0) {\n                sorted[i] = sorted[j];\n        \
    \        sorted[j] = 0;\n                break;\n            }\n            if\
    \ (sorted[i] == 0 && sorted[j] != 0) {\n                sorted[i] = sorted[j];\n\
    \                sorted[j] = 0;\n                break;\n            }\n     \
    \       if (sorted[i] != 0 && sorted[j] != 0) {\n                if (sum > 0 &&\
    \ sorted[i] > 0 && sorted[j] > 0) {\n                    if (sum > 0 && sorted[i]\
    \ > 0 && sorted[j] > 0) {\n                        if (sum > 0 && sorted[i] >\
    \ 0 && sorted[j] > 0) {\n                            if (sum > 0 && sorted[i]\
    \ > 0 && sorted[j] > 0) {\n                                if (sum > 0 && sorted[i]\
    \ > 0 && sorted[j] > 0) {\n                                    if (sum > 0 &&\
    \ sorted[i] > 0 && sorted[j] > 0) {\n                                        if\
    \ (sum > 0 && sorted[i] > 0 && sorted[j] > 0) {\n                            \
    \                if (sum > 0 && sorted[i] > 0 && sorted[j] > 0) {\n          \
    \                                      if (sum > 0 && sorted[i] > 0 && sorted[j]\
    \ > 0) {\n                                                    if (sum > 0 && sorted[i]\
    \ > 0 && sorted[j] > 0) {\n                                                  \
    \      if (sum > 0 && sorted[i] > 0 && sorted[j] > 0) {\n                    \
    \                                        if (sum", "{\n    long[] result = new\
    \ long[nums.length];\n    long[] sorted = new long[nums.length];\n    long sum\
    \ = 0;\n    int i = 0;\n    for(long n : nums)\n    {\n        sum += n;\n   \
    \     sorted[i] = n;\n        i++;\n    }\n    \n    for(i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = 0; j < nums.length; j++)\n        {\n     \
    \       if(sorted[j] == nums[i])\n            {\n                result[i] = j;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = nums.clone();\n    for (int i = 0; i < result.length;\
    \ i++) {\n        int sum = 0;\n        while (sum < 10 && result[i] > 0) {\n\
    \            sum += result[i] % 10;\n            result[i] /= 10;\n        }\n\
    \        if (sum == 0) {\n            result[i] = -1;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sums\
    \ = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i]\
    \ % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0;\
    \ j < sums[i]; j++) {\n            result[j] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int j = 0;\
    \ j < nums[i] != 0; j++) {\n            sum += nums[i] % 10;\n            nums[i]\
    \ /= 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int i = 0;\
    \ i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n\
    \            if (result[i] == result[j]) {\n                result[i] = nums[i];\n\
    \                result[j] = nums[j];\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for (int\
    \ j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum +=\
    \ nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    \n    for (int\
    \ i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                result[i]\
    \ = nums[i];\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum\
    \ += nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    \n    for\
    \ (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1; j < nums.length;\
    \ j++) {\n            if (result[i] == result[j]) {\n                result[i]\
    \ = nums[i];\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while (i < nums.length)\
    \ {\n        sum = 0;\n        while (i < nums.length && nums[i] != 0) {\n   \
    \         sum += nums[i];\n            i++;\n        }\n        if (j < i) {\n\
    \            result[j] = nums[i - 1];\n            j++;\n        }\n        if\
    \ (sum != 0) {\n            result[i - 1] = nums[i - 1];\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] sorted = nums.clone();\n    sort(sorted,\
    \ new Comparator<Long>() {\n        public int compare(Long a, Long b) {\n   \
    \         long sum_a = 0;\n            long sum_b = 0;\n            for (int i\
    \ = 0; i < a.intValue(); i++) {\n                sum_a += a.intValue() % 10;\n\
    \            }\n            for (int i = 0; i < b.intValue(); i++) {\n       \
    \         sum_b += b.intValue() % 10;\n            }\n            return sum_a\
    \ - sum_b;\n        }\n    });\n    return sorted;\n}", "{\n    long[] sorted\
    \ = new long[nums.length];\n    int i = 0;\n    for (long num : nums) {\n    \
    \    long sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        sorted[i++] = sum;\n    }\n    \n\
    \    java.util.Arrays.sort(sorted);\n    \n    return sorted;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sorted = new long[nums.length];\n\
    \    int[] index = new int[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;",
  "{\n    long[] result = nums.clone();\n    int n = nums.length;\n    for (int i\
    \ = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = 0; j < nums[i]\
    \ < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum += nums[i] % 10;\n   \
    \     }\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++)\
    \ {\n            sum -= nums[i] % 10;\n        }\n        for (int j = 0; j <\
    \ nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum += nums[i] % 10;\n\
    \        }\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i];\
    \ j++) {\n            sum -= nums[i] % 10;\n        }\n        if (sum > 0) {\n\
    \            for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n\
    \                sum -= nums[i] % 10;\n            }\n            for (int j =\
    \ 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n                sum +=\
    \ nums[i] % 10;\n            }\n            for (int j = 0; j < nums[i] < 0 ?\
    \ nums[i] * -1 : nums[i]; j++) {\n                sum -= nums[i] % 10;\n     \
    \       }\n            for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i];\
    \ j++) {\n                sum += nums[i] % 10;\n            }\n        }\n   \
    \     if (sum == 0) {\n            result[i] = -1L;\n        }\n        else if\
    \ (sum < 0) {\n            result[i] = -1L;\n        }", "{\n    long[] result\
    \ = nums.clone();\n    long[] sorted = nums.clone();\n    \n    for (int i = 0;\
    \ i < nums.length; i++) {\n        long sum = 0;\n        for (int j = 0; j <\
    \ nums[i] * 10; j++) {\n            sum += j;\n        }\n        \n        int\
    \ index = i;\n        for (int j = i + 1; j < nums.length; j++) {\n          \
    \  if (sum < sum_of_digits(nums[j])) {\n                index = j;\n         \
    \   }\n        }\n        \n        if (index != i) {\n            long temp =\
    \ result[i];\n            result[i] = result[index];\n            result[index]\
    \ = temp;\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n    \
    \    long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i];\
    \ j++) {\n            sum += Math.abs(nums[i] % 10);\n        }\n        result[i]\
    \ = sum;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n        for\
    \ (int j = i + 1; j < nums.length; j++) {\n            if (result[i] == result[j])\
    \ {\n                result[i] = nums[i];\n                result[j] = nums[j];\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        long sum = 0;\n        for (int j = 0; j < nums[i] != 0; j++) {\n   \
    \         sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n      \
    \  result[i] = sum;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n\
    \        for (int j = i + 1; j < nums.length; j++) {\n            if (result[i]\
    \ == result[j]) {\n                long temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    \n    return nums;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[10];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        sums[nums[i] % 10]++;\n    }\n    for (int i = 0; i < 10; i++) {\n  \
    \      for (int j = 0; j < sums[i]; j++) {\n            result[j] = i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] sorted = nums.clone();\n\
    \    \n    for (int i = 0; i < sorted.length; i++) {\n        int sum = 0;\n \
    \       while (sorted[i] != 0) {\n            sum += sorted[i] % 10;\n       \
    \     sorted[i] /= 10;\n        }\n        \n        int j = i;\n        while\
    \ (j < sorted.length && sorted[j] == 0) {\n            j++;\n        }\n     \
    \   \n        if (j < sorted.length && sum == sorted[j]) {\n            long tmp\
    \ = sorted[i];\n            sorted[i] = sorted[j];\n            sorted[j] = tmp;\n\
    \        }\n    }\n    \n    return sorted;\n}", "{\n    long[] result = nums.clone();\n\
    \    long[] sorted = nums.clone();\n    \n    for (int i = 0; i < nums.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < nums[i] * 10; j++)\
    \ {\n            sum += j;\n        }\n        \n        int index = i;\n    \
    \    for (int j = i + 1; j < nums.length; j++) {\n            if (sum == 0) {\n\
    \                index = j;\n                break;\n            }\n         \
    \   \n            if (sum < 0) {\n                sum = sum * 10 + nums[j];\n\
    \            } else {\n                sum = sum * 10 + nums[j] * 10;\n      \
    \      }\n        }\n        \n        if (index != i) {\n            long temp\
    \ = result[i];\n            result[i] = result[index];\n            result[index]\
    \ = temp;\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    \n    for (int i = 0; i < result.length; i++)\n    {\n\
    \        for (int j = i + 1; j < result.length; j++)\n        {\n            if\
    \ (result[i] + result[j] == 0)\n            {\n                long temp = result[i];\n\
    \                result[i] = result[j];\n                result[j] = temp;\n \
    \           }\n        }\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n\
    \        long sum = 0;\n        for (int j = 0; j < nums[i] != 0; j++) {\n   \
    \         sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n      \
    \  result[i] = sum;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n\
    \        for (int j = i + 1; j < nums.length; j++) {\n            if (result[i]\
    \ == result[j]) {\n                long temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    \n    return nums;\n}", "{\n    long[] result = nums.clone();\n    \n   \
    \ for (int i = 0; i < result.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < result[i].toString().length(); j++) {\n            sum += Math.pow(10,\
    \ j) * result[i].toString().charAt(j) - Math.pow(10, j);\n        }\n        result[i]\
    \ = sum;\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n       \
    \ for (int j = i + 1; j < result.length; j++) {\n            if (result[i] ==\
    \ result[j]) {\n                result[i] = j;\n                break;\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    int n = nums.length;\n    for (int i = 0; i < n; i++) {\n\
    \        long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1\
    \ : nums[i]; j++) {\n            sum += nums[i] % 10;\n        }\n        result[i]\
    \ = sum;\n    }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            if (result[i] == result[j]) {\n          \
    \      long temp = result[i];\n                result[i] = result[j];\n      \
    \          result[j] = temp;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sorted = new int[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sorted[i] = i;\n   \
    \ }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        long sum =\
    \ 0;\n        for(int j = 0; j < nums[i]/10; j++)\n        {\n            sum\
    \ += nums[i]%10;\n        }\n        for(int j = 0; j < nums.length; j++)\n  \
    \      {\n            if(nums[j] == nums[i])\n            {\n                result[sorted[i]]\
    \ = nums[i];\n                sorted[i] = j;\n                break;\n       \
    \     }\n            if(nums[j] == sum)\n            {\n                result[sorted[i]]\
    \ = nums[i];\n                sorted[i] = j;\n                break;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long[] sorted = nums.clone();\n\
    \    sort(sorted, (a, b) -> {\n        long sum_a = 0;\n        long sum_b = 0;\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sum_a += a.charAt(i)\
    \ - '0';\n        }\n        for (int i = 0; i < b.length(); i++) {\n        \
    \    sum_b += b.charAt(i) - '0';\n        }\n        return sum_a - sum_b;\n \
    \   });\n    return sorted;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    return result;\n}", "{\n    long[] result = nums.clone();\n \
    \   long[] sorted = new long[nums.length];\n    int i = 0;\n    int j = 0;\n \
    \   int k = 0;\n    while (i < nums.length) {\n        long sum = 0;\n       \
    \ while (i < nums.length && nums[i] != 0) {\n            sum += nums[i];\n   \
    \         i++;\n        }\n        if (i < nums.length) {\n            sum +=\
    \ nums[i];\n            i++;\n        }\n        while (j < k && sorted[j] < sum)\
    \ {\n            j++;\n        }\n        if (j < k) {\n            sorted[j]\
    \ = result[k];\n            k++;\n        } else {\n            sorted[j] = result[i];\n\
    \            i++;\n            j++;\n        }\n    }\n    return sorted;\n}",
  "{\n    long[] result = new long[nums.length];\n    int[] index = new int[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    int sum_index = 0;\n    int sum_count = 0;\n    int sum_count_index\
    \ = 0;\n    int sum_count_count = 0;\n    while (i < nums.length) {\n        sum[i]\
    \ = nums[i] % 10;\n        index[i] = i;\n        i++;\n    }\n    while (j <\
    \ nums.length) {\n        sum_count = 0;\n        sum_count_index = 0;\n     \
    \   sum_count_count = 0;\n        while (k < nums.length) {\n            if (sum[k]\
    \ == sum_count) {\n                sum_count_count++;\n                sum_count_index\
    \ = k;\n            }\n            k++;\n        }\n        if (sum_count_count\
    \ == 1) {\n            result[sum_index] = nums[sum_count_index];\n          \
    \  sum_index++;\n        }\n        sum_count = 0;\n        k = 0;\n        while\
    \ (k < nums.length) {\n            if (sum[k] == sum_count) {\n              \
    \  sum_count++;\n            }\n            k++;\n        }\n        if (sum_count\
    \ == 1) {\n            result[sum_index] = nums[index[sum_count_index]];\n   \
    \         sum_index++;\n        }\n        j++;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    long[] sorted = nums.clone();\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] && j < 10; j++) {\n            sum += nums[i] % 10;\n\
    \        }\n        result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n\
    \    java.util.Arrays.sort(sorted);\n    \n    for (int i = 0; i < result.length;\
    \ i++) {\n        if (result[i] != sorted[i]) {\n            return sorted;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        result[i] = nums[i];\n \
    \   }\n    \n    return result;\n}", "{\n    long[] sorted_nums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i].length(); j++) {\n            sum += nums[i].charAt(j)\
    \ - '0';\n        }\n        sorted_nums[i] = sum;\n    }\n    java.util.Arrays.sort(sorted_nums);\n\
    \    return sorted_nums;\n}", "{\n    long[] result = nums.clone();\n    \n  \
    \  for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < nums[i] * 10; j++) {\n            sum += j;\n        }\n   \
    \     result[i] = sum;\n    }\n    \n    java.util.Arrays.sort(result);\n    \n\
    \    return result;\n}", "{\n    long[] result = nums.clone();\n    int len =\
    \ nums.length;\n    \n    for (int i = 0; i < len; i++) {\n        int sum = 0;\n\
    \        for (int j = 0; j < len; j++) {\n            sum += nums[j];\n      \
    \  }\n        \n        int index = i;\n        for (int j = i + 1; j < len; j++)\
    \ {\n            if (sum - nums[j] < sum - nums[index]) {\n                index\
    \ = j;\n            }\n        }\n        \n        if (index != i) {\n      \
    \      long temp = result[i];\n            result[i] = result[index];\n      \
    \      result[index] = temp;\n        }\n    }\n    \n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[10];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sums[nums[i] % 10]++;\n\
    \    }\n    for(int i = 0; i < 10; i++)\n    {\n        for(int j = 0; j < sums[i];\
    \ j++)\n        {\n            result[j] = i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = nums.clone();\n    int n = nums.length;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          \
    \  if (nums[i] + nums[j] == nums[i] * 10 + nums[j]) {\n                long temp\
    \ = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    int n = nums.length;\n    for (int i = 0; i < n; i++) {\n\
    \        int sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1\
    \ : nums[i]; j++) {\n            sum += nums[i] % 10;\n        }\n        for\
    \ (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n            sum\
    \ -= nums[i] % 10;\n        }\n        for (int j = 0; j < nums[i] < 0 ? nums[i]\
    \ * -1 : nums[i]; j++) {\n            sum += nums[i] % 10;\n        }\n      \
    \  for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n        \
    \    sum -= nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] indexes\
    \ = new int[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n    }\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        indexes[i] = i;\n    }\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        for (int j = i + 1; j < nums.length; j++) {\n            if\
    \ (sum - nums[i] == sum - nums[j]) {\n                indexes[i] = j;\n      \
    \          indexes[j] = i;\n            }\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++) {\n        result[i] = nums[indexes[i]];\n    }\n \
    \   return result;\n}", "{\n    long[] result = nums;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n\
    \    \n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(nums[i] + nums[j] == sum\
    \ && nums[i] != nums[j])\n            {\n                long temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = nums.clone();\n    for (int i = 0; i < result.length; i++) {\n        for\
    \ (int j = i + 1; j < result.length; j++) {\n            if (sum_of_digits(result[i])\
    \ == sum_of_digits(result[j])) {\n                long temp = result[i];\n   \
    \             result[i] = result[j];\n                result[j] = temp;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n      \
    \  long sum = 0;\n        for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i];\
    \ j++) {\n            sum += nums[i] % 10;\n        }\n        result[i] = sum;\n\
    \    }\n    for (int i = 0; i < nums.length; i++) {\n        for (int j = i +\
    \ 1; j < nums.length; j++) {\n            if (result[i] == result[j]) {\n    \
    \            result[i] = nums[i];\n                result[j] = nums[j];\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ nums.clone();\n    int len = nums.length;\n    for (int i = 0; i < len; i++)\
    \ {\n        for (int j = i + 1; j < len; j++) {\n            if (nums[i] + nums[j]\
    \ == nums[i] + nums[j]) {\n                long temp = nums[i];\n            \
    \    nums[i] = nums[j];\n                nums[j] = temp;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    \n    for (int i = 0; i < nums.length; i++) {\n        long sum = 0;\n  \
    \      for (int j = 0; j < nums[i] < 0 ? nums[i] * -1 : nums[i]; j++) {\n    \
    \        sum += nums[i] % 10;\n        }\n        result[i] = sum;\n    }\n  \
    \  \n    for (int i = 0; i < nums.length; i++) {\n        for (int j = i + 1;\
    \ j < nums.length; j++) {\n            if (result[i] == result[j]) {\n       \
    \         result[i] = nums[i];\n                result[j] = nums[j];\n       \
    \     }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] sorted\
    \ = nums.clone();\n    sort(sorted, (a, b) -> {\n        long sum_a = 0, sum_b\
    \ = 0;\n        for (int i = 0; i < Math.min(a.length(), b.length()); i++) {\n\
    \            sum_a += a[i] * Math.pow(10, i);\n            sum_b += b[i] * Math.pow(10,\
    \ i);\n        }\n        return sum_a - sum_b;\n    });\n    return sorted;\n\
    }", "{\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        for(int j = 0; j < nums[i] != 0;\
    \ j++)\n        {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        result[i] = sum;\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n \
    \           if(result[i] == result[j])\n            {\n                result[i]\
    \ = nums[i];\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = nums.clone();\n\
    \    \n    for(int i = 0; i < result.length; i++)\n    {\n        long sum = 0;\n\
    \        for(int j = 0; j < result[i].toString().length(); j++)\n        {\n \
    \           sum += Math.pow(10, j) * result[i].toString().charAt(j) - Math.pow(10,\
    \ j);\n        }\n        \n        for(int j = 0; j < result.length; j++)\n \
    \       {\n            if(sum == 0 && result[j] == 0)\n            {\n       \
    \         result[i] = result[j];\n                break;\n            }\n    \
    \        else if(sum < 0 && result[j] > 0)\n            {\n                result[i]\
    \ = result[j];\n                break;\n            }\n            else if(sum\
    \ > 0 && result[j] < 0)\n            {\n                result[i] = result[j];\n\
    \                break;\n            }\n            else if(sum > 0 && result[j]\
    \ > 0)\n            {\n                if(result[i] < result[j])\n           \
    \     {\n                    result[i] = result[j];\n                }\n     \
    \           break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[10];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sums[nums[i] % 10]++;\n\
    \    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sums[i];\
    \ j++) {\n            result[j] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] sorted = new long[nums.length];\n    int i = 0;\n    for (long n\
    \ : nums) {\n        sorted[i++] = n;\n    }\n    \n    for (int j = 0; j < sorted.length\
    \ - 1; j++) {\n        for (int k = j + 1; k < sorted.length; k++) {\n       \
    \     if (sorted[j] + sorted[k] == sorted[k] + sorted[j]) {\n                long\
    \ temp = sorted[j];\n                sorted[j] = sorted[k];\n                sorted[k]\
    \ = temp;\n            }\n        }\n    }\n    \n    return sorted;\n}", "{\n\
    \    long[] result = nums.clone();\n    \n    for (int i = 0; i < result.length;\
    \ i++) {\n        long sum = 0;\n        for (int j = 0; j < result[i].toString().length();\
    \ j++) {\n            sum += Math.pow(10, j) * result[i].toString().charAt(j)\
    \ - (result[i].toString().charAt(j) - '0');\n        }\n        \n        for\
    \ (int j = 0; j < result.length; j++) {\n            if (sum == 0 && result[j]\
    \ == 0) {\n                result[i] = result[j];\n                result[j] =\
    \ 0;\n                break;\n            }\n            \n            if (sum\
    \ < 0 && result[j] > 0) {\n                result[i] = result[j];\n          \
    \      result[j] = 0;\n                break;\n            }\n            \n \
    \           if (sum > 0 && result[j] < 0) {\n                result[i] = result[j];\n\
    \                result[j] = 0;\n                break;\n            }\n     \
    \   }\n    }\n    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
