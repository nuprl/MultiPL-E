name: HumanEval_139_special_factorial
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is defined\
  \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n\
  \ > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function\
  \ will receive an integer as input and should return the special\n    factorial\
  \ of this integer.\n    \n*/\nlong special_factorial(long n) \n"
tests: "unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
  \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
  \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
completions: ["{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n    \
    \    result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long\
    \ i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long factorial = 1;\n    long i;\n    for (i = 1; i <=\
    \ n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n    if (n ==\
    \ 0)\n        return 1;\n    else\n        return n * special_factorial(n - 1);\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long factorial = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    if (n == 0)\n  \
    \      return 1;\n    else\n        return n * special_factorial(n - 1);\n}",
  "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n must be a positive integer\");\n    if (n == 0)\n        return 1;\n    return\
    \ n * special_factorial(n - 1);\n}", "{\n    long result = 1L;\n    for (long\
    \ i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n   \
    \ long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n must be a positive integer\");\n    long result = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return\
    \ factorial;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *=\
    \ i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long factorial = 1L;\n    for (long i = 1L; i <= n; i++)\n       \
    \ factorial *= i;\n    return factorial;\n}", "{\n    if (n == 0)\n        return\
    \ 1L;\n    else\n        return n * special_factorial(n - 1);\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    long factorial = 1;\n  \
    \  long i = 1;\n    while (i <= n) {\n        factorial *= i;\n        i++;\n\
    \    }\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i =\
    \ 2; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n\
    \ < 0)\n        throw new IllegalArgumentException(\"n must be a positive integer\"\
    );\n    if (n == 0)\n        return 1L;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}", "{\n    if (n == 0)\n        return 1;\n    else\n        return\
    \ n * special_factorial(n - 1);\n}", "{\n    long result = 1L;\n    for (long\
    \ i = 2L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n   \
    \ long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n ==\
    \ 0) return 1;\n    return n * special_factorial(n - 1);\n}", "{\n    if (n <\
    \ 0)\n        throw new IllegalArgumentException(\"n must be a positive integer\"\
    );\n    \n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long factorial = 1;\n    for(long i =\
    \ 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n  \
    \  long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long factorial = 1;\n    for (long i = 1; i <=\
    \ n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n    long result\
    \ = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    long factorial = 1;\n  \
    \  for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }", "{\n    if (n == 0) return 1;\n    else return n * special_factorial(n - 1);\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1L;\n    for (long i =\
    \ 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1L;\n    for (long i = 2L; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    if (n < 0)\n        throw\
    \ new IllegalArgumentException(\"n must be a positive integer\");\n    if (n ==\
    \ 0)\n        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial *= i;\n\
    \    return factorial;\n}", "{\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result =\
    \ 1L;\n    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    if (n == 0) return 1;\n    else return n * special_factorial(n - 1);\n\
    }", "{\n    if (n == 0)\n        return 1;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}", "{\n    long result = 1;\n    for (long i = 2; i <= n; i++)\n   \
    \     result *= i;\n    return result;\n}", "{\n    long result = 1L;\n    for\
    \ (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n ==\
    \ 0)\n        return 1;\n    else\n        return n * special_factorial(n - 1);\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long factorial =\
    \ 1;\n    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }", "{\n    long factorial = 1;\n    long i = 1;\n    while (i <= n) {\n     \
    \   factorial *= i;\n        i++;\n    }\n    return factorial;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n must be a positive integer\");\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 2; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial *= i;\n\
    \    return factorial;\n}", "{\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1L;\n    for (long i\
    \ = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 2; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1L;\n    for(long i = 1L; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    if (n == 0)\n        return\
    \ 1;\n    else\n        return n * special_factorial(n - 1);\n}", "{\n    if (n\
    \ == 0)\n        return 1;\n    else\n        return n * special_factorial(n -\
    \ 1);\n}", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n   \
    \     result *= i;\n    return result;\n}", "{\n    if (n == 0) return 1;\n  \
    \  if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 6;\n\
    \    if (n == 4) return 24;\n    if (n == 5) return 120;\n    if (n == 6) return\
    \ 720;\n    if (n == 7) return 5040;\n    if (n == 8) return 40320;\n    if (n\
    \ == 9) return 362880;\n    if (n == 10) return 3628800;\n    if (n == 11) return\
    \ 39916800;\n    if (n == 12) return 479001600;\n    if (n == 13) return 6227020800;\n\
    \    if (n == 14) return 87178291200;\n    if (n == 15) return 1307674368000;\n\
    \    if (n == 16) return 20922789888000;\n    if (n == 17) return 355687428096000;\n\
    \    if (n == 18) return 6402373705728000;\n    if (n == 19) return 121645100408832000;\n\
    \    if (n == 20) return 2432902008176640000;\n    if (n == 21) return 51090942171709440000;\n\
    \    if (n == 22) return 1124000727777607680000;\n    if (n == 23) return 25852016738884976640000;\n\
    \    if (n == 24) return 620448401733239439360000;\n    if (n == 25) return 15511210043330985984000000;\n\
    \    if (n == 26) return 4149444226221397216000000;\n    if (n == 27) return 137841250080593635200000000;\n\
    \    if (n == 28) return 5277655813316815958000000;\n    if (n == 29) return 20352178544365611776000000;\n\
    \    if (n == 30) return 827180612553069529600000000;\n    if (n == 31) return\
    \ 3245281907885147456000000;\n    if (n == 32) return 1291401989663411392", "{\n\
    \    long result = 1L;\n    for (long i = 2L; i <= n; i++)\n        result *=\
    \ i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    if (n == 0) return 1;\n    else return n * special_factorial(n - 1);\n}",
  "{\n    long result = 1L;\n    for (long i = 1L; i <= n; ++i)\n        result *=\
    \ i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n == 0)\n\
    \        return 1;\n    else\n        return n * special_factorial(n - 1);\n}",
  "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long factorial = 1;\n    long i;\n\
    \    for (i = 2; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long factorial = 1L;\n    for (long\
    \ i = 1L; i <= n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 2; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    long result = 1L;\n\
    \    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    if (n == 0)\n        return 1;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}", "{\n    if (n == 0) return 1;\n    return n * special_factorial(n\
    \ - 1);\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n   \
    \     result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n should be a positive integer\");\n    \n    long result = 1;\n    for (long\
    \ i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    long result = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long factorial = 1L;\n    long i;\n    for(i\
    \ = 2L; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    return factorial;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    if (n == 0) return 1;\n    else return\
    \ n * special_factorial(n - 1);\n}", "{\n    long result = 1;\n    for (long i\
    \ = 2; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if\
    \ (n == 0)\n        return 1;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n   \
    \     result *= i;\n    return result;\n}", "{\n    if (n < 0)\n        throw\
    \ new IllegalArgumentException(\"n must be a positive integer\");\n    \n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    if (n < 0)\n        throw\
    \ new IllegalArgumentException(\"n must be a positive integer\");\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for(long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1L;\n    for (long i =\
    \ 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n\
    \ == 0)\n        return 1;\n    else\n        return n * special_factorial(n -\
    \ 1);\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n     \
    \   result *= i;\n    return result;\n}", "{\n    long factorial = 1;\n    for\
    \ (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n}",
  "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *=\
    \ i;\n    return result;\n}", "{\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1L;\n    for (long i\
    \ = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long\
    \ result = 1L;\n    for(long i = 1L; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}", "{\n    if (n == 0)\n        return\
    \ 1;\n    else\n        return n * special_factorial(n - 1);\n}", "{\n    long\
    \ factorial = 1;\n    for (long i = 1; i <= n; i++)\n        factorial *= i;\n\
    \    return factorial;\n}", "{\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result =\
    \ 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1L;\n    for (long i =\
    \ 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    if (n\
    \ < 0)\n        throw new IllegalArgumentException(\"n should be positive\");\n\
    \    if (n == 0)\n        return 1;\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return\
    \ result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n \
    \       result *= i;\n    return result;\n}", "{\n    long result = 1L;\n    for\
    \ (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n\
    \    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *=\
    \ i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long result = 1L;\n\
    \    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    long result = 1;\n    for (long i = 1;\
    \ i <= n; i++)\n        result *= i;\n    return result;\n}", "{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long factorial = 1;\n    for (long i = 2; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    if (n == 0) return 1;\n    return\
    \ n * special_factorial(n-1);\n}", "{\n    long factorial = 1L;\n    for (long\
    \ i = 1L; i <= n; i++)\n        factorial *= i;\n    return factorial;\n}", "{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    long result = 1;\n    for (long i = 1; i <= n;\
    \ i++)\n        result *= i;\n    return result;\n}", "{\n    if (n == 0)\n  \
    \      return 1;\n    else\n        return n * special_factorial(n - 1);\n}",
  "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n\
    \    return result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n must be greater than 0\");\n    if (n == 0)\n        return 1;\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    if (n < 0)\n        throw new std.exception(\"n should be a positive\
    \ integer\");\n    if (n == 0)\n        return 1L;\n    long result = 1L;\n  \
    \  for (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n}",
  "{\n    long result = 1L;\n    for (long i = 1L; i <= n; i++)\n        result *=\
    \ i;\n    return result;\n}", "{\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    if (n == 0)\n        return 1;\n    else\n\
    \        return n * special_factorial(n - 1);\n}", "{\n    long result = 1L;\n\
    \    for (long i = 1L; i <= n; i++)\n        result *= i;\n    return result;\n\
    }", "{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n        result\
    \ *= i;\n    return result;\n}", "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"\
    n should be a positive integer\");\n    \n    long result = 1;\n    for (long\
    \ i = 1; i <= n; i++)\n        result *= i;\n    \n    return result;\n}", "{\n\
    \    long factorial = 1L;\n    for (long i = 1L; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}", "{\n    long result = 1;\n    for (long i\
    \ = 1; i <= n; i++)\n        result *= i;\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
