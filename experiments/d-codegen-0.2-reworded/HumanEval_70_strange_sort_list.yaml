name: HumanEval_70_strange_sort_list
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given array of integers,\
  \ return array in strange order.\n    Strange sorting, is when you start with the\
  \ minimum value,\n    then maximum of the remaining integers, then minimum and so\
  \ on.\n\n    Examples:\n    >>> strange_sort_list([1L, 2L, 3L, 4L])\n    [1L, 4L,\
  \ 2L, 3L]\n    >>> strange_sort_list([5L, 5L, 5L, 5L])\n    [5L, 5L, 5L, 5L]\n \
  \   >>> strange_sort_list([])\n    []\n    \n*/\nlong[] strange_sort_list(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L,\
  \ 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L])\
  \ == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L,\
  \ 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L,\
  \ 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L,\
  \ 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L])\
  \ == [111111L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int\
    \ j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i]\
    \ < lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n       \
    \     result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++]\
    \ = lst[i];\n    }\n    if (k != lst.length) {\n        result = Arrays.copyOf(result,\
    \ k);\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if\
    \ (lst[i] > lst[j]) {\n            result[i] = lst[j];\n            result[j]\
    \ = lst[i];\n            i++;\n            j--;\n        } else if (lst[i] < lst[j])\
    \ {\n            result[i] = lst[i];\n            result[j] = lst[j];\n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n          \
    \  j--;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while (i\
    \ < j) {\n        if (lst[i] < lst[j]) {\n            result[i] = lst[i];\n  \
    \          i++;\n        } else {\n            result[j] = lst[j];\n         \
    \   j--;\n        }\n    }\n    if (i == j) {\n        result[i] = lst[i];\n \
    \   }\n    return result;\n}", "{\n    if (lst.length == 0) return lst;\n    \n\
    \    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i]\
    \ > max) max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n\
    \        \n        if (lst[i] == min) {\n            for (int j = i + 1; j < lst.length;\
    \ j++) {\n                if (lst[j] > max) {\n                    result[i] =\
    \ lst[j];\n                    result[j] = lst[i];\n                    break;\n\
    \                }\n            }\n        }\n        \n        if (lst[i] ==\
    \ max) {\n            for (int j = i - 1; j >= 0; j--) {\n                if (lst[j]\
    \ < min) {\n                    result[i] = lst[j];\n                    result[j]\
    \ = lst[i];\n                    break;\n                }\n            }\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if\
    \ (lst[i] > lst[j]) {\n            result[i] = lst[i];\n            result[j]\
    \ = lst[j];\n            i++;\n            j--;\n        } else if (lst[i] < lst[j])\
    \ {\n            result[i] = lst[j];\n            result[j] = lst[i];\n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n          \
    \  j--;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int k =\
    \ 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i\
    \ < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n}", "{\n \
    \   if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    \n\
    \    long[] result = new long[lst.length];\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        result[i] = lst[i];\n        if (lst[i] == min) {\n        \
    \    for (int j = 0; j < lst.length; j++) {\n                if (lst[j] == max)\
    \ {\n                    result[i] = lst[j];\n                    break;\n   \
    \             }\n            }\n        }\n    }\n    \n    for (int i = 0; i\
    \ < lst.length; i++) {\n        result[i] = lst[i];\n    }\n    \n    return result;\n\
    }", "{\n    if (lst.length < 2)\n        return lst;\n    \n    long[] result\
    \ = new long[lst.length];\n    \n    int left = 0;\n    int right = lst.length\
    \ - 1;\n    \n    while (left < right) {\n        if (lst[left] <= lst[right])\
    \ {\n            result[left] = lst[left];\n            left++;\n        } else\
    \ {\n            result[right] = lst[right];\n            right--;\n        }\n\
    \    }\n    \n    if (left == right) {\n        result[left] = lst[left];\n  \
    \  }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    \n    long[]\
    \ result = new long[lst.length];\n    int index = 0;\n    \n    for (int i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] == min) {\n            result[index++]\
    \ = max;\n            max = min;\n            min = lst[i];\n        } else if\
    \ (lst[i] == max) {\n            result[index++] = min;\n            min = max;\n\
    \            max = lst[i];\n        } else {\n            result[index++] = lst[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length == 0)\
    \ return lst;\n    long min = lst[0];\n    long max = lst[0];\n    for (int i\
    \ = 1; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n     \
    \   if (lst[i] > max) max = lst[i];\n    }\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    for (int j = 0; j < lst.length; j++) {\n        if (lst[j]\
    \ == min) {\n            result[i] = max;\n            i++;\n            max =\
    \ min;\n            min = lst[j];\n        } else if (lst[j] == max) {\n     \
    \       result[i] = min;\n            i++;\n            max = min;\n         \
    \   min = lst[j];\n        } else {\n            result[i] = lst[j];\n       \
    \     i++;\n        }\n    }\n    return result;\n}", "{\n    if (lst.length ==\
    \ 0) return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    long[]\
    \ result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max =\
    \ lst[i];\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i]\
    \ = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n       \
    \ if (result[i] == min) {\n            int j = i;\n            while (j < lst.length\
    \ - 1 && result[j] == min) {\n                j++;\n            }\n          \
    \  \n            int k = j - 1;\n            while (k >= 0 && result[k] == max)\
    \ {\n                k--;\n            }\n            \n            if (k < 0)\
    \ {\n                result[i] = max;\n                result[j] = min;\n    \
    \        } else {\n                result[i] = max;\n                result[k]\
    \ = min;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long[]\
    \ result = new long[lst.length];\n    \n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    \n    while (i < j) {\n        if (lst[i] > lst[j]) {\n          \
    \  result[i] = lst[j];\n            result[j] = lst[i];\n            \n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    long[] result\
    \ = new long[lst.length];\n    \n    for (int i = 1; i < lst.length; i++)\n  \
    \  {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] == min)\n        {\n            result[i] =\
    \ max;\n            max = min;\n            min = lst[i];\n        }\n       \
    \ else if (lst[i] == max)\n        {\n            result[i] = min;\n         \
    \   min = max;\n            max = lst[i];\n        }\n        else\n        {\n\
    \            result[i] = lst[i];\n        }\n    }\n    \n    return result;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = 0;\n    while (i\
    \ < lst.length) {\n        if (lst[i] == min) {\n            result[i] = max;\n\
    \            i++;\n        } else {\n            result[i] = min;\n          \
    \  i++;\n        }\n    }\n    while (j < lst.length) {\n        result[j] = lst[j];\n\
    \        j++;\n    }\n    return result;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i\
    \ < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i]\
    \ > max) max = lst[i];\n    }\n    long[] result = new long[lst.length];\n   \
    \ int i = 0;\n    for (int j = 0; j < lst.length; j++) {\n        if (lst[j] ==\
    \ min) {\n            result[i++] = max;\n            max = min;\n           \
    \ min = lst[j];\n        } else if (lst[j] == max) {\n            result[i++]\
    \ = min;\n            min = max;\n            max = lst[j];\n        } else {\n\
    \            result[i++] = lst[j];\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else {\n            result[i] = lst[j];\n            result[j] = lst[i];\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (k != lst.length) {\n        result = strange_sort_list(result);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k != lst.length) {\n\
    \        result = Arrays.copyOf(result, k);\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n  \
    \      if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = 0;\n    \n    while (i < lst.length) {\n        if\
    \ (lst[i] == min) {\n            result[j++] = lst[i++];\n            while (i\
    \ < lst.length && lst[i] == min)\n                i++;\n        }\n        else\
    \ if (lst[i] == max) {\n            result[j++] = lst[i++];\n            while\
    \ (i < lst.length && lst[i] == max)\n                i++;\n        }\n       \
    \ else {\n            result[j++] = lst[i++];\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[i];\n            result[j] = lst[j];\n      \
    \      i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n       \
    \     result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n            j--;\n    \
    \    }\n    }\n    return result;\n}", "{\n    if (lst.length < 2) return lst;\n\
    \    \n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    \n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[i] = lst[i];\n            result[j] = lst[j];\n          \
    \  i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n           \
    \ result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n   \
    \         j--;\n        } else {\n            i++;\n            j--;\n       \
    \ }\n    }\n    \n    if (i == j) {\n        result[i] = lst[i];\n    }\n    \n\
    \    return result;\n}", "{\n    long min, max, tmp;\n    int i, j, k;\n    \n\
    \    if (lst.length < 2)\n        return lst;\n    \n    min = lst[0];\n    max\
    \ = lst[0];\n    \n    for (i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    \n    for (i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ == min) {\n            tmp = lst[i];\n            lst[i] = lst[0];\n       \
    \     lst[0] = tmp;\n        }\n        if (lst[i] == max) {\n            tmp\
    \ = lst[i];\n            lst[i] = lst[lst.length - 1];\n            lst[lst.length\
    \ - 1] = tmp;\n        }\n    }\n    \n    for (i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] == min) {\n            tmp = lst[i];\n            lst[i] =\
    \ lst[0];\n            lst[0] = tmp;\n        }\n        if (lst[i] == max) {\n\
    \            tmp = lst[i];\n            lst[i] = lst[lst.length - 1];\n      \
    \      lst[lst.length - 1] = tmp;\n        }\n    }\n    \n    for (i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] == min) {\n            tmp = lst[i];\n\
    \            lst[i] = lst[0];\n            lst[0] = tmp;\n        }\n        if\
    \ (lst[i] == max) {\n            tmp = lst[i];\n            lst[i] = lst[lst.length\
    \ - 1];\n            lst[lst.length - 1] = tmp;\n        }\n    }\n    ", "{\n\
    \    if (lst.length < 2) return lst;\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    long[] result = new long[lst.length];\n    \n    for (int i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n\
    \        } else if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] ==\
    \ min) {\n            result[i] = max;\n        } else if (lst[i] == max) {\n\
    \            result[i] = min;\n        } else {\n            result[i] = lst[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k != lst.length) {\n\
    \        result = strange_sort_list(result);\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    result[k++] = lst[i++];\n    result[k++]\
    \ = lst[j--];\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i < j) {\n       \
    \ result[k++] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[i];\n\
    \            result[j] = lst[j];\n            i++;\n            j--;\n       \
    \ } else {\n            result[i] = lst[j];\n            result[j] = lst[i];\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <=\
    \ lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n         \
    \   result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++]\
    \ = lst[i++];\n    }\n    if (i < j) {\n        result[k++] = lst[j--];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i]\
    \ > lst[j]) {\n            long temp = lst[i];\n            lst[i] = lst[j];\n\
    \            lst[j] = temp;\n        }\n        i++;\n        j--;\n    }\n  \
    \  for (int k = 0; k < lst.length; k++) {\n        result[k] = lst[k];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    while(i < j) {\n        if(lst[i] <\
    \ lst[j]) {\n            result[i] = lst[i];\n            i++;\n        } else\
    \ {\n            result[j] = lst[j];\n            j--;\n        }\n    }\n   \
    \ if(i == j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n \
    \   long max = lst[0];\n    long[] result = new long[lst.length];\n    \n    for\
    \ (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min = lst[i];\n        } else if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] == min) {\n            result[i] = max;\n        } else if (lst[i] ==\
    \ max) {\n            result[i] = min;\n        } else {\n            result[i]\
    \ = lst[i];\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i\
    \ < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k] = lst[i];\n            i++;\n        } else {\n   \
    \         result[k] = lst[j];\n            j--;\n        }\n        k++;\n   \
    \ }\n    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else {\n            result[i] = lst[j];\n       \
    \     result[j] = lst[i];\n            i++;\n            j--;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i]\
    \ > lst[j]) {\n            result[i] = lst[j];\n            result[j] = lst[i];\n\
    \            i++;\n            j--;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <=\
    \ j) {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n\
    \        } else if (lst[i] > lst[j]) {\n            result[k++] = lst[j--];\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[i];\n            result[j] = lst[j];\n      \
    \      i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n       \
    \     result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n            j--;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i < j) {\n       \
    \ result[k++] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] < lst[j]) {\n            result[i] = lst[i];\n\
    \            i++;\n        } else {\n            result[j] = lst[j];\n       \
    \     j--;\n        }\n    }\n    if (i == j) {\n        result[i] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    } else if (i < j) {\n        result[k] = lst[i];\n        i++;\n        k++;\n\
    \        while (i < j) {\n            result[k] = lst[j];\n            j--;\n\
    \            k++;\n        }\n        result[k] = lst[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[k] = lst[i];\n            i++;\n        } else {\n   \
    \         result[k] = lst[j];\n            j--;\n        }\n        k++;\n   \
    \ }\n    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n \
    \   long max = lst[0];\n    long[] result = new long[lst.length];\n    \n    for\
    \ (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min = lst[i];\n        } else if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] == min) {\n            result[i] = max;\n        } else if (lst[i] ==\
    \ max) {\n            result[i] = min;\n        } else {\n            result[i]\
    \ = lst[i];\n        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length\
    \ == 0)\n        return lst;\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n     \
    \       min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    long[] result = new long[lst.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] == min) {\n            result[j++]\
    \ = max;\n            max = min;\n            min = lst[i];\n        } else if\
    \ (lst[i] == max) {\n            result[j++] = min;\n            min = max;\n\
    \            max = lst[i];\n        } else {\n            result[j++] = lst[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n  \
    \      } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i < j) {\n       \
    \ result[k++] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[j];\n\
    \            result[j] = lst[i];\n            i++;\n            j--;\n       \
    \ } else if (lst[i] < lst[j]) {\n            result[i] = lst[i];\n           \
    \ result[j] = lst[j];\n            i++;\n            j--;\n        } else {\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else if (lst[i] < lst[j]) {\n            result[i]\
    \ = lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if\
    \ (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n\
    \            result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n  \
    \      result[k++] = lst[i];\n    }\n    if (i < j) {\n        result[k++] = lst[j];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] < min)\n            min = lst[i];\n \
    \       if (lst[i] > max)\n            max = lst[i];\n    }\n    \n    long[]\
    \ result = new long[lst.length];\n    int j = 0;\n    for (int i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] == min) {\n            result[j++] = max;\n     \
    \       max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result[j++] = min;\n            min = max;\n            max =\
    \ lst[i];\n        } else {\n            result[j++] = lst[i];\n        }\n  \
    \  }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    \n    long[]\
    \ result = new long[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] == min) {\n            result[i] = max;\n            max\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] == max) {\n   \
    \         result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        } else {\n            result[i] = lst[i];\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i]\
    \ > lst[j]) {\n            result[i] = lst[i];\n            result[j] = lst[j];\n\
    \            i++;\n            j--;\n        } else {\n            result[i] =\
    \ lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (lst.length == 0) return\
    \ lst;\n    \n    long[] result = new long[lst.length];\n    \n    int i = 0;\n\
    \    int j = lst.length - 1;\n    \n    while (i < j) {\n        if (lst[i] >\
    \ lst[j]) {\n            result[i] = lst[i];\n            result[j] = lst[j];\n\
    \            i++;\n            j--;\n        } else {\n            result[i] =\
    \ lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if\
    \ (lst[i] > lst[j]) {\n            result[i] = lst[j];\n            result[j]\
    \ = lst[i];\n            i++;\n        } else {\n            result[i] = lst[i];\n\
    \            result[j] = lst[j];\n            j--;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[i];\n            result[j] = lst[j];\n      \
    \      i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n       \
    \     result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n            j--;\n    \
    \    }\n    }\n    if (i == j) {\n        result[i] = lst[i];\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long\
    \ min = lst[0];\n    long max = lst[0];\n    \n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int j = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ == min) {\n            result[j++] = lst[i];\n            continue;\n      \
    \  }\n        if (lst[i] == max) {\n            result[j++] = lst[i];\n      \
    \      continue;\n        }\n        for (int k = 0; k < lst.length; k++) {\n\
    \            if (lst[k] == lst[i]) {\n                result[j++] = lst[k];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n  \
    \      if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == min)\
    \ {\n            result[i] = max;\n            max = min;\n            min = lst[i];\n\
    \        } else if (lst[i] == max) {\n            result[i] = min;\n         \
    \   min = max;\n            max = lst[i];\n        } else {\n            result[i]\
    \ = lst[i];\n        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length\
    \ < 2) return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n   \
    \ long[] result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max\
    \ = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n       \
    \ result[i] = lst[i];\n        if (lst[i] == min) {\n            for (int j =\
    \ 0; j < lst.length; j++) {\n                if (lst[j] == max) {\n          \
    \          result[i] = max;\n                    max = lst[j];\n             \
    \       break;\n                }\n            }\n        }\n        else if (lst[i]\
    \ == max) {\n            for (int j = 0; j < lst.length; j++) {\n            \
    \    if (lst[j] == min) {\n                    result[i] = min;\n            \
    \        min = lst[j];\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    \n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[j];\n\
    \            result[j] = lst[i];\n            i++;\n            j--;\n       \
    \ } else if (lst[i] < lst[j]) {\n            result[i] = lst[i];\n           \
    \ result[j] = lst[j];\n            i++;\n            j--;\n        } else {\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n    long\
    \ max = lst[0];\n    long[] result = new long[lst.length];\n    \n    for (int\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min\
    \ = lst[i];\n        } else if (lst[i] > max) {\n            max = lst[i];\n \
    \       }\n    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        result[i]\
    \ = lst[i];\n        if (lst[i] == min) {\n            result[i] = max;\n    \
    \        max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length == 0)\n\
    \        return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n \
    \   \n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    \n    long[] result = new long[lst.length];\n    \n    for (int i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] == min)\n            result[i]\
    \ = max;\n        else if (lst[i] == max)\n            result[i] = min;\n    \
    \    else\n            result[i] = lst[i];\n    }\n    \n    return result;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    \n    long[] result = new\
    \ long[lst.length];\n    \n    int start = 0;\n    int end = lst.length - 1;\n\
    \    \n    while (start < end) {\n        if (lst[start] <= lst[end]) {\n    \
    \        result[start] = lst[start];\n            start++;\n        } else {\n\
    \            result[end] = lst[end];\n            end--;\n        }\n    }\n \
    \   \n    if (start == end) {\n        result[start] = lst[start];\n    }\n  \
    \  \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if\
    \ (lst[i] > lst[j]) {\n            result[i] = lst[i];\n            result[j]\
    \ = lst[j];\n            i++;\n            j--;\n        } else if (lst[i] < lst[j])\
    \ {\n            result[i] = lst[j];\n            result[j] = lst[i];\n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n          \
    \  j--;\n        }\n    }\n    return result;\n}", "{\n    if (lst.length < 2)\n\
    \        return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n \
    \   long[] result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] == min) {\n            result[i] = max;\n       \
    \     max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        } else {\n            result[i] = lst[i];\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n            i++;\n\
    \        } else {\n            result[k] = lst[j];\n            j--;\n       \
    \ }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0) return lst;\n   \
    \ \n    long[] result = new long[lst.length];\n    \n    int i = 0;\n    int j\
    \ = lst.length - 1;\n    \n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[i] = lst[i];\n            result[j] = lst[j];\n          \
    \  i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n           \
    \ result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n   \
    \         j--;\n        } else {\n            i++;\n            j--;\n       \
    \ }\n    }\n    \n    if (i == j) {\n        result[i] = lst[i];\n        i++;\n\
    \    }\n    \n    for (; i < result.length; i++) {\n        result[i] = lst[i];\n\
    \    }\n    \n    return result;\n}", "{\n    if (lst.length == 0)\n        return\
    \ lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min =\
    \ lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n    \n\
    \    long[] result = new long[lst.length];\n    \n    int j = 0;\n    for (int\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] == min) {\n            result[j++]\
    \ = max;\n            max = min;\n            min = lst[i];\n        } else if\
    \ (lst[i] == max) {\n            result[j++] = min;\n            min = max;\n\
    \            max = lst[i];\n        } else {\n            result[j++] = lst[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0) return lst;\n   \
    \ \n    long[] result = new long[lst.length];\n    \n    int start = 0;\n    int\
    \ end = lst.length - 1;\n    \n    while (start < end) {\n        if (lst[start]\
    \ < lst[end]) {\n            result[start] = lst[start];\n            result[end]\
    \ = lst[end];\n            start++;\n            end--;\n        } else {\n  \
    \          result[start] = lst[end];\n            result[end] = lst[start];\n\
    \            start++;\n            end--;\n        }\n    }\n    \n    if (start\
    \ == end) {\n        result[start] = lst[start];\n    }\n    \n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <=\
    \ lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n         \
    \   result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++]\
    \ = lst[i++];\n    }\n    if (i < j) {\n        result[k++] = lst[j--];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n            i++;\n\
    \        } else {\n            result[k] = lst[j];\n            j--;\n       \
    \ }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n   \
    \ }\n    return result;\n}", "{\n    if (lst.length < 2)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min = lst[i];\n\
    \        if (lst[i] > max)\n            max = lst[i];\n    }\n    \n    long[]\
    \ result = new long[lst.length];\n    \n    for (int i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] == min) {\n            result[i] = max;\n            max\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] == max) {\n   \
    \         result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        } else {\n            result[i] = lst[i];\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i]\
    \ < lst[j]) {\n            result[i] = lst[i];\n            i++;\n        } else\
    \ {\n            result[j] = lst[j];\n            j--;\n        }\n    }\n   \
    \ if (i == j) {\n        result[i] = lst[i];\n    }\n    if (i < j) {\n      \
    \  result[j] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i <= j) {\n        if (lst[i] <= lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k] = lst[i];\n            i++;\n        } else {\n   \
    \         result[k] = lst[j];\n            j--;\n        }\n        k++;\n   \
    \ }\n    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while (i\
    \ < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[i];\n  \
    \          result[j] = lst[j];\n            i++;\n            j--;\n        }\
    \ else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n            result[j]\
    \ = lst[i];\n            i++;\n            j--;\n        } else {\n          \
    \  i++;\n            j--;\n        }\n    }\n    if (i == j) {\n        result[i]\
    \ = lst[i];\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n   \
    \     return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    long[]\
    \ result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] == min) {\n            result[i] = max;\n       \
    \     max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        } else {\n            result[i] = lst[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[i] = lst[i];\n            i++;\n        } else {\n   \
    \         result[j] = lst[j];\n            j--;\n        }\n    }\n    if (i ==\
    \ j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] =\
    \ lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else if (lst[i] < lst[j]) {\n            result[i]\
    \ = lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    if\
    \ (i == j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    if (i == j) {\n\
    \        result[i] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i\
    \ < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n}", "{\n \
    \   if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n    long max\
    \ = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    \n\
    \    long[] result = new long[lst.length];\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        result[i] = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        if (result[i] == min) {\n            int j = i;\n          \
    \  while (j < lst.length - 1 && result[j] == min) {\n                j++;\n  \
    \          }\n            \n            for (int k = i; k < j; k++) {\n      \
    \          long temp = result[k];\n                result[k] = result[k + 1];\n\
    \                result[k + 1] = temp;\n            }\n            \n        \
    \    i = j - 1;\n        }\n        \n        if (result[i] == max) {\n      \
    \      int j = i;\n            while (j < lst.length - 1 && result[j] == max)\
    \ {\n                j++;\n            }\n            \n            for (int k\
    \ = i; k < j; k++) {\n                long temp = result[k];\n               \
    \ result[k] = result[k + 1];\n                result[k + 1] = temp;\n        \
    \    }\n            \n            i = j - 1;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if\
    \ (lst[i] < lst[j]) {\n            result[k] = lst[i];\n            i++;\n   \
    \     } else {\n            result[k] = lst[j];\n            j--;\n        }\n\
    \        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n            i++;\n\
    \        } else {\n            result[k] = lst[j];\n            j--;\n       \
    \ }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\
    \ {\n        if (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n  \
    \      } else {\n            result[k++] = lst[j--];\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if\
    \ (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n\
    \            result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n  \
    \      result[k++] = lst[i++];\n    }\n    if (i < j) {\n        result[k++] =\
    \ lst[j--];\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n   \
    \     return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[j];\n            result[j] = lst[i];\n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if\
    \ (lst[i] > lst[j]) {\n            result[i] = lst[i];\n            result[j]\
    \ = lst[j];\n            i++;\n            j--;\n        } else {\n          \
    \  result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n  \
    \          j--;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    int n = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[n] = lst[i];\n            i++;\n        } else {\n       \
    \     result[n] = lst[j];\n            j--;\n        }\n        n++;\n    }\n\
    \    if (i == j) {\n        result[n] = lst[i];\n        n++;\n    }\n    if (i\
    \ > j) {\n        result[n] = lst[j];\n        n++;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        if (lst[i] <=\
    \ lst[j]) {\n            result[k] = lst[i];\n            i++;\n        } else\
    \ {\n            result[k] = lst[j];\n            j--;\n        }\n        k++;\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i =\
    \ 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n            min =\
    \ lst[i];\n        else if (lst[i] > max)\n            max = lst[i];\n    }\n\
    \    \n    long[] result = new long[lst.length];\n    \n    for (int i = 0; i\
    \ < lst.length; i++)\n    {\n        if (lst[i] == min)\n            result[i]\
    \ = max;\n        else if (lst[i] == max)\n            result[i] = min;\n    \
    \    else\n            result[i] = lst[i];\n    }\n    \n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    int temp;\n    \n    while (i < j) {\n        if (lst[i]\
    \ < lst[j]) {\n            temp = lst[i];\n            lst[i] = lst[j];\n    \
    \        lst[j] = temp;\n            i++;\n            j--;\n        } else {\n\
    \            j--;\n        }\n    }\n    \n    for (k = 0; k < lst.length; k++)\
    \ {\n        result[k] = lst[k];\n    }\n    \n    return result;\n}", "{\n  \
    \  if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n \
    \   long max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == min)\n\
    \            result[i] = max;\n        else if (lst[i] == max)\n            result[i]\
    \ = min;\n        else\n            result[i] = lst[i];\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[i];\n            result[j] = lst[j];\n      \
    \      i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n       \
    \     result[i] = lst[j];\n            result[j] = lst[i];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n            j--;\n    \
    \    }\n    }\n    return result;\n}", "{\n    if(lst.length == 0)\n        return\
    \ lst;\n    \n    long[] result = new long[lst.length];\n    \n    int i = 0;\n\
    \    int j = lst.length - 1;\n    \n    while(i < j)\n    {\n        if(lst[i]\
    \ < lst[j])\n        {\n            result[i] = lst[i];\n            i++;\n  \
    \      }\n        else\n        {\n            result[j] = lst[j];\n         \
    \   j--;\n        }\n    }\n    \n    if(i == j)\n        result[i] = lst[i];\n\
    \    \n    return result;\n}", "{\n    if (lst.length < 2) return lst;\n    \n\
    \    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i]\
    \ > max) max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n\
    \    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (result[i]\
    \ == min) {\n            for (int j = i; j < lst.length; j++) {\n            \
    \    if (result[j] == max) {\n                    result[i] = result[j];\n   \
    \                 result[j] = min;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        result[i] = lst[i];\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    if (i == j) {\n\
    \        result[i] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k\
    \ != lst.length) {\n        result = strange_sort_list(result);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if\
    \ (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n\
    \            result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n  \
    \      result[k++] = lst[i++];\n    }\n    if (i < j) {\n        result[k++] =\
    \ lst[j--];\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\n   \
    \     return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n            min\
    \ = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n    }\n   \
    \ \n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = 0;\n\
    \    while (i < lst.length) {\n        if (lst[i] == min) {\n            result[i]\
    \ = max;\n            i++;\n        } else {\n            result[i] = lst[i];\n\
    \            i++;\n        }\n    }\n    \n    while (j < lst.length) {\n    \
    \    result[j] = lst[j];\n        j++;\n    }\n    \n    return result;\n}", "{\n\
    \    if (lst.length == 0) return lst;\n    long min = lst[0];\n    long max =\
    \ lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\
    \ min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = 0;\n    while (i < lst.length)\
    \ {\n        while (j < lst.length && lst[j] <= max) {\n            result[i++]\
    \ = lst[j++];\n        }\n        while (j < lst.length && lst[j] > min) {\n \
    \           result[i++] = lst[j++];\n        }\n        result[i++] = min;\n \
    \       min = max;\n        max = lst[j];\n    }\n    return result;\n}", "{\n\
    \    if (lst.length < 2) return lst;\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n\
    \        if (lst[i] > max) max = lst[i];\n    }\n    long[] result = new long[lst.length];\n\
    \    int j = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ == min) {\n            result[j++] = max;\n            max = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] == max) {\n            result[j++]\
    \ = min;\n            min = max;\n            max = lst[i];\n        } else {\n\
    \            result[j++] = lst[i];\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n}",
  "{\n    if (lst.length < 2) return lst;\n    \n    long[] result = new long[lst.length];\n\
    \    \n    int i = 0;\n    int j = lst.length - 1;\n    \n    while (i < j) {\n\
    \        if (lst[i] < lst[j]) {\n            result[i] = lst[i];\n           \
    \ i++;\n        } else {\n            result[j] = lst[j];\n            j--;\n\
    \        }\n    }\n    \n    if (i == j) {\n        result[i] = lst[i];\n    }\n\
    \    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    int min = 0;\n\
    \    int max = 0;\n    \n    while (i < j) {\n        min = i;\n        max =\
    \ j;\n        while (i < j) {\n            if (lst[i] < lst[j]) {\n          \
    \      min = i;\n            } else if (lst[i] > lst[j]) {\n                max\
    \ = j;\n            }\n            i++;\n            j--;\n        }\n       \
    \ if (min != max) {\n            result[k] = lst[min];\n            k++;\n   \
    \         result[k] = lst[max];\n            k++;\n        }\n        i = min\
    \ + 1;\n        j = max - 1;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[k]\
    \ = lst[i];\n            i++;\n        } else {\n            result[k] = lst[j];\n\
    \            j--;\n        }\n        k++;\n    }\n    if (i == j) {\n       \
    \ result[k] = lst[i];\n    }\n    return result;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n\
    \    \n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n\
    \            min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n\
    \    }\n    \n    long[] result = new long[lst.length];\n    \n    for (int i\
    \ = 0; i < lst.length; i++)\n    {\n        if (lst[i] == min)\n            result[i]\
    \ = max;\n        else if (lst[i] == max)\n            result[i] = min;\n    \
    \    else\n            result[i] = lst[i];\n    }\n    \n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    return result;\n\
    }", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    long[] result = new long[lst.length];\n    \n   \
    \ for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\n        \
    \    min = lst[i];\n        if (lst[i] > max)\n            max = lst[i];\n   \
    \ }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == min)\
    \ {\n            result[i] = max;\n            max = min;\n            min = lst[i];\n\
    \        } else if (lst[i] == max) {\n            result[i] = min;\n         \
    \   min = max;\n            max = lst[i];\n        } else {\n            result[i]\
    \ = lst[i];\n        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length\
    \ == 0) return lst;\n    \n    long[] result = new long[lst.length];\n    \n \
    \   int i = 0;\n    int j = lst.length - 1;\n    \n    while (i < j) {\n     \
    \   if (lst[i] > lst[j]) {\n            result[i] = lst[j];\n            result[j]\
    \ = lst[i];\n            i++;\n            j--;\n        } else {\n          \
    \  i++;\n            j--;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    if (lst.length == 0) return lst;\n    \n    long[] result = new long[lst.length];\n\
    \    \n    int i = 0;\n    int j = lst.length - 1;\n    \n    while (i < j) {\n\
    \        if (lst[i] > lst[j]) {\n            result[i] = lst[j];\n           \
    \ result[j] = lst[i];\n            i++;\n        } else {\n            result[j]\
    \ = lst[i];\n            result[i] = lst[j];\n            j--;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n  \
    \      } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else if (lst[i]\
    \ > lst[j]) {\n            result[k] = lst[j];\n            j--;\n        } else\
    \ {\n            result[k] = lst[i];\n            i++;\n            j--;\n   \
    \     }\n        k++;\n    }\n    return result;\n}", "{\n    if (lst.length ==\
    \ 0)\n        return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n\
    \    long[] result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length;\
    \ i++) {\n        result[i] = lst[i];\n        if (lst[i] == min) {\n        \
    \    result[i] = max;\n            max = min;\n            min = lst[i];\n   \
    \     }\n        else if (lst[i] == max) {\n            result[i] = min;\n   \
    \         min = max;\n            max = lst[i];\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[i] = lst[i];\n            i++;\n        } else {\n   \
    \         result[j] = lst[j];\n            j--;\n        }\n    }\n    if (i ==\
    \ j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n       \
    \     result[k++] = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n\
    \        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n \
    \   if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n  \
    \      if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int index = 0;\n    \n    for (int i = 0; i < lst.length; i++) {\n      \
    \  if (lst[i] == min) {\n            result[index++] = max;\n            max =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] == max) {\n     \
    \       result[index++] = min;\n            min = max;\n            max = lst[i];\n\
    \        } else {\n            result[index++] = lst[i];\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k != lst.length) {\n\
    \        result = Arrays.copyOf(result, k);\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0) return lst;\n    \n    long min = lst[0];\n    long\
    \ max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n\
    \    \n    long[] result = new long[lst.length];\n    \n    for (int i = 0; i\
    \ < lst.length; i++) {\n        result[i] = lst[i];\n    }\n    \n    for (int\
    \ i = 0; i < lst.length; i++) {\n        if (result[i] == min) {\n           \
    \ int j = i;\n            while (j < lst.length - 1 && result[j] == min) {\n \
    \               j++;\n            }\n            \n            for (int k = i;\
    \ k < j; k++) {\n                result[k] = result[k + 1];\n            }\n \
    \           \n            result[j] = min;\n            i = j - 1;\n        }\n\
    \    }\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (result[i]\
    \ == max) {\n            int j = i;\n            while (j < lst.length - 1 &&\
    \ result[j] == max) {\n                j++;\n            }\n            \n   \
    \         for (int k = i; k < j; k++) {\n                result[k] = result[k\
    \ + 1];\n            }\n            \n            result[j] = max;\n         \
    \   i = j - 1;\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++)\
    \ {\n        if (result[i] == min) {\n            int j = i;\n            while\
    \ (j < lst.length - 1 && result[j] == min) {\n                j++;\n         \
    \   }\n            \n            for (int k = i; k < j; k++) {\n             \
    \   result[k] = result[k + 1];\n            }\n            \n            ", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[i]\
    \ = lst[i];\n            i++;\n        } else {\n            result[j] = lst[j];\n\
    \            j--;\n        }\n    }\n    if (i == j) {\n        result[i] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  for (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n    }\n\
    \    for (int i = 0; i < lst.length; i++) {\n        if (result[i] == min) {\n\
    \            result[i] = max;\n            max = min;\n            min = lst[i];\n\
    \        } else if (result[i] == max) {\n            result[i] = min;\n      \
    \      min = max;\n            max = lst[i];\n        } else if (result[i] ==\
    \ min) {\n            result[i] = max;\n            max = min;\n            min\
    \ = lst[i];\n        } else if (result[i] == max) {\n            result[i] = min;\n\
    \            min = max;\n            max = lst[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if\
    \ (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n\
    \            result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n  \
    \      result[k++] = lst[i];\n    }\n    if (i < j) {\n        result[k++] = lst[j];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i < j) {\n       \
    \ result[k++] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    result[k++] = lst[i];\n    return result;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] =\
    \ lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        if\
    \ (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n\
    \            result[k++] = lst[j--];\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n}",
  "{\n    if (lst.length < 2)\n        return lst;\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    result[k++]\
    \ = lst[i++];\n    result[k++] = lst[j--];\n    return result;\n}", "{\n    long[]\
    \ result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n\
    \    int k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n      \
    \      result[k++] = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n\
    \        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n \
    \   return result;\n}", "{\n    if (lst.length == 0) return lst;\n    long min\
    \ = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max =\
    \ lst[i];\n    }\n    long[] result = new long[lst.length];\n    int index = 0;\n\
    \    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == min) {\n  \
    \          result[index++] = max;\n            max = min;\n            min = lst[i];\n\
    \        } else if (lst[i] == max) {\n            result[index++] = min;\n   \
    \         min = max;\n            max = lst[i];\n        } else {\n          \
    \  result[index++] = lst[i];\n        }\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <=\
    \ lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n         \
    \   result[k++] = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++]\
    \ = lst[i];\n    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n            i++;\n\
    \        } else {\n            result[k] = lst[j];\n            j--;\n       \
    \ }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i]\
    \ < lst[j]) {\n            result[i] = lst[i];\n            i++;\n        } else\
    \ {\n            result[j] = lst[j];\n            j--;\n        }\n    }\n   \
    \ if (i == j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    if (lst.length == 0) return lst;\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++)\n    {\n        result[i] = lst[i];\n\
    \    }\n    \n    for (int i = 0; i < lst.length; i++)\n    {\n        for (int\
    \ j = 0; j < lst.length - i - 1; j++)\n        {\n            if (result[j] >\
    \ result[j+1])\n            {\n                long temp = result[j];\n      \
    \          result[j] = result[j+1];\n                result[j+1] = temp;\n   \
    \         }\n        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length\
    \ == 0) return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n  \
    \  long[] result = new long[lst.length];\n    \n    for (int i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        } else\
    \ if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    \n   \
    \ for (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n    }\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == min)\
    \ {\n            result[i] = max;\n        } else if (lst[i] == max) {\n     \
    \       result[i] = min;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    } else {\n        result[k]\
    \ = lst[j];\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    int max = 0;\n\
    \    while (i < j) {\n        if (lst[i] > lst[j]) {\n            max = Math.max(max,\
    \ k);\n            result[k++] = lst[i++];\n        } else {\n            max\
    \ = Math.max(max, k);\n            result[k++] = lst[j--];\n        }\n    }\n\
    \    max = Math.max(max, k);\n    for (int m = 0; m < max; m++) {\n        result[k++]\
    \ = lst[i++];\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] <= lst[j]) {\n            result[k++] = lst[i++];\n  \
    \      } else {\n            result[k++] = lst[j--];\n        }\n    }\n    result[k++]\
    \ = lst[i];\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n       \
    \     i++;\n        } else {\n            result[k] = lst[j];\n            j--;\n\
    \        }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0) return lst;\n   \
    \ \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i = 1;\
    \ i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if\
    \ (lst[i] > max) max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n\
    \        \n        if (lst[i] == min) {\n            result[i] = max;\n      \
    \      max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result[i] = min;\n            min = max;\n            max = lst[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    if (lst.length == 0)\n\
    \        return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[j];\n            result[j] = lst[i];\n      \
    \      i++;\n            j--;\n        } else {\n            i++;\n          \
    \  j--;\n        }\n    }\n    return result;\n}", "{\n    if (lst.length == 0)\
    \ return lst;\n    \n    long min = lst[0];\n    long max = lst[0];\n    \n  \
    \  for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n\
    \        if (lst[i] > max) max = lst[i];\n    }\n    \n    long[] result = new\
    \ long[lst.length];\n    \n    for (int i = 0; i < lst.length; i++) {\n      \
    \  result[i] = lst[i];\n    }\n    \n    for (int i = 0; i < lst.length; i++)\
    \ {\n        if (result[i] == min) {\n            int j = i;\n            while\
    \ (j < lst.length - 1 && result[j] == min) {\n                j++;\n         \
    \   }\n            \n            int k = j - 1;\n            while (k >= 0 &&\
    \ result[k] == max) {\n                k--;\n            }\n            \n   \
    \         int l = k + 1;\n            while (l < j) {\n                long temp\
    \ = result[l];\n                result[l] = result[k];\n                result[k]\
    \ = temp;\n                l++;\n                k--;\n            }\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i++];\n    }\n    if (i < j) {\n     \
    \   result[k++] = lst[j];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n    }\n    if\
    \ (i < j) {\n        result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j--];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else if (lst[i] < lst[j]) {\n            result[i]\
    \ = lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    if\
    \ (i == j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] > lst[j]) {\n            result[k] = lst[i];\n            i++;\n\
    \        } else {\n            result[k] = lst[j];\n            j--;\n       \
    \ }\n        k++;\n    }\n    if (i == j) {\n        result[k] = lst[i];\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n \
    \   int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i++];\n    }\n    if (i < j) {\n     \
    \   result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (i\
    \ < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n}", "{\n \
    \   if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int index = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n       \
    \ if (lst[i] == min)\n        {\n            result[index++] = lst[i];\n     \
    \       for (int j = i + 1; j < lst.length; j++)\n            {\n            \
    \    if (lst[j] == max)\n                {\n                    result[index++]\
    \ = lst[j];\n                    break;\n                }\n                else\n\
    \                    result[index++] = lst[j];\n            }\n            break;\n\
    \        }\n        else if (lst[i] == max)\n        {\n            result[index++]\
    \ = lst[i];\n            for (int j = i + 1; j < lst.length; j++)\n          \
    \  {\n                if (lst[j] == min)\n                {\n                \
    \    result[index++] = lst[j];\n                    break;\n                }\n\
    \                else\n                    result[index++] = lst[j];\n       \
    \     }\n            break;\n        }\n        else\n            result[index++]\
    \ = lst[i];\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j)\
    \ {\n        if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n   \
    \     } else {\n            result[k++] = lst[j--];\n        }\n    }\n    if\
    \ (i == j) {\n        result[k++] = lst[i++];\n    }\n    if (i < j) {\n     \
    \   result[k++] = lst[j--];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k\
    \ != lst.length) {\n        result = strange_sort_list(result);\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n    \n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min)\n            min = lst[i];\n        if (lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int j = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ == min) {\n            result[j++] = max;\n            max = lst[i];\n     \
    \   }\n        else if (lst[i] == max) {\n            result[j++] = min;\n   \
    \         min = lst[i];\n        }\n        else {\n            result[j++] =\
    \ lst[i];\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while (i\
    \ < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[i];\n  \
    \          result[j] = lst[j];\n            i++;\n            j--;\n        }\
    \ else {\n            result[i] = lst[j];\n            result[j] = lst[i];\n \
    \           i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n     \
    \       result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else if (lst[i] < lst[j]) {\n            result[i]\
    \ = lst[j];\n            result[j] = lst[i];\n            i++;\n            j--;\n\
    \        } else {\n            i++;\n            j--;\n        }\n    }\n    if\
    \ (i == j) {\n        result[i] = lst[i];\n    }\n    return result;\n}", "{\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for(int i = 1; i < lst.length;\
    \ i++)\n    {\n        if(lst[i] < min)\n            min = lst[i];\n        if(lst[i]\
    \ > max)\n            max = lst[i];\n    }\n    long[] result = new long[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        result[i] = lst[i];\n\
    \        if(lst[i] == min)\n            min = max;\n        else if(lst[i] ==\
    \ max)\n            max = min;\n        else\n            max = min;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[lst.length];\n    int\
    \ i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i < j) {\n \
    \       if (lst[i] < lst[j]) {\n            result[k++] = lst[i++];\n        }\
    \ else {\n            result[k++] = lst[j--];\n        }\n    }\n    if (i ==\
    \ j) {\n        result[k++] = lst[i];\n    }\n    return result;\n}", "{\n   \
    \ if (lst.length == 0)\n        return lst;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min)\n            min = lst[i];\n        if (lst[i] > max)\n            max\
    \ = lst[i];\n    }\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = 0;\n    for (int k = 0; k < lst.length; k++) {\n        if (lst[k]\
    \ == min) {\n            result[i++] = lst[k];\n            if (i == lst.length)\n\
    \                break;\n            for (int l = k + 1; l < lst.length; l++)\
    \ {\n                if (lst[l] == max) {\n                    result[i++] = lst[l];\n\
    \                    if (i == lst.length)\n                        break;\n  \
    \              }\n            }\n        }\n        else if (lst[k] == max) {\n\
    \            result[j++] = lst[k];\n            if (j == lst.length)\n       \
    \         break;\n            for (int l = k + 1; l < lst.length; l++) {\n   \
    \             if (lst[l] == min) {\n                    result[j++] = lst[l];\n\
    \                    if (j == lst.length)\n                        break;\n  \
    \              }\n            }\n        }\n        else {\n            result[k]\
    \ = lst[k];\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[i];\n\
    \            result[j] = lst[j];\n            i++;\n            j--;\n       \
    \ } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n           \
    \ result[j] = lst[i];\n            i++;\n            j--;\n        } else {\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0)\n        return lst;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (int i = 1; i < lst.length; i++)\n    {\n   \
    \     if (lst[i] < min)\n            min = lst[i];\n        if (lst[i] > max)\n\
    \            max = lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n\
    \    int j = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ == min)\n        {\n            result[j++] = lst[i];\n            for (int\
    \ k = i + 1; k < lst.length; k++)\n            {\n                if (lst[k] ==\
    \ max)\n                {\n                    result[j++] = lst[k];\n       \
    \             break;\n                }\n                else\n              \
    \      result[j++] = lst[k];\n            }\n        }\n        else\n       \
    \     result[j++] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int\
    \ k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n            result[k++]\
    \ = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n       \
    \ }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n    }\n    if (k\
    \ != lst.length) {\n        result = strange_sort_list(result);\n    }\n    return\
    \ result;\n}", "{\n    if (lst.length == 0) return lst;\n    \n    long min =\
    \ lst[0];\n    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max =\
    \ lst[i];\n    }\n    \n    long[] result = new long[lst.length];\n    \n    for\
    \ (int i = 0; i < lst.length; i++) {\n        result[i] = lst[i];\n        \n\
    \        if (lst[i] == min) {\n            for (int j = i + 1; j < lst.length;\
    \ j++) {\n                if (lst[j] == max) {\n                    result[i]\
    \ = max;\n                    result[j] = min;\n                    break;\n \
    \               }\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j])\
    \ {\n            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j =\
    \ lst.length - 1;\n    int k = 0;\n    while (i <= j) {\n        if (lst[i] <=\
    \ lst[j]) {\n            result[k++] = lst[i++];\n        } else {\n         \
    \   result[k++] = lst[j--];\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i <= j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    return result;\n}", "{\n    if (lst.length == 0) return lst;\n    \n    long\
    \ min = lst[0];\n    long max = lst[0];\n    long[] result = new long[lst.length];\n\
    \    \n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n\
    \            min = lst[i];\n        } else if (lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    \n    for (int i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] == min) {\n            result[i] = max;\n        } else\
    \ if (lst[i] == max) {\n            result[i] = min;\n        } else {\n     \
    \       result[i] = lst[i];\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n}",
  "{\n    if (lst.length == 0) return lst;\n    long min = lst[0];\n    long max =\
    \ lst[0];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\
    \ min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    long[] result\
    \ = new long[lst.length];\n    int index = 0;\n    for (int i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] == min) {\n            result[index++] = lst[i];\n\
    \            for (int j = i + 1; j < lst.length; j++) {\n                if (lst[j]\
    \ == max) {\n                    result[index++] = lst[j];\n                 \
    \   break;\n                }\n            }\n        }\n        else if (lst[i]\
    \ == max) {\n            result[index++] = lst[i];\n            for (int j = i\
    \ + 1; j < lst.length; j++) {\n                if (lst[j] == min) {\n        \
    \            result[index++] = lst[j];\n                    break;\n         \
    \       }\n            }\n        }\n        else {\n            result[index++]\
    \ = lst[i];\n        }\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ < 2) return lst;\n    long[] result = new long[lst.length];\n    int i = 0;\n\
    \    int j = lst.length - 1;\n    while (i < j) {\n        if (lst[i] > lst[j])\
    \ {\n            result[i] = lst[j];\n            result[j] = lst[i];\n      \
    \      i++;\n            j--;\n        } else if (lst[i] < lst[j]) {\n       \
    \     result[i] = lst[i];\n            result[j] = lst[j];\n            i++;\n\
    \            j--;\n        } else {\n            i++;\n            j--;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[lst.length];\n\
    \    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    int max = 0;\n\
    \    int min = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n     \
    \       result[k++] = lst[i++];\n        } else {\n            result[k++] = lst[j--];\n\
    \        }\n    }\n    while (i < lst.length) {\n        result[k++] = lst[i++];\n\
    \    }\n    return result;\n}", "{\n    if (lst.length == 0)\n        return lst;\n\
    \    \n    long min = lst[0];\n    long max = lst[0];\n    \n    for (int i =\
    \ 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n            min =\
    \ lst[i];\n        else if (lst[i] > max)\n            max = lst[i];\n    }\n\
    \    \n    long[] result = new long[lst.length];\n    \n    for (int i = 0; i\
    \ < lst.length; i++)\n    {\n        if (lst[i] == min)\n            result[i]\
    \ = max;\n        else if (lst[i] == max)\n            result[i] = min;\n    \
    \    else\n            result[i] = lst[i];\n    }\n    \n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i]\
    \ = lst[i];\n            result[j] = lst[j];\n            i++;\n            j--;\n\
    \        } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n    \
    \        result[j] = lst[i];\n            i++;\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    if (i == j) {\n\
    \        result[i] = lst[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    while\
    \ (i < j) {\n        if (lst[i] > lst[j]) {\n            result[i] = lst[i];\n\
    \            result[j] = lst[j];\n            i++;\n            j--;\n       \
    \ } else if (lst[i] < lst[j]) {\n            result[i] = lst[j];\n           \
    \ result[j] = lst[i];\n            i++;\n            j--;\n        } else {\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] > lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] < lst[j]) {\n\
    \            result[k] = lst[i];\n            i++;\n        } else {\n       \
    \     result[k] = lst[j];\n            j--;\n        }\n        k++;\n    }\n\
    \    if (i == j) {\n        result[k] = lst[i];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length\
    \ - 1;\n    int k = 0;\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n\
    \            result[k++] = lst[i++];\n        } else {\n            result[k++]\
    \ = lst[j--];\n        }\n    }\n    if (i == j) {\n        result[k++] = lst[i++];\n\
    \    }\n    if (i < j) {\n        result[k++] = lst[j--];\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
