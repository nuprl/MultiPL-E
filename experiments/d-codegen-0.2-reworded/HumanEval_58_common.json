{
  "name": "HumanEval_58_common",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2) \n",
  "tests": "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}",
  "completions": [
    "{\n    int i, j, k, len1, len2;\n    long[] common = new long[0];\n    len1 = l1.length;\n    len2 = l2.length;\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] l3 = new long[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] r = new int[n + m];\n    int[] s = new int[n + m];\n    int[] t = new int[n + m];\n    int[] u = new int[n + m];\n    int[] v = new int[n + m];\n    int[] w = new int[n + m];\n    int[] x = new int[n + m];\n    int[] y = new int[n + m];\n    int[] z = new int[n + m];\n    int[] a = new int[n + m];\n    int[] b = new int[n + m];\n    int[] c = new int[n + m];\n    int[] d = new int[n + m];\n    int[] e = new int[n + m];\n    int[] f = new int[n + m];\n    int[] g = new int[n + m];\n    int[] h = new int[n + m];\n    int[] i = new int[n + m];\n    int[] j = new int[n + m];\n    int[] k = new int[n + m];\n    int[] l = new int[n + m];\n    int[] m = new int[n + m];\n    int[] n = new int[n + m];\n    int[] o = new int[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] r = new int[n + m];\n    int[] s = new int[n + m];\n    int[] t = new int[n + m];\n    int[] u = new int[n + m];\n    int[] v = new int[n + m];\n    int[] w = new int[n + m];\n    int[] x = new int[n + m];\n    int[] y = new int[n + m];",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    \n    long[] l1_sorted = l1.clone();\n    long[] l2_sorted = l2.clone();\n    \n    Arrays.sort(l1_sorted);\n    Arrays.sort(l2_sorted);\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\n    {\n        if (l1_sorted[i] == l2_sorted[j])\n        {\n            ret = Arrays.append(ret, l1_sorted[i]);\n            i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[]) java.util.Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                result = (long[]) std.concat(result, new long[]{l1_copy[i]});\n                l1_copy = (long[]) std.remove(l1_copy, i);\n                l2_copy = (long[]) std.remove(l2_copy, j);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] l3 = new long[n + m];\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                l3[count++] = l1[i];\n                break;\n            }\n        }\n    }\n    if (count == 0)\n        return new long[0];\n    long[] l4 = new long[count];\n    for (k = 0; k < count; k++)\n        l4[k] = l3[k];\n    return l4;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] result = new long[n + m];\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                result[count++] = l1[i];\n                break;\n            }\n        }\n    }\n    if (count == 0) {\n        return result;\n    }\n    for (k = 0; k < count; k++) {\n        result[k] = result[k];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = (long[]) std.concat(ret, new long[] {l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        if(!std.in(l1[i], temp))\n        {\n            temp = std.append(temp, l1[i]);\n        }\n    }\n    for(int i = 0; i < l2.length; i++)\n    {\n        if(!std.in(l2[i], temp))\n        {\n            temp = std.append(temp, l2[i]);\n        }\n    }\n    for(int i = 0; i < temp.length; i++)\n    {\n        if(std.in(temp[i], result))\n        {\n            result = std.remove(result, temp[i]);\n        }\n        else\n        {\n            result = std.append(result, temp[i]);\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[])res.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] common = new long[0];\n    int len1 = l1.length;\n    int len2 = l2.length;\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        l1_copy[i] = l1_copy[i] - 1;\n    }\n    \n    for(int i = 0; i < l2_copy.length; i++)\n    {\n        l2_copy[i] = l2_copy[i] - 1;\n    }\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                ret = (long[])std.concat(ret, new long[]{l1_copy[i]});\n                l1_copy[i] = l1_copy[i] - 1;\n                l2_copy[j] = l2_copy[j] - 1;\n            }\n        }\n    }\n    \n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    \n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        l1_[i] = l1_[i] - 1;\n    }\n    for(int i = 0; i < l2_.length; i++)\n    {\n        l2_[i] = l2_[i] - 1;\n    }\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        for(int j = 0; j < l2_.length; j++)\n        {\n            if(l1_[i] == l2_[j])\n            {\n                ret = (long[]) std.concat(ret, new long[]{l1_[i]});\n                l1_[i] = -1;\n                l2_[j] = -1;\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                result[i] = l1[i];\n                break;\n            }\n        }\n    }\n    for (i = 0; i < len; i++) {\n        if (result[i] == 0) {\n            break;\n        }\n    }\n    if (i == len) {\n        return result;\n    }\n    for (k = i; k < len; k++) {\n        result[k] = 0;\n    }\n    for (i = 0; i < len; i++) {\n        if (result[i] == 0) {\n            break;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = l1.length;\n    int m = l2.length;\n    while (i < n && j < m) {\n        if (l1[i] == l2[j]) {\n            l3 = (long[]) (java.lang.reflect.Array.set(l3, k, l1[i]));\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = (long[]) Array.add(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, n;\n    long[] l3 = new long[0];\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < l3.length; j++) {\n            if (l1[i] == l3[j] && l2[i] == l3[j])\n                break;\n        }\n        if (j == l3.length) {\n            l3 = (long[]) std.vector.resize(l3, l3.length + 1);\n            l3[l3.length - 1] = l1[i];\n        }\n    }\n    return l3;\n}",
    "{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    Arrays.sort(l1_);\n    Arrays.sort(l2_);\n    int i = 0, j = 0;\n    while (i < l1_.length && j < l2_.length) {\n        if (l1_[i] == l2_[j]) {\n            ret = Arrays.copyOf(ret, ret.length + 1);\n            ret[ret.length - 1] = l1_[i];\n            i++;\n            j++;\n        } else if (l1_[i] < l2_[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k, n;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) add(l3, new long[] {l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) std.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    //sort the arrays\n    sort(l1_copy);\n    sort(l2_copy);\n    \n    //find the common elements\n    int i = 0;\n    int j = 0;\n    while(i < l1_copy.length && j < l2_copy.length)\n    {\n        if(l1_copy[i] == l2_copy[j])\n        {\n            result = append(result, l1_copy[i]);\n            i++;\n            j++;\n        }\n        else if(l1_copy[i] < l2_copy[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}",
    "{\n    long[] common = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    int i, j;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    long[] result = new long[0];\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    int n = l1.length;\n    int m = l2.length;\n    int[] c = new int[n + m];\n    int[] l = new int[n + m];\n    int[] r = new int[n + m];\n    int[] p = new int[n + m];\n    int[] q = new int[n + m];\n    int[] temp = new int[n + m];\n    int[] temp2 = new int[n + m];\n    int[] temp3 = new int[n + m];\n    int[] temp4 = new int[n + m];\n    int[] temp5 = new int[n + m];\n    int[] temp6 = new int[n + m];\n    int[] temp7 = new int[n + m];\n    int[] temp8 = new int[n + m];\n    int[] temp9 = new int[n + m];\n    int[] temp10 = new int[n + m];\n    int[] temp11 = new int[n + m];\n    int[] temp12 = new int[n + m];\n    int[] temp13 = new int[n + m];\n    int[] temp14 = new int[n + m];\n    int[] temp15 = new int[n + m];\n    int[] temp16 = new int[n + m];\n    int[] temp17 = new int[n + m];\n    int[] temp18 = new int[n + m];\n    int[] temp19 = new int[n + m];\n    int[] temp20 = new int[n + m];\n    int[] temp21 = new int[n + m];\n    int[] temp22 = new int[n + m];\n    int[] temp23 = new int[n + m];\n    int[] temp24 = new int[n + m];\n    int[] temp25 = new int[n + m];\n    int[] temp26 = new int[n + m];\n    int[] temp27 = new int[n + m];\n    int[] temp28 = new int[n + m];\n    int[] temp29 = new int[n + m];\n    int[] temp30 = new int[n + m];",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l3 = (long[])l3.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                temp = new long[result.length + 1];\n                for(int k = 0; k < result.length; k++)\n                {\n                    temp[k] = result[k];\n                }\n                temp[result.length] = l1[i];\n                result = temp;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] l = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l = (long[]) std.vector.append(l, l1[i]);\n                break;\n            }\n        }\n    }\n    return l;\n}",
    "{\n    long[] common = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int n1 = l1.length;\n    int n2 = l2.length;\n    int m = n1 < n2 ? n1 : n2;\n    int[] index = new int[m];\n    int[] count = new int[m];\n    long[] result = new long[m];\n    for (i = 0; i < m; i++) {\n        index[i] = i;\n        count[i] = 1;\n    }\n    for (i = 0; i < n1; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                index[j] = i;\n                count[j]++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        if (count[i] == 1) {\n            result[i] = l1[index[i]];\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l3 = append(l3, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1.length; i++)\n    {\n        int index = binarySearch(l2_copy, l1[i]);\n        if(index >= 0)\n        {\n            result = concat(result, l1[i]);\n            l2_copy = remove(l2_copy, index);\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0, j = 0, k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l3 = (long[]) l3.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] common = new long[0];\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) std.concat(result, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            ret = Arrays.copyOf(ret, ret.length + 1);\n            ret[ret.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                ret = (long[])append(ret, l1[i]);\n                break;\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                ret = (long[]) std.vector.append(ret, l1_copy[i]);\n                l1_copy[i] = l2_copy[j] = 0;\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 < len2 ? len1 : len2;\n    long[] common = new long[len];\n    for (i = 0; i < len; i++) {\n        common[i] = l1[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (common[i] == l2[j]) {\n                common[j] = l2[j];\n                for (k = j + 1; k < len; k++) {\n                    if (common[j] == l2[k]) {\n                        common[k] = l2[k];\n                    }\n                }\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    long[] result = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.vector.append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] l3 = new long[0];\n    for (i = 0; i < l1.length; i++) {\n        for (j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] res = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l2[j] < l1[i]) {\n            j++;\n        } else {\n            res = Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) std.vector.append(l3, l1[i]);\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n                result[result.length - 1] = l1[i];\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l3 = append(l3, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    long[] l3 = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n    int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 = 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n    int w1 = 0;\n    int x1 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n    int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i2 = 0;\n    int j2 = 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n    int o2 = 0;\n    int p2 = 0;\n    int q2 = 0;\n    int r2 = 0;\n    int s2 = 0;\n    int t2 = 0;\n    int u2 = 0;\n    int v2",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            ret = (long[]) std.vector.append(ret, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) Array.add(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[] {l1[i]});\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    int i = 0, j = 0;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    if (len1 < len2) {\n        temp = l1;\n        l1 = l2;\n        l2 = temp;\n        len1 = len2;\n        len2 = l1.length;\n    }\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (l1[i] == l2[j]) {\n                temp = new long[result.length + 1];\n                System.arraycopy(result, 0, temp, 0, result.length);\n                temp[result.length] = l1[i];\n                result = temp;\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            res = (long[]) java.util.Arrays.copyOf(res, res.length + 1);\n            res[res.length - 1] = l1[i];\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return res;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    long[] common = new long[0];\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (l1[i] == l2[j]) {\n                common = append(common, l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    int l1_len = l1.length, l2_len = l2.length;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l = append(l, l1[i]);\n                break;\n            }\n        }\n    }\n    return l;\n}",
    "{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n    int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 = 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n    int w1 = 0;\n    int x1 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n    int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i2 = 0;\n    int j2 = 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n    int o2 = 0;\n    int p2 = 0;\n    int q2 = 0;\n    int r2 = 0;\n    int s2 = 0;\n    int t2 = 0;\n    int",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    int count = 0;\n    for (i = 0; i < len; i++) {\n        if (l1[i] == l2[i]) {\n            result[count++] = l1[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0) return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = append(res, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1.length; i++) {\n        l1_copy[i] = l1[i];\n    }\n    for (int i = 0; i < l2.length; i++) {\n        l2_copy[i] = l2[i];\n    }\n    \n    Arrays.sort(l1_copy);\n    Arrays.sort(l2_copy);\n    \n    int l1_index = 0;\n    int l2_index = 0;\n    \n    while (l1_index < l1_copy.length && l2_index < l2_copy.length) {\n        if (l1_copy[l1_index] == l2_copy[l2_index]) {\n            result = (long[]) ArrayUtils.add(result, l1_copy[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1_copy[l1_index] < l2_copy[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    \n    return result;\n}",
    "{\n    int i, j, k;\n    int n = l1.length;\n    int m = l2.length;\n    int[] index = new int[n + 1];\n    int[] count = new int[n + 1];\n    int[] result = new int[m];\n    int[] temp = new int[n + 1];\n    \n    for (i = 0; i <= n; i++) {\n        index[i] = 0;\n        count[i] = 0;\n    }\n    for (i = 0; i < m; i++) {\n        for (j = 0; j <= n; j++) {\n            if (l1[j] == l2[i]) {\n                index[j] = i;\n                count[j]++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i <= n; i++) {\n        if (count[i] > 0) {\n            temp[i] = index[i];\n        }\n    }\n    for (i = 0; i < m; i++) {\n        result[i] = l2[temp[i]];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) \n    {\n        for (int j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                result = append(result, l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = new long[l1.length];\n    long[] l2_copy = new long[l2.length];\n    \n    for (int i = 0; i < l1.length; i++)\n    {\n        l1_copy[i] = l1[i];\n    }\n    for (int i = 0; i < l2.length; i++)\n    {\n        l2_copy[i] = l2[i];\n    }\n    \n    Arrays.sort(l1_copy);\n    Arrays.sort(l2_copy);\n    \n    int i = 0;\n    int j = 0;\n    while (i < l1_copy.length && j < l2_copy.length)\n    {\n        if (l1_copy[i] == l2_copy[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1_copy[i];\n            i++;\n            j++;\n        }\n        else if (l1_copy[i] < l2_copy[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    \n    return result;\n}",
    "{\n    long[] res = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return res;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            res = (long[])res.concat(new long[]{l1[i]});\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) (std.concat(result, new long[]{l1[i]}));\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    if (l1.length < l2.length)\n    {\n        long[] temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    for (int i = 0; i < l1.length; i++)\n    {\n        if (l1[i] == l2[i])\n        {\n            result = append(result, l1[i]);\n        }\n    }\n    return result;\n}",
    "{\n    long[] l3 = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                l3 = (long[])l3.concat(new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1_copy.length; i++) {\n        for (int j = 0; j < l2_copy.length; j++) {\n            if (l1_copy[i] == l2_copy[j]) {\n                result = (long[]) std.concat(result, new long[]{l1_copy[i]});\n                l1_copy[i] = 0;\n                l2_copy[j] = 0;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    long[] l1_ = l1.clone();\n    long[] l2_ = l2.clone();\n    \n    for(int i = 0; i < l1_.length; i++)\n    {\n        for(int j = 0; j < l2_.length; j++)\n        {\n            if(l1_[i] == l2_[j])\n            {\n                l1_[i] = 0;\n                l2_[j] = 0;\n                ret = (long[])std.concat(ret, new long[]{l1_[i]});\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = l1.length;\n    int len2 = l2.length;\n    long[] result = new long[0];\n    while (i < len && j < len2) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            k++;\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                res = (long[])res.concat(new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[] { l1[i] });\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    if (l1.length < l2.length)\n    {\n        long[] temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            ret = append(ret, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                ret = (long[])std.concat(ret, new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                ret = (long[]) std.concat(ret, new long[]{l1[i]});\n            }\n        }\n    }\n    return ret;\n}",
    "{\n    int i, j, k, n;\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    n = l1.length < l2.length ? l1.length : l2.length;\n    for (i = 0; i < n; i++) {\n        if (l1[i] == l2[i]) {\n            result = (long[]) std.vector.append(result, l1[i]);\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k++] = l1[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]) i++;\n        else j++;\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return ret;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j])\n            i++;\n        else if (l1[i] > l2[j])\n            j++;\n        else {\n            ret = (long[]) std.vector.append(ret, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_unique = new long[l1.length];\n    long[] l2_unique = new long[l2.length];\n    int l1_unique_count = 0;\n    int l2_unique_count = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n        if(l1_unique_count == 0)\n        {\n            l1_unique[l1_unique_count] = l1[i];\n            l1_unique_count++;\n        }\n        else\n        {\n            if(l1[i] == l1_unique[l1_unique_count - 1])\n            {\n                l1_unique[l1_unique_count - 1] = l1[i];\n            }\n            else\n            {\n                l1_unique[l1_unique_count] = l1[i];\n                l1_unique_count++;\n            }\n        }\n    }\n    for(int i = 0; i < l2.length; i++)\n    {\n        if(l2_unique_count == 0)\n        {\n            l2_unique[l2_unique_count] = l2[i];\n            l2_unique_count++;\n        }\n        else\n        {\n            if(l2[i] == l2_unique[l2_unique_count - 1])\n            {\n                l2_unique[l2_unique_count - 1] = l2[i];\n            }\n            else\n            {\n                l2_unique[l2_unique_count] = l2[i];\n                l2_unique_count++;\n            }\n        }\n    }\n    for(int i = 0; i < l1_unique_count; i++)\n    {\n        for(int j = 0; j < l2_unique_count; j++)\n        {\n            if(l1_unique[i] == l2_unique[j])\n            {\n                result = (long[])std.concat(result, new long[]{l1_unique[i]});\n            }\n        ",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) std.vector.append(result, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j]) i++;\n        else if (l1[i] > l2[j]) j++;\n        else\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 < len2 ? len1 : len2;\n    long[] res = new long[len];\n    for (i = 0; i < len; i++) {\n        res[i] = l1[i] < l2[i] ? l1[i] : l2[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 0; j < len; j++) {\n            if (res[i] == l2[j]) {\n                res[i] = l1[j];\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            result = (long[]) std.vector.concat(result, new long[]{l1[i]});\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int len1 = l1.length;\n    int len2 = l2.length;\n    int len = len1 > len2 ? len1 : len2;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = l1[i] < l2[i] ? l1[i] : l2[i];\n    }\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (result[i] == result[j]) {\n                for (k = 0; k < len; k++) {\n                    if (l1[k] == result[i] || l2[k] == result[i]) {\n                        result[j] = -1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for(int i = 0; i < l1_copy.length; i++)\n    {\n        for(int j = 0; j < l2_copy.length; j++)\n        {\n            if(l1_copy[i] == l2_copy[j])\n            {\n                res = (long[])res.clone();\n                res[res.length - 1] = l1_copy[i];\n                break;\n            }\n        }\n    }\n    \n    return res;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.clone();\n    long[] l2_sorted = l2.clone();\n    sort(l1_sorted);\n    sort(l2_sorted);\n    int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length) {\n        if (l1_sorted[i] == l2_sorted[j]) {\n            result = append(result, l1_sorted[i]);\n            i++;\n            j++;\n        } else if (l1_sorted[i] < l2_sorted[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] == l2[j]) {\n            l = append(l, l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n            i++;\n        else\n            j++;\n    }\n    return result;\n}",
    "{\n    int i, j, k, n;\n    long[] l3;\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    l3 = new long[n];\n    i = j = 0;\n    while (i < n && j < n) {\n        if (l1[i] == l2[j]) {\n            l3[k++] = l1[i];\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l3;\n}",
    "{\n    long[] ret = new long[0];\n    if (l1.length == 0 || l2.length == 0) return ret;\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            ret = (long[]) Array.add(ret, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]) i++;\n        else j++;\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[]) java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k, n;\n    long[] res;\n    n = l1.length;\n    if (n > l2.length)\n        n = l2.length;\n    res = new long[n];\n    for (i = 0; i < n; i++) {\n        res[i] = l1[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (l1[i] == l2[j]) {\n                res[i] = l1[i];\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] l3 = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l3 = (long[]) add(l3, new long[]{l1[i]});\n            }\n        }\n    }\n    return l3;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0) return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.lang.reflect.Array.set(result, k, l1[i]);\n            i++;\n            j++;\n            k++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) \n    {\n        for (int j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                result = (long[]) std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            ret = (long[]) std.concat(ret, new long[] {l1[i]});\n            i++;\n            j++;\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0;\n    int j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            result = append(result, l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    long[] l1_copy = l1.clone();\n    long[] l2_copy = l2.clone();\n    \n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                l1_copy[i] = l2[j];\n                l2_copy[j] = l1[i];\n            }\n        }\n    }\n    \n    for (int i = 0; i < l1_copy.length; i++) {\n        if (l1_copy[i] != l2_copy[i]) {\n            result = concat(result, new long[] {l1_copy[i]});\n        }\n    }\n    \n    return result;\n}",
    "{\n    int i, j, k;\n    long[] common = new long[0];\n    for (i = 0; i < l1.length; i++) \n    {\n        for (j = 0; j < l2.length; j++) \n        {\n            if (l1[i] == l2[j]) \n            {\n                for (k = 0; k < common.length; k++) \n                {\n                    if (l1[i] == common[k]) \n                    {\n                        break;\n                    }\n                }\n                if (k == common.length) \n                {\n                    common = (long[]) common.clone();\n                    common[common.length] = l1[i];\n                }\n            }\n        }\n    }\n    return common;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    \n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] l = new long[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            l[k] = l1[i];\n            k++;\n            i++;\n            j++;\n        }\n    }\n    return l;\n}",
    "{\n    long[] result = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                result = (long[]) std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    if (l1.length == 0 || l2.length == 0)\n        return result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else if (l1[i] > l2[j])\n        {\n            j++;\n        }\n        else\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[k] = l1[i];\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[0];\n    int i = 0, j = 0;\n    while (i < l1.length && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n            result = (long[])java.util.Arrays.copyOf(result, result.length + 1);\n            result[result.length - 1] = l1[i];\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[0];\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                res = (long[]) std.concat(res, new long[]{l1[i]});\n                break;\n            }\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[0];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n            {\n                result = (long[])std.concat(result, new long[]{l1[i]});\n            }\n        }\n    }\n    return result;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}